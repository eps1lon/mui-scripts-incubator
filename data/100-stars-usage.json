[
{"name":"src/built-in-plugins/command-dev/plugin/dashboard/client/pages/main/routes.tsx","repository":{"orgName":"prijs","repoName":"pri","stars":115,"forks":10,"ref":"2c9aac76443c085ea5ae1e23a206dde6e2653df5"},"source":"import { Table, TableHead, TableRow, TableBody, TableCell } from '@material-ui/core';\nimport * as React from 'react';\nimport { ApplicationContext } from '../../stores';\n\nconst handleJumpPage = (pathStr: string) => {\n  window.parent.postMessage(\n    {\n      type: 'changeRoute',\n      path: pathStr\n    },\n    '*'\n  );\n};\n\nexport const Routes = React.memo(() => {\n  const [state] = React.useContext(ApplicationContext);\n\n  if (state.status === null) {\n    return null;\n  }\n\n  const pages = state.status.analyseInfo.projectAnalysePages ? state.status.analyseInfo.projectAnalysePages.pages : [];\n  const allPages = [...pages];\n\n  const dataSource = allPages.concat().sort((left, right) => {\n    return left.routerPath.length - right.routerPath.length;\n  });\n\n  return (\n    <div>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Path</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {dataSource.map((eachDataSource, index) => (\n            <TableRow key={index}>\n              <TableCell align=\"left\">\n                <span\n                  style={{ color: '#1890ff', cursor: 'pointer' }}\n                  onClick={handleJumpPage.bind(null, eachDataSource.routerPath)}\n                >\n                  {eachDataSource.routerPath}\n                </span>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </div>\n  );\n});\n"}
,{"name":"src/built-in-plugins/command-dev/plugin/dashboard/client/pages/menu/new-page/form.tsx","repository":{"orgName":"prijs","repoName":"pri","stars":115,"forks":10,"ref":"2c9aac76443c085ea5ae1e23a206dde6e2653df5"},"source":"import { Button, TextField } from '@material-ui/core';\nimport * as React from 'react';\nimport { SocketContext } from '../../../utils/context';\n\nexport default React.memo((props: { onSuccess: () => void }) => {\n  const [pathName, setPathName] = React.useState('');\n  const socket = React.useContext(SocketContext);\n\n  const handleChangePathName = React.useCallback((event: any) => {\n    setPathName(event.target.value);\n  }, []);\n\n  const handleSubmit = React.useCallback(() => {\n    socket.emit('addPage', pathName);\n\n    props.onSuccess();\n  }, [pathName, props, socket]);\n\n  return (\n    <div>\n      <TextField value={pathName} onChange={handleChangePathName} />\n\n      <Button color=\"primary\" onClick={handleSubmit}>\n        Ok\n      </Button>\n    </div>\n  );\n});\n"}
,{"name":"src/built-in-plugins/command-dev/plugin/dashboard/client/pages/menu/new-page/new-page.tsx","repository":{"orgName":"prijs","repoName":"pri","stars":115,"forks":10,"ref":"2c9aac76443c085ea5ae1e23a206dde6e2653df5"},"source":"import * as React from 'react';\nimport { Dialog, DialogTitle, DialogContent } from '@material-ui/core';\nimport FormComponent from './form';\n\nconst buttonStyle = {\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  fontSize: 14,\n  color: '#666',\n  borderRight: '1px solid #eee',\n  padding: '0 10px',\n  cursor: 'pointer',\n  transition: 'background-color 0.2s'\n};\n\nexport const NewPageComponent = React.memo(() => {\n  const [visible, setVisible] = React.useState(false);\n\n  const showModal = React.useCallback(() => {\n    setVisible(() => {\n      return true;\n    });\n  }, []);\n\n  const handleCancel = React.useCallback(() => {\n    setVisible(() => {\n      return false;\n    });\n  }, []);\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <div onClick={showModal} style={buttonStyle}>\n        New Page\n      </div>\n\n      <Dialog open={visible} onClose={handleCancel}>\n        <DialogTitle>New Page</DialogTitle>\n        <DialogContent>\n          <FormComponent onSuccess={handleCancel} />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n});\n"}
,{"name":"src/built-in-plugins/command-dev/plugin/dashboard/client/pages/struct/struct.component.tsx","repository":{"orgName":"prijs","repoName":"pri","stars":115,"forks":10,"ref":"2c9aac76443c085ea5ae1e23a206dde6e2653df5"},"source":"import { ListItem, List, ListItemText, ListItemSecondaryAction, Button } from '@material-ui/core';\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport { ApplicationContext } from '../../stores';\nimport { SocketContext } from '../../utils/context';\n\nexport const StructComponent = React.memo(() => {\n  const socket = React.useContext(SocketContext);\n  const [state, dispatch] = React.useContext(ApplicationContext);\n\n  if (!state.status) {\n    return null;\n  }\n\n  const createLayout = () => {\n    socket.emit('createLayout');\n  };\n\n  const create404 = () => {\n    socket.emit('create404');\n  };\n\n  const createConfig = () => {\n    socket.emit('createConfig');\n  };\n\n  const pages = _.get(state.status, 'analyseInfo.projectAnalysePages.pages', []);\n  const hasLayout = _.get(state.status, 'analyseInfo.projectAnalyseLayout.hasLayout', false);\n  const hasNotFound = _.get(state.status, 'analyseInfo.projectAnalyseNotFound.hasNotFound', false);\n  const hasConfig = _.get(state.status, 'analyseInfo.projectAnalyseConfig.hasConfig', false);\n\n  if (state.status === null || state.status === undefined) {\n    return null;\n  }\n\n  return (\n    <List component=\"nav\">\n      <ListItem\n        button\n        onClick={() => {\n          dispatch({\n            type: 'setSelectedTreeKey',\n            selectedTreeKey: 'routes'\n          });\n        }}\n      >\n        <ListItemText primary={`Pages(${pages.length})`} />\n      </ListItem>\n      <ListItem\n        button\n        onClick={() => {\n          dispatch({\n            type: 'setSelectedTreeKey',\n            selectedTreeKey: 'layout'\n          });\n        }}\n      >\n        <ListItemText primary={`Layout`} />\n        {!hasLayout && (\n          <ListItemSecondaryAction>\n            <Button onClick={createLayout}>Add</Button>\n          </ListItemSecondaryAction>\n        )}\n      </ListItem>\n      <ListItem\n        button\n        onClick={() => {\n          dispatch({\n            type: 'setSelectedTreeKey',\n            selectedTreeKey: '404'\n          });\n        }}\n      >\n        <ListItemText primary={`404`} />\n        {!hasNotFound && (\n          <ListItemSecondaryAction>\n            <Button onClick={create404}>Add</Button>\n          </ListItemSecondaryAction>\n        )}\n      </ListItem>\n      <ListItem\n        button\n        onClick={() => {\n          dispatch({\n            type: 'setSelectedTreeKey',\n            selectedTreeKey: 'config'\n          });\n        }}\n      >\n        <ListItemText primary={`Config`} />\n        {!hasConfig && (\n          <ListItemSecondaryAction>\n            <Button onClick={createConfig}>Add</Button>\n          </ListItemSecondaryAction>\n        )}\n      </ListItem>\n    </List>\n  );\n});\n"}
,{"name":"src/components/AbrilText/index.js","repository":{"orgName":"GoogleChromeLabs","repoName":"react-shrine","stars":300,"forks":37,"ref":"e4f7ba5987ca28dfeadc72da6888455e28ff4d31"},"source":"/**\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nimport './Font.css';\n\nconst AbrilText = (props) => {\n  const { text, className, ...rest } = props;\n  return (\n    <Typography className={`abril-font ${className}`} {...rest}>\n      {text}\n    </Typography>\n  )\n}\n\nexport default AbrilText;\n"}
,{"name":"src/components/CategoryCard/index.js","repository":{"orgName":"GoogleChromeLabs","repoName":"react-shrine","stars":300,"forks":37,"ref":"e4f7ba5987ca28dfeadc72da6888455e28ff4d31"},"source":"/**\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\n\nimport AbrilText from '../AbrilText';\nimport './Card.css';\n\nconst CategoryCard = (props) => (\n    <Grid item xs={12} sm={6} md={4} className=\"category-card-wrapper\">\n      <Link to={`/category/${props.category.toLowerCase()}/${props.data.id}`}>\n        <Paper className=\"card\" elevation={0}>\n          <div className=\"price\">{props.data.price}</div>\n          <div className=\"card-content\">\n            <div className=\"item-image\">\n              <img src={props.data.imageUrl} alt=\"item\" />\n            </div>\n            <AbrilText text={props.data.title} className=\"heading\" />\n            <div className=\"author\">\n              <img src={props.data.storeAvatarUrl} alt=\"author\" />\n              {props.data.storeName}\n            </div>\n          </div>\n        </Paper>\n      </Link>\n    </Grid>\n);\n\nexport default CategoryCard;\n"}
,{"name":"src/components/FeaturedItem/index.js","repository":{"orgName":"GoogleChromeLabs","repoName":"react-shrine","stars":300,"forks":37,"ref":"e4f7ba5987ca28dfeadc72da6888455e28ff4d31"},"source":"/**\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\n\nimport AbrilText from '../AbrilText';\nimport './FeaturedItem.css';\n\nconst FeaturedItem = (props) => (\n  <div className=\"featured-item\">\n    <div className=\"price\">{props.data.price}</div>\n    <Grid container justify=\"flex-start\">\n      <Grid item xs={5} className=\"feature-image-wrapper\">\n        <img src={props.data.imageUrl} alt=\"featured item\" />\n      </Grid>\n      <div className=\"featured-item-content\">\n        <AbrilText text={props.data.title} className=\"feature-heading\" />\n        <div className=\"feature-description-wrapper\">\n          <div className=\"description\">\n            <p>{props.data.quote}</p>\n          </div>\n          <div className=\"author\">\n            <img src={props.data.storeAvatarUrl} alt={props.data.storeName}/>\n            {props.data.storeName}\n          </div>\n        </div>\n      </div>\n    </Grid>\n  </div>\n);\n\nexport default FeaturedItem\n"}
,{"name":"src/components/ItemViewCard/index.js","repository":{"orgName":"GoogleChromeLabs","repoName":"react-shrine","stars":300,"forks":37,"ref":"e4f7ba5987ca28dfeadc72da6888455e28ff4d31"},"source":"/**\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { Link } from 'react-router-dom';\n\nimport './Card.css';\n\nconst ItemViewCard = ({ category, data }) => (\n  <Grid item xs={6} sm={3} lg={6} className=\"item-view-card-wrapper\">\n    <Link to={`/category/${category.toLowerCase()}/${data.id}`}>\n      <Paper elevation={0} className=\"text-center card\">\n        <img src={data.imageUrl} alt={data.title} />\n      </Paper>\n    </Link>\n  </Grid>\n);\n\nexport default ItemViewCard;\n"}
,{"name":"src/containers/CategoryView/index.js","repository":{"orgName":"GoogleChromeLabs","repoName":"react-shrine","stars":300,"forks":37,"ref":"e4f7ba5987ca28dfeadc72da6888455e28ff4d31"},"source":"/**\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\n\nimport FeaturedItem from '../../components/FeaturedItem';\nimport CategoryCard from '../../components/CategoryCard';\nimport './CategoryView.css';\n\nclass CategoryView extends Component {\n  render() {\n    const { selectedItem } = this.props;\n    return (\n      <div>\n        <Grid container spacing={0} direction=\"column\">\n          <FeaturedItem data={selectedItem.featuredItem} />\n        </Grid>\n        <Grid container spacing={0} className=\"category-cards\" justify=\"center\">\n          {\n            selectedItem.items.map((item, index) => (\n              <CategoryCard data={item} category={selectedItem.category} key={index}/>\n            ))\n          }\n        </Grid>\n      </div>\n    )\n  }\n}\n\nexport default CategoryView;\n"}
,{"name":"src/containers/ItemView/index.js","repository":{"orgName":"GoogleChromeLabs","repoName":"react-shrine","stars":300,"forks":37,"ref":"e4f7ba5987ca28dfeadc72da6888455e28ff4d31"},"source":"/**\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { Component, lazy, Fragment, Suspense } from 'react';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Grid from '@material-ui/core/Grid';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Fab from '@material-ui/core/Fab';\nimport ArrowBack from '@material-ui/icons/ArrowBack';\nimport ShoppingCart from '@material-ui/icons/ShoppingCart';\nimport MoreVertical from '@material-ui/icons/MoreVert';\nimport ErrorOutline from '@material-ui/icons/ErrorOutline';\n\nimport ItemViewCard from '../../components/ItemViewCard';\nimport AbrilText from '../../components/AbrilText';\nimport { getCategoryGroupByName, getDetailedProduct } from '../../utils/utilities';\nimport Logo from '../../logo.svg';\nimport LogoWithIcon from '../../logo-with-icon.svg';\nimport './ItemView.css';\n\nconst LazyAdaptiveItemView = lazy(() => {\n  return new Promise(resolve => {\n    navigator.connection ? resolve(navigator.connection.effectiveType) : resolve(null);\n  }).then(\n    effectiveType => {\n      console.log('[LazyAdaptiveItemView] effectiveType => ', effectiveType);\n      switch(effectiveType) {\n        case '4g':\n        case '3g':\n          return import(/* webpackChunkName: \"item-view-zoom\" */ '../../components/ItemViewZoom');\n        case '2g':\n          return import(/* webpackChunkName: \"item-view-static\" */ '../../components/ItemViewStatic');\n        default:\n          return import(/* webpackChunkName: \"item-view-static\" */ '../../components/ItemViewStatic')\n      }\n    }\n  );\n});\n\nconst styles = {\n  toolbar: {\n    backgroundColor: '#FFFFFF',\n    borderBottom: '1px solid #EEEEEE'\n  },\n  logo: {\n    flex: 1,\n    textAlign: 'center'\n  }\n};\n\nclass ItemView extends Component {\n  state = {\n    selectedCategory: null,\n    selectedProduct: null,\n    quantity: 1,\n    productViewerOpened: false\n  };\n\n  componentDidMount() {\n    const { match } = this.props;\n    this.setItemDetails(match.params.category, match.params.id);\n  }\n  \n  componentDidUpdate(prevProps) {\n    const { match } = this.props;\n    if (match !== prevProps.match) {\n      this.setItemDetails(match.params.category, match.params.id);\n    }\n  }\n\n  setItemDetails = (category, id) => {\n    const selectedCategory = getCategoryGroupByName(category);\n    this.setState({\n        selectedCategory,\n        selectedProduct: getDetailedProduct(category, id)\n    });\n  };\n\n  quantityChangeHandler = event => {\n    this.setState({quantity: event.target.value});\n  };\n\n  openCloseProductViewer = opened => {\n    this.setState({productViewerOpened: opened});\n  };\n\n  render() {\n    const { classes, history } = this.props;\n    const { selectedProduct, selectedCategory, quantity, productViewerOpened } = this.state;\n\n    if (!selectedProduct || !selectedCategory) {\n      return <div>Loading...</div>;\n    }\n\n    const productSummary = (\n      <Fragment>\n        <div onClick={() => this.openCloseProductViewer(true)} className=\"image-container\">\n          <img src={selectedProduct.imageUrl} alt={selectedProduct.title} />\n          <IconButton className=\"info-outline\" color=\"inherit\" aria-label=\"Menu\">\n            <ErrorOutline />\n          </IconButton>\n        </div>\n        <div className=\"item-details-wrapper\">\n          <AbrilText text={selectedProduct.title} className=\"heading\" />\n          <div className=\"description\">{selectedProduct.description}</div>\n          <div className=\"add-cart\">\n            <Select\n              value={quantity}\n              onChange={this.quantityChangeHandler}\n              className=\"selectbox\"\n              margin=\"none\"\n              disableUnderline>\n              <MenuItem value={1}>Quantity 1</MenuItem>\n              <MenuItem value={2}>Quantity 2</MenuItem>\n              <MenuItem value={3}>Quantity 3</MenuItem>\n              <MenuItem value={4}>Quantity 4</MenuItem>\n              <MenuItem value={5}>Quantity 5</MenuItem>\n            </Select>\n            <Fab size=\"small\" color=\"primary\" aria-label=\"shopping-cart\" className=\"button\">\n              <ShoppingCart />\n            </Fab>\n          </div>\n          <div className=\"store-description\">\n            <div className=\"store-heading\">{selectedProduct.storeName}</div>\n            <div className=\"description\">{selectedProduct.storeDescription}</div>\n          </div>\n        </div>\n      </Fragment>\n    );\n    const productViewer = (\n      <Suspense fallback={<div>Loading...</div>}>\n        <LazyAdaptiveItemView product={selectedProduct} closeView={() => this.openCloseProductViewer(false)} />\n      </Suspense>\n    );\n    const productDisplay = !productViewerOpened ? productSummary : productViewer;\n\n    return (\n      <div className=\"item-view-wrapper\">\n        <Toolbar className={classes.toolbar}>\n          <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\" onClick={() => history.goBack()}>\n            <ArrowBack />\n          </IconButton>\n          <div className={`${classes.logo} logo`}>\n            <img src={LogoWithIcon} alt=\"logo\" className=\"large\" />\n            <img src={Logo} alt=\"logo\" className=\"small\" />\n          </div>\n          <div>\n            <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\n              <ShoppingCart />\n            </IconButton>\n            <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\n              <MoreVertical />\n            </IconButton>\n          </div>\n        </Toolbar>\n        <div className=\"item-view-content\">\n          <Grid container spacing={0} className=\"grid\">\n            <Grid item md={12} lg={4} className=\"content item-list\">\n              <Grid container spacing={0}>\n                { selectedCategory.items.map(item => (\n                  <ItemViewCard category={selectedCategory.category} data={item} key={item.id} />\n                )) }\n              </Grid>\n            </Grid>\n            <Grid item md={12} lg={8} className=\"content item-display\">\n              {productDisplay}\n            </Grid>\n          </Grid>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withStyles(styles)(ItemView);\n"}
,{"name":"src/containers/Landing/index.js","repository":{"orgName":"GoogleChromeLabs","repoName":"react-shrine","stars":300,"forks":37,"ref":"e4f7ba5987ca28dfeadc72da6888455e28ff4d31"},"source":"/**\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, withRouter } from 'react-router-dom';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Drawer from '@material-ui/core/Drawer';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItem from '@material-ui/core/ListItem';\nimport List from '@material-ui/core/List';\nimport ShoppingCart from '@material-ui/icons/ShoppingCart';\nimport MoreVertical from '@material-ui/icons/MoreVert';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nimport CategoryView from '../../containers/CategoryView';\nimport { products } from '../../utils/links';\nimport { getCategoryGroupByName, getCategoryGroupById } from '../../utils/utilities';\nimport Logo from '../../logo.svg';\nimport LogoWithIcon from '../../logo-with-icon.svg';\nimport './Landing.css';\n\nconst styles = {\n  white: {\n    backgroundColor: '#FFFFFF',\n  },\n  flex: {\n    flex: 1,\n  },\n  logo: {\n    display: 'flex',\n    flex: 1,\n    justifyContent: 'center',\n  },\n  menuButton: {\n    marginLeft: '-12px',\n    marginRight: '20px',\n  },\n  listBackground: {\n    paper: {\n      backgroundColor: '#F3F3F3',\n    }\n  },\n  list: {\n    width: '250px',\n  },\n  listItemText: {\n    flex: 1,\n    textDecoration: 'none',\n  }\n};\n\nclass LandingPage extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedItem: products[0],\n      value: products[0].id,\n      drawerOpen: false\n    }\n  }\n  \n  componentWillReceiveProps(nextProps) {\n    if (this.props.location.pathname !== nextProps.location.pathname) {\n      this.setCurrentSelectedItem(nextProps.match.params.category);\n    }\n  }\n\n  componentWillMount() {\n    if (this.props.match.params.category) {\n      this.setCurrentSelectedItem(this.props.match.params.category);\n    }\n  }\n\n  setCurrentSelectedItem = (category) => {\n    const selectedCategory = getCategoryGroupByName(category);\n    this.setState(() => {\n      return {\n        selectedItem: selectedCategory || products[0],\n        value: selectedCategory ? selectedCategory.id : products[0].id,\n      }\n    })\n  };\n\n  handleChange = (event, value) => {\n    const { history } = this.props;\n    const selectedItem = getCategoryGroupById(value);\n    history.push(`/category/${selectedItem.category.toLowerCase()}`);\n    this.setState(previousState => {\n      return {\n        value: value,\n        selectedItem: selectedItem\n      }\n    })\n  };\n\n  toggleDrawer = (value) => {\n    if(window.innerWidth < 400) {\n      this.setState({ drawerOpen: value });\n    }\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { value, selectedItem } = this.state;\n    return (\n      <div className=\"landing-screen\">\n        <Toolbar className={`${classes.white} landing-toolbar`}>\n          <IconButton className={`${classes.menuButton} menu-button drawer-menu`} color=\"inherit\" aria-label=\"Menu\" onClick={() => this.toggleDrawer(true)}>\n            <MenuIcon />\n          </IconButton>\n          <div className={`${classes.logo} logo`}>\n            <img src={LogoWithIcon} alt=\"logo\" className=\"large\" />\n            <img src={Logo} alt=\"logo\" className=\"small\" />\n          </div>\n          <div>\n            <IconButton className={`${classes.menuButton} menu-button`} color=\"inherit\" aria-label=\"Menu\">\n              <ShoppingCart />\n            </IconButton>\n            <IconButton className={`${classes.menuButton} menu-button`} color=\"inherit\" aria-label=\"Menu\">\n              <MoreVertical />\n            </IconButton>\n          </div>\n        </Toolbar>\n        <Tabs\n          value={value}\n          onChange={this.handleChange}\n          className={`${classes.flex} ${classes.white} navigation-toolbar`}\n          scrollButtons=\"auto\">\n          { products.map(item => (\n            <Tab\n              key={item.id}\n              label={item.category}\n              value={item.id} />\n          )) }\n        </Tabs>\n        <Drawer open={this.state.drawerOpen} onClose={() => this.toggleDrawer(false)} className={classes.listBackground}>\n          <div\n            tabIndex={0}\n            role=\"button\"\n            className={classes.list}\n            onClick={() => this.toggleDrawer(false)}\n            onKeyDown={() => this.toggleDrawer(false)}>\n            <List>\n              { products.map((item, index) => (\n                  <ListItem\n                    button\n                    key={index}>\n                    <Link to={`/category/${item.category.toLowerCase()}`} className={classes.listItemText}>\n                      <ListItemText primary={item.category} />\n                    </Link>\n                  </ListItem>\n              )) }\n            </List>\n          </div>\n        </Drawer>\n        <CategoryView selectedItem={selectedItem} />\n      </div>\n    )\n  }\n}\n\nLandingPage.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withRouter(withStyles(styles)(LandingPage));\n"}
,{"name":"src/hoc/ItemViewWrapper/index.js","repository":{"orgName":"GoogleChromeLabs","repoName":"react-shrine","stars":300,"forks":37,"ref":"e4f7ba5987ca28dfeadc72da6888455e28ff4d31"},"source":"\nimport React from 'react';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport AbrilText from '../../components/AbrilText';\nimport './item-view-wrapper.css';\n\nconst ItemViewWrapper = ({ children, title, closed }) => {\n  return (\n    <div className=\"wrapper\">\n      <div className=\"header\">\n        <AbrilText text={title} />\n        <CloseIcon className=\"close-icon\" onClick={closed} fontSize=\"large\" />\n      </div>\n      <div>\n        {children}\n      </div>\n    </div>\n  )\n};\n\nexport default ItemViewWrapper;\n"}
,{"name":"src/index.js","repository":{"orgName":"GoogleChromeLabs","repoName":"react-shrine","stars":300,"forks":37,"ref":"e4f7ba5987ca28dfeadc72da6888455e28ff4d31"},"source":"/**\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport cyan from '@material-ui/core/colors/cyan';\nimport 'typeface-roboto';\n\nimport ScrollToTop from './components/ScrollToTop';\nimport store, { history } from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst theme = createMuiTheme({\n  palette: {\n    secondary: cyan,\n  },\n  overrides: {\n    MuiDrawer: {\n      paperAnchorLeft: {\n        backgroundColor: '#F3F3F3',\n      }\n    },\n    MuiIconButton: {\n      label: {\n        color: '#7C7C7C',\n      }\n    },\n    MuiSelect: {\n      selectMenu: {\n        backgroundColor: 'transparent',\n      }\n    },\n    MuiTouchRipple: {\n      root: {\n        color: '#31F0EF',\n      }\n    },\n    MuiButton: {\n      mini: {\n        backgroundColor: '#31F0EF !important',\n        color: '#7C7C7C'\n      }\n    }\n  }\n});\n\nReactDOM.render((\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <ScrollToTop>\n        <MuiThemeProvider theme={theme}>\n          <Router>\n            <App />\n          </Router>\n        </MuiThemeProvider>\n      </ScrollToTop>\n    </ConnectedRouter>\n  </Provider>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"}
,{"name":"retro-board-app/src/App.tsx","repository":{"orgName":"antoinejaussoin","repoName":"retro-board","stars":436,"forks":114,"ref":"cc4dcb5dbe46bf7c0b06925f19cfce3013f5fe3a"},"source":"import React, { useState } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { ThemeProvider } from '@material-ui/styles';\nimport GlobalStyles from './GlobalStyles';\nimport { LanguageContext } from './translations';\nimport theme from './Theme';\nimport { Provider as StateContext } from './state';\nimport Layout from './Layout';\n\nfunction App() {\n  const [language, setLanguage] = useState('en');\n  return (\n    <ThemeProvider theme={theme}>\n      <BrowserRouter>\n        <LanguageContext.Provider value={{ language, setLanguage }}>\n          <StateContext>\n            <GlobalStyles />\n            <Layout />\n          </StateContext>\n        </LanguageContext.Provider>\n      </BrowserRouter>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n"}
,{"name":"retro-board-app/src/Layout.tsx","repository":{"orgName":"antoinejaussoin","repoName":"retro-board","stars":436,"forks":114,"ref":"cc4dcb5dbe46bf7c0b06925f19cfce3013f5fe3a"},"source":"import React, { useEffect, useCallback, useState, useRef } from 'react';\nimport {\n  withRouter,\n  RouteComponentProps,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\nimport { trackPageView } from './track';\nimport styled from 'styled-components';\nimport {\n  Button,\n  AppBar,\n  Toolbar,\n  IconButton,\n  Typography,\n} from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { Route } from 'react-router-dom';\nimport Home from './views/Home';\nimport Game from './views/Game';\nimport Panel from './views/Panel';\nimport Login from './views/Login';\nimport Invite from './views/layout/Invite';\nimport useGlobalState from './state';\nimport useLoginFromLocalStorage from './hooks/useLoginFromLocalStorage';\n\nconst Title = styled(Typography)`\n  flex-grow: 1;\n  color: white;\n`;\n\ninterface AppProps extends RouteComponentProps {}\n\nfunction App({ history }: AppProps) {\n  useLoginFromLocalStorage();\n  const { state, togglePanel, logout } = useGlobalState();\n  const [open, setOpen] = useState(false);\n  const goToHome = useCallback(() => history.push('/'), [history]);\n  const closeMenu = useCallback(() => setOpen(false), []);\n  const openMenu = useCallback(() => setOpen(true), []);\n  const menuAnchor = useRef(null);\n  const handleLogout = useCallback(() => {\n    closeMenu();\n    logout();\n  }, [logout, closeMenu]);\n  useEffect(() => {\n    const unregister = history.listen(location => {\n      trackPageView(location.pathname);\n    });\n    return () => {\n      unregister();\n    };\n  }, [history]);\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton color=\"inherit\" aria-label=\"Menu\" onClick={togglePanel}>\n            <MenuIcon />\n          </IconButton>\n          <MainTitle variant=\"h6\" color=\"inherit\" onClick={goToHome}>\n            Retrospected\n          </MainTitle>\n          <Route exact path=\"/game/:gameId\" render={() => <Invite />} />\n          <Button color=\"inherit\" buttonRef={menuAnchor} onClick={openMenu}>\n            {state.username ? state.username.name : '--'}\n          </Button>\n          <Menu\n            anchorEl={menuAnchor.current}\n            anchorOrigin={{\n              vertical: 'top',\n              horizontal: 'right',\n            }}\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'right',\n            }}\n            open={open}\n            onClose={closeMenu}\n          >\n            <MenuItem onClick={handleLogout}>Logout</MenuItem>\n          </Menu>\n        </Toolbar>\n      </AppBar>\n      <Page>\n        <Route path=\"/\" exact component={Home} />\n        <Switch>\n          <Redirect from=\"/session/:gameId\" to=\"/game/:gameId\" />\n          <Route path=\"/game/:gameId\" component={Game} />\n        </Switch>\n        {!state.username && <Login />}\n      </Page>\n      <Panel />\n    </div>\n  );\n}\n\nconst MainTitle = styled(Title)`\n  cursor: pointer;\n`;\n\nconst Page = styled.main`\n  margin: 50px;\n  @media screen and (max-width: 600px) {\n    margin: 10px;\n  }\n`;\n\nexport default withRouter(App);\n"}
,{"name":"retro-board-app/src/Theme.ts","repository":{"orgName":"antoinejaussoin","repoName":"retro-board","stars":436,"forks":114,"ref":"cc4dcb5dbe46bf7c0b06925f19cfce3013f5fe3a"},"source":"import { createMuiTheme } from '@material-ui/core/styles';\nimport blueGrey from '@material-ui/core/colors/blueGrey';\nimport pink from '@material-ui/core/colors/pink';\nimport red from '@material-ui/core/colors/red';\nimport green from '@material-ui/core/colors/green';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: blueGrey,\n    secondary: pink,\n  },\n  overrides: {\n    MuiDrawer: {\n      paper: {\n        width: '250px',\n      },\n    },\n  },\n  typography: {},\n});\n\nexport const Palette = {\n  positive: green['800'],\n  negative: red['400'],\n};\n\nexport default theme;\n"}
,{"name":"retro-board-app/src/components/EditableLabel.tsx","repository":{"orgName":"antoinejaussoin","repoName":"retro-board","stars":436,"forks":114,"ref":"cc4dcb5dbe46bf7c0b06925f19cfce3013f5fe3a"},"source":"import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { Edit } from '@material-ui/icons';\nimport TextareaAutosize from 'react-autosize-textarea';\n\ninterface EditableLabelProps extends CenteredProp {\n  value: string;\n  readOnly?: boolean;\n  placeholder?: string;\n  label?: string;\n  onChange: (value: string) => void;\n}\n\ninterface CenteredProp {\n  centered?: boolean;\n}\n\ninterface EditableLabelState {\n  editMode: boolean;\n}\n\nexport default class EditableLabel extends Component<\n  EditableLabelProps,\n  EditableLabelState\n> {\n  inputRef: React.RefObject<HTMLTextAreaElement>;\n  constructor(props: EditableLabelProps) {\n    super(props);\n    this.state = { editMode: false };\n    this.inputRef = React.createRef<HTMLTextAreaElement>();\n  }\n\n  onKeyPress(e: KeyboardEvent) {\n    if (e.keyCode === 13) {\n      this.setState({ editMode: false });\n    }\n  }\n\n  renderReadOnlyMode() {\n    const { value, placeholder, label } = this.props;\n\n    return <ViewMode aria-label={label}>{value || placeholder}</ViewMode>;\n  }\n\n  renderViewMode() {\n    const { value, placeholder, readOnly, label } = this.props;\n\n    if (readOnly) {\n      return this.renderReadOnlyMode();\n    }\n\n    return (\n      <ViewMode\n        onClick={() =>\n          this.setState({ editMode: true }, () =>\n            this.inputRef.current!.focus()\n          )\n        }\n      >\n        <span aria-label={label}>{value || placeholder}</span>\n        &nbsp;\n        <EditIcon fontSize=\"inherit\" />\n      </ViewMode>\n    );\n  }\n\n  renderEditMode() {\n    const { value, onChange, label } = this.props;\n    return (\n      <EditMode>\n        <TextareaAutosize\n          ref={this.inputRef}\n          aria-label={`${label} input`}\n          value={value}\n          onBlur={() => {\n            this.setState({ editMode: false });\n          }}\n          onKeyPress={e => this.onKeyPress(e.nativeEvent)}\n          onChange={v => {\n            onChange(v.currentTarget.value);\n          }}\n        />\n      </EditMode>\n    );\n  }\n\n  render() {\n    return (\n      <LabelContainer>\n        {this.state.editMode ? this.renderEditMode() : this.renderViewMode()}\n      </LabelContainer>\n    );\n  }\n}\n\nconst LabelContainer = styled.span``;\n\nconst ViewMode = styled.span``;\n\nconst EditMode = styled.span<CenteredProp>`\n  margin: auto;\n\n  textarea {\n    width: 100%;\n    background: none;\n    border: none;\n    outline: none;\n    font-size: inherit;\n    text-align: ${props => (props.centered ? 'center' : 'inherit')};\n    padding: 0;\n    margin: -1px;\n    line-height: 1.5;\n  }\n`;\n\nconst EditIcon = styled(Edit)`\n  font-size: 0.01em;\n  position: relative;\n  top: 2px;\n`;\n"}
,{"name":"retro-board-app/src/components/LanguagePicker.tsx","repository":{"orgName":"antoinejaussoin","repoName":"retro-board","stars":436,"forks":114,"ref":"cc4dcb5dbe46bf7c0b06925f19cfce3013f5fe3a"},"source":"import React, { SFC, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { Select, MenuItem } from '@material-ui/core';\nimport { languages } from '../translations';\nimport 'flag-icon-css/css/flag-icon.min.css';\n\ninterface LanguagePickerProps {\n  value: string;\n  onChange: (value: string) => void;\n}\n\nconst LanguagePicker: SFC<LanguagePickerProps> = ({ value, onChange }) => {\n  const handleSelect = useCallback(\n    (event: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n      onChange(event.target.value as string);\n    },\n    [onChange]\n  );\n  return (\n    <StyledSelect value={value} onChange={handleSelect}>\n      {languages.map(language => (\n        <MenuItem value={language.value} key={language.value}>\n          <LanguageItem>\n            <Flag className={`flag-icon flag-icon-${language.iso}`}>\n              <FlagOverlay />\n            </Flag>\n            <Names>\n              <Name>{language.name}</Name>\n              <EnglishName>{language.englishName}</EnglishName>\n            </Names>\n          </LanguageItem>\n        </MenuItem>\n      ))}\n    </StyledSelect>\n  );\n};\n\nconst StyledSelect = styled(Select)`\n  width: 250px;\n`;\n\nconst LanguageItem = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst Flag = styled.div`\n  font-size: 32px;\n  margin-left: 10px;\n  height: 32px;\n  margin-right: 8px;\n  position: relative;\n`;\n\nconst FlagOverlay = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  height: 32px;\n  background: linear-gradient(\n    to bottom,\n    rgba(255, 255, 255, 0.5) 0%,\n    rgba(255, 255, 255, 0) 100%\n  );\n`;\nconst Names = styled.div`\n  margin-left: 5px;\n  display: flex;\n  flex-direction: column;\n  font-size: 0.8em;\n`;\nconst Name = styled.div``;\nconst EnglishName = styled.div`\n  color: grey;\n`;\n\nexport default LanguagePicker;\n"}
,{"name":"retro-board-app/src/views/Game.tsx","repository":{"orgName":"antoinejaussoin","repoName":"retro-board","stars":436,"forks":114,"ref":"cc4dcb5dbe46bf7c0b06925f19cfce3013f5fe3a"},"source":"import React, { useMemo } from 'react';\nimport {\n  SentimentSatisfied,\n  SentimentVeryDissatisfied,\n  WbSunny,\n} from '@material-ui/icons';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { PostType } from 'retro-board-common';\nimport useTranslations from '../translations';\nimport useGlobalState from '../state';\nimport useGame from './game/useGame';\nimport GameMode from './game/GameMode';\nimport SummaryMode from './game/SummaryMode';\nimport { ColumnContent } from './game/types';\n\ninterface Route {\n  gameId: string;\n}\ninterface GameProps extends RouteComponentProps<Route> {}\n\nfunction GamePage({\n  match: {\n    params: { gameId },\n  },\n}: GameProps) {\n  const translations = useTranslations();\n  const { state } = useGlobalState();\n  const { summaryMode } = state;\n\n  const {\n    initialised,\n    onAddPost,\n    onDeletePost,\n    onEditPost,\n    onLike,\n    onRenameSession,\n  } = useGame(gameId);\n\n  const columns: ColumnContent[] = useMemo(\n    () => [\n      {\n        type: PostType.Well,\n        posts: state.session.posts.filter(p => p.postType === PostType.Well),\n        icon: SentimentSatisfied,\n        label: translations.PostBoard.wellQuestion,\n        color: '#E8F5E9',\n      },\n      {\n        type: PostType.NotWell,\n        posts: state.session.posts.filter(p => p.postType === PostType.NotWell),\n        icon: SentimentVeryDissatisfied,\n        label: translations.PostBoard.notWellQuestion,\n        color: '#FFEBEE',\n      },\n      {\n        type: PostType.Ideas,\n        posts: state.session.posts.filter(p => p.postType === PostType.Ideas),\n        icon: WbSunny,\n        label: translations.PostBoard.ideasQuestion,\n        color: '#FFFDE7',\n      },\n    ],\n    [state.session.posts, translations.PostBoard]\n  );\n\n  return (\n    <div>\n      {initialised && !summaryMode && (\n        <GameMode\n          columns={columns}\n          onEdit={onEditPost}\n          onAddPost={onAddPost}\n          onDeletePost={onDeletePost}\n          onLike={onLike}\n          onRenameSession={onRenameSession}\n        />\n      )}\n      {initialised && summaryMode && <SummaryMode columns={columns} />}\n    </div>\n  );\n}\n\nexport default withRouter(GamePage);\n"}
,{"name":"retro-board-app/src/views/Home.tsx","repository":{"orgName":"antoinejaussoin","repoName":"retro-board","stars":436,"forks":114,"ref":"cc4dcb5dbe46bf7c0b06925f19cfce3013f5fe3a"},"source":"import React, { useCallback } from 'react';\nimport styled from 'styled-components';\nimport shortid from 'shortid';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport {\n  Button,\n  Card,\n  CardMedia,\n  Typography,\n  CardContent,\n  CardActions,\n  makeStyles,\n} from '@material-ui/core';\nimport useTranslations from '../translations';\nimport PreviousGames from './home/PreviousGames';\nimport logo from './home/logo.png';\n\ninterface HomeProps extends RouteComponentProps {}\n\nconst useStyles = makeStyles({\n  media: {\n    objectFit: 'cover',\n  },\n  actions: {\n    justifyContent: 'center',\n    margin: 20,\n  },\n});\n\nfunction Home(props: HomeProps) {\n  const translations = useTranslations();\n  const createSession = useCallback(() => {\n    props.history.push('/game/' + shortid());\n  }, [props.history]);\n  const classes = useStyles();\n  return (\n    <>\n      <MainCard>\n        <CardMedia\n          className={classes.media}\n          image={logo}\n          component=\"img\"\n          title=\"Retrospected\"\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {translations.Join.welcome}\n          </Typography>\n          <Typography component=\"p\">\n            {translations.Join.standardTab.text}\n          </Typography>\n        </CardContent>\n        <CardActions className={classes.actions}>\n          <Button\n            onClick={createSession}\n            variant=\"contained\"\n            size=\"large\"\n            color=\"secondary\"\n          >\n            {translations.Join.standardTab.button}\n          </Button>\n        </CardActions>\n      </MainCard>\n      <MainCard>\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {translations.Join.previousTab.header}\n          </Typography>\n          <PreviousGames />\n        </CardContent>\n      </MainCard>\n    </>\n  );\n}\n\nconst MainCard = styled(Card)`\n  max-width: 800px;\n  margin: auto;\n  margin-bottom: 20px;\n`;\nexport default withRouter(Home);\n"}
,{"name":"retro-board-app/src/views/Login.tsx","repository":{"orgName":"antoinejaussoin","repoName":"retro-board","stars":436,"forks":114,"ref":"cc4dcb5dbe46bf7c0b06925f19cfce3013f5fe3a"},"source":"import React, { useCallback, useState } from 'react';\nimport md5 from 'md5';\nimport {\n  Dialog,\n  DialogActions,\n  DialogTitle,\n  Button,\n  DialogContent,\n  Input,\n} from '@material-ui/core';\nimport useTranslations from '../translations';\nimport useGlobalState from '../state';\n\nconst Login = () => {\n  const translations = useTranslations();\n  const { login } = useGlobalState();\n  const [username, setUsername] = useState('');\n  const loginHandler = useCallback(() => {\n    const id = md5(username);\n    login(username, id);\n  }, [login, username]);\n  const handleUsernameChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => setUsername(e.target.value),\n    [setUsername]\n  );\n  const handleClose = useCallback(() => {}, []);\n  return (\n    <Dialog\n      fullScreen={false}\n      open={true}\n      onClose={handleClose}\n      aria-labelledby=\"responsive-dialog-title\"\n    >\n      <DialogTitle id=\"responsive-dialog-title\">Login</DialogTitle>\n      <DialogContent>\n        <Input\n          value={username}\n          onChange={handleUsernameChange}\n          title={translations.Login.buttonLabel}\n          placeholder={translations.Login.namePlaceholder}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={loginHandler} color=\"primary\" autoFocus>\n          {translations.Login.buttonLabel}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default Login;\n"}
,{"name":"retro-board-app/src/views/Panel.tsx","repository":{"orgName":"antoinejaussoin","repoName":"retro-board","stars":436,"forks":114,"ref":"cc4dcb5dbe46bf7c0b06925f19cfce3013f5fe3a"},"source":"import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { Route } from 'react-router-dom';\nimport { Drawer } from '@material-ui/core';\nimport { LanguageContext } from '../translations';\nimport useGlobalState from '../state';\nimport LanguagePicker from '../components/LanguagePicker';\nimport PlayerList from './panel/PlayerList';\nimport SummaryModeSwitch from './panel/SummaryModeSwitch';\nimport ForkMe from './panel/github.png';\n\nfunction Panel() {\n  const languageContext = useContext(LanguageContext);\n  const { state, togglePanel } = useGlobalState();\n\n  return (\n    <Drawer open={state.panelOpen} onClose={togglePanel}>\n      <LanguagePicker\n        value={languageContext.language}\n        onChange={languageContext.setLanguage}\n      />\n      <Content>\n        <Route path=\"/game/:gameId\" component={SummaryModeSwitch} />\n      </Content>\n      <Content>\n        <Route path=\"/game/:gameId\" component={PlayerList} />\n      </Content>\n\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://github.com/antoinejaussoin/retro-board\"\n      >\n        <ForkMeImage src={ForkMe} />\n      </a>\n    </Drawer>\n  );\n}\n\nconst Content = styled.div`\n  padding: 10px;\n\n  @media screen and (max-width: 600px) {\n    padding: 5px;\n  }\n`;\n\nconst ForkMeImage = styled.img`\n  object-fit: contain;\n  width: 50px;\n  margin: 10px;\n  position: fixed;\n  bottom: 0;\n  left: 0;\n`;\n\nexport default Panel;\n"}
,{"name":"retro-board-app/src/views/game/Column.tsx","repository":{"orgName":"antoinejaussoin","repoName":"retro-board","stars":436,"forks":114,"ref":"cc4dcb5dbe46bf7c0b06925f19cfce3013f5fe3a"},"source":"import React, { SFC, useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { Input, InputAdornment, makeStyles } from '@material-ui/core';\nimport PostItem from './Post';\nimport { Post } from 'retro-board-common';\n\ninterface ColumnProps {\n  posts: Post[];\n  icon: React.ComponentType<React.SVGProps<SVGSVGElement>>;\n  question: string;\n  color: string;\n  onAdd: (content: string) => void;\n  onLike: (post: Post) => void;\n  onDislike: (post: Post) => void;\n  onEdit: (post: Post) => void;\n  onDelete: (post: Post) => void;\n}\n\nconst useStyles = makeStyles({\n  icon: {\n    color: 'grey',\n  },\n});\n\nconst Column: SFC<ColumnProps> = ({\n  posts,\n  icon: Icon,\n  question,\n  color,\n  onAdd,\n  onLike,\n  onDislike,\n  onEdit,\n  onDelete,\n}) => {\n  const [content, setContent] = useState('');\n  const onContentChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => setContent(e.target.value),\n    [setContent]\n  );\n  const classes = useStyles();\n  const onKeyDown = useCallback(\n    (e: React.KeyboardEvent) => {\n      if (e.keyCode === 13 && content) {\n        onAdd(content);\n        setContent('');\n      }\n    },\n    [onAdd, setContent, content]\n  );\n  return (\n    <ColumnWrapper>\n      <Add>\n        <Input\n          placeholder={question}\n          onChange={onContentChange}\n          value={content}\n          onKeyDown={onKeyDown}\n          startAdornment={\n            <InputAdornment position=\"start\">\n              <Icon className={classes.icon} />\n            </InputAdornment>\n          }\n        />\n      </Add>\n      <div>\n        {posts.map(post => (\n          <PostItem\n            key={post.id}\n            post={post}\n            color={color}\n            onLike={() => onLike(post)}\n            onDislike={() => onDislike(post)}\n            onDelete={() => onDelete(post)}\n            onEdit={content =>\n              onEdit({\n                ...post,\n                content,\n              })\n            }\n          />\n        ))}\n      </div>\n    </ColumnWrapper>\n  );\n};\n\nconst ColumnWrapper = styled.div`\n  flex: 1;\n  margin-bottom: 10px;\n  padding: 0 5px;\n`;\n\nconst Add = styled.div`\n  margin-bottom: 20px;\n\n  > div {\n    width: 100%;\n  }\n  input {\n    width: 100%;\n  }\n`;\n\nexport default Column;\n"}
,{"name":"retro-board-app/src/views/game/GameMode.tsx","repository":{"orgName":"antoinejaussoin","repoName":"retro-board","stars":436,"forks":114,"ref":"cc4dcb5dbe46bf7c0b06925f19cfce3013f5fe3a"},"source":"import React from 'react';\nimport styled from 'styled-components';\nimport { PostType, Post } from 'retro-board-common';\nimport { Typography, makeStyles, Box } from '@material-ui/core';\nimport useTranslations from '../../translations';\nimport useGlobalState from '../../state';\nimport Column from './Column';\nimport EditableLabel from '../../components/EditableLabel';\nimport { ColumnContent } from './types';\n\ninterface GameModeProps {\n  columns: ColumnContent[];\n  onRenameSession: (name: string) => void;\n  onAddPost: (type: PostType, content: string) => void;\n  onDeletePost: (post: Post) => void;\n  onLike: (post: Post, like: boolean) => void;\n  onEdit: (post: Post) => void;\n}\n\nconst useStyles = makeStyles({\n  sessionName: {\n    fontWeight: 300,\n  },\n  container: {\n    marginTop: 20,\n  },\n});\n\nfunction GameMode({\n  onRenameSession,\n  onAddPost,\n  onDeletePost,\n  onLike,\n  onEdit,\n  columns,\n}: GameModeProps) {\n  const translations = useTranslations();\n  const { state } = useGlobalState();\n  const classes = useStyles();\n\n  return (\n    <Box className={classes.container}>\n      <Typography\n        variant=\"h5\"\n        align=\"center\"\n        gutterBottom\n        paragraph\n        className={classes.sessionName}\n      >\n        <EditableLabel\n          placeholder={translations.SessionName.defaultSessionName}\n          value={state.session.name}\n          centered\n          onChange={onRenameSession}\n        />\n      </Typography>\n      <Columns>\n        {columns.map(column => (\n          <Column\n            key={column.type}\n            posts={column.posts}\n            question={column.label}\n            icon={column.icon}\n            color={column.color}\n            onAdd={content => onAddPost(column.type, content)}\n            onDelete={onDeletePost}\n            onLike={post => onLike(post, true)}\n            onDislike={post => onLike(post, false)}\n            onEdit={onEdit}\n          />\n        ))}\n      </Columns>\n    </Box>\n  );\n}\n\nconst Columns = styled.div`\n  display: flex;\n  margin-top: 30px;\n\n  @media screen and (max-width: 900px) {\n    margin-top: 10px;\n    flex-direction: column;\n\n    > * {\n      margin-bottom: 20px;\n    }\n  }\n`;\n\nexport default GameMode;\n"}
,{"name":"retro-board-app/src/views/game/Post.tsx","repository":{"orgName":"antoinejaussoin","repoName":"retro-board","stars":436,"forks":114,"ref":"cc4dcb5dbe46bf7c0b06925f19cfce3013f5fe3a"},"source":"import React, { SFC } from 'react';\nimport { some } from 'lodash';\nimport styled from 'styled-components';\nimport { Button, Typography } from '@material-ui/core';\nimport {\n  ThumbUpOutlined,\n  ThumbDownOutlined,\n  DeleteForeverOutlined,\n} from '@material-ui/icons';\nimport useGlobalState from '../../state';\nimport EditableLabel from '../../components/EditableLabel';\nimport { Palette } from '../../Theme';\nimport { Post } from 'retro-board-common';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\n\ninterface PostItemProps {\n  post: Post;\n  color: string;\n  onLike: () => void;\n  onDislike: () => void;\n  onEdit: (content: string) => void;\n  onDelete: () => void;\n}\n\nconst PostItem: SFC<PostItemProps> = ({\n  post,\n  color,\n  onLike,\n  onDislike,\n  onEdit,\n  onDelete,\n}) => {\n  const { state } = useGlobalState();\n  const user = state.username;\n  const isAuthor = user ? user.id === post.user.id : false;\n  const hasVotedOrAuthor =\n    some(post.likes, u => u.id === (user ? user.id : -1)) ||\n    some(post.dislikes, u => u.id === (user ? user.id : -1)) ||\n    isAuthor;\n  return (\n    <PostCard>\n      <CardContent>\n        <Typography variant=\"body1\">\n          <EditableLabel\n            readOnly={!isAuthor}\n            value={post.content}\n            onChange={onEdit}\n            label=\"Post content\"\n          />\n        </Typography>\n      </CardContent>\n      <CardActions style={{ backgroundColor: color }}>\n        <Button onClick={onLike} disabled={hasVotedOrAuthor} aria-label=\"Like\">\n          <ThumbUpOutlined style={{ color: Palette.positive }} />\n          &nbsp;{post.likes.length}\n        </Button>\n        <Button\n          onClick={onDislike}\n          disabled={hasVotedOrAuthor}\n          aria-label=\"Dislike\"\n        >\n          <ThumbDownOutlined style={{ color: Palette.negative }} />\n          &nbsp;{post.dislikes.length}\n        </Button>\n        {isAuthor && (\n          <Button onClick={onDelete} aria-label=\"Delete\">\n            <DeleteForeverOutlined style={{ color: Palette.negative }} />\n          </Button>\n        )}\n      </CardActions>\n    </PostCard>\n  );\n};\n\nconst PostCard = styled(Card)`\n  margin: 10px 5px;\n  margin-bottom: 20px;\n`;\n\nexport default PostItem;\n"}
,{"name":"retro-board-app/src/views/game/SummaryMode.tsx","repository":{"orgName":"antoinejaussoin","repoName":"retro-board","stars":436,"forks":114,"ref":"cc4dcb5dbe46bf7c0b06925f19cfce3013f5fe3a"},"source":"import React from 'react';\nimport styled from 'styled-components';\nimport {\n  Typography,\n  Card,\n  CardHeader,\n  CardContent,\n  Grid,\n} from '@material-ui/core';\nimport { ColumnContent } from './types';\nimport { Palette } from '../../Theme';\nimport { Post } from 'retro-board-common';\n\ninterface SummaryModeProps {\n  columns: ColumnContent[];\n}\n\ninterface SectionProps {\n  column: ColumnContent;\n}\n\nconst Section = ({ column }: SectionProps) => (\n  <Grid container spacing={4}>\n    <Grid item xs={12}>\n      <Card>\n        <CardHeader\n          title={column.label}\n          style={{ backgroundColor: column.color }}\n        />\n        <CardContent>\n          {column.posts.map(post => (\n            <PostLine post={post} key={post.id} />\n          ))}\n        </CardContent>\n      </Card>\n    </Grid>\n  </Grid>\n);\n\ninterface PostLineProps {\n  post: Post;\n}\n\nconst PostLine = ({ post }: PostLineProps) => (\n  <PostContainer>\n    <Typography>\n      <PositiveNumber>+{post.likes.length}</PositiveNumber>\n      <NegativeNumber>-{post.dislikes.length}</NegativeNumber>\n      &nbsp;{post.content}\n    </Typography>\n  </PostContainer>\n);\n\nconst PositiveNumber = styled.span`\n  color: ${Palette.positive};\n`;\n\nconst NegativeNumber = styled.span`\n  color: ${Palette.negative};\n`;\n\nconst SummaryMode: React.SFC<SummaryModeProps> = ({ columns }) => {\n  return (\n    <div>\n      <div>\n        {columns.map(column => (\n          <Section key={column.type} column={column} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst PostContainer = styled.div``;\n\nexport default SummaryMode;\n"}
,{"name":"retro-board-app/src/views/home/PreviousGames.tsx","repository":{"orgName":"antoinejaussoin","repoName":"retro-board","stars":436,"forks":114,"ref":"cc4dcb5dbe46bf7c0b06925f19cfce3013f5fe3a"},"source":"import React, { SFC, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { withRouter, RouteComponentProps } from 'react-router';\nimport md5 from 'md5';\nimport usePreviousSessions from '../../hooks/usePreviousSessions';\nimport List from '@material-ui/core/List';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nconst getGravatar = (id: string) =>\n  `https://www.gravatar.com/avatar/${md5(id)}?d=retro`;\n\ninterface PreviousGamesProps extends RouteComponentProps {}\n\nconst PreviousGames: SFC<PreviousGamesProps> = ({ history }) => {\n  const { previousSessions } = usePreviousSessions();\n  const redirectToGame = useCallback(\n    (id: string) => {\n      history.push(`/game/${id}`);\n    },\n    [history]\n  );\n  return (\n    <List component=\"section\">\n      {previousSessions.map(session => (\n        <ClickableListItem\n          button\n          key={session.id}\n          onClick={() => redirectToGame(session.id)}\n        >\n          <ListItemAvatar>\n            <Avatar\n              alt={session.name || 'My Retrospective'}\n              src={getGravatar(session.id)}\n            />\n          </ListItemAvatar>\n          <ListItemText primary={session.name || 'My Retrospective'} />\n        </ClickableListItem>\n      ))}\n    </List>\n  );\n};\n\nconst ClickableListItem = styled(ListItem)`\n  cursor: pointer;\n`;\n\nexport default withRouter(PreviousGames);\n"}
,{"name":"retro-board-app/src/views/layout/Invite.tsx","repository":{"orgName":"antoinejaussoin","repoName":"retro-board","stars":436,"forks":114,"ref":"cc4dcb5dbe46bf7c0b06925f19cfce3013f5fe3a"},"source":"import React, { useState, useCallback } from 'react';\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Clipboard from 'react-copy-to-clipboard';\nimport useTranslations from '../../translations';\n\nexport default () => {\n  const [isOpen, open] = useState(false);\n  const toggle = useCallback(() => open(!isOpen), [open, isOpen]);\n  const translations = useTranslations();\n  const url = window.location.href;\n  return (\n    <>\n      <Button>\n        <GroupAddIcon onClick={toggle} style={{ color: 'white' }} />\n      </Button>\n      <Dialog open={isOpen} onClose={toggle}>\n        <DialogTitle>{translations.Invite.dialog.title}</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            {translations.Invite.dialog.text}:\n          </DialogContentText>\n          <DialogContentText\n            color=\"secondary\"\n            style={{ marginTop: 10, marginBottom: 10 }}\n          >\n            {url}\n          </DialogContentText>\n          <DialogContentText>\n            <Clipboard text={url}>\n              <Button variant=\"text\" color=\"primary\">\n                <FileCopyIcon />\n                &nbsp;&nbsp;\n                {translations.Invite.dialog.copyButton}\n              </Button>\n            </Clipboard>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={toggle}>{translations.Generic.ok}</Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n"}
,{"name":"retro-board-app/src/views/panel/PlayerList.tsx","repository":{"orgName":"antoinejaussoin","repoName":"retro-board","stars":436,"forks":114,"ref":"cc4dcb5dbe46bf7c0b06925f19cfce3013f5fe3a"},"source":"import React from 'react';\nimport md5 from 'md5';\nimport List from '@material-ui/core/List';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\n\nimport useTranslations from '../../translations';\nimport useGlobalState from '../../state';\n\nconst getGravatar = (client: string) =>\n  `https://www.gravatar.com/avatar/${md5(client)}?d=retro`;\n\nfunction PlayerList() {\n  const translations = useTranslations();\n  const { state } = useGlobalState();\n\n  return (\n    <>\n      <List\n        component=\"section\"\n        subheader={<ListSubheader>{translations.Clients.header}</ListSubheader>}\n      >\n        {state.players.map((player, index) => (\n          <ListItem key={index}>\n            <ListItemAvatar>\n              <Avatar alt={player.name} src={getGravatar(player.id)} />\n            </ListItemAvatar>\n            <ListItemText primary={player.name} />\n          </ListItem>\n        ))}\n      </List>\n    </>\n  );\n}\n\nexport default PlayerList;\n"}
,{"name":"retro-board-app/src/views/panel/SummaryModeSwitch.tsx","repository":{"orgName":"antoinejaussoin","repoName":"retro-board","stars":436,"forks":114,"ref":"cc4dcb5dbe46bf7c0b06925f19cfce3013f5fe3a"},"source":"import React from 'react';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Box from '@material-ui/core/Box';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport useTranslations from '../../translations';\nimport useGlobalState from '../../state';\n\nconst useStyles = makeStyles({\n  container: {\n    display: 'flex',\n    justifyContent: 'center',\n    margin: '10px 0 0 0',\n  },\n});\n\nconst SummaryModeSwitch = () => {\n  const translations = useTranslations();\n  const {\n    state: { summaryMode },\n    toggleSummaryMode,\n  } = useGlobalState();\n  const classes = useStyles();\n  return (\n    <Box className={classes.container}>\n      <FormGroup>\n        <FormControlLabel\n          label={translations.Header.summaryMode}\n          control={\n            <Switch\n              color=\"primary\"\n              checked={summaryMode}\n              onChange={toggleSummaryMode}\n            />\n          }\n        />\n      </FormGroup>\n    </Box>\n  );\n};\n\nexport default SummaryModeSwitch;\n"}