[
{"name":"src/built-in-plugins/command-dev/plugin/dashboard/client/pages/main/routes.tsx","repository":{"orgName":"prijs","repoName":"pri","stars":115,"forks":10,"ref":"2c9aac76443c085ea5ae1e23a206dde6e2653df5"},"source":"import { Table, TableHead, TableRow, TableBody, TableCell } from '@material-ui/core';\nimport * as React from 'react';\nimport { ApplicationContext } from '../../stores';\n\nconst handleJumpPage = (pathStr: string) => {\n  window.parent.postMessage(\n    {\n      type: 'changeRoute',\n      path: pathStr\n    },\n    '*'\n  );\n};\n\nexport const Routes = React.memo(() => {\n  const [state] = React.useContext(ApplicationContext);\n\n  if (state.status === null) {\n    return null;\n  }\n\n  const pages = state.status.analyseInfo.projectAnalysePages ? state.status.analyseInfo.projectAnalysePages.pages : [];\n  const allPages = [...pages];\n\n  const dataSource = allPages.concat().sort((left, right) => {\n    return left.routerPath.length - right.routerPath.length;\n  });\n\n  return (\n    <div>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Path</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {dataSource.map((eachDataSource, index) => (\n            <TableRow key={index}>\n              <TableCell align=\"left\">\n                <span\n                  style={{ color: '#1890ff', cursor: 'pointer' }}\n                  onClick={handleJumpPage.bind(null, eachDataSource.routerPath)}\n                >\n                  {eachDataSource.routerPath}\n                </span>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </div>\n  );\n});\n"}
,{"name":"src/built-in-plugins/command-dev/plugin/dashboard/client/pages/menu/new-page/form.tsx","repository":{"orgName":"prijs","repoName":"pri","stars":115,"forks":10,"ref":"2c9aac76443c085ea5ae1e23a206dde6e2653df5"},"source":"import { Button, TextField } from '@material-ui/core';\nimport * as React from 'react';\nimport { SocketContext } from '../../../utils/context';\n\nexport default React.memo((props: { onSuccess: () => void }) => {\n  const [pathName, setPathName] = React.useState('');\n  const socket = React.useContext(SocketContext);\n\n  const handleChangePathName = React.useCallback((event: any) => {\n    setPathName(event.target.value);\n  }, []);\n\n  const handleSubmit = React.useCallback(() => {\n    socket.emit('addPage', pathName);\n\n    props.onSuccess();\n  }, [pathName, props, socket]);\n\n  return (\n    <div>\n      <TextField value={pathName} onChange={handleChangePathName} />\n\n      <Button color=\"primary\" onClick={handleSubmit}>\n        Ok\n      </Button>\n    </div>\n  );\n});\n"}
,{"name":"src/built-in-plugins/command-dev/plugin/dashboard/client/pages/menu/new-page/new-page.tsx","repository":{"orgName":"prijs","repoName":"pri","stars":115,"forks":10,"ref":"2c9aac76443c085ea5ae1e23a206dde6e2653df5"},"source":"import * as React from 'react';\nimport { Dialog, DialogTitle, DialogContent } from '@material-ui/core';\nimport FormComponent from './form';\n\nconst buttonStyle = {\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  fontSize: 14,\n  color: '#666',\n  borderRight: '1px solid #eee',\n  padding: '0 10px',\n  cursor: 'pointer',\n  transition: 'background-color 0.2s'\n};\n\nexport const NewPageComponent = React.memo(() => {\n  const [visible, setVisible] = React.useState(false);\n\n  const showModal = React.useCallback(() => {\n    setVisible(() => {\n      return true;\n    });\n  }, []);\n\n  const handleCancel = React.useCallback(() => {\n    setVisible(() => {\n      return false;\n    });\n  }, []);\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <div onClick={showModal} style={buttonStyle}>\n        New Page\n      </div>\n\n      <Dialog open={visible} onClose={handleCancel}>\n        <DialogTitle>New Page</DialogTitle>\n        <DialogContent>\n          <FormComponent onSuccess={handleCancel} />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n});\n"}
,{"name":"src/built-in-plugins/command-dev/plugin/dashboard/client/pages/struct/struct.component.tsx","repository":{"orgName":"prijs","repoName":"pri","stars":115,"forks":10,"ref":"2c9aac76443c085ea5ae1e23a206dde6e2653df5"},"source":"import { ListItem, List, ListItemText, ListItemSecondaryAction, Button } from '@material-ui/core';\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport { ApplicationContext } from '../../stores';\nimport { SocketContext } from '../../utils/context';\n\nexport const StructComponent = React.memo(() => {\n  const socket = React.useContext(SocketContext);\n  const [state, dispatch] = React.useContext(ApplicationContext);\n\n  if (!state.status) {\n    return null;\n  }\n\n  const createLayout = () => {\n    socket.emit('createLayout');\n  };\n\n  const create404 = () => {\n    socket.emit('create404');\n  };\n\n  const createConfig = () => {\n    socket.emit('createConfig');\n  };\n\n  const pages = _.get(state.status, 'analyseInfo.projectAnalysePages.pages', []);\n  const hasLayout = _.get(state.status, 'analyseInfo.projectAnalyseLayout.hasLayout', false);\n  const hasNotFound = _.get(state.status, 'analyseInfo.projectAnalyseNotFound.hasNotFound', false);\n  const hasConfig = _.get(state.status, 'analyseInfo.projectAnalyseConfig.hasConfig', false);\n\n  if (state.status === null || state.status === undefined) {\n    return null;\n  }\n\n  return (\n    <List component=\"nav\">\n      <ListItem\n        button\n        onClick={() => {\n          dispatch({\n            type: 'setSelectedTreeKey',\n            selectedTreeKey: 'routes'\n          });\n        }}\n      >\n        <ListItemText primary={`Pages(${pages.length})`} />\n      </ListItem>\n      <ListItem\n        button\n        onClick={() => {\n          dispatch({\n            type: 'setSelectedTreeKey',\n            selectedTreeKey: 'layout'\n          });\n        }}\n      >\n        <ListItemText primary={`Layout`} />\n        {!hasLayout && (\n          <ListItemSecondaryAction>\n            <Button onClick={createLayout}>Add</Button>\n          </ListItemSecondaryAction>\n        )}\n      </ListItem>\n      <ListItem\n        button\n        onClick={() => {\n          dispatch({\n            type: 'setSelectedTreeKey',\n            selectedTreeKey: '404'\n          });\n        }}\n      >\n        <ListItemText primary={`404`} />\n        {!hasNotFound && (\n          <ListItemSecondaryAction>\n            <Button onClick={create404}>Add</Button>\n          </ListItemSecondaryAction>\n        )}\n      </ListItem>\n      <ListItem\n        button\n        onClick={() => {\n          dispatch({\n            type: 'setSelectedTreeKey',\n            selectedTreeKey: 'config'\n          });\n        }}\n      >\n        <ListItemText primary={`Config`} />\n        {!hasConfig && (\n          <ListItemSecondaryAction>\n            <Button onClick={createConfig}>Add</Button>\n          </ListItemSecondaryAction>\n        )}\n      </ListItem>\n    </List>\n  );\n});\n"}