// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`chromium / 1`] = `
<WebArea>
  Material-UI: A popular React UI framework
  <link>Skip to content</link>
  <banner>
    <button>Open main navigation</button>
    <searchbox>Search</searchbox>
    <combobox autocomplete="list" haspopup="listbox">
      Search
    </combobox>
    <text>Ctrl+K</text>
    <combobox haspopup="menu">
      Change language
      <text>ENGLISH</text>
    </combobox>
    <button>Toggle settings drawer</button>
    <combobox haspopup="menu">Toggle notifications panel</combobox>
    <link>GitHub repository</link>
  </banner>
  <navigation>Main navigation</navigation>
  <main>
    <heading level="1">
      MATERIAL-UI
      <text>MATERIAL-UI</text>
    </heading>
    <paragraph>
      <text>
        Material-UI is a simple and customizable component library to build
        faster, beautiful, and more accessible React applications. Follow your
        own design system, or start with Material Design.
      </text>
    </paragraph>
    <link>GET STARTED</link>
    <link>Star</link>
    <link>Follow</link>
    <link>Get Professional Support</link>
    <text>random sponsor</text>
    <link>a random quick word</link>
    <heading level="2">
      Installation
      <text>Installation</text>
    </heading>
    <text>
      Install Material-UI's source files via npm. We take care of injecting
      the CSS needed.
    </text>
    <Pre>
      <code>
        <text>
          $ npm install @material-ui/core@next @emotion/react @emotion/styled
        </text>
      </code>
    </Pre>
    <link>or use a CDN.</link>
    <text>Load the default Roboto font.</text>
    <Pre>
      <code>
        <text>
          <linkrel="stylesheet"href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"/>
        </text>
      </code>
    </Pre>
    <separator orientation="horizontal"></separator>
    <link>READ INSTALLATION DOCS</link>
    <heading level="2">
      Usage
      <text>Usage</text>
    </heading>
    <text>
      Material-UI components work without any additional setup, and don't
      pollute the global scope.
    </text>
    <Pre>
      <code>
        <text>
          import*asReactfrom'react';import{Button}from'@material-ui/core';functionApp(){return<Button>Hello
          World</Button>;}
        </text>
      </code>
    </Pre>
    <separator orientation="horizontal"></separator>
    <link>EXPLORE THE DOCS</link>
    <heading level="2">
      Premium themes
      <text>Premium themes</text>
    </heading>
    <paragraph>
      <text>
        Take your project to the next level with premium themes from our store ‚Äì
        all built on Material-UI.
      </text>
    </paragraph>
    <link>
      Browse themes
      <img>Browse themes</img>
    </link>
    <link>BROWSE THEMES</link>
    <separator orientation="horizontal"></separator>
    <heading level="2">
      Material-UI's sponsors
      <text>Material-UI's sponsors</text>
    </heading>
    <paragraph>
      <text>
        The continued development and maintenance of Material-UI is made
        possible by these generous sponsors:
      </text>
    </paragraph>
    <heading level="3">
      Diamond üíé
      <text>Diamond üíé</text>
    </heading>
    <link>
      octopus
      <img description="Repeatable, reliable deployments">octopus</img>
    </link>
    <link>
      doit-intl
      <img description="Management Platform for Google Cloud and AWS">
        doit-intl
      </img>
    </link>
    <paragraph>
      <text>1/3 slots available</text>
    </paragraph>
    <heading level="3">
      Gold üèÜ
      <text>Gold üèÜ</text>
    </heading>
    <link>
      tidelift
      <img description="Enterprise-ready open source software">tidelift</img>
    </link>
    <link>
      bitsrc
      <img description="The fastest way to share code">bitsrc</img>
    </link>
    <link>
      elevator
      <img description="The dopest new hip hop, upcoming artsits, music news, culture, and style">
        elevator
      </img>
    </link>
    <link>
      call-em-all
      <img description="Mass Text Messaging & Automated Calling">
        call-em-all
      </img>
    </link>
    <link>
      canadacasino
      <img>canadacasino</img>
    </link>
    <link>
      hoodiebees
      <img>hoodiebees</img>
    </link>
    <heading level="3">
      There are more!
      <text>There are more!</text>
    </heading>
    <paragraph>
      <text>See the full list of</text>
      <link>our sponsors</link>
      <text>
        , and learn how you can contribute to the future of Material-UI.
      </text>
    </paragraph>
    <separator orientation="horizontal"></separator>
    <heading level="2">
      Praise for Material-UI
      <text>Praise for Material-UI</text>
    </heading>
    <paragraph>
      <text>Here's what some of our users are saying.</text>
    </paragraph>
    <link>a random quote about Material-UI</link>
    <link>a random quote about Material-UI</link>
    <link>a random quote about Material-UI</link>
    <separator orientation="horizontal"></separator>
    <heading level="2">
      Who's using Material-UI?
      <text>Who's using Material-UI?</text>
    </heading>
    <paragraph>
      <text>Join these and other great organizations!</text>
    </paragraph>
    <img>NASA</img>
    <img>Walmart Labs</img>
    <img>Capgemini</img>
    <img>Uniqlo</img>
    <img>Bethesda</img>
    <img>J.P. Morgan</img>
    <img>Shutterstock</img>
    <img>Netflix</img>
    <img>Coursera</img>
    <img>Amazon</img>
    <img>Unity</img>
    <paragraph>
      <text>Are you using Material-UI?</text>
    </paragraph>
    <link>LET US KNOW!</link>
  </main>
  <separator orientation="horizontal"></separator>
  <contentinfo>
    <link>Material-UI</link>
    <heading level="2">
      Community
      <text>Community</text>
    </heading>
    <list>
      <listitem level="1">
        <link>GitHub</link>
      </listitem>
      <listitem level="1">
        <link>Twitter</link>
      </listitem>
      <listitem level="1">
        <link>StackOverflow</link>
      </listitem>
      <listitem level="1">
        <link>Team</link>
      </listitem>
    </list>
    <heading level="2">
      Resources
      <text>Resources</text>
    </heading>
    <list>
      <listitem level="1">
        <link>Support</link>
      </listitem>
      <listitem level="1">
        <link>Blog</link>
      </listitem>
      <listitem level="1">
        <link>Material Icons</link>
      </listitem>
    </list>
    <heading level="2">
      Company
      <text>Company</text>
    </heading>
    <list>
      <listitem level="1">
        <link>About</link>
      </listitem>
      <listitem level="1">
        <link>Contact Us</link>
      </listitem>
      <listitem level="1">
        <link>Careers</link>
        <link>HIRING</link>
      </listitem>
    </list>
    <paragraph>
      <text>Currently</text>
      <link>v5.0.0-alpha.35. View versions page.</link>
      <text>. Released under the</text>
      <link>MIT License</link>
      <text>.Copyright ¬©2021Material-UI.</text>
    </paragraph>
  </contentinfo>
  <alert></alert>
</WebArea>;

`;

exports[`chromium /api/button/ 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Button API
    <text>ButtonAPI</text>
  </heading>
  <paragraph>
    <text>
      API documentation for the React Button component. Learn about the
      available props, and the CSS API.
    </text>
  </paragraph>
  <heading level="2">
    Import
    <text>Import</text>
  </heading>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <text>You can learn about the difference by</text>
  <link>reading this guide on minimizing bundle size</link>
  <text>.</text>
  <heading level="2">
    Component name
    <text>Component name</text>
  </heading>
  <text>The name</text>
  <code>$SOME_CODE</code>
  <text>can be used when providing</text>
  <link>default props</link>
  <text>or</text>
  <link>style overrides</link>
  <text>in the theme.</text>
  <heading level="2">
    Props
    <text>Props</text>
  </heading>
  <table>
    <row>
      <columnheader>
        Name
        <text>Name</text>
      </columnheader>
      <columnheader>
        Type
        <text>Type</text>
      </columnheader>
      <columnheader>
        Default
        <text>Default</text>
      </columnheader>
      <columnheader>
        Description
        <text>Description</text>
      </columnheader>
    </row>
    <row>
      <gridcell>
        children
        <text>children</text>
      </gridcell>
      <gridcell>
        node
        <text>node</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        The content of the component.
        <text>The content of the component.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        classes
        <text>classes</text>
      </gridcell>
      <gridcell>
        object
        <text>object</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        Override or extend the styles applied to the component. See CSS API
        below for more details.
        <text>Override or extend the styles applied to the component. See</text>
        <link>CSS API</link>
        <text>below for more details.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        color
        <text>color</text>
      </gridcell>
      <gridcell>
        'inherit' |¬†'primary' |¬†'secondary'
        |¬†string
        <text>'inherit'</text>
        <LineBreak></LineBreak>
        <text>|¬†'primary'</text>
        <LineBreak></LineBreak>
        <text>|¬†'secondary'</text>
        <LineBreak></LineBreak>
        <text>|¬†string</text>
      </gridcell>
      <gridcell>
        'primary'
        <text>'primary'</text>
      </gridcell>
      <gridcell>
        The color of the component. It supports those theme colors that make
        sense for this component.
        <text>
          The color of the component. It supports those theme colors that make
          sense for this component.
        </text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        component
        <text>component</text>
      </gridcell>
      <gridcell>
        elementType
        <text>elementType</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        The component used for the root node. Either a string to use a HTML
        element or a component.
        <text>
          The component used for the root node. Either a string to use a HTML
          element or a component.
        </text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        disabled
        <text>disabled</text>
      </gridcell>
      <gridcell>
        bool
        <text>bool</text>
      </gridcell>
      <gridcell>
        false
        <text>false</text>
      </gridcell>
      <gridcell>
        If true, the component is disabled.
        <text>If</text>
        <code>$SOME_CODE</code>
        <text>, the component is disabled.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        disableElevation
        <text>disableElevation</text>
      </gridcell>
      <gridcell>
        bool
        <text>bool</text>
      </gridcell>
      <gridcell>
        false
        <text>false</text>
      </gridcell>
      <gridcell>
        If true, no elevation is used.
        <text>If</text>
        <code>$SOME_CODE</code>
        <text>, no elevation is used.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        disableFocusRipple
        <text>disableFocusRipple</text>
      </gridcell>
      <gridcell>
        bool
        <text>bool</text>
      </gridcell>
      <gridcell>
        false
        <text>false</text>
      </gridcell>
      <gridcell>
        If true, the keyboard focus ripple is disabled.
        <text>If</text>
        <code>$SOME_CODE</code>
        <text>, the keyboard focus ripple is disabled.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        disableRipple
        <text>disableRipple</text>
      </gridcell>
      <gridcell>
        bool
        <text>bool</text>
      </gridcell>
      <gridcell>
        false
        <text>false</text>
      </gridcell>
      <gridcell>
        If true, the ripple effect is disabled. ‚ö†Ô∏è Without a ripple there is no
        styling for :focus-visible by default. Be sure to highlight the element
        by applying separate styles with the .Mui-focusedVisible class.
        <text>If</text>
        <code>$SOME_CODE</code>
        <text>, the ripple effect is disabled.</text>
        <LineBreak></LineBreak>
        <text>
          ‚ö†Ô∏è Without a ripple there is no styling for :focus-visible by default.
          Be sure to highlight the element by applying separate styles with the
        </text>
        <code>$SOME_CODE</code>
        <text>class.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        endIcon
        <text>endIcon</text>
      </gridcell>
      <gridcell>
        node
        <text>node</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        Element placed after the children.
        <text>Element placed after the children.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        fullWidth
        <text>fullWidth</text>
      </gridcell>
      <gridcell>
        bool
        <text>bool</text>
      </gridcell>
      <gridcell>
        false
        <text>false</text>
      </gridcell>
      <gridcell>
        If true, the button will take up the full width of its container.
        <text>If</text>
        <code>$SOME_CODE</code>
        <text>, the button will take up the full width of its container.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        href
        <text>href</text>
      </gridcell>
      <gridcell>
        string
        <text>string</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        The URL to link to when the button is clicked. If defined, an a element
        will be used as the root node.
        <text>
          The URL to link to when the button is clicked. If defined, an
        </text>
        <code>$SOME_CODE</code>
        <text>element will be used as the root node.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        size
        <text>size</text>
      </gridcell>
      <gridcell>
        'small' |¬†'medium' |¬†'large' |¬†string
        <text>'small'</text>
        <LineBreak></LineBreak>
        <text>|¬†'medium'</text>
        <LineBreak></LineBreak>
        <text>|¬†'large'</text>
        <LineBreak></LineBreak>
        <text>|¬†string</text>
      </gridcell>
      <gridcell>
        'medium'
        <text>'medium'</text>
      </gridcell>
      <gridcell>
        The size of the component. small is equivalent to the dense button
        styling.
        <text>The size of the component.</text>
        <code>$SOME_CODE</code>
        <text>is equivalent to the dense button styling.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        startIcon
        <text>startIcon</text>
      </gridcell>
      <gridcell>
        node
        <text>node</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        Element placed before the children.
        <text>Element placed before the children.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        sx
        <text>sx</text>
      </gridcell>
      <gridcell>
        object
        <text>object</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        The system prop that allows defining system overrides as well as
        additional CSS styles. See the \`sx\` page for more details.
        <text>
          The system prop that allows defining system overrides as well as
          additional CSS styles. See the
        </text>
        <link>\`sx\` page</link>
        <text>for more details.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        variant
        <text>variant</text>
      </gridcell>
      <gridcell>
        'contained' |¬†'outlined' |¬†'text' |¬†string
        <text>'contained'</text>
        <LineBreak></LineBreak>
        <text>|¬†'outlined'</text>
        <LineBreak></LineBreak>
        <text>|¬†'text'</text>
        <LineBreak></LineBreak>
        <text>|¬†string</text>
      </gridcell>
      <gridcell>
        'text'
        <text>'text'</text>
      </gridcell>
      <gridcell>
        The variant to use.
        <text>The variant to use.</text>
      </gridcell>
    </row>
  </table>
  <LineBreak></LineBreak>
  <text>The</text>
  <code>$SOME_CODE</code>
  <text>is forwarded to the root element.</text>
  <LineBreak></LineBreak>
  <text>Any other props supplied will be provided to the root element (</text>
  <link>ButtonBase</link>
  <text>).</text>
  <heading level="3">
    Inheritance
    <text>Inheritance</text>
  </heading>
  <text>While not explicitly documented above, the props of the</text>
  <link>ButtonBase</link>
  <text>
    component are also available on Button. You can take advantage of this to
  </text>
  <link>target nested components</link>
  <text>.</text>
  <heading level="2">
    CSS
    <text>CSS</text>
  </heading>
  <table>
    <row>
      <columnheader>
        Rule name
        <text>Rule name</text>
      </columnheader>
      <columnheader>
        Global class
        <text>Global class</text>
      </columnheader>
      <columnheader>
        Description
        <text>Description</text>
      </columnheader>
    </row>
    <row>
      <gridcell>
        root
        <text>root</text>
      </gridcell>
      <gridcell>
        .MuiButton-root
        <text>.MuiButton-root</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element.
        <text>Styles applied to the root element.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        label
        <text>label</text>
      </gridcell>
      <gridcell>
        .MuiButton-label
        <text>.MuiButton-label</text>
      </gridcell>
      <gridcell>
        Styles applied to the span element that wraps the children.
        <text>Styles applied to the span element that wraps the children.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        text
        <text>text</text>
      </gridcell>
      <gridcell>
        .MuiButton-text
        <text>.MuiButton-text</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if variant="text".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        textInherit
        <text>textInherit</text>
      </gridcell>
      <gridcell>
        .MuiButton-textInherit
        <text>.MuiButton-textInherit</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if variant="text" and
        color="inherit".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        textPrimary
        <text>textPrimary</text>
      </gridcell>
      <gridcell>
        .MuiButton-textPrimary
        <text>.MuiButton-textPrimary</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if variant="text" and
        color="primary".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        textSecondary
        <text>textSecondary</text>
      </gridcell>
      <gridcell>
        .MuiButton-textSecondary
        <text>.MuiButton-textSecondary</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if variant="text" and
        color="secondary".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        outlined
        <text>outlined</text>
      </gridcell>
      <gridcell>
        .MuiButton-outlined
        <text>.MuiButton-outlined</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if variant="outlined".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        outlinedInherit
        <text>outlinedInherit</text>
      </gridcell>
      <gridcell>
        .MuiButton-outlinedInherit
        <text>.MuiButton-outlinedInherit</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if variant="outlined" and
        color="inherit".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        outlinedPrimary
        <text>outlinedPrimary</text>
      </gridcell>
      <gridcell>
        .MuiButton-outlinedPrimary
        <text>.MuiButton-outlinedPrimary</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if variant="outlined" and
        color="primary".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        outlinedSecondary
        <text>outlinedSecondary</text>
      </gridcell>
      <gridcell>
        .MuiButton-outlinedSecondary
        <text>.MuiButton-outlinedSecondary</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if variant="outlined" and
        color="secondary".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        contained
        <text>contained</text>
      </gridcell>
      <gridcell>
        .MuiButton-contained
        <text>.MuiButton-contained</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if variant="contained".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        containedInherit
        <text>containedInherit</text>
      </gridcell>
      <gridcell>
        .MuiButton-containedInherit
        <text>.MuiButton-containedInherit</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if variant="contained" and
        color="inherit".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        containedPrimary
        <text>containedPrimary</text>
      </gridcell>
      <gridcell>
        .MuiButton-containedPrimary
        <text>.MuiButton-containedPrimary</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if variant="contained" and
        color="primary".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        containedSecondary
        <text>containedSecondary</text>
      </gridcell>
      <gridcell>
        .MuiButton-containedSecondary
        <text>.MuiButton-containedSecondary</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if variant="contained" and
        color="secondary".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        disableElevation
        <text>disableElevation</text>
      </gridcell>
      <gridcell>
        .MuiButton-disableElevation
        <text>.MuiButton-disableElevation</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if disableElevation={true}.
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        focusVisible
        <text>focusVisible</text>
      </gridcell>
      <gridcell>
        .Mui-focusVisible
        <text>.Mui-focusVisible</text>
      </gridcell>
      <gridcell>
        Pseudo-class applied to the ButtonBase root element if the button is
        keyboard focused.
        <text>
          Pseudo-class applied to the ButtonBase root element if the button is
          keyboard focused.
        </text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        disabled
        <text>disabled</text>
      </gridcell>
      <gridcell>
        .Mui-disabled
        <text>.Mui-disabled</text>
      </gridcell>
      <gridcell>
        Pseudo-class applied to the root element if disabled={true}.
        <text>Pseudo-class applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        colorInherit
        <text>colorInherit</text>
      </gridcell>
      <gridcell>
        .MuiButton-colorInherit
        <text>.MuiButton-colorInherit</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if color="inherit".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        textSizeSmall
        <text>textSizeSmall</text>
      </gridcell>
      <gridcell>
        .MuiButton-textSizeSmall
        <text>.MuiButton-textSizeSmall</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if size="small" and
        variant="text".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        textSizeMedium
        <text>textSizeMedium</text>
      </gridcell>
      <gridcell>
        .MuiButton-textSizeMedium
        <text>.MuiButton-textSizeMedium</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if size="medium" and
        variant="text".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        textSizeLarge
        <text>textSizeLarge</text>
      </gridcell>
      <gridcell>
        .MuiButton-textSizeLarge
        <text>.MuiButton-textSizeLarge</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if size="large" and
        variant="text".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        outlinedSizeSmall
        <text>outlinedSizeSmall</text>
      </gridcell>
      <gridcell>
        .MuiButton-outlinedSizeSmall
        <text>.MuiButton-outlinedSizeSmall</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if size="small" and
        variant="outlined".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        outlinedSizeMedium
        <text>outlinedSizeMedium</text>
      </gridcell>
      <gridcell>
        .MuiButton-outlinedSizeMedium
        <text>.MuiButton-outlinedSizeMedium</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if size="medium" and
        variant="outlined".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        outlinedSizeLarge
        <text>outlinedSizeLarge</text>
      </gridcell>
      <gridcell>
        .MuiButton-outlinedSizeLarge
        <text>.MuiButton-outlinedSizeLarge</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if size="large" and
        variant="outlined".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        containedSizeSmall
        <text>containedSizeSmall</text>
      </gridcell>
      <gridcell>
        .MuiButton-containedSizeSmall
        <text>.MuiButton-containedSizeSmall</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if size="small" and
        variant="contained".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        containedSizeMedium
        <text>containedSizeMedium</text>
      </gridcell>
      <gridcell>
        .MuiButton-containedSizeMedium
        <text>.MuiButton-containedSizeMedium</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if size="small" and
        variant="contained".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        containedSizeLarge
        <text>containedSizeLarge</text>
      </gridcell>
      <gridcell>
        .MuiButton-containedSizeLarge
        <text>.MuiButton-containedSizeLarge</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if size="large" and
        variant="contained".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        sizeSmall
        <text>sizeSmall</text>
      </gridcell>
      <gridcell>
        .MuiButton-sizeSmall
        <text>.MuiButton-sizeSmall</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if size="small".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        sizeMedium
        <text>sizeMedium</text>
      </gridcell>
      <gridcell>
        .MuiButton-sizeMedium
        <text>.MuiButton-sizeMedium</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if size="medium".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        sizeLarge
        <text>sizeLarge</text>
      </gridcell>
      <gridcell>
        .MuiButton-sizeLarge
        <text>.MuiButton-sizeLarge</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if size="large".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        fullWidth
        <text>fullWidth</text>
      </gridcell>
      <gridcell>
        .MuiButton-fullWidth
        <text>.MuiButton-fullWidth</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if fullWidth={true}.
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        startIcon
        <text>startIcon</text>
      </gridcell>
      <gridcell>
        .MuiButton-startIcon
        <text>.MuiButton-startIcon</text>
      </gridcell>
      <gridcell>
        Styles applied to the startIcon element if supplied.
        <text>Styles applied to the startIcon element if supplied.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        endIcon
        <text>endIcon</text>
      </gridcell>
      <gridcell>
        .MuiButton-endIcon
        <text>.MuiButton-endIcon</text>
      </gridcell>
      <gridcell>
        Styles applied to the endIcon element if supplied.
        <text>Styles applied to the endIcon element if supplied.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        iconSizeSmall
        <text>iconSizeSmall</text>
      </gridcell>
      <gridcell>
        .MuiButton-iconSizeSmall
        <text>.MuiButton-iconSizeSmall</text>
      </gridcell>
      <gridcell>
        Styles applied to the icon element if supplied and
        size="small".
        <text>Styles applied to the icon element if supplied and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        iconSizeMedium
        <text>iconSizeMedium</text>
      </gridcell>
      <gridcell>
        .MuiButton-iconSizeMedium
        <text>.MuiButton-iconSizeMedium</text>
      </gridcell>
      <gridcell>
        Styles applied to the icon element if supplied and
        size="medium".
        <text>Styles applied to the icon element if supplied and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        iconSizeLarge
        <text>iconSizeLarge</text>
      </gridcell>
      <gridcell>
        .MuiButton-iconSizeLarge
        <text>.MuiButton-iconSizeLarge</text>
      </gridcell>
      <gridcell>
        Styles applied to the icon element if supplied and
        size="large".
        <text>Styles applied to the icon element if supplied and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
  </table>
  <LineBreak></LineBreak>
  <text>
    You can override the style of the component using one of these customization
    options:
  </text>
  <list>
    <listitem level="1">
      <text>With a</text>
      <link>global class name</link>
      <text>.</text>
    </listitem>
    <listitem level="1">
      <text>With a rule name as part of the component's</text>
      <link>
        styleOverrides property
        <code>$SOME_CODE</code>
      </link>
      <text>in a custom theme.</text>
    </listitem>
  </list>
  <heading level="2">
    Demos
    <text>Demos</text>
  </heading>
  <list>
    <listitem level="1">
      <link>Button Group</link>
    </listitem>
    <listitem level="1">
      <link>Buttons</link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link>Breadcrumbs</link>
    <group>
      Was this page helpful?
      <text>Was this page helpful?</text>
      <button pressed="false">Yes</button>
      <button pressed="false">No</button>
    </group>
    <link>ButtonBase</link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /api/select/ 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Select API
    <text>SelectAPI</text>
  </heading>
  <paragraph>
    <text>
      API documentation for the React Select component. Learn about the
      available props, and the CSS API.
    </text>
  </paragraph>
  <heading level="2">
    Import
    <text>Import</text>
  </heading>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <text>You can learn about the difference by</text>
  <link>reading this guide on minimizing bundle size</link>
  <text>.</text>
  <heading level="2">
    Component name
    <text>Component name</text>
  </heading>
  <text>The name</text>
  <code>$SOME_CODE</code>
  <text>can be used when providing</text>
  <link>default props</link>
  <text>or</text>
  <link>style overrides</link>
  <text>in the theme.</text>
  <heading level="2">
    Props
    <text>Props</text>
  </heading>
  <table>
    <row>
      <columnheader>
        Name
        <text>Name</text>
      </columnheader>
      <columnheader>
        Type
        <text>Type</text>
      </columnheader>
      <columnheader>
        Default
        <text>Default</text>
      </columnheader>
      <columnheader>
        Description
        <text>Description</text>
      </columnheader>
    </row>
    <row>
      <gridcell>
        autoWidth
        <text>autoWidth</text>
      </gridcell>
      <gridcell>
        bool
        <text>bool</text>
      </gridcell>
      <gridcell>
        false
        <text>false</text>
      </gridcell>
      <gridcell>
        If true, the width of the popover will automatically be set according to
        the items inside the menu, otherwise it will be at least the width of
        the select input.
        <text>If</text>
        <code>$SOME_CODE</code>
        <text>
          , the width of the popover will automatically be set according to the
          items inside the menu, otherwise it will be at least the width of the
          select input.
        </text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        children
        <text>children</text>
      </gridcell>
      <gridcell>
        node
        <text>node</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        The option elements to populate the select with. Can be some MenuItem
        when native is false and option when native is true. ‚ö†Ô∏èThe MenuItem
        elements must be direct descendants when native is false.
        <text>
          The option elements to populate the select with. Can be some
        </text>
        <code>$SOME_CODE</code>
        <text>when</text>
        <code>$SOME_CODE</code>
        <text>is false and</text>
        <code>$SOME_CODE</code>
        <text>when</text>
        <code>$SOME_CODE</code>
        <text>is true.</text>
        <LineBreak></LineBreak>
        <text>‚ö†Ô∏èThe</text>
        <code>$SOME_CODE</code>
        <text>elementsmustbe direct descendants when</text>
        <code>$SOME_CODE</code>
        <text>is false.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        classes
        <text>classes</text>
      </gridcell>
      <gridcell>
        object
        <text>object</text>
      </gridcell>
      <gridcell>
        {}
        <text>{}</text>
      </gridcell>
      <gridcell>
        Override or extend the styles applied to the component. See CSS API
        below for more details.
        <text>Override or extend the styles applied to the component. See</text>
        <link>CSS API</link>
        <text>below for more details.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        defaultValue
        <text>defaultValue</text>
      </gridcell>
      <gridcell>
        any
        <text>any</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        The default value. Use when the component is not controlled.
        <text>
          The default value. Use when the component is not controlled.
        </text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        displayEmpty
        <text>displayEmpty</text>
      </gridcell>
      <gridcell>
        bool
        <text>bool</text>
      </gridcell>
      <gridcell>
        false
        <text>false</text>
      </gridcell>
      <gridcell>
        If true, a value is displayed even if no items are selected. In order to
        display a meaningful value, a function can be passed to the renderValue
        prop which returns the value to be displayed when no items are selected.
        ‚ö†Ô∏è When using this prop, make sure the label doesn't overlap with
        the empty displayed value. The label should either be hidden or forced
        to a shrunk state.
        <text>If</text>
        <code>$SOME_CODE</code>
        <text>, a value is displayed even if no items are selected.</text>
        <LineBreak></LineBreak>
        <text>
          In order to display a meaningful value, a function can be passed to
          the
        </text>
        <code>$SOME_CODE</code>
        <text>
          prop which returns the value to be displayed when no items are
          selected.
        </text>
        <LineBreak></LineBreak>
        <text>
          ‚ö†Ô∏è When using this prop, make sure the label doesn't overlap with
          the empty displayed value. The label should either be hidden or forced
          to a shrunk state.
        </text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        IconComponent
        <text>IconComponent</text>
      </gridcell>
      <gridcell>
        elementType
        <text>elementType</text>
      </gridcell>
      <gridcell>
        ArrowDropDownIcon
        <text>ArrowDropDownIcon</text>
      </gridcell>
      <gridcell>
        The icon that displays the arrow.
        <text>The icon that displays the arrow.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        id
        <text>id</text>
      </gridcell>
      <gridcell>
        string
        <text>string</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        The id of the wrapper element or the select element when native.
        <text>The</text>
        <code>$SOME_CODE</code>
        <text>of the wrapper element or the</text>
        <code>$SOME_CODE</code>
        <text>element when</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        input
        <text>input</text>
      </gridcell>
      <gridcell>
        element
        <text>element</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        An Input element; does not have to be a material-ui specific Input.
        <text>An</text>
        <code>$SOME_CODE</code>
        <text>element; does not have to be a material-ui specific</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        inputProps
        <text>inputProps</text>
      </gridcell>
      <gridcell>
        object
        <text>object</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        Attributes applied to the input element. When native is true, the
        attributes are applied on the select element.
        <link>Attributes</link>
        <text>applied to the</text>
        <code>$SOME_CODE</code>
        <text>element. When</text>
        <code>$SOME_CODE</code>
        <text>is</text>
        <code>$SOME_CODE</code>
        <text>, the attributes are applied on the</text>
        <code>$SOME_CODE</code>
        <text>element.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        label
        <text>label</text>
      </gridcell>
      <gridcell>
        node
        <text>node</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        See OutlinedInput#label
        <text>See</text>
        <link>OutlinedInput#label</link>
      </gridcell>
    </row>
    <row>
      <gridcell>
        labelId
        <text>labelId</text>
      </gridcell>
      <gridcell>
        string
        <text>string</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        The ID of an element that acts as an additional label. The Select will
        be labelled by the additional label and the selected value.
        <text>
          The ID of an element that acts as an additional label. The Select will
          be labelled by the additional label and the selected value.
        </text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        MenuProps
        <text>MenuProps</text>
      </gridcell>
      <gridcell>
        object
        <text>object</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        Props applied to the Menu element.
        <text>Props applied to the</text>
        <link>
          Menu
          <code>$SOME_CODE</code>
        </link>
        <text>element.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        multiple
        <text>multiple</text>
      </gridcell>
      <gridcell>
        bool
        <text>bool</text>
      </gridcell>
      <gridcell>
        false
        <text>false</text>
      </gridcell>
      <gridcell>
        If true, value must be an array and the menu will support multiple
        selections.
        <text>If</text>
        <code>$SOME_CODE</code>
        <text>,</text>
        <code>$SOME_CODE</code>
        <text>
          must be an array and the menu will support multiple selections.
        </text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        native
        <text>native</text>
      </gridcell>
      <gridcell>
        bool
        <text>bool</text>
      </gridcell>
      <gridcell>
        false
        <text>false</text>
      </gridcell>
      <gridcell>
        If true, the component uses a native select element.
        <text>If</text>
        <code>$SOME_CODE</code>
        <text>, the component uses a native</text>
        <code>$SOME_CODE</code>
        <text>element.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        onChange
        <text>onChange</text>
      </gridcell>
      <gridcell>
        func
        <text>func</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        Callback fired when a menu item is selected. Signature: function(event:
        object, child?: object) => void event: The event source of the
        callback. You can pull out the new value by accessing event.target.value
        (any). Warning: This is a generic event not a change event. child: The
        react element that was selected when native is false (default).
        <text>Callback fired when a menu item is selected.</text>
        <LineBreak></LineBreak>
        <LineBreak></LineBreak>
        <text>Signature:</text>
        <LineBreak></LineBreak>
        <code>$SOME_CODE</code>
        <LineBreak></LineBreak>
        <text>
          event:The event source of the callback. You can pull out the new value
          by accessing
        </text>
        <code>$SOME_CODE</code>
        <text>(any).Warning: This is a generic event not a change event.</text>
        <LineBreak></LineBreak>
        <text>child:The react element that was selected when</text>
        <code>$SOME_CODE</code>
        <text>is</text>
        <code>$SOME_CODE</code>
        <text>(default).</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        onClose
        <text>onClose</text>
      </gridcell>
      <gridcell>
        func
        <text>func</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        Callback fired when the component requests to be closed. Use in
        controlled mode (see open). Signature: function(event: object) =>
        void event: The event source of the callback.
        <text>
          Callback fired when the component requests to be closed. Use in
          controlled mode (see open).
        </text>
        <LineBreak></LineBreak>
        <LineBreak></LineBreak>
        <text>Signature:</text>
        <LineBreak></LineBreak>
        <code>$SOME_CODE</code>
        <LineBreak></LineBreak>
        <text>event:The event source of the callback.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        onOpen
        <text>onOpen</text>
      </gridcell>
      <gridcell>
        func
        <text>func</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        Callback fired when the component requests to be opened. Use in
        controlled mode (see open). Signature: function(event: object) =>
        void event: The event source of the callback.
        <text>
          Callback fired when the component requests to be opened. Use in
          controlled mode (see open).
        </text>
        <LineBreak></LineBreak>
        <LineBreak></LineBreak>
        <text>Signature:</text>
        <LineBreak></LineBreak>
        <code>$SOME_CODE</code>
        <LineBreak></LineBreak>
        <text>event:The event source of the callback.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        open
        <text>open</text>
      </gridcell>
      <gridcell>
        bool
        <text>bool</text>
      </gridcell>
      <gridcell>
        false
        <text>false</text>
      </gridcell>
      <gridcell>
        If true, the component is shown. You can only use it when the native
        prop is false (default).
        <text>If</text>
        <code>$SOME_CODE</code>
        <text>, the component is shown. You can only use it when the</text>
        <code>$SOME_CODE</code>
        <text>prop is</text>
        <code>$SOME_CODE</code>
        <text>(default).</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        renderValue
        <text>renderValue</text>
      </gridcell>
      <gridcell>
        func
        <text>func</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        Render the selected value. You can only use it when the native prop is
        false (default). Signature: function(value: any) => ReactNode value:
        The value provided to the component.
        <text>Render the selected value. You can only use it when the</text>
        <code>$SOME_CODE</code>
        <text>prop is</text>
        <code>$SOME_CODE</code>
        <text>(default).</text>
        <LineBreak></LineBreak>
        <LineBreak></LineBreak>
        <text>Signature:</text>
        <LineBreak></LineBreak>
        <code>$SOME_CODE</code>
        <LineBreak></LineBreak>
        <text>value:The</text>
        <code>$SOME_CODE</code>
        <text>provided to the component.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        SelectDisplayProps
        <text>SelectDisplayProps</text>
      </gridcell>
      <gridcell>
        object
        <text>object</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        Props applied to the clickable div element.
        <text>Props applied to the clickable div element.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        sx
        <text>sx</text>
      </gridcell>
      <gridcell>
        object
        <text>object</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        The system prop that allows defining system overrides as well as
        additional CSS styles. See the \`sx\` page for more details.
        <text>
          The system prop that allows defining system overrides as well as
          additional CSS styles. See the
        </text>
        <link>\`sx\` page</link>
        <text>for more details.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        value
        <text>value</text>
      </gridcell>
      <gridcell>
        any
        <text>any</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        The input value. Providing an empty string will select no options. Set
        to an empty string '' if you don't want any of the
        available options to be selected. If the value is an object it must have
        reference equality with the option in order to be selected. If the value
        is not an object, the string representation must match with the string
        representation of the option in order to be selected.
        <text>The</text>
        <code>$SOME_CODE</code>
        <text>
          value. Providing an empty string will select no options. Set to an
          empty string
        </text>
        <code>$SOME_CODE</code>
        <text>
          if you don't want any of the available options to be selected.
        </text>
        <LineBreak></LineBreak>
        <text>
          If the value is an object it must have reference equality with the
          option in order to be selected. If the value is not an object, the
          string representation must match with the string representation of the
          option in order to be selected.
        </text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        variant
        <text>variant</text>
      </gridcell>
      <gridcell>
        'filled' |¬†'outlined' |¬†'standard'
        <text>'filled'</text>
        <LineBreak></LineBreak>
        <text>|¬†'outlined'</text>
        <LineBreak></LineBreak>
        <text>|¬†'standard'</text>
      </gridcell>
      <gridcell>
        'outlined'
        <text>'outlined'</text>
      </gridcell>
      <gridcell>
        The variant to use.
        <text>The variant to use.</text>
      </gridcell>
    </row>
  </table>
  <LineBreak></LineBreak>
  <text>The</text>
  <code>$SOME_CODE</code>
  <text>is forwarded to the root element.</text>
  <LineBreak></LineBreak>
  <text>Any other props supplied will be provided to the root element (</text>
  <link>OutlinedInput</link>
  <text>).</text>
  <heading level="3">
    Inheritance
    <text>Inheritance</text>
  </heading>
  <text>While not explicitly documented above, the props of the</text>
  <link>OutlinedInput</link>
  <text>
    component are also available on Select. You can take advantage of this to
  </text>
  <link>target nested components</link>
  <text>.</text>
  <heading level="2">
    CSS
    <text>CSS</text>
  </heading>
  <table>
    <row>
      <columnheader>
        Rule name
        <text>Rule name</text>
      </columnheader>
      <columnheader>
        Global class
        <text>Global class</text>
      </columnheader>
      <columnheader>
        Description
        <text>Description</text>
      </columnheader>
    </row>
    <row>
      <gridcell>
        root
        <text>root</text>
      </gridcell>
      <gridcell>
        .MuiSelect-root
        <text>.MuiSelect-root</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element.
        <text>Styles applied to the root element.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        select
        <text>select</text>
      </gridcell>
      <gridcell>
        .MuiSelect-select
        <text>.MuiSelect-select</text>
      </gridcell>
      <gridcell>
        Styles applied to the select component \`select\` class.
        <text>Styles applied to the select component \`select\` class.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        filled
        <text>filled</text>
      </gridcell>
      <gridcell>
        .MuiSelect-filled
        <text>.MuiSelect-filled</text>
      </gridcell>
      <gridcell>
        Styles applied to the select component if variant="filled".
        <text>Styles applied to the select component if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        outlined
        <text>outlined</text>
      </gridcell>
      <gridcell>
        .MuiSelect-outlined
        <text>.MuiSelect-outlined</text>
      </gridcell>
      <gridcell>
        Styles applied to the select component if variant="outlined".
        <text>Styles applied to the select component if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        standard
        <text>standard</text>
      </gridcell>
      <gridcell>
        .MuiSelect-standard
        <text>.MuiSelect-standard</text>
      </gridcell>
      <gridcell>
        Styles applied to the select component if variant="standard".
        <text>Styles applied to the select component if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        disabled
        <text>disabled</text>
      </gridcell>
      <gridcell>
        .Mui-disabled
        <text>.Mui-disabled</text>
      </gridcell>
      <gridcell>
        Pseudo-class applied to the select component \`disabled\` class.
        <text>
          Pseudo-class applied to the select component \`disabled\` class.
        </text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        icon
        <text>icon</text>
      </gridcell>
      <gridcell>
        .MuiSelect-icon
        <text>.MuiSelect-icon</text>
      </gridcell>
      <gridcell>
        Styles applied to the icon component.
        <text>Styles applied to the icon component.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        iconOpen
        <text>iconOpen</text>
      </gridcell>
      <gridcell>
        .MuiSelect-iconOpen
        <text>.MuiSelect-iconOpen</text>
      </gridcell>
      <gridcell>
        Styles applied to the icon component if the popup is open.
        <text>Styles applied to the icon component if the popup is open.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        iconFilled
        <text>iconFilled</text>
      </gridcell>
      <gridcell>
        .MuiSelect-iconFilled
        <text>.MuiSelect-iconFilled</text>
      </gridcell>
      <gridcell>
        Styles applied to the icon component if variant="filled".
        <text>Styles applied to the icon component if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        iconOutlined
        <text>iconOutlined</text>
      </gridcell>
      <gridcell>
        .MuiSelect-iconOutlined
        <text>.MuiSelect-iconOutlined</text>
      </gridcell>
      <gridcell>
        Styles applied to the icon component if variant="outlined".
        <text>Styles applied to the icon component if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        iconStandard
        <text>iconStandard</text>
      </gridcell>
      <gridcell>
        .MuiSelect-iconStandard
        <text>.MuiSelect-iconStandard</text>
      </gridcell>
      <gridcell>
        Styles applied to the icon component if variant="standard".
        <text>Styles applied to the icon component if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        nativeInput
        <text>nativeInput</text>
      </gridcell>
      <gridcell>
        .MuiSelect-nativeInput
        <text>.MuiSelect-nativeInput</text>
      </gridcell>
      <gridcell>
        Styles applied to the underlying native input component.
        <text>Styles applied to the underlying native input component.</text>
      </gridcell>
    </row>
  </table>
  <LineBreak></LineBreak>
  <text>
    You can override the style of the component using one of these customization
    options:
  </text>
  <list>
    <listitem level="1">
      <text>With a</text>
      <link>global class name</link>
      <text>.</text>
    </listitem>
    <listitem level="1">
      <text>With a rule name as part of the component's</text>
      <link>
        styleOverrides property
        <code>$SOME_CODE</code>
      </link>
      <text>in a custom theme.</text>
    </listitem>
  </list>
  <heading level="2">
    Demos
    <text>Demos</text>
  </heading>
  <list>
    <listitem level="1">
      <link>Selects</link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link>ScopedCssBaseline</link>
    <group>
      Was this page helpful?
      <text>Was this page helpful?</text>
      <button pressed="false">Yes</button>
      <button pressed="false">No</button>
    </group>
    <link>Skeleton</link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/breadcrumbs 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Breadcrumbs
    <text>Breadcrumbs</text>
  </heading>
  <paragraph>
    <text>
      Breadcrumbs allow users to make selections from a range of values.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <link>Feedback</link>
    </listitem>
    <listitem level="1">
      <link>WAI-ARIA</link>
    </listitem>
    <listitem level="1">
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem level="1">
      <link>Figma</link>
    </listitem>
    <listitem level="1">
      <link>Adobe</link>
    </listitem>
    <listitem level="1">
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Basic breadcrumbs
    <text>Basic breadcrumbs</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    breadcrumb
    <list>
      <listitem level="1">
        <link>Material-UI</link>
      </listitem>
      <listitem level="1">
        <link>Core</link>
      </listitem>
      <listitem level="1">
        <paragraph>
          <text>Breadcrumb</text>
        </paragraph>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Active last breadcrumb
    <text>Active last breadcrumb</text>
  </heading>
  <paragraph>
    <text>Keep the last breadcrumb interactive.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    breadcrumb
    <list>
      <listitem level="1">
        <link>Material-UI</link>
      </listitem>
      <listitem level="1">
        <link>Core</link>
      </listitem>
      <listitem level="1">
        <link>Breadcrumb</link>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Custom separator
    <text>Custom separator</text>
  </heading>
  <paragraph>
    <text>
      In the following examples, we are using two string separators and an SVG
      icon.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    breadcrumb
    <list>
      <listitem level="1">
        <link>Material-UI</link>
      </listitem>
      <listitem level="1">
        <link>Core</link>
      </listitem>
      <listitem level="1">
        <paragraph>
          <text>Breadcrumb</text>
        </paragraph>
      </listitem>
    </list>
  </navigation>
  <navigation>
    breadcrumb
    <list>
      <listitem level="1">
        <link>Material-UI</link>
      </listitem>
      <listitem level="1">
        <link>Core</link>
      </listitem>
      <listitem level="1">
        <paragraph>
          <text>Breadcrumb</text>
        </paragraph>
      </listitem>
    </list>
  </navigation>
  <navigation>
    breadcrumb
    <list>
      <listitem level="1">
        <link>Material-UI</link>
      </listitem>
      <listitem level="1">
        <link>Core</link>
      </listitem>
      <listitem level="1">
        <paragraph>
          <text>Breadcrumb</text>
        </paragraph>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Breadcrumbs with icons
    <text>Breadcrumbs with icons</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    breadcrumb
    <list>
      <listitem level="1">
        <link>Material-UI</link>
      </listitem>
      <listitem level="1">
        <link>Core</link>
      </listitem>
      <listitem level="1">
        <text>Breadcrumb</text>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Collapsed breadcrumbs
    <text>Collapsed breadcrumbs</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    breadcrumb
    <list>
      <listitem level="1">
        <link>Home</link>
      </listitem>
      <listitem level="1">
        <button>Show path</button>
      </listitem>
      <listitem level="1">
        <paragraph>
          <text>Belts</text>
        </paragraph>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Customized breadcrumbs
    <text>Customized breadcrumbs</text>
  </heading>
  <paragraph>
    <text>
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link>overrides documentation page</link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    breadcrumb
    <list>
      <listitem level="1">
        <link>Home</link>
      </listitem>
      <listitem level="1">
        <link>Catalog</link>
      </listitem>
      <listitem level="1">
        <button>
          Accessories
          <text>Accessories</text>
        </button>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Integration with react-router
    <text>Integration with react-router</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    breadcrumb
    <list>
      <listitem level="1">
        <link>Home</link>
      </listitem>
      <listitem level="1">
        <paragraph>
          <text>Inbox</text>
        </paragraph>
      </listitem>
    </list>
  </navigation>
  <navigation>
    mailbox folders
    <list>
      <listitem level="1">
        <button>
          Inbox
          <text>Inbox</text>
        </button>
      </listitem>
      <listitem level="1">
        <list>
          <listitem level="2">
            <button>
              Important
              <text>Important</text>
            </button>
          </listitem>
        </list>
      </listitem>
      <listitem level="1">
        <button>
          Trash
          <text>Trash</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Spam
          <text>Spam</text>
        </button>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Accessibility
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(WAI-ARIA:</text>
    <link>https://www.w3.org/TR/wai-aria-practices/#breadcrumb</link>
    <text>)</text>
  </paragraph>
  <paragraph>
    <text>Be sure to add a</text>
    <code>$SOME_CODE</code>
    <text>description on the</text>
    <code>$SOME_CODE</code>
    <text>component.</text>
  </paragraph>
  <paragraph>
    <text>The accessibility of this component relies on:</text>
  </paragraph>
  <list>
    <listitem level="1">
      <text>The set of links is structured using an ordered list (</text>
      <code>$SOME_CODE</code>
      <text>element).</text>
    </listitem>
    <listitem level="1">
      <text>
        To prevent screen reader announcement of the visual separators between
        links, they are hidden with
      </text>
      <code>$SOME_CODE</code>
      <text>.</text>
    </listitem>
    <listitem level="1">
      <text>A nav element labeled with</text>
      <code>$SOME_CODE</code>
      <text>
        identifies the structure as a breadcrumb trail and makes it a navigation
        landmark so that it is easy to locate.
      </text>
    </listitem>
  </list>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <link>
        <Breadcrumbs />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <Link />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <Typography />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link>Bottom Navigation</link>
    <group>
      Was this page helpful?
      <text>Was this page helpful?</text>
      <button pressed="false">Yes</button>
      <button pressed="false">No</button>
    </group>
    <link>Drawer</link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/button-group/ 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Button group
    <text>Button group</text>
  </heading>
  <paragraph>
    <text>The ButtonGroup component can be used to group related buttons.</text>
  </paragraph>
  <list>
    <listitem level="1">
      <link>Feedback</link>
    </listitem>
    <listitem level="1">
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem level="1">
      <link>Figma</link>
    </listitem>
    <listitem level="1">
      <link>Adobe</link>
    </listitem>
    <listitem level="1">
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Basic button group
    <text>Basic button group</text>
  </heading>
  <paragraph>
    <text>The buttons can be grouped by wrapping them with the</text>
    <code>$SOME_CODE</code>
    <text>component. They need to be immediate children.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    outlined primary button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Button variants
    <text>Button variants</text>
  </heading>
  <paragraph>
    <text>All the standard button variants are supported.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    outlined button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <group>
    text button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Sizes and colors
    <text>Sizes and colors</text>
  </heading>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>and</text>
    <code>$SOME_CODE</code>
    <text>
      props can be used to control the appearance of the button group.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    small button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <group>
    medium secondary button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <group>
    large button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Vertical group
    <text>Vertical group</text>
  </heading>
  <paragraph>
    <text>The button group can be displayed vertically using the</text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    vertical outlined button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <group>
    vertical contained button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <group>
    vertical contained button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Split button
    <text>Split button</text>
  </heading>
  <paragraph>
    <code>$SOME_CODE</code>
    <text>
      can also be used to create a split button. The dropdown can change the
      button action (as in this example) or be used to immediately trigger a
      related action.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    split button
    <button>
      SQUASH AND MERGE
      <text>SQUASH AND MERGE</text>
    </button>
    <combobox haspopup="menu">select merge strategy</combobox>
  </group>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Disabled elevation
    <text>Disabled elevation</text>
  </heading>
  <paragraph>
    <text>You can remove the elevation with the</text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
  </group>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <link>
        <Button />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <ButtonGroup />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link>Button</link>
    <group>
      Was this page helpful?
      <text>Was this page helpful?</text>
      <button pressed="false">Yes</button>
      <button pressed="false">No</button>
    </group>
    <link>Checkbox</link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/buttons/ 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Button
    <text>Button</text>
  </heading>
  <paragraph>
    <text>
      Buttons allow users to take actions, and make choices, with a single tap.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Buttons communicate actions that users can take. They are typically placed
      throughout your UI, in places like:
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <text>Dialogs</text>
    </listitem>
    <listitem level="1">
      <text>Modal windows</text>
    </listitem>
    <listitem level="1">
      <text>Forms</text>
    </listitem>
    <listitem level="1">
      <text>Cards</text>
    </listitem>
    <listitem level="1">
      <text>Toolbars</text>
    </listitem>
  </list>
  <list>
    <listitem level="1">
      <link>Feedback</link>
    </listitem>
    <listitem level="1">
      <link>WAI-ARIA</link>
    </listitem>
    <listitem level="1">
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem level="1">
      <link>Material Design</link>
    </listitem>
    <listitem level="1">
      <link>Figma</link>
    </listitem>
    <listitem level="1">
      <link>Adobe</link>
    </listitem>
    <listitem level="1">
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Basic Button
    <text>Basic Button</text>
  </heading>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>
      comes with three variants: text (default), contained, and outlined.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    TEXT
    <text>TEXT</text>
  </button>
  <button>
    CONTAINED
    <text>CONTAINED</text>
  </button>
  <button>
    OUTLINED
    <text>OUTLINED</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="3">
    Text buttons
    <text>Text buttons</text>
  </heading>
  <paragraph>
    <link>Text buttons</link>
    <text>
      are typically used for less-pronounced actions, including those located:
      in dialogs, in cards. In cards, text buttons help maintain an emphasis on
      card content.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    PRIMARY
    <text>PRIMARY</text>
  </button>
  <button disabled="true">
    DISABLED
    <text>DISABLED</text>
  </button>
  <link>LINK</link>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="3">
    Contained buttons
    <text>Contained buttons</text>
  </heading>
  <paragraph>
    <link>Contained buttons</link>
    <text>
      are high-emphasis, distinguished by their use of elevation and fill. They
      contain actions that are primary to your app.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    CONTAINED
    <text>CONTAINED</text>
  </button>
  <button disabled="true">
    DISABLED
    <text>DISABLED</text>
  </button>
  <link>LINK</link>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>You can remove the elevation with the</text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    DISABLE ELEVATION
    <text>DISABLE ELEVATION</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="3">
    Outlined buttons
    <text>Outlined buttons</text>
  </heading>
  <paragraph>
    <link>Outlined buttons</link>
    <text>
      are medium-emphasis buttons. They contain actions that are important but
      aren't the primary action in an app.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Outlined buttons are also a lower emphasis alternative to contained
      buttons, or a higher emphasis alternative to text buttons.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    PRIMARY
    <text>PRIMARY</text>
  </button>
  <button disabled="true">
    DISABLED
    <text>DISABLED</text>
  </button>
  <link>LINK</link>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Handling clicks
    <text>Handling clicks</text>
  </heading>
  <paragraph>
    <text>All components accept an</text>
    <code>$SOME_CODE</code>
    <text>handler that is applied to the root DOM element.</text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>Note that the documentation</text>
    <link>avoids</link>
    <text>
      mentioning native props (there are a lot) in the API section of the
      components.
    </text>
  </paragraph>
  <heading level="2">
    Color
    <text>Color</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    SECONDARY
    <text>SECONDARY</text>
  </button>
  <button>
    SECONDARY
    <text>SECONDARY</text>
  </button>
  <button>
    SECONDARY
    <text>SECONDARY</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>
      In addition to using the default button colors, you can add custom ones,
      or disable any you don't need. See the
    </text>
    <link>Adding new colors</link>
    <text>example for more info.</text>
  </paragraph>
  <heading level="2">
    Sizes
    <text>Sizes</text>
  </heading>
  <paragraph>
    <text>For larger or smaller buttons, use the</text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    SMALL
    <text>SMALL</text>
  </button>
  <button>
    MEDIUM
    <text>MEDIUM</text>
  </button>
  <button>
    LARGE
    <text>LARGE</text>
  </button>
  <button>
    SMALL
    <text>SMALL</text>
  </button>
  <button>
    MEDIUM
    <text>MEDIUM</text>
  </button>
  <button>
    LARGE
    <text>LARGE</text>
  </button>
  <button>
    SMALL
    <text>SMALL</text>
  </button>
  <button>
    MEDIUM
    <text>MEDIUM</text>
  </button>
  <button>
    LARGE
    <text>LARGE</text>
  </button>
  <button>delete</button>
  <button>delete</button>
  <button>delete</button>
  <button>delete</button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Upload button
    <text>Upload button</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <button>
      UPLOAD
      <text>UPLOAD</text>
    </button>
  </Label>
  <Label>
    <button>upload picture</button>
  </Label>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Buttons with icons and label
    <text>Buttons with icons and label</text>
  </heading>
  <paragraph>
    <text>
      Sometimes you might want to have icons for certain buttons to enhance the
      UX of the application as we recognize logos more easily than plain text.
      For example, if you have a delete button you can label it with a dustbin
      icon.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    DELETE
    <text>DELETE</text>
  </button>
  <button>
    SEND
    <text>SEND</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Icon button
    <text>Icon button</text>
  </heading>
  <paragraph>
    <text>Icon buttons are commonly found in app bars and toolbars.</text>
  </paragraph>
  <paragraph>
    <text>
      Icons are also appropriate for toggle buttons that allow a single choice
      to be selected or deselected, such as adding or removing a star to an
      item.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>delete</button>
  <button disabled="true">delete</button>
  <button>add an alarm</button>
  <button>add to shopping cart</button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Customized buttons
    <text>Customized buttons</text>
  </heading>
  <paragraph>
    <text>
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link>overrides documentation page</link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    CUSTOM CSS
    <text>CUSTOM CSS</text>
  </button>
  <button>
    Bootstrap
    <text>Bootstrap</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <paragraph>
    <text>üé® If you are looking for inspiration, you can check</text>
    <link>MUI Treasury's customization examples</link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Loading buttons
    <text>Loading buttons</text>
  </heading>
  <paragraph>
    <text>
      The loading buttons can show loading state and disable interactions.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button disabled="true">
    <progressbar valuetext="">
      <SVGRoot></SVGRoot>
    </progressbar>
  </button>
  <button disabled="true">
    <text>LOADING...</text>
  </button>
  <button disabled="true">
    SAVE
    <progressbar valuetext="">
      <SVGRoot></SVGRoot>
    </progressbar>
    <text>SAVE</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>
      Toggle the switch to see the transition between the different states.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="false">Loading</checkbox>
  <button>
    SUBMIT
    <text>SUBMIT</text>
  </button>
  <button>
    FETCH DATA
    <text>FETCH DATA</text>
  </button>
  <button>
    SEND
    <text>SEND</text>
  </button>
  <button>
    SAVE
    <text>SAVE</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Complex buttons
    <text>Complex buttons</text>
  </heading>
  <paragraph>
    <text>
      The Text Buttons, Contained Buttons, Floating Action Buttons and Icon
      Buttons are built on top of the same component: the
    </text>
    <code>$SOME_CODE</code>
    <text>
      . You can take advantage of this lower-level component to build custom
      interactions.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Breakfast
    <text>Breakfast</text>
  </button>
  <button>
    Burgers
    <text>Burgers</text>
  </button>
  <button>
    Camera
    <text>Camera</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Third-party routing library
    <text>Third-party routing library</text>
  </heading>
  <paragraph>
    <text>
      One frequent use case is to perform navigation on the client only, without
      an HTTP round-trip to the server. The
    </text>
    <code>$SOME_CODE</code>
    <text>component provides the</text>
    <code>$SOME_CODE</code>
    <text>prop to handle this use case. Here is a</text>
    <link>more detailed guide</link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Limitations
    <text>Limitations</text>
  </heading>
  <heading level="3">
    Cursor not-allowed
    <text>Cursor not-allowed</text>
  </heading>
  <paragraph>
    <text>The ButtonBase component sets</text>
    <code>$SOME_CODE</code>
    <text>
      on disabled buttons, which prevents the appearance of a disabled cursor.
    </text>
  </paragraph>
  <paragraph>
    <text>If you wish to use</text>
    <code>$SOME_CODE</code>
    <text>, you have two options:</text>
  </paragraph>
  <list>
    <listitem level="1">
      <text>
        CSS only. You can remove the pointer-events style on the disabled state
        of the
      </text>
      <code>$SOME_CODE</code>
      <text>element:</text>
    </listitem>
  </list>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>However:</text>
  </paragraph>
  <list>
    <listitem level="1">
      <text>You should add</text>
      <code>$SOME_CODE</code>
      <text>back when you need to display</text>
      <link>tooltips on disabled elements</link>
      <text>.</text>
    </listitem>
    <listitem level="1">
      <text>
        The cursor won't change if you render something other than a button
        element, for instance, a link
      </text>
      <code>$SOME_CODE</code>
      <text>element.</text>
    </listitem>
  </list>
  <list>
    <listitem level="1">
      <text>DOM change. You can wrap the button:</text>
    </listitem>
  </list>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>
      This has the advantage of supporting any element, for instance, a link
    </text>
    <code>$SOME_CODE</code>
    <text>element.</text>
  </paragraph>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <link>
        <Button />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <ButtonBase />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <IconButton />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <LoadingButton />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link>Autocomplete</link>
    <group>
      Was this page helpful?
      <text>Was this page helpful?</text>
      <button pressed="false">Yes</button>
      <button pressed="false">No</button>
    </group>
    <link>Button Group</link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/checkboxes/ 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Checkbox
    <text>Checkbox</text>
  </heading>
  <paragraph>
    <text>
      Checkboxes allow the user to select one or more items from a set.
    </text>
  </paragraph>
  <paragraph>
    <text>Checkboxes can be used to turn an option on or off.</text>
  </paragraph>
  <paragraph>
    <text>
      If you have multiple options appearing in a list, you can preserve space
      by using checkboxes instead of on/off switches. If you have a single
      option, avoid using a checkbox and use an on/off switch instead.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <link>Feedback</link>
    </listitem>
    <listitem level="1">
      <link>WAI-ARIA</link>
    </listitem>
    <listitem level="1">
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem level="1">
      <link>Material Design</link>
    </listitem>
    <listitem level="1">
      <link>Figma</link>
    </listitem>
    <listitem level="1">
      <link>Adobe</link>
    </listitem>
    <listitem level="1">
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Basic checkboxes
    <text>Basic checkboxes</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">Checkbox demo</checkbox>
  <checkbox checked="false">Checkbox demo</checkbox>
  <checkbox checked="false" disabled="true">
    Checkbox demo
  </checkbox>
  <checkbox checked="true" disabled="true">
    Checkbox demo
  </checkbox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Label
    <text>Label</text>
  </heading>
  <paragraph>
    <text>You can provide a label to the</text>
    <code>$SOME_CODE</code>
    <text>thanks to the</text>
    <code>$SOME_CODE</code>
    <text>component.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">Label</checkbox>
  <checkbox checked="false" disabled="true">
    Disabled
  </checkbox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Size
    <text>Size</text>
  </heading>
  <paragraph>
    <text>Use the</text>
    <code>$SOME_CODE</code>
    <text>
      prop or customize the font size of the svg icons to change the size of the
      checkboxes.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">Checkbox demo</checkbox>
  <checkbox checked="true">Checkbox demo</checkbox>
  <checkbox checked="true">Checkbox demo</checkbox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Color
    <text>Color</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">Checkbox demo</checkbox>
  <checkbox checked="true">Checkbox demo</checkbox>
  <checkbox checked="true">Checkbox demo</checkbox>
  <checkbox checked="true">Checkbox demo</checkbox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Icon
    <text>Icon</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="false">Checkbox demo</checkbox>
  <checkbox checked="false">Checkbox demo</checkbox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Controlled
    <text>Controlled</text>
  </heading>
  <paragraph>
    <text>You can control the checkbox with the</text>
    <code>$SOME_CODE</code>
    <text>and</text>
    <code>$SOME_CODE</code>
    <text>props:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">controlled</checkbox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Indeterminate
    <text>Indeterminate</text>
  </heading>
  <paragraph>
    <text>
      A checkbox input can only have two states in a form: checked or unchecked.
      It either submits its value or doesn't. Visually, there
      arethreestates a checkbox can be in: checked, unchecked, or indeterminate.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="false">Parent</checkbox>
  <checkbox checked="true">Child 1</checkbox>
  <checkbox checked="false">Child 2</checkbox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <blockquote>
    <paragraph>
      <text>‚ö†Ô∏è When indeterminate is set, the value of the</text>
      <code>$SOME_CODE</code>
      <text>
        prop only impacts the form submitted values. It has no accessibility or
        UX implications.
      </text>
    </paragraph>
  </blockquote>
  <heading level="2">
    FormGroup
    <text>FormGroup</text>
  </heading>
  <paragraph>
    <code>$SOME_CODE</code>
    <text>
      is a helpful wrapper used to group selection control components.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    Assign responsibility
    <Legend>
      <text>Assign responsibility</text>
    </Legend>
    <checkbox checked="true">Gilad Gray</checkbox>
    <checkbox checked="false">Jason Killian</checkbox>
    <checkbox checked="false">Antoine Llorca</checkbox>
    <paragraph>
      <text>Be careful</text>
    </paragraph>
  </group>
  <group>
    Pick two
    <Legend>
      <text>Pick two</text>
    </Legend>
    <checkbox checked="true">Gilad Gray</checkbox>
    <checkbox checked="false">Jason Killian</checkbox>
    <checkbox checked="false">Antoine Llorca</checkbox>
    <paragraph>
      <text>You can display an error</text>
    </paragraph>
  </group>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Label placement
    <text>Label placement</text>
  </heading>
  <paragraph>
    <text>You can change the placement of the label:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    Label placement
    <Legend>
      <text>Label placement</text>
    </Legend>
    <checkbox checked="false">Top</checkbox>
    <checkbox checked="false">Start</checkbox>
    <checkbox checked="false">Bottom</checkbox>
    <checkbox checked="false">End</checkbox>
  </group>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Customized checkbox
    <text>Customized checkbox</text>
  </heading>
  <paragraph>
    <text>
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link>overrides documentation page</link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="false">Checkbox demo</checkbox>
  <checkbox checked="true">Checkbox demo</checkbox>
  <checkbox checked="false" disabled="true">
    Checkbox demo
  </checkbox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>üé® If you are looking for inspiration, you can check</text>
    <link>MUI Treasury's customization examples</link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    When to use
    <text>When to use</text>
  </heading>
  <list>
    <listitem level="1">
      <link>Checkboxes vs. Radio Buttons</link>
    </listitem>
    <listitem level="1">
      <link>Checkboxes vs. Switches</link>
    </listitem>
  </list>
  <heading level="2">
    Accessibility
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(WAI-ARIA:</text>
    <link>https://www.w3.org/TR/wai-aria-practices/#checkbox</link>
    <text>)</text>
  </paragraph>
  <list>
    <listitem level="1">
      <text>
        All form controls should have labels, and this includes radio buttons,
        checkboxes, and switches. In most cases, this is done by using the
      </text>
      <code>$SOME_CODE</code>
      <text>element (</text>
      <link>FormControlLabel</link>
      <text>).</text>
    </listitem>
    <listitem level="1">
      <text>
        When a label can't be used, it's necessary to add an attribute
        directly to the input component. In this case, you can apply the
        additional attribute (e.g.
      </text>
      <code>$SOME_CODE</code>
      <text>,</text>
      <code>$SOME_CODE</code>
      <text>,</text>
      <code>$SOME_CODE</code>
      <text>) via the</text>
      <code>$SOME_CODE</code>
      <text>prop.</text>
    </listitem>
  </list>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <link>
        <Checkbox />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <FormControl />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <FormControlLabel />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <FormGroup />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <FormLabel />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link>Button Group</link>
    <group>
      Was this page helpful?
      <text>Was this page helpful?</text>
      <button pressed="false">Yes</button>
      <button pressed="false">No</button>
    </group>
    <link>Floating Action Button</link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/dialogs/ 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Dialog
    <text>Dialog</text>
  </heading>
  <paragraph>
    <text>
      Dialogs inform users about a task and can contain critical information,
      require decisions, or involve multiple tasks.
    </text>
  </paragraph>
  <paragraph>
    <text>A Dialog is a type of</text>
    <link>modal</link>
    <text>
      window that appears in front of app content to provide critical
      information or ask for a decision. Dialogs disable all app functionality
      when they appear, and remain on screen until confirmed, dismissed, or a
      required action has been taken.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Dialogs are purposefully interruptive, so they should be used sparingly.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <link>Feedback</link>
    </listitem>
    <listitem level="1">
      <link>WAI-ARIA</link>
    </listitem>
    <listitem level="1">
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem level="1">
      <link>Material Design</link>
    </listitem>
    <listitem level="1">
      <link>Figma</link>
    </listitem>
    <listitem level="1">
      <link>Adobe</link>
    </listitem>
    <listitem level="1">
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Basic dialog
    <text>Basic dialog</text>
  </heading>
  <paragraph>
    <text>
      Simple dialogs can provide additional details or actions about a list
      item. For example, they can display avatars, icons, clarifying subtext, or
      orthogonal actions (such as adding an account).
    </text>
  </paragraph>
  <paragraph>
    <text>Touch mechanics:</text>
  </paragraph>
  <list>
    <listitem level="1">
      <text>
        Choosing an option immediately commits the option and closes the menu
      </text>
    </listitem>
    <listitem level="1">
      <text>
        Touching outside of the dialog, or pressing Back, cancels the action and
        closes the dialog
      </text>
    </listitem>
  </list>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Selected:user02@gmail.com</text>
  <LineBreak></LineBreak>
  <button>
    OPEN SIMPLE DIALOG
    <text>OPEN SIMPLE DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Alerts
    <text>Alerts</text>
  </heading>
  <paragraph>
    <text>
      Alerts are urgent interruptions, requiring acknowledgement, that inform
      the user about a situation.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Most alerts don't need titles. They summarize a decision in a
      sentence or two by either:
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <text>
        Asking a question (e.g. "Delete this conversation?")
      </text>
    </listitem>
    <listitem level="1">
      <text>Making a statement related to the action buttons</text>
    </listitem>
  </list>
  <paragraph>
    <text>
      Use title bar alerts only for high-risk situations, such as the potential
      loss of connectivity. Users should be able to understand the choices based
      on the title and button text alone.
    </text>
  </paragraph>
  <paragraph>
    <text>If a title is required:</text>
  </paragraph>
  <list>
    <listitem level="1">
      <text>
        Use a clear question or statement with an explanation in the content
        area, such as "Erase USB storage?".
      </text>
    </listitem>
    <listitem level="1">
      <text>
        Avoid apologies, ambiguity, or questions, such as "Warning!"
        or "Are you sure?"
      </text>
    </listitem>
  </list>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN ALERT DIALOG
    <text>OPEN ALERT DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Transitions
    <text>Transitions</text>
  </heading>
  <paragraph>
    <text>You can also swap out the transition, the next example uses</text>
    <code>$SOME_CODE</code>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    SLIDE IN ALERT DIALOG
    <text>SLIDE IN ALERT DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Form dialogs
    <text>Form dialogs</text>
  </heading>
  <paragraph>
    <text>
      Form dialogs allow users to fill out form fields within a dialog. For
      example, if your site prompts for potential subscribers to fill in their
      email address, they can fill out the email field and touch
      'Submit'.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN FORM DIALOG
    <text>OPEN FORM DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Customized dialogs
    <text>Customized dialogs</text>
  </heading>
  <paragraph>
    <text>
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link>overrides documentation page</link>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>The dialog has a close button added to aide usability.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN DIALOG
    <text>OPEN DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Full-screen dialogs
    <text>Full-screen dialogs</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN FULL-SCREEN DIALOG
    <text>OPEN FULL-SCREEN DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Optional sizes
    <text>Optional sizes</text>
  </heading>
  <paragraph>
    <text>You can set a dialog maximum width by using the</text>
    <code>$SOME_CODE</code>
    <text>enumerable in combination with the</text>
    <code>$SOME_CODE</code>
    <text>boolean. When the</text>
    <code>$SOME_CODE</code>
    <text>prop is true, the dialog will adapt based on the</text>
    <code>$SOME_CODE</code>
    <text>value.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN MAX-WIDTH DIALOG
    <text>OPEN MAX-WIDTH DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Responsive full-screen
    <text>Responsive full-screen</text>
  </heading>
  <paragraph>
    <text>You may make a dialog responsively full screen using</text>
    <link>
      useMediaQuery
      <code>$SOME_CODE</code>
    </link>
    <text>.</text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN RESPONSIVE DIALOG
    <text>OPEN RESPONSIVE DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Confirmation dialogs
    <text>Confirmation dialogs</text>
  </heading>
  <paragraph>
    <text>
      Confirmation dialogs require users to explicitly confirm their choice
      before an option is committed. For example, users can listen to multiple
      ringtones but only make a final selection upon touching "OK".
    </text>
  </paragraph>
  <paragraph>
    <text>
      Touching "Cancel" in a confirmation dialog, or pressing Back,
      cancels the action, discards any changes, and closes the dialog.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    <button disabled="true">
      Interruptions
      <text>Interruptions</text>
    </button>
    <combobox haspopup="menu">
      phone ringtone
      <text>Phone ringtone</text>
      <paragraph>
        <text>Dione</text>
      </paragraph>
    </combobox>
    <button disabled="true">
      Default notification ringtone Tethys
      <text>Default notification ringtone</text>
      <paragraph>
        <text>Tethys</text>
      </paragraph>
    </button>
  </group>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Draggable dialog
    <text>Draggable dialog</text>
  </heading>
  <paragraph>
    <text>You can create a draggable dialog by using</text>
    <link>react-draggable</link>
    <text>. To do so, you can pass the imported</text>
    <code>$SOME_CODE</code>
    <text>component as the</text>
    <code>$SOME_CODE</code>
    <text>of the</text>
    <code>$SOME_CODE</code>
    <text>component. This will make the entire dialog draggable.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN DRAGGABLE DIALOG
    <text>OPEN DRAGGABLE DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Scrolling long content
    <text>Scrolling long content</text>
  </heading>
  <paragraph>
    <text>
      When dialogs become too long for the user's viewport or device, they
      scroll.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <code>$SOME_CODE</code>
      <text>the content of the dialog scrolls within the paper element.</text>
    </listitem>
    <listitem level="1">
      <code>$SOME_CODE</code>
      <text>the content of the dialog scrolls within the body element.</text>
    </listitem>
  </list>
  <paragraph>
    <text>Try the demo below to see what we mean:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    SCROLL=PAPER
    <text>SCROLL=PAPER</text>
  </button>
  <button>
    SCROLL=BODY
    <text>SCROLL=BODY</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Performance
    <text>Performance</text>
  </heading>
  <paragraph>
    <text>Follow the</text>
    <link>Modal performance section</link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Limitations
    <text>Limitations</text>
  </heading>
  <paragraph>
    <text>Follow the</text>
    <link>Modal limitations section</link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Accessibility
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>Follow the</text>
    <link>Modal accessibility section</link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <link>
        <Dialog />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <DialogActions />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <DialogContent />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <DialogContentText />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <DialogTitle />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <Slide />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link>Backdrop</link>
    <group>
      Was this page helpful?
      <text>Was this page helpful?</text>
      <button pressed="false">Yes</button>
      <button pressed="false">No</button>
    </group>
    <link>Progress</link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/pagination/ 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Pagination
    <text>Pagination</text>
  </heading>
  <paragraph>
    <text>
      The Pagination component enables the user to select a specific page from a
      range of pages.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <link>Feedback</link>
    </listitem>
    <listitem level="1">
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem level="1">
      <link>Figma</link>
    </listitem>
    <listitem level="1">
      <link>Adobe</link>
    </listitem>
    <listitem level="1">
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Basic pagination
    <text>Basic pagination</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>Go to next page</button>
      </listitem>
    </list>
  </navigation>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>Go to next page</button>
      </listitem>
    </list>
  </navigation>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>Go to next page</button>
      </listitem>
    </list>
  </navigation>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem level="1">
        <button disabled="true">
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button disabled="true">
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button disabled="true">
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button disabled="true">
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button disabled="true">
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button disabled="true">
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button disabled="true">Go to next page</button>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Outlined pagination
    <text>Outlined pagination</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>Go to next page</button>
      </listitem>
    </list>
  </navigation>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>Go to next page</button>
      </listitem>
    </list>
  </navigation>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>Go to next page</button>
      </listitem>
    </list>
  </navigation>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem level="1">
        <button disabled="true">
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button disabled="true">
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button disabled="true">
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button disabled="true">
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button disabled="true">
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button disabled="true">
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button disabled="true">Go to next page</button>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Rounded pagination
    <text>Rounded pagination</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>Go to next page</button>
      </listitem>
    </list>
  </navigation>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>Go to next page</button>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Pagination size
    <text>Pagination size</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>Go to next page</button>
      </listitem>
    </list>
  </navigation>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>Go to next page</button>
      </listitem>
    </list>
  </navigation>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>Go to next page</button>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Buttons
    <text>Buttons</text>
  </heading>
  <paragraph>
    <text>
      You can optionally enable first-page and last-page buttons, or disable the
      previous-page and next-page buttons.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">Go to first page</button>
      </listitem>
      <listitem level="1">
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>Go to next page</button>
      </listitem>
      <listitem level="1">
        <button>Go to last page</button>
      </listitem>
    </list>
  </navigation>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Pagination ranges
    <text>Pagination ranges</text>
  </heading>
  <paragraph>
    <text>
      You can specify how many digits to display either side of current page
      with the
    </text>
    <code>$SOME_CODE</code>
    <text>prop, and adjacent to the start and end page number with the</text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button>Go to previous page</button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          page 6<text>6</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 11
          <text>11</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>Go to next page</button>
      </listitem>
    </list>
  </navigation>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button>Go to previous page</button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          page 6<text>6</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 7<text>7</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 11
          <text>11</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>Go to next page</button>
      </listitem>
    </list>
  </navigation>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button>Go to previous page</button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          page 6<text>6</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 11
          <text>11</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>Go to next page</button>
      </listitem>
    </list>
  </navigation>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button>Go to previous page</button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          page 6<text>6</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 7<text>7</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 11
          <text>11</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>Go to next page</button>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Controlled pagination
    <text>Controlled pagination</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Page:1</text>
  </paragraph>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>Go to next page</button>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Router integration
    <text>Router integration</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>Go to next page</button>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    usePagination
    <code>$SOME_CODE</code>
  </heading>
  <paragraph>
    <text>For advanced customization use cases, a headless</text>
    <code>$SOME_CODE</code>
    <text>
      hook is exposed. It accepts almost the same options as the Pagination
      component minus all the props related to the rendering of JSX. The
      Pagination component is built on this hook.
    </text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    <list>
      <listitem level="1">
        <button disabled="true">
          previous
          <text>previous</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          next
          <text>next</text>
        </button>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Table pagination
    <text>Table pagination</text>
  </heading>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>
      component was designed to paginate a list of arbitrary items when infinite
      loading isn't used. It's preferred in contexts where SEO is
      important, for instance, a blog.
    </text>
  </paragraph>
  <paragraph>
    <text>
      For the pagination of a large set of tabular data, you should use the
    </text>
    <code>$SOME_CODE</code>
    <text>component.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Rows per page:</text>
  </paragraph>
  <combobox haspopup="listbox">Rows per page: 10</combobox>
  <textbox value="10"></textbox>
  <paragraph>
    <text>21-30 of 100</text>
  </paragraph>
  <button description="Go to previous page">Go to previous page</button>
  <button description="Go to next page">Go to next page</button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <blockquote>
    <paragraph>
      <text>‚ö†Ô∏è Note that the</text>
      <code>$SOME_CODE</code>
      <text>
        page prop starts at 1 to match the requirement of including the value in
        the URL, while the
      </text>
      <code>$SOME_CODE</code>
      <text>
        page prop stats at 0 to match the requirement of zero-based JavaScript
        arrays that comes with rendering a lot of tabular data.
      </text>
    </paragraph>
  </blockquote>
  <paragraph>
    <text>You can learn more about this use case in the</text>
    <link>table section</link>
    <text>of the documentation.</text>
  </paragraph>
  <heading level="2">
    Accessibility
    <text>Accessibility</text>
  </heading>
  <heading level="3">
    ARIA
    <text>ARIA</text>
  </heading>
  <paragraph>
    <text>
      The root node has a role of "navigation" and aria-label
      "pagination navigation" by default. The page items have an
      aria-label that identifies the purpose of the item ("go to first
      page", "go to previous page", "go to page 1"
      etc.). You can override these using the
    </text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <heading level="3">
    Keyboard
    <text>Keyboard</text>
  </heading>
  <paragraph>
    <text>
      The pagination items are in tab order, with a tabindex of "0".
    </text>
  </paragraph>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <link>
        <Pagination />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <PaginationItem />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link>Menu</link>
    <group>
      Was this page helpful?
      <text>Was this page helpful?</text>
      <button pressed="false">Yes</button>
      <button pressed="false">No</button>
    </group>
    <link>Speed Dial</link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/pickers 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Date / Time pickers
    <text>Date / Time pickers</text>
  </heading>
  <paragraph>
    <text>
      Date pickers and Time pickers provide a simple way to select a single
      value from a pre-determined set.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <text>
        On mobile, pickers are best suited for display in confirmation dialog.
      </text>
    </listitem>
    <listitem level="1">
      <text>
        For inline display, such as on a form, consider using compact controls
        such as segmented dropdown buttons.
      </text>
    </listitem>
  </list>
  <list>
    <listitem level="1">
      <link>Feedback</link>
    </listitem>
    <listitem level="1">
      <link>WAI-ARIA</link>
    </listitem>
    <listitem level="1">
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem level="1">
      <link>Material Design</link>
    </listitem>
    <listitem level="1">
      <link>Figma</link>
    </listitem>
    <listitem level="1">
      <link>Adobe</link>
    </listitem>
    <listitem level="1">
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    React components
    <text>React components</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Date picker desktop</text>
  </Label>
  <textbox value="08/18/2014">
    mm/dd/yyyy
    <text>08/18/2014</text>
  </textbox>
  <button>Choose date, selected date is Aug 18, 2014</button>
  <paragraph>
    <text>mm/dd/yyyy</text>
  </paragraph>
  <Label>
    <text>Date picker mobile</text>
  </Label>
  <textbox readonly="true" value="08/18/2014">
    Choose date, selected date is Aug 18, 2014
    <text>08/18/2014</text>
  </textbox>
  <Label>
    <text>Time picker</text>
  </Label>
  <textbox value="09:11 pm">
    hh:mm (a|p)m
    <text>09:11 pm</text>
  </textbox>
  <button>Choose time, selected time is 9:11 PM</button>
  <paragraph>
    <text>hh:mm (a|p)m</text>
  </paragraph>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Native pickers
    <text>Native pickers</text>
  </heading>
  <paragraph>
    <text>‚ö†Ô∏è Native input controls support by browsers</text>
    <link>isn't perfect</link>
    <text>.</text>
  </paragraph>
  <heading level="3">
    Date picker
    <text>Date picker</text>
  </heading>
  <paragraph>
    <text>A native datepicker example with</text>
    <code>$SOME_CODE</code>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <Label>
      <text>Birthday</text>
    </Label>
    <Date value="2017-05-24">
      Birthday
      <spinbutton value="5" valuemax="12" valuemin="1" valuetext="05">
        Month
        <text>05</text>
      </spinbutton>
      <text>/</text>
      <spinbutton value="24" valuemax="31" valuemin="1" valuetext="24">
        Day
        <text>24</text>
      </spinbutton>
      <text>/</text>
      <spinbutton value="2017" valuemax="275760" valuemin="1" valuetext="2017">
        Year
        <text>2017</text>
      </spinbutton>
    </Date>
  </form>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="3">
    Date & Time picker
    <text>Date & Time picker</text>
  </heading>
  <paragraph>
    <text>A native date & time picker example with</text>
    <code>$SOME_CODE</code>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <Label>
      <text>Next appointment</text>
    </Label>
    <DateTime value="2017-05-24T10:30">
      Next appointment
      <spinbutton value="5" valuemax="12" valuemin="1" valuetext="05">
        Month
        <text>05</text>
      </spinbutton>
      <text>/</text>
      <spinbutton value="24" valuemax="31" valuemin="1" valuetext="24">
        Day
        <text>24</text>
      </spinbutton>
      <text>/</text>
      <spinbutton value="2017" valuemax="275760" valuemin="1" valuetext="2017">
        Year
        <text>2017</text>
      </spinbutton>
      <text></text>
      <spinbutton value="10" valuemax="12" valuemin="1" valuetext="10">
        Hours
        <text>10</text>
      </spinbutton>
      <text>:</text>
      <spinbutton value="30" valuemax="59" valuemin="0" valuetext="30">
        Minutes
        <text>30</text>
      </spinbutton>
      <text></text>
      <spinbutton value="1" valuemax="2" valuemin="1" valuetext="AM">
        AM/PM
        <text>AM</text>
      </spinbutton>
    </DateTime>
  </form>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="3">
    Time picker
    <text>Time picker</text>
  </heading>
  <paragraph>
    <text>A native time picker example with</text>
    <code>$SOME_CODE</code>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <Label>
      <text>Alarm clock</text>
    </Label>
    <InputTime value="07:30">
      Alarm clock
      <spinbutton value="7" valuemax="12" valuemin="1" valuetext="07">
        Hours
        <text>07</text>
      </spinbutton>
      <text>:</text>
      <spinbutton value="30" valuemax="59" valuemin="0" valuetext="30">
        Minutes
        <text>30</text>
      </spinbutton>
      <text></text>
      <spinbutton value="1" valuemax="2" valuemin="1" valuetext="AM">
        AM/PM
        <text>AM</text>
      </spinbutton>
    </InputTime>
  </form>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <link>
        <TextField />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link>About the lab üß™</link>
    <group>
      Was this page helpful?
      <text>Was this page helpful?</text>
      <button pressed="false">Yes</button>
      <button pressed="false">No</button>
    </group>
    <link>Date Picker</link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/radio-buttons 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Radio
    <text>Radio</text>
  </heading>
  <paragraph>
    <text>Radio buttons allow the user to select one option from a set.</text>
  </paragraph>
  <paragraph>
    <text>
      Use radio buttons when the user needs to see all available options. If
      available options can be collapsed, consider using a dropdown menu because
      it uses less space.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Radio buttons should have the most commonly used option selected by
      default.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <link>Feedback</link>
    </listitem>
    <listitem level="1">
      <link>WAI-ARIA</link>
    </listitem>
    <listitem level="1">
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem level="1">
      <link>Material Design</link>
    </listitem>
    <listitem level="1">
      <link>Figma</link>
    </listitem>
    <listitem level="1">
      <link>Adobe</link>
    </listitem>
    <listitem level="1">
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Radio group
    <text>Radio group</text>
  </heading>
  <paragraph>
    <code>$SOME_CODE</code>
    <text>is a helpful wrapper used to group</text>
    <code>$SOME_CODE</code>
    <text>
      components that provides an easier API, and proper keyboard accessibility
      to the group.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    Gender
    <Legend>
      <text>Gender</text>
    </Legend>
    <radiogroup>
      gender
      <radio checked="true">Female</radio>
      <radio checked="false">Male</radio>
      <radio checked="false">Other</radio>
    </radiogroup>
  </group>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="3">
    Direction
    <text>Direction</text>
  </heading>
  <paragraph>
    <text>To lay out the buttons horizontally, set the</text>
    <code>$SOME_CODE</code>
    <text>prop:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    Gender
    <Legend>
      <text>Gender</text>
    </Legend>
    <radiogroup>
      gender
      <radio checked="false">Female</radio>
      <radio checked="false">Male</radio>
      <radio checked="false">Other</radio>
      <radio checked="false" disabled="true">
        other
      </radio>
    </radiogroup>
  </group>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="3">
    Controlled
    <text>Controlled</text>
  </heading>
  <paragraph>
    <text>You can control the radio with the</text>
    <code>$SOME_CODE</code>
    <text>and</text>
    <code>$SOME_CODE</code>
    <text>props:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    Gender
    <Legend>
      <text>Gender</text>
    </Legend>
    <radiogroup>
      gender
      <radio checked="true">Female</radio>
      <radio checked="false">Male</radio>
    </radiogroup>
  </group>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Standalone radio buttons
    <text>Standalone radio buttons</text>
  </heading>
  <paragraph>
    <code>$SOME_CODE</code>
    <text>can also be used standalone, without the RadioGroup wrapper.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <radio checked="true">A</radio>
  <radio checked="false">B</radio>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Size
    <text>Size</text>
  </heading>
  <paragraph>
    <text>Use the</text>
    <code>$SOME_CODE</code>
    <text>
      prop or customize the font size of the svg icons to change the size of the
      radios.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <radio checked="true">a</radio>
  <radio checked="false">b</radio>
  <radio checked="false">c</radio>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Color
    <text>Color</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <radio checked="true">a</radio>
  <radio checked="false">b</radio>
  <radio checked="false">c</radio>
  <radio checked="false">d</radio>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Label placement
    <text>Label placement</text>
  </heading>
  <paragraph>
    <text>You can change the placement of the label with the</text>
    <code>$SOME_CODE</code>
    <text>component's</text>
    <code>$SOME_CODE</code>
    <text>prop:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    labelPlacement
    <Legend>
      <text>labelPlacement</text>
    </Legend>
    <radiogroup>
      position
      <radio checked="true">Top</radio>
      <radio checked="false">Start</radio>
      <radio checked="false">Bottom</radio>
      <radio checked="false">End</radio>
    </radiogroup>
  </group>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Show error
    <text>Show error</text>
  </heading>
  <paragraph>
    <text>
      In general, radio buttons should have a value selected by default. If this
      is not the case, you can display an error if no value is selected when the
      form is submitted:
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <group>
      Pop quiz: Material-UI is...
      <Legend>
        <text>Pop quiz: Material-UI is...</text>
      </Legend>
      <radiogroup>
        quiz
        <radio checked="false">The best!</radio>
        <radio checked="false">The worst.</radio>
      </radiogroup>
      <paragraph>
        <text>Choose wisely</text>
      </paragraph>
      <button>
        CHECK ANSWER
        <text>CHECK ANSWER</text>
      </button>
    </group>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Customized radios
    <text>Customized radios</text>
  </heading>
  <paragraph>
    <text>
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link>overrides documentation page</link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    Gender
    <Legend>
      <text>Gender</text>
    </Legend>
    <radiogroup>
      gender
      <radio checked="true">Female</radio>
      <radio checked="false">Male</radio>
      <radio checked="false">Other</radio>
      <radio checked="false" disabled="true">
        (Disabled option)
      </radio>
    </radiogroup>
  </group>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    useRadioGroup
    <code>$SOME_CODE</code>
  </heading>
  <paragraph>
    <text>For advanced customization use cases, a</text>
    <code>$SOME_CODE</code>
    <text>
      hook is exposed. It returns the context value of the parent radio group.
      The Radio component uses this hook internally.
    </text>
  </paragraph>
  <heading level="3">
    API
    <text>API</text>
  </heading>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="4">
    Returns
    <text>Returns</text>
  </heading>
  <paragraph>
    <code>$SOME_CODE</code>
    <text>(object):</text>
  </paragraph>
  <list>
    <listitem level="1">
      <code>$SOME_CODE</code>
      <text>
        (string[optional]): The name used to reference the value of the control.
      </text>
    </listitem>
    <listitem level="1">
      <code>$SOME_CODE</code>
      <text>
        (func[optional]): Callback fired when a radio button is selected.
      </text>
    </listitem>
    <listitem level="1">
      <code>$SOME_CODE</code>
      <text>(any[optional]): Value of the selected radio button.</text>
    </listitem>
  </list>
  <heading level="4">
    Example
    <text>Example</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <radiogroup>
    <radio checked="true">First</radio>
    <radio checked="false">Second</radio>
  </radiogroup>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    When to use
    <text>When to use</text>
  </heading>
  <list>
    <listitem level="1">
      <link>Checkboxes vs. Radio Buttons</link>
    </listitem>
  </list>
  <heading level="2">
    Accessibility
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(WAI-ARIA:</text>
    <link>https://www.w3.org/TR/wai-aria-practices/#radiobutton</link>
    <text>)</text>
  </paragraph>
  <list>
    <listitem level="1">
      <text>
        All form controls should have labels, and this includes radio buttons,
        checkboxes, and switches. In most cases, this is done by using the
      </text>
      <code>$SOME_CODE</code>
      <text>element (</text>
      <link>FormControlLabel</link>
      <text>).</text>
    </listitem>
    <listitem level="1">
      <text>
        When a label can't be used, it's necessary to add an attribute
        directly to the input component. In this case, you can apply the
        additional attribute (e.g.
      </text>
      <code>$SOME_CODE</code>
      <text>,</text>
      <code>$SOME_CODE</code>
      <text>,</text>
      <code>$SOME_CODE</code>
      <text>) via the</text>
      <code>$SOME_CODE</code>
      <text>property.</text>
    </listitem>
  </list>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <link>
        <FormControl />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <FormControlLabel />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <FormLabel />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <Radio />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <RadioGroup />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link>Floating Action Button</link>
    <group>
      Was this page helpful?
      <text>Was this page helpful?</text>
      <button pressed="false">Yes</button>
      <button pressed="false">No</button>
    </group>
    <link>Rating</link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/rating/ 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Rating
    <text>Rating</text>
  </heading>
  <paragraph>
    <text>
      Ratings provide insight regarding others' opinions and experiences,
      and can allow the user to submit a rating of their own.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <link>Feedback</link>
    </listitem>
    <listitem level="1">
      <link>WAI-ARIA</link>
    </listitem>
    <listitem level="1">
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem level="1">
      <link>Figma</link>
    </listitem>
    <listitem level="1">
      <link>Adobe</link>
    </listitem>
    <listitem level="1">
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Basic rating
    <text>Basic rating</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Legend>
    <text>Controlled</text>
  </Legend>
  <radio checked="false">1 Star</radio>
  <radio checked="true">2 Stars</radio>
  <radio checked="false">3 Stars</radio>
  <radio checked="false">4 Stars</radio>
  <radio checked="false">5 Stars</radio>
  <radio checked="false">Empty</radio>
  <Legend>
    <text>Read only</text>
  </Legend>
  <img>2 Stars</img>
  <Legend>
    <text>Disabled</text>
  </Legend>
  <radio checked="false" disabled="true">
    1 Star
  </radio>
  <radio checked="true" disabled="true">
    2 Stars
  </radio>
  <radio checked="false" disabled="true">
    3 Stars
  </radio>
  <radio checked="false" disabled="true">
    4 Stars
  </radio>
  <radio checked="false" disabled="true">
    5 Stars
  </radio>
  <Legend>
    <text>No rating given</text>
  </Legend>
  <radio checked="false">1 Star</radio>
  <radio checked="false">2 Stars</radio>
  <radio checked="false">3 Stars</radio>
  <radio checked="false">4 Stars</radio>
  <radio checked="false">5 Stars</radio>
  <radio checked="true">Empty</radio>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Rating precision
    <text>Rating precision</text>
  </heading>
  <paragraph>
    <text>The rating can display any float number with the</text>
    <code>$SOME_CODE</code>
    <text>prop. Use the</text>
    <code>$SOME_CODE</code>
    <text>prop to define the minimum increment value change allowed.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <radio checked="false">0.5 Stars</radio>
  <radio checked="false">1 Star</radio>
  <radio checked="false">1.5 Stars</radio>
  <radio checked="false">2 Stars</radio>
  <radio checked="true">2.5 Stars</radio>
  <radio checked="false">3 Stars</radio>
  <radio checked="false">3.5 Stars</radio>
  <radio checked="false">4 Stars</radio>
  <radio checked="false">4.5 Stars</radio>
  <radio checked="false">5 Stars</radio>
  <radio checked="false">Empty</radio>
  <img>2.5 Stars</img>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Hover feedback
    <text>Hover feedback</text>
  </heading>
  <paragraph>
    <text>
      You can display a label on hover to help the user pick the correct rating
      value. The demo uses the
    </text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <radio checked="false">0.5 Stars</radio>
  <radio checked="false">1 Star</radio>
  <radio checked="false">1.5 Stars</radio>
  <radio checked="true">2 Stars</radio>
  <radio checked="false">2.5 Stars</radio>
  <radio checked="false">3 Stars</radio>
  <radio checked="false">3.5 Stars</radio>
  <radio checked="false">4 Stars</radio>
  <radio checked="false">4.5 Stars</radio>
  <radio checked="false">5 Stars</radio>
  <radio checked="false">Empty</radio>
  <text>Poor+</text>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Sizes
    <text>Sizes</text>
  </heading>
  <paragraph>
    <text>For larger or smaller ratings use the</text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <radio checked="false">1 Star</radio>
  <radio checked="true">2 Stars</radio>
  <radio checked="false">3 Stars</radio>
  <radio checked="false">4 Stars</radio>
  <radio checked="false">5 Stars</radio>
  <radio checked="false">Empty</radio>
  <radio checked="false">1 Star</radio>
  <radio checked="true">2 Stars</radio>
  <radio checked="false">3 Stars</radio>
  <radio checked="false">4 Stars</radio>
  <radio checked="false">5 Stars</radio>
  <radio checked="false">Empty</radio>
  <radio checked="false">1 Star</radio>
  <radio checked="true">2 Stars</radio>
  <radio checked="false">3 Stars</radio>
  <radio checked="false">4 Stars</radio>
  <radio checked="false">5 Stars</radio>
  <radio checked="false">Empty</radio>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Customized rating
    <text>Customized rating</text>
  </heading>
  <paragraph>
    <text>
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link>overrides documentation page</link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Legend>
    <text>Custom icon and color</text>
  </Legend>
  <radio checked="false">0.5 Hearts</radio>
  <radio checked="false">1 Heart</radio>
  <radio checked="false">1.5 Hearts</radio>
  <radio checked="true">2 Hearts</radio>
  <radio checked="false">2.5 Hearts</radio>
  <radio checked="false">3 Hearts</radio>
  <radio checked="false">3.5 Hearts</radio>
  <radio checked="false">4 Hearts</radio>
  <radio checked="false">4.5 Hearts</radio>
  <radio checked="false">5 Hearts</radio>
  <radio checked="false">Empty</radio>
  <Legend>
    <text>10 stars</text>
  </Legend>
  <radio checked="false">1 Star</radio>
  <radio checked="true">2 Stars</radio>
  <radio checked="false">3 Stars</radio>
  <radio checked="false">4 Stars</radio>
  <radio checked="false">5 Stars</radio>
  <radio checked="false">6 Stars</radio>
  <radio checked="false">7 Stars</radio>
  <radio checked="false">8 Stars</radio>
  <radio checked="false">9 Stars</radio>
  <radio checked="false">10 Stars</radio>
  <radio checked="false">Empty</radio>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Radio group
    <text>Radio group</text>
  </heading>
  <paragraph>
    <text>The rating is implemented with a radio group, set</text>
    <code>$SOME_CODE</code>
    <text>to restore the natural behavior.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <radio checked="false">1 Star</radio>
  <radio checked="true">2 Stars</radio>
  <radio checked="false">3 Stars</radio>
  <radio checked="false">4 Stars</radio>
  <radio checked="false">5 Stars</radio>
  <radio checked="false">Empty</radio>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Accessibility
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(</text>
    <link>WAI tutorial</link>
    <text>)</text>
  </paragraph>
  <paragraph>
    <text>The accessibility of this component relies on:</text>
  </paragraph>
  <list>
    <listitem level="1">
      <text>
        A radio group with its fields visually hidden. It contains six radio
        buttons, one for each star, and another for 0 stars that is checked by
        default. Be sure to provide a value for the
      </text>
      <code>$SOME_CODE</code>
      <text>prop that is unique to the parent form.</text>
    </listitem>
    <listitem level="1">
      <text>
        Labels for the radio buttons containing actual text (‚Äú1 Star‚Äù, ‚Äú2
        Stars‚Äù, ‚Ä¶). Be sure to provide a suitable function to the
      </text>
      <code>$SOME_CODE</code>
      <text>
        prop when the page is in a language other than English. You can use the
      </text>
      <link>included locales</link>
      <text>, or provide your own.</text>
    </listitem>
    <listitem level="1">
      <text>
        A visually distinct appearance for the rating icons. By default, the
        rating component uses both a difference of color and shape (filled and
        empty icons) to indicate the value. In the event that you are using
        color as the only means to indicate the value, the information should
        also be also displayed as text, as in this demo. This is important to
        match
      </text>
      <link>success Criterion 1.4.1</link>
      <text>of WCAG2.1.</text>
    </listitem>
  </list>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <img>3.5 Stars</img>
  <text>Good</text>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="3">
    ARIA
    <text>ARIA</text>
  </heading>
  <paragraph>
    <text>
      The read only rating has a role of "img", and an aria-label that
      describes the displayed rating.
    </text>
  </paragraph>
  <heading level="3">
    Keyboard
    <text>Keyboard</text>
  </heading>
  <paragraph>
    <text>
      Because the rating component uses radio buttons, keyboard interaction
      follows the native browser behavior. Tab will focus the current rating,
      and cursor keys control the selected rating.
    </text>
  </paragraph>
  <paragraph>
    <text>The read only rating is not focusable.</text>
  </paragraph>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <link>
        <Rating />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link>Radio button</link>
    <group>
      Was this page helpful?
      <text>Was this page helpful?</text>
      <button pressed="false">Yes</button>
      <button pressed="false">No</button>
    </group>
    <link>Select</link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/selects/ 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Select
    <text>Select</text>
  </heading>
  <paragraph>
    <text>
      Select components are used for collecting user provided information from a
      list of options.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <link>Feedback</link>
    </listitem>
    <listitem level="1">
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem level="1">
      <link>Figma</link>
    </listitem>
    <listitem level="1">
      <link>Adobe</link>
    </listitem>
    <listitem level="1">
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Basic select
    <text>Basic select</text>
  </heading>
  <paragraph>
    <text>
      Menus are positioned over their emitting elements such that the currently
      selected menu item appears on top of the emitting element.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Age</text>
  </Label>
  <combobox haspopup="listbox">
    Age ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox></textbox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Advanced features
    <text>Advanced features</text>
  </heading>
  <paragraph>
    <text>
      The Select component is meant to be interchangeable with a native
    </text>
    <code>$SOME_CODE</code>
    <text>element.</text>
  </paragraph>
  <paragraph>
    <text>
      If you are looking for more advanced features, like combobox, multiselect,
      autocomplete, async or creatable support, head to the
    </text>
    <link>
      Autocomplete component
      <code>$SOME_CODE</code>
    </link>
    <text>
      . It's meant to be an improved version of the
      "react-select" and "downshift" packages.
    </text>
  </paragraph>
  <heading level="2">
    Props
    <text>Props</text>
  </heading>
  <paragraph>
    <text>The Select component is implemented as a custom</text>
    <code>$SOME_CODE</code>
    <text>element of the</text>
    <link>InputBase</link>
    <text>. It extends the</text>
    <link>text field components</link>
    <text>sub-components, either the</text>
    <link>OutlinedInput</link>
    <text>,</text>
    <link>Input</link>
    <text>, or</text>
    <link>FilledInput</link>
    <text>
      , depending on the variant selected. It shares the same styles and many of
      the same props. Refer to the respective component's API page for
      details.
    </text>
  </paragraph>
  <heading level="3">
    Filled and standard variants
    <text>Filled and standard variants</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Age</text>
  </Label>
  <text>¬†</text>
  <combobox haspopup="listbox">
    Age ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox></textbox>
  <Label>
    <text>Age</text>
  </Label>
  <text>¬†</text>
  <combobox haspopup="listbox">
    Age ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox></textbox>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="3">
    Labels and helper text
    <text>Labels and helper text</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Age</text>
  </Label>
  <combobox haspopup="listbox">
    Age ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox></textbox>
  <paragraph>
    <text>With label + helper text</text>
  </paragraph>
  <combobox haspopup="listbox">
    Without label
    <text>None</text>
  </combobox>
  <textbox></textbox>
  <paragraph>
    <text>Without label</text>
  </paragraph>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="3">
    Auto width
    <text>Auto width</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Age</text>
  </Label>
  <combobox haspopup="listbox">
    Age ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox></textbox>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="3">
    Other props
    <text>Other props</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Age</text>
  </Label>
  <combobox disabled="true" haspopup="listbox">
    Age ‚Äã<text>‚Äã</text>
  </combobox>
  <paragraph>
    <text>Disabled</text>
  </paragraph>
  <Label>
    <text>Age</text>
  </Label>
  <combobox haspopup="listbox">
    Age ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox></textbox>
  <paragraph>
    <text>Error</text>
  </paragraph>
  <Label>
    <text>Age</text>
  </Label>
  <combobox haspopup="listbox">
    Age ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox></textbox>
  <paragraph>
    <text>Read only</text>
  </paragraph>
  <Label>
    <text>Age</text>
  </Label>
  <combobox haspopup="listbox">
    Age ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox invalid="true" required="true"></textbox>
  <paragraph>
    <text>Required</text>
  </paragraph>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Native select
    <text>Native select</text>
  </heading>
  <paragraph>
    <text>
      As the user experience can be improved on mobile using the native select
      of the platform, we allow such pattern.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Age</text>
  </Label>
  <text>¬†</text>
  <combobox value="Thirty">
    Age
    <MenuListPopup>
      <menuitem>Ten</menuitem>
      <menuitem>Twenty</menuitem>
      <menuitem selected="true">Thirty</menuitem>
    </MenuListPopup>
  </combobox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    TextField
    <text>TextField</text>
  </heading>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>
      wrapper component is a complete form control including a label, input and
      help text. You can find an example with the select mode
    </text>
    <link>in this section</link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Customized selects
    <text>Customized selects</text>
  </heading>
  <paragraph>
    <text>
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link>overrides documentation page</link>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>The first step is to style the</text>
    <code>$SOME_CODE</code>
    <text>
      component. Once it's styled, you can either use it directly as a text
      field or provide it to the select
    </text>
    <code>$SOME_CODE</code>
    <text>prop to have a</text>
    <code>$SOME_CODE</code>
    <text>field. Notice that the</text>
    <code>$SOME_CODE</code>
    <text>
      variant is easier to customize, since it does not wrap the contents in a
    </text>
    <code>$SOME_CODE</code>
    <text>/</text>
    <code>$SOME_CODE</code>
    <text>markup.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Age</text>
  </Label>
  <textbox>Age</textbox>
  <Label>
    <text>Age</text>
  </Label>
  <combobox haspopup="listbox">
    Age ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox></textbox>
  <Label>
    <text>Age</text>
  </Label>
  <combobox value="None">
    Age
    <MenuListPopup>
      <menuitem selected="true"></menuitem>
      <menuitem>Ten</menuitem>
      <menuitem>Twenty</menuitem>
      <menuitem>Thirty</menuitem>
    </MenuListPopup>
  </combobox>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <paragraph>
    <text>üé® If you are looking for inspiration, you can check</text>
    <link>MUI Treasury's customization examples</link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Multiple select
    <text>Multiple select</text>
  </heading>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>
      component can handle multiple selections. It's enabled with the
    </text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <paragraph>
    <text>
      Like with the single selection, you can pull out the new value by
      accessing
    </text>
    <code>$SOME_CODE</code>
    <text>in the</text>
    <code>$SOME_CODE</code>
    <text>callback. It's always an array.</text>
  </paragraph>
  <heading level="3">
    Default
    <text>Default</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Name</text>
  </Label>
  <combobox haspopup="listbox">
    Name ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox></textbox>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="3">
    Checkmarks
    <text>Checkmarks</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Tag</text>
  </Label>
  <combobox haspopup="listbox">
    Tag ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox></textbox>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="3">
    Chip
    <text>Chip</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Chip</text>
  </Label>
  <combobox haspopup="listbox">
    Chip ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox></textbox>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="3">
    Placeholder
    <text>Placeholder</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <combobox haspopup="listbox">
    Without label
    <text>Placeholder</text>
  </combobox>
  <textbox></textbox>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="3">
    Native
    <text>Native</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Native</text>
  </Label>
  <listbox multiselectable="true">
    Native
    <option>Oliver Hansen</option>
    <option>Van Henry</option>
    <option>April Tucker</option>
    <option>Ralph Hubbard</option>
    <option>Omar Alexander</option>
    <option>Carlos Abbott</option>
    <option>Miriam Wagner</option>
    <option>Bradley Wilkerson</option>
    <option>Virginia Andrews</option>
    <option>Kelly Snyder</option>
  </listbox>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Controlled open select
    <text>Controlled open select</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN THE SELECT
    <text>OPEN THE SELECT</text>
  </button>
  <Label>
    <text>Age</text>
  </Label>
  <combobox haspopup="listbox">
    Age ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox></textbox>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    With a dialog
    <text>With a dialog</text>
  </heading>
  <paragraph>
    <text>
      While it's discouraged by the Material Design specification, you can
      use a select inside a dialog.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN SELECT DIALOG
    <text>OPEN SELECT DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Grouping
    <text>Grouping</text>
  </heading>
  <paragraph>
    <text>Display categories with the</text>
    <code>$SOME_CODE</code>
    <text>component or the native</text>
    <code>$SOME_CODE</code>
    <text>element.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Grouping</text>
  </Label>
  <combobox value="None">
    Grouping
    <MenuListPopup>
      <menuitem selected="true"></menuitem>
      <menuitem>Option 1</menuitem>
      <menuitem>Option 2</menuitem>
      <menuitem>Option 3</menuitem>
      <menuitem>Option 4</menuitem>
    </MenuListPopup>
  </combobox>
  <Label>
    <text>Grouping</text>
  </Label>
  <combobox haspopup="listbox">
    ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox></textbox>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Accessibility
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>To properly label your</text>
    <code>$SOME_CODE</code>
    <text>input you need an extra element with an</text>
    <code>$SOME_CODE</code>
    <text>that contains a label. That</text>
    <code>$SOME_CODE</code>
    <text>needs to match the</text>
    <code>$SOME_CODE</code>
    <text>of the</text>
    <code>$SOME_CODE</code>
    <text>e.g.</text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>Alternatively a</text>
    <code>$SOME_CODE</code>
    <text>with an</text>
    <code>$SOME_CODE</code>
    <text>and</text>
    <code>$SOME_CODE</code>
    <text>creates the proper markup and ids for you:</text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>For a</text>
    <link>native select</link>
    <text>, you should mention a label by giving the value of the</text>
    <code>$SOME_CODE</code>
    <text>attribute of the select element to the</text>
    <code>$SOME_CODE</code>
    <text>'s</text>
    <code>$SOME_CODE</code>
    <text>attribute:</text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <link>
        <NativeSelect />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <Select />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link>Rating</link>
    <group>
      Was this page helpful?
      <text>Was this page helpful?</text>
      <button pressed="false">Yes</button>
      <button pressed="false">No</button>
    </group>
    <link>Slider</link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/slider 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Slider
    <text>Slider</text>
  </heading>
  <paragraph>
    <text>Sliders allow users to make selections from a range of values.</text>
  </paragraph>
  <paragraph>
    <text>
      Sliders reflect a range of values along a bar, from which users may select
      a single value. They are ideal for adjusting settings such as volume,
      brightness, or applying image filters.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <link>Feedback</link>
    </listitem>
    <listitem level="1">
      <link>WAI-ARIA</link>
    </listitem>
    <listitem level="1">
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem level="1">
      <link>Material Design</link>
    </listitem>
    <listitem level="1">
      <link>Figma</link>
    </listitem>
    <listitem level="1">
      <link>Adobe</link>
    </listitem>
    <listitem level="1">
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Continuous sliders
    <text>Continuous sliders</text>
  </heading>
  <paragraph>
    <text>
      Continuous sliders allow users to select a value along a subjective range.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <slider
    orientation="horizontal"
    value="30"
    valuemax="100"
    valuemin="0"
    valuetext=""
  >
    Volume
  </slider>
  <slider
    disabled="true"
    orientation="horizontal"
    value="30"
    valuemax="100"
    valuemin="0"
    valuetext=""
  >
    Disabled slider
  </slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Discrete sliders
    <text>Discrete sliders</text>
  </heading>
  <paragraph>
    <text>
      Discrete sliders can be adjusted to a specific value by referencing its
      value indicator. You can generate a mark for each step with
    </text>
    <code>$SOME_CODE</code>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <slider
    orientation="horizontal"
    value="30"
    valuemax="110"
    valuemin="10"
    valuetext="30¬∞C"
  >
    Temperature
  </slider>
  <slider
    disabled="true"
    orientation="horizontal"
    value="30"
    valuemax="110"
    valuemin="10"
    valuetext=""
  ></slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="3">
    Small steps
    <text>Small steps</text>
  </heading>
  <paragraph>
    <text>You can change the default step increment.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <slider
    orientation="horizontal"
    value="5.000000058430487e-8"
    valuemax="1.0000000116860974e-7"
    valuemin="-5.000000058430487e-8"
    valuetext="5e-8¬∞C"
  >
    Small steps
  </slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="3">
    Custom marks
    <text>Custom marks</text>
  </heading>
  <paragraph>
    <text>You can have custom marks by providing a rich array to the</text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <slider
    orientation="horizontal"
    value="20"
    valuemax="100"
    valuemin="0"
    valuetext="20¬∞C"
  >
    Custom marks
  </slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="3">
    Restricted values
    <text>Restricted values</text>
  </heading>
  <paragraph>
    <text>
      You can restrict the selectable values to those provided with the
    </text>
    <code>$SOME_CODE</code>
    <text>prop with</text>
    <code>$SOME_CODE</code>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <slider
    orientation="horizontal"
    value="20"
    valuemax="100"
    valuemin="0"
    valuetext="20¬∞C"
  >
    Restricted values
  </slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="3">
    Label always visible
    <text>Label always visible</text>
  </heading>
  <paragraph>
    <text>You can force the thumb label to be always visible with</text>
    <code>$SOME_CODE</code>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <slider
    orientation="horizontal"
    value="80"
    valuemax="100"
    valuemin="0"
    valuetext="80¬∞C"
  >
    Always visible
  </slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Range slider
    <text>Range slider</text>
  </heading>
  <paragraph>
    <text>
      The slider can be used to set the start and end of a range by supplying an
      array of values to the
    </text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <slider
    orientation="horizontal"
    value="20"
    valuemax="100"
    valuemin="0"
    valuetext="20¬∞C"
  >
    Temperature range
  </slider>
  <slider
    orientation="horizontal"
    value="37"
    valuemax="100"
    valuemin="0"
    valuetext="37¬∞C"
  >
    Temperature range
  </slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="3">
    Minimum distance
    <text>Minimum distance</text>
  </heading>
  <paragraph>
    <text>You can enforce a minimum distance between values in the</text>
    <code>$SOME_CODE</code>
    <text>
      event handler. By default, when you move the pointer over a thumb while
      dragging another thumb, the active thumb will swap to the hovered thumb.
      You can disable this behavior with the
    </text>
    <code>$SOME_CODE</code>
    <text>
      prop. If you want the range to shift when reaching minimum distance, you
      can utilize the
    </text>
    <code>$SOME_CODE</code>
    <text>parameter in</text>
    <code>$SOME_CODE</code>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <slider
    orientation="horizontal"
    value="20"
    valuemax="100"
    valuemin="0"
    valuetext="20¬∞C"
  >
    Minimum distance
  </slider>
  <slider
    orientation="horizontal"
    value="37"
    valuemax="100"
    valuemin="0"
    valuetext="37¬∞C"
  >
    Minimum distance
  </slider>
  <slider
    orientation="horizontal"
    value="20"
    valuemax="100"
    valuemin="0"
    valuetext="20¬∞C"
  >
    Minimum distance shift
  </slider>
  <slider
    orientation="horizontal"
    value="37"
    valuemax="100"
    valuemin="0"
    valuetext="37¬∞C"
  >
    Minimum distance shift
  </slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Slider with input field
    <text>Slider with input field</text>
  </heading>
  <paragraph>
    <text>In this example, an input allows a discrete value to be set.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Volume</text>
  </paragraph>
  <slider
    orientation="horizontal"
    value="30"
    valuemax="100"
    valuemin="0"
    valuetext=""
  >
    Volume
  </slider>
  <text>¬†</text>
  <spinbutton value="30" valuemax="100" valuemin="0" valuetext="">
    Volume
    <text>30</text>
  </spinbutton>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Color
    <text>Color</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <slider
    orientation="horizontal"
    value="30"
    valuemax="100"
    valuemin="0"
    valuetext="30¬∞C"
  >
    Temperature
  </slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Customized sliders
    <text>Customized sliders</text>
  </heading>
  <paragraph>
    <text>
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link>overrides documentation page</link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>iOS</text>
  </paragraph>
  <slider
    orientation="horizontal"
    value="60"
    valuemax="100"
    valuemin="0"
    valuetext=""
  >
    ios slider
  </slider>
  <paragraph>
    <text>pretto.fr</text>
  </paragraph>
  <slider
    orientation="horizontal"
    value="20"
    valuemax="100"
    valuemin="0"
    valuetext=""
  >
    pretto slider
  </slider>
  <paragraph>
    <text>Tooltip value label</text>
  </paragraph>
  <slider
    orientation="horizontal"
    value="20"
    valuemax="100"
    valuemin="0"
    valuetext=""
  >
    custom thumb label
  </slider>
  <paragraph>
    <text>Airbnb</text>
  </paragraph>
  <slider
    orientation="horizontal"
    value="20"
    valuemax="100"
    valuemin="0"
    valuetext=""
  >
    Minimum price
  </slider>
  <slider
    orientation="horizontal"
    value="40"
    valuemax="100"
    valuemin="0"
    valuetext=""
  >
    Maximum price
  </slider>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Vertical sliders
    <text>Vertical sliders</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <slider
    orientation="horizontal"
    value="30"
    valuemax="100"
    valuemin="0"
    valuetext="30¬∞C"
  >
    Temperature
  </slider>
  <slider
    disabled="true"
    orientation="horizontal"
    value="30"
    valuemax="100"
    valuemin="0"
    valuetext=""
  >
    Temperature
  </slider>
  <slider
    orientation="horizontal"
    value="20"
    valuemax="100"
    valuemin="0"
    valuetext="20¬∞C"
  >
    Temperature
  </slider>
  <slider
    orientation="horizontal"
    value="37"
    valuemax="100"
    valuemin="0"
    valuetext="37¬∞C"
  >
    Temperature
  </slider>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <paragraph>
    <text>
      WARNING: Chrome, Safari and newer Edge versions i.e. any browser based on
      WebKit exposes
    </text>
    <code>$SOME_CODE</code>
    <text>as horizontal (</text>
    <link>chromium issue #1158217</link>
    <text>). By applying</text>
    <code>$SOME_CODE</code>
    <text>the slider is exposed as vertical.</text>
  </paragraph>
  <paragraph>
    <text>However, by applying</text>
    <code>$SOME_CODE</code>
    <text>
      keyboard navigation for horizontal keys (Arrow Left,Arrow Right) is
      reversed (
    </text>
    <link>chromium issue #1162640</link>
    <text>
      ). Usually, up and right should increase and left and down should decrease
      the value. If you apply
    </text>
    <code>$SOME_CODE</code>
    <text>
      you could prevent keyboard navigation for horizontal arrow keys for a
      truly vertical slider. This might be less confusing to users compared to a
      change in direction.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <slider
    orientation="vertical"
    value="30"
    valuemax="100"
    valuemin="0"
    valuetext=""
  >
    Temperature
  </slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Track
    <text>Track</text>
  </heading>
  <paragraph>
    <text>The track shows the range available for user selection.</text>
  </paragraph>
  <heading level="3">
    Removed track
    <text>Removed track</text>
  </heading>
  <paragraph>
    <text>The track can be turned off with</text>
    <code>$SOME_CODE</code>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Removed track</text>
  </paragraph>
  <slider
    orientation="horizontal"
    value="30"
    valuemax="100"
    valuemin="0"
    valuetext="30¬∞C"
  >
    Removed track
  </slider>
  <paragraph>
    <text>Removed track range slider</text>
  </paragraph>
  <slider
    orientation="horizontal"
    value="20"
    valuemax="100"
    valuemin="0"
    valuetext="20¬∞C"
  >
    Removed track range slider
  </slider>
  <slider
    orientation="horizontal"
    value="37"
    valuemax="100"
    valuemin="0"
    valuetext="37¬∞C"
  >
    Removed track range slider
  </slider>
  <slider
    orientation="horizontal"
    value="50"
    valuemax="100"
    valuemin="0"
    valuetext="50¬∞C"
  >
    Removed track range slider
  </slider>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="3">
    Inverted track
    <text>Inverted track</text>
  </heading>
  <paragraph>
    <text>The track can be inverted with</text>
    <code>$SOME_CODE</code>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Inverted track</text>
  </paragraph>
  <slider
    orientation="horizontal"
    value="30"
    valuemax="100"
    valuemin="0"
    valuetext="30¬∞C"
  >
    Inverted track
  </slider>
  <paragraph>
    <text>Inverted track range</text>
  </paragraph>
  <slider
    orientation="horizontal"
    value="20"
    valuemax="100"
    valuemin="0"
    valuetext="20¬∞C"
  >
    Inverted track range
  </slider>
  <slider
    orientation="horizontal"
    value="37"
    valuemax="100"
    valuemin="0"
    valuetext="37¬∞C"
  >
    Inverted track range
  </slider>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Non-linear scale
    <text>Non-linear scale</text>
  </heading>
  <paragraph>
    <text>You can use the</text>
    <code>$SOME_CODE</code>
    <text>prop to represent the</text>
    <code>$SOME_CODE</code>
    <text>on a different scale.</text>
  </paragraph>
  <paragraph>
    <text>
      In the following demo, the valuexrepresents the value2^x. Increasingxby
      one increases the represented value by factor2.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Storage:1 MB</text>
  </paragraph>
  <slider
    orientation="horizontal"
    value="1024"
    valuemax="1073741824"
    valuemin="32"
    valuetext="1 MB"
  >
    Storage: 1 MB
  </slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Unstyled
    <text>Unstyled</text>
  </heading>
  <list>
    <listitem level="1">
      <text>üì¶</text>
      <link>5.6 kB gzipped</link>
    </listitem>
  </list>
  <paragraph>
    <text>
      The slider also comes with an unstyled version. It's ideal for doing
      heavy customizations and minimizing bundle size.
    </text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <slider
    orientation="horizontal"
    value="10"
    valuemax="100"
    valuemin="0"
    valuetext=""
  ></slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Accessibility
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(WAI-ARIA:</text>
    <link>https://www.w3.org/TR/wai-aria-practices/#slider</link>
    <text>)</text>
  </paragraph>
  <paragraph>
    <text>
      The component handles most of the work necessary to make it accessible.
      However, you need to make sure that:
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <text>Each thumb has a user-friendly label (</text>
      <code>$SOME_CODE</code>
      <text>,</text>
      <code>$SOME_CODE</code>
      <text>or</text>
      <code>$SOME_CODE</code>
      <text>prop).</text>
    </listitem>
    <listitem level="1">
      <text>
        Each thumb has a user-friendly text for its current value. This is not
        required if the value matches the semantics of the label. You can change
        the name with the
      </text>
      <code>$SOME_CODE</code>
      <text>or</text>
      <code>$SOME_CODE</code>
      <text>prop.</text>
    </listitem>
  </list>
  <heading level="2">
    Limitations
    <text>Limitations</text>
  </heading>
  <heading level="3">
    IE 11
    <text>IE 11</text>
  </heading>
  <paragraph>
    <text>
      The slider's value label is not centered in IE 11. The alignement is
      not handled to make customizations easier with the lastest browsers. You
      can solve the issue with:
    </text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <link>
        <Slider />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <SliderUnstyled />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link>Select</link>
    <group>
      Was this page helpful?
      <text>Was this page helpful?</text>
      <button pressed="false">Yes</button>
      <button pressed="false">No</button>
    </group>
    <link>Switch</link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/switches/ 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Switch
    <text>Switch</text>
  </heading>
  <paragraph>
    <text>Switches toggle the state of a single setting on or off.</text>
  </paragraph>
  <paragraph>
    <text>
      Switches are the preferred way to adjust settings on mobile. The option
      that the switch controls, as well as the state it's in, should be
      made clear from the corresponding inline label.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <link>Feedback</link>
    </listitem>
    <listitem level="1">
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem level="1">
      <link>Material Design</link>
    </listitem>
    <listitem level="1">
      <link>Figma</link>
    </listitem>
    <listitem level="1">
      <link>Adobe</link>
    </listitem>
    <listitem level="1">
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Basic switches
    <text>Basic switches</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">Switch demo</checkbox>
  <checkbox checked="false">Switch demo</checkbox>
  <checkbox checked="true" disabled="true">
    Switch demo
  </checkbox>
  <checkbox checked="false" disabled="true">
    Switch demo
  </checkbox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Label
    <text>Label</text>
  </heading>
  <paragraph>
    <text>You can provide a label to the</text>
    <code>$SOME_CODE</code>
    <text>thanks to the</text>
    <code>$SOME_CODE</code>
    <text>component.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">Label</checkbox>
  <checkbox checked="false" disabled="true">
    Disabled
  </checkbox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Size
    <text>Size</text>
  </heading>
  <paragraph>
    <text>Use the</text>
    <code>$SOME_CODE</code>
    <text>prop to change the size of the switch.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">Switch demo</checkbox>
  <checkbox checked="true">Switch demo</checkbox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Color
    <text>Color</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">Switch demo</checkbox>
  <checkbox checked="true">Switch demo</checkbox>
  <checkbox checked="true">Switch demo</checkbox>
  <checkbox checked="true">Switch demo</checkbox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Controlled
    <text>Controlled</text>
  </heading>
  <paragraph>
    <text>You can control the switch with the</text>
    <code>$SOME_CODE</code>
    <text>and</text>
    <code>$SOME_CODE</code>
    <text>props:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">controlled</checkbox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Switches with FormGroup
    <text>Switches with FormGroup</text>
  </heading>
  <paragraph>
    <code>$SOME_CODE</code>
    <text>
      is a helpful wrapper used to group selection controls components that
      provides an easier API. However, you are encouraged to use
    </text>
    <link>Checkboxes</link>
    <text>instead if multiple related controls are required. (See:</text>
    <link>When to use</link>
    <text>).</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    Assign responsibility
    <Legend>
      <text>Assign responsibility</text>
    </Legend>
    <checkbox checked="true">Gilad Gray</checkbox>
    <checkbox checked="false">Jason Killian</checkbox>
    <checkbox checked="true">Antoine Llorca</checkbox>
    <paragraph>
      <text>Be careful</text>
    </paragraph>
  </group>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Customized switches
    <text>Customized switches</text>
  </heading>
  <paragraph>
    <text>
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link>overrides documentation page</link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">Material-UI switch</checkbox>
  <checkbox checked="true">Android 12</checkbox>
  <checkbox checked="true">iOS style</checkbox>
  <paragraph>
    <text>Off</text>
  </paragraph>
  <checkbox checked="true">ant design</checkbox>
  <paragraph>
    <text>On</text>
  </paragraph>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <paragraph>
    <text>üé® If you are looking for inspiration, you can check</text>
    <link>MUI Treasury's customization examples</link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Label placement
    <text>Label placement</text>
  </heading>
  <paragraph>
    <text>You can change the placement of the label:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    Label placement
    <Legend>
      <text>Label placement</text>
    </Legend>
    <checkbox checked="false">Top</checkbox>
    <checkbox checked="false">Start</checkbox>
    <checkbox checked="false">Bottom</checkbox>
    <checkbox checked="false">End</checkbox>
  </group>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    When to use
    <text>When to use</text>
  </heading>
  <list>
    <listitem level="1">
      <link>Checkboxes vs. Switches</link>
    </listitem>
  </list>
  <heading level="2">
    Accessibility
    <text>Accessibility</text>
  </heading>
  <list>
    <listitem level="1">
      <text>It will render an element with the</text>
      <code>$SOME_CODE</code>
      <text>role not</text>
      <code>$SOME_CODE</code>
      <text>
        role since this role isn't widely supported yet. Please test first
        if assistive technology of your target audience supports this role
        properly. Then you can change the role with
      </text>
      <code>$SOME_CODE</code>
    </listitem>
    <listitem level="1">
      <text>
        All form controls should have labels, and this includes radio buttons,
        checkboxes, and switches. In most cases, this is done by using the
      </text>
      <code>$SOME_CODE</code>
      <text>element (</text>
      <link>FormControlLabel</link>
      <text>).</text>
    </listitem>
    <listitem level="1">
      <text>
        When a label can't be used, it's necessary to add an attribute
        directly to the input component. In this case, you can apply the
        additional attribute (e.g.
      </text>
      <code>$SOME_CODE</code>
      <text>,</text>
      <code>$SOME_CODE</code>
      <text>,</text>
      <code>$SOME_CODE</code>
      <text>) via the</text>
      <code>$SOME_CODE</code>
      <text>prop.</text>
    </listitem>
  </list>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <link>
        <FormControl />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <FormControlLabel />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <FormGroup />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <FormLabel />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <Switch />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link>Slider</link>
    <group>
      Was this page helpful?
      <text>Was this page helpful?</text>
      <button pressed="false">Yes</button>
      <button pressed="false">No</button>
    </group>
    <link>Text field</link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/tabs/ 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Tabs
    <text>Tabs</text>
  </heading>
  <paragraph>
    <text>
      Tabs make it easy to explore and switch between different views.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Tabs organize and allow navigation between groups of content that are
      related and at the same level of hierarchy.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <link>Feedback</link>
    </listitem>
    <listitem level="1">
      <link>WAI-ARIA</link>
    </listitem>
    <listitem level="1">
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem level="1">
      <link>Material Design</link>
    </listitem>
    <listitem level="1">
      <link>Figma</link>
    </listitem>
    <listitem level="1">
      <link>Adobe</link>
    </listitem>
    <listitem level="1">
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Basic tabs
    <text>Basic tabs</text>
  </heading>
  <paragraph>
    <text>A basic example with tab panels.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1">
    basic tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
  </tablist>
  <tabpanel>
    ITEM ONE
    <paragraph>
      <text>Item One</text>
    </paragraph>
  </tabpanel>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Experimental API
    <text>Experimental API</text>
  </heading>
  <paragraph>
    <code>$SOME_CODE</code>
    <text>
      offers utility components that inject props to implement accessible tabs
      following
    </text>
    <link>WAI-ARIA authoring practices</link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1">
    lab API tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
  </tablist>
  <tabpanel>
    ITEM ONE
    <text>Item One</text>
  </tabpanel>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Wrapped labels
    <text>Wrapped labels</text>
  </heading>
  <paragraph>
    <text>
      Long labels will automatically wrap on tabs. If the label is too long for
      the tab, it will overflow, and the text will not be visible.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1">
    wrapped label tabs example
    <tab selected="true">
      NEW ARRIVALS IN THE LONGEST TEXT OF NONFICTION THAT SHOULD APPEAR IN THE
      NEXT LINE
      <text>
        NEW ARRIVALS IN THE LONGEST TEXT OF NONFICTION THAT SHOULD APPEAR IN THE
        NEXT LINE
      </text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Colored tab
    <text>Colored tab</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1">
    secondary tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Disabled tab
    <text>Disabled tab</text>
  </heading>
  <paragraph>
    <text>A tab can be disabled by setting the</text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1">
    disabled tabs example
    <tab>
      ACTIVE
      <text>ACTIVE</text>
    </tab>
    <tab disabled="true">
      DISABLED
      <text>DISABLED</text>
    </tab>
    <tab selected="true">
      ACTIVE
      <text>ACTIVE</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Fixed tabs
    <text>Fixed tabs</text>
  </heading>
  <paragraph>
    <text>
      Fixed tabs should be used with a limited number of tabs, and when a
      consistent placement will aid muscle memory.
    </text>
  </paragraph>
  <heading level="3">
    Full width
    <text>Full width</text>
  </heading>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>prop should be used for smaller views. This demo also uses</text>
    <link>react-swipeable-views</link>
    <text>
      to animate the Tab transition, and allowing tabs to be swiped on touch
      devices.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <HeaderAsNonLandmark>
    <tablist level="1">
      full width tabs example
      <tab selected="true">
        ITEM ONE
        <text>ITEM ONE</text>
      </tab>
      <tab>
        ITEM TWO
        <text>ITEM TWO</text>
      </tab>
      <tab>
        ITEM THREE
        <text>ITEM THREE</text>
      </tab>
    </tablist>
  </HeaderAsNonLandmark>
  <tabpanel>
    ITEM ONE
    <paragraph>
      <text>Item One</text>
    </paragraph>
  </tabpanel>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="3">
    Centered
    <text>Centered</text>
  </heading>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>prop should be used for larger views.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1">
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Scrollable tabs
    <text>Scrollable tabs</text>
  </heading>
  <heading level="3">
    Automatic scroll buttons
    <text>Automatic scroll buttons</text>
  </heading>
  <paragraph>
    <text>
      By default, left and right scroll buttons are automatically presented on
      desktop and hidden on mobile. (based on viewport width)
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1">
    scrollable auto tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
    <tab>
      ITEM FOUR
      <text>ITEM FOUR</text>
    </tab>
    <tab>
      ITEM FIVE
      <text>ITEM FIVE</text>
    </tab>
    <tab>
      ITEM SIX
      <text>ITEM SIX</text>
    </tab>
    <tab>
      ITEM SEVEN
      <text>ITEM SEVEN</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="3">
    Forced scroll buttons
    <text>Forced scroll buttons</text>
  </heading>
  <paragraph>
    <text>
      Left and right scroll buttons be presented (reserve space) regardless of
      the viewport width with
    </text>
    <code>$SOME_CODE</code>
    <code>$SOME_CODE</code>
    <text>:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1">
    scrollable force tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
    <tab>
      ITEM FOUR
      <text>ITEM FOUR</text>
    </tab>
    <tab>
      ITEM FIVE
      <text>ITEM FIVE</text>
    </tab>
    <tab>
      ITEM SIX
      <text>ITEM SIX</text>
    </tab>
    <tab>
      ITEM SEVEN
      <text>ITEM SEVEN</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>
      If you want to make sure the buttons are always visible, you should
      customize the opacity.
    </text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1">
    visible arrows tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
    <tab>
      ITEM FOUR
      <text>ITEM FOUR</text>
    </tab>
    <tab>
      ITEM FIVE
      <text>ITEM FIVE</text>
    </tab>
    <tab>
      ITEM SIX
      <text>ITEM SIX</text>
    </tab>
    <tab>
      ITEM SEVEN
      <text>ITEM SEVEN</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="3">
    Prevent scroll buttons
    <text>Prevent scroll buttons</text>
  </heading>
  <paragraph>
    <text>Left and right scroll buttons are never be presented with</text>
    <code>$SOME_CODE</code>
    <text>
      . All scrolling must be initiated through user agent scrolling mechanisms
      (e.g. left/right swipe, shift mouse wheel, etc.)
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1">
    scrollable prevent tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
    <tab>
      ITEM FOUR
      <text>ITEM FOUR</text>
    </tab>
    <tab>
      ITEM FIVE
      <text>ITEM FIVE</text>
    </tab>
    <tab>
      ITEM SIX
      <text>ITEM SIX</text>
    </tab>
    <tab>
      ITEM SEVEN
      <text>ITEM SEVEN</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Customized tabs
    <text>Customized tabs</text>
  </heading>
  <paragraph>
    <text>
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link>overrides documentation page</link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1">
    ant example
    <tab selected="true">
      Tab 1<text>Tab 1</text>
    </tab>
    <tab>
      Tab 2<text>Tab 2</text>
    </tab>
    <tab>
      Tab 3<text>Tab 3</text>
    </tab>
  </tablist>
  <tablist level="1">
    styled tabs example
    <tab selected="true">
      Workflows
      <text>Workflows</text>
    </tab>
    <tab>
      Datasets
      <text>Datasets</text>
    </tab>
    <tab>
      Connections
      <text>Connections</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <paragraph>
    <text>üé® If you are looking for inspiration, you can check</text>
    <link>MUI Treasury's customization examples</link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Vertical tabs
    <text>Vertical tabs</text>
  </heading>
  <paragraph>
    <text>
      To make vertical tabs instead of default horizontal ones, there is
    </text>
    <code>$SOME_CODE</code>
    <text>:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1">
    Vertical tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
    <tab>
      ITEM FOUR
      <text>ITEM FOUR</text>
    </tab>
    <tab>
      ITEM FIVE
      <text>ITEM FIVE</text>
    </tab>
    <tab>
      ITEM SIX
      <text>ITEM SIX</text>
    </tab>
    <tab>
      ITEM SEVEN
      <text>ITEM SEVEN</text>
    </tab>
  </tablist>
  <tabpanel>
    ITEM ONE
    <paragraph>
      <text>Item One</text>
    </paragraph>
  </tabpanel>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <paragraph>
    <text>Note that you can restore the scrollbar with</text>
    <code>$SOME_CODE</code>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Nav tabs
    <text>Nav tabs</text>
  </heading>
  <paragraph>
    <text>By default, tabs use a</text>
    <code>$SOME_CODE</code>
    <text>
      element, but you can provide your custom tag or component. Here's an
      example of implementing tabbed navigation:
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1">
    nav tabs example
    <tab selected="true">
      PAGE ONE
      <text>PAGE ONE</text>
    </tab>
    <tab>
      PAGE TWO
      <text>PAGE TWO</text>
    </tab>
    <tab>
      PAGE THREE
      <text>PAGE THREE</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Icon tabs
    <text>Icon tabs</text>
  </heading>
  <paragraph>
    <text>Tab labels may be either all icons or all text.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1">
    icon tabs example
    <tab selected="true">phone</tab>
    <tab>favorite</tab>
    <tab>person</tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1">
    icon label tabs example
    <tab selected="true">
      RECENTS
      <text>RECENTS</text>
    </tab>
    <tab>
      FAVORITES
      <text>FAVORITES</text>
    </tab>
    <tab>
      NEARBY
      <text>NEARBY</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Third-party routing library
    <text>Third-party routing library</text>
  </heading>
  <paragraph>
    <text>
      One frequent use case is to perform navigation on the client only, without
      an HTTP round-trip to the server. The
    </text>
    <code>$SOME_CODE</code>
    <text>component provides the</text>
    <code>$SOME_CODE</code>
    <text>prop to handle this use case. Here is a</text>
    <link>more detailed guide</link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Accessibility
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(WAI-ARIA:</text>
    <link>https://www.w3.org/TR/wai-aria-practices/#tabpanel</link>
    <text>)</text>
  </paragraph>
  <paragraph>
    <text>
      The following steps are needed in order to provide necessary information
      for assistive technologies:
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <text>Label</text>
      <code>$SOME_CODE</code>
      <text>via</text>
      <code>$SOME_CODE</code>
      <text>or</text>
      <code>$SOME_CODE</code>
      <text>.</text>
    </listitem>
    <listitem level="1">
      <code>$SOME_CODE</code>
      <text>s need to be connected to their corresponding</text>
      <code>$SOME_CODE</code>
      <text>by setting the correct</text>
      <code>$SOME_CODE</code>
      <text>,</text>
      <code>$SOME_CODE</code>
      <text>and</text>
      <code>$SOME_CODE</code>
      <text>.</text>
    </listitem>
  </list>
  <paragraph>
    <text>
      An example for the current implementation can be found in the demos on
      this page. We've also published
    </text>
    <link>an experimental API</link>
    <text>in</text>
    <code>$SOME_CODE</code>
    <text>that does not require extra work.</text>
  </paragraph>
  <heading level="3">
    Keyboard navigation
    <text>Keyboard navigation</text>
  </heading>
  <paragraph>
    <text>
      The components implement keyboard navigation using the "manual
      activation" behavior. If you want to switch to the "selection
      automatically follows focus" behavior you have pass
    </text>
    <code>$SOME_CODE</code>
    <text>to the</text>
    <code>$SOME_CODE</code>
    <text>
      component. The WAI-ARIA authoring practices have a detailed guide on
    </text>
    <link>how to decide when to make selection automatically follow focus</link>
    <text>.</text>
  </paragraph>
  <heading level="4">
    Demo
    <text>Demo</text>
  </heading>
  <paragraph>
    <text>
      The following two demos only differ in their keyboard navigation behavior.
      Focus a tab and navigate with arrow keys to notice the difference,
      e.g.Arrow Left.
    </text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1">
    Tabs where selection follows focus
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1">
    Tabs where each tab needs to be selected manually
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <link>
        <Tab />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <TabContext />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <TabList />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <TabPanel />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <TabScrollButton />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <Tabs />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link>Stepper</link>
    <group>
      Was this page helpful?
      <text>Was this page helpful?</text>
      <button pressed="false">Yes</button>
      <button pressed="false">No</button>
    </group>
    <link>Accordion</link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/text-fields/ 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Text Field
    <text>Text Field</text>
  </heading>
  <paragraph>
    <text>Text fields let users enter and edit text.</text>
  </paragraph>
  <paragraph>
    <text>
      Text fields allow users to enter text into a UI. They typically appear in
      forms and dialogs.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <link>Feedback</link>
    </listitem>
    <listitem level="1">
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem level="1">
      <link>Material Design</link>
    </listitem>
    <listitem level="1">
      <link>Figma</link>
    </listitem>
    <listitem level="1">
      <link>Adobe</link>
    </listitem>
    <listitem level="1">
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Basic TextField
    <text>Basic TextField</text>
  </heading>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>
      wrapper component is a complete form control including a label, input, and
      help text. It comes with three variants: outlined (default), filled, and
      standard.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <Label>
      <text>Outlined</text>
    </Label>
    <textbox>Outlined</textbox>
    <Label>
      <text>Filled</text>
    </Label>
    <text>¬†</text>
    <textbox>Filled</textbox>
    <Label>
      <text>Standard</text>
    </Label>
    <text>¬†</text>
    <textbox>Standard</textbox>
  </form>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>Note:The standard variant of the</text>
    <code>$SOME_CODE</code>
    <text>is no longer documented in the</text>
    <link>Material Design guidelines</link>
    <text>(</text>
    <link>here's why</link>
    <text>), but Material-UI will continue to support it.</text>
  </paragraph>
  <heading level="2">
    Form props
    <text>Form props</text>
  </heading>
  <paragraph>
    <text>Standard form attributes are supported e.g.</text>
    <code>$SOME_CODE</code>
    <text>,</text>
    <code>$SOME_CODE</code>
    <text>,</text>
    <code>$SOME_CODE</code>
    <text>, etc. as well as a</text>
    <code>$SOME_CODE</code>
    <text>
      which is used to give context about a field's input, such as how the
      input will be used.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <Label>
      <text>Required</text>
    </Label>
    <textbox required="true" value="Hello World">
      Required
      <text>Hello World</text>
    </textbox>
    <Label>
      <text>Disabled</text>
    </Label>
    <textbox disabled="true" value="Hello World">
      Disabled
      <text>Hello World</text>
    </textbox>
    <Label>
      <text>Password</text>
    </Label>
    <textbox>Password</textbox>
    <Label>
      <text>Read Only</text>
    </Label>
    <textbox readonly="true" value="Hello World">
      Read Only
      <text>Hello World</text>
    </textbox>
    <Label>
      <text>Number</text>
    </Label>
    <spinbutton valuetext="">Number</spinbutton>
    <Label>
      <text>Search field</text>
    </Label>
    <searchbox>Search field</searchbox>
    <Label>
      <text>Helper text</text>
    </Label>
    <textbox description="Some important text" value="Default Value">
      Helper text
      <text>Default Value</text>
    </textbox>
    <paragraph>
      <text>Some important text</text>
    </paragraph>
    <Label>
      <text>Required</text>
    </Label>
    <text>¬†</text>
    <textbox required="true" value="Hello World">
      Required
      <text>Hello World</text>
    </textbox>
    <Label>
      <text>Disabled</text>
    </Label>
    <text>¬†</text>
    <textbox disabled="true" value="Hello World">
      Disabled
      <text>Hello World</text>
    </textbox>
    <Label>
      <text>Password</text>
    </Label>
    <text>¬†</text>
    <textbox>Password</textbox>
    <Label>
      <text>Read Only</text>
    </Label>
    <text>¬†</text>
    <textbox readonly="true" value="Hello World">
      Read Only
      <text>Hello World</text>
    </textbox>
    <Label>
      <text>Number</text>
    </Label>
    <text>¬†</text>
    <spinbutton valuetext="">Number</spinbutton>
    <Label>
      <text>Search field</text>
    </Label>
    <text>¬†</text>
    <searchbox>Search field</searchbox>
    <Label>
      <text>Helper text</text>
    </Label>
    <text>¬†</text>
    <textbox description="Some important text" value="Default Value">
      Helper text
      <text>Default Value</text>
    </textbox>
    <paragraph>
      <text>Some important text</text>
    </paragraph>
    <Label>
      <text>Required</text>
    </Label>
    <text>¬†</text>
    <textbox required="true" value="Hello World">
      Required
      <text>Hello World</text>
    </textbox>
    <Label>
      <text>Disabled</text>
    </Label>
    <text>¬†</text>
    <textbox disabled="true" value="Hello World">
      Disabled
      <text>Hello World</text>
    </textbox>
    <Label>
      <text>Password</text>
    </Label>
    <text>¬†</text>
    <textbox>Password</textbox>
    <Label>
      <text>Read Only</text>
    </Label>
    <text>¬†</text>
    <textbox readonly="true" value="Hello World">
      Read Only
      <text>Hello World</text>
    </textbox>
    <Label>
      <text>Number</text>
    </Label>
    <text>¬†</text>
    <spinbutton valuetext="">Number</spinbutton>
    <Label>
      <text>Search field</text>
    </Label>
    <text>¬†</text>
    <searchbox>Search field</searchbox>
    <Label>
      <text>Helper text</text>
    </Label>
    <text>¬†</text>
    <textbox description="Some important text" value="Default Value">
      Helper text
      <text>Default Value</text>
    </textbox>
    <paragraph>
      <text>Some important text</text>
    </paragraph>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Validation
    <text>Validation</text>
  </heading>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>prop toggles the error state. The</text>
    <code>$SOME_CODE</code>
    <text>
      prop can then be used to provide feedback to the user about the error.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <Label>
      <text>Error</text>
    </Label>
    <textbox invalid="true" value="Hello World">
      Error
      <text>Hello World</text>
    </textbox>
    <Label>
      <text>Error</text>
    </Label>
    <textbox description="Incorrect entry." invalid="true" value="Hello World">
      Error
      <text>Hello World</text>
    </textbox>
    <paragraph>
      <text>Incorrect entry.</text>
    </paragraph>
    <Label>
      <text>Error</text>
    </Label>
    <text>¬†</text>
    <textbox invalid="true" value="Hello World">
      Error
      <text>Hello World</text>
    </textbox>
    <Label>
      <text>Error</text>
    </Label>
    <text>¬†</text>
    <textbox description="Incorrect entry." invalid="true" value="Hello World">
      Error
      <text>Hello World</text>
    </textbox>
    <paragraph>
      <text>Incorrect entry.</text>
    </paragraph>
    <Label>
      <text>Error</text>
    </Label>
    <text>¬†</text>
    <textbox invalid="true" value="Hello World">
      Error
      <text>Hello World</text>
    </textbox>
    <Label>
      <text>Error</text>
    </Label>
    <text>¬†</text>
    <textbox description="Incorrect entry." invalid="true" value="Hello World">
      Error
      <text>Hello World</text>
    </textbox>
    <paragraph>
      <text>Incorrect entry.</text>
    </paragraph>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Multiline
    <text>Multiline</text>
  </heading>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>prop transforms the text field into a</text>
    <link>
      <textarea>
      <code>$SOME_CODE</code>
    </link>
    <text>element. Unless the</text>
    <code>$SOME_CODE</code>
    <text>
      prop is set, the height of the text field dynamically matches its content
      (using
    </text>
    <link>TextareaAutosize</link>
    <text>). You can use the</text>
    <code>$SOME_CODE</code>
    <text>and</text>
    <code>$SOME_CODE</code>
    <text>props to bound it.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <Label>
      <text>Multiline</text>
    </Label>
    <textbox multiline="true" value="Controlled">
      Multiline
      <text>Controlled</text>
    </textbox>
    <Label>
      <text>Multiline Placeholder</text>
    </Label>
    <textbox multiline="true">Multiline Placeholder</textbox>
    <Label>
      <text>Multiline</text>
    </Label>
    <textbox multiline="true" value="Default Value">
      Multiline
      <text>Default Value</text>
    </textbox>
    <Label>
      <text>Multiline</text>
    </Label>
    <text>¬†</text>
    <textbox multiline="true" value="Controlled">
      Multiline
      <text>Controlled</text>
    </textbox>
    <Label>
      <text>Multiline Placeholder</text>
    </Label>
    <text>¬†</text>
    <textbox multiline="true">Multiline Placeholder</textbox>
    <Label>
      <text>Multiline</text>
    </Label>
    <text>¬†</text>
    <textbox multiline="true" value="Default Value">
      Multiline
      <text>Default Value</text>
    </textbox>
    <Label>
      <text>Multiline</text>
    </Label>
    <text>¬†</text>
    <textbox multiline="true" value="Controlled">
      Multiline
      <text>Controlled</text>
    </textbox>
    <Label>
      <text>Multiline Placeholder</text>
    </Label>
    <text>¬†</text>
    <textbox multiline="true">Multiline Placeholder</textbox>
    <Label>
      <text>Multiline</text>
    </Label>
    <text>¬†</text>
    <textbox multiline="true" value="Default Value">
      Multiline
      <text>Default Value</text>
    </textbox>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Select
    <text>Select</text>
  </heading>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>prop makes the text field use the</text>
    <link>Select</link>
    <text>component internally.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <Label>
      <text>Select</text>
    </Label>
    <combobox description="Please select your currency" haspopup="listbox">
      Select ‚Ç¨
    </combobox>
    <textbox value="EUR"></textbox>
    <paragraph>
      <text>Please select your currency</text>
    </paragraph>
    <Label>
      <text>Native select</text>
    </Label>
    <combobox description="Please select your currency" value="‚Ç¨">
      Native select
      <MenuListPopup>
        <menuitem>$</menuitem>
        <menuitem selected="true">‚Ç¨</menuitem>
        <menuitem>‡∏ø</menuitem>
        <menuitem>¬•</menuitem>
      </MenuListPopup>
    </combobox>
    <paragraph>
      <text>Please select your currency</text>
    </paragraph>
    <Label>
      <text>Select</text>
    </Label>
    <text>¬†</text>
    <combobox description="Please select your currency" haspopup="listbox">
      Select ‚Ç¨
    </combobox>
    <textbox value="EUR"></textbox>
    <paragraph>
      <text>Please select your currency</text>
    </paragraph>
    <Label>
      <text>Native select</text>
    </Label>
    <text>¬†</text>
    <combobox description="Please select your currency" value="‚Ç¨">
      Native select
      <MenuListPopup>
        <menuitem>$</menuitem>
        <menuitem selected="true">‚Ç¨</menuitem>
        <menuitem>‡∏ø</menuitem>
        <menuitem>¬•</menuitem>
      </MenuListPopup>
    </combobox>
    <paragraph>
      <text>Please select your currency</text>
    </paragraph>
    <Label>
      <text>Select</text>
    </Label>
    <text>¬†</text>
    <combobox description="Please select your currency" haspopup="listbox">
      Select ‚Ç¨
    </combobox>
    <textbox value="EUR"></textbox>
    <paragraph>
      <text>Please select your currency</text>
    </paragraph>
    <Label>
      <text>Native select</text>
    </Label>
    <text>¬†</text>
    <combobox description="Please select your currency" value="‚Ç¨">
      Native select
      <MenuListPopup>
        <menuitem>$</menuitem>
        <menuitem selected="true">‚Ç¨</menuitem>
        <menuitem>‡∏ø</menuitem>
        <menuitem>¬•</menuitem>
      </MenuListPopup>
    </combobox>
    <paragraph>
      <text>Please select your currency</text>
    </paragraph>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Icons
    <text>Icons</text>
  </heading>
  <paragraph>
    <text>There are multiple ways to display an icon with a text field.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>With a start adornment</text>
  </Label>
  <text>¬†‚Äã</text>
  <textbox>With a start adornment</textbox>
  <Label>
    <text>TextField</text>
  </Label>
  <text>¬†‚Äã</text>
  <textbox>TextField</textbox>
  <Label>
    <text>With sx</text>
  </Label>
  <text>¬†</text>
  <textbox>With sx</textbox>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="3">
    Input Adornments
    <text>Input Adornments</text>
  </heading>
  <paragraph>
    <text>The main way is with an</text>
    <code>$SOME_CODE</code>
    <text>
      . This can be used to add a prefix, a suffix, or an action to an input.
      For instance, you can use an icon button to hide or reveal the password.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>With normal TextField</text>
  </Label>
  <paragraph>
    <text>Kg</text>
  </paragraph>
  <textbox>With normal TextField</textbox>
  <textbox description="Weight">weight</textbox>
  <paragraph>
    <text>Kg</text>
  </paragraph>
  <paragraph>
    <text>Weight</text>
  </paragraph>
  <Label>
    <text>Password</text>
  </Label>
  <textbox>Password</textbox>
  <button>toggle password visibility</button>
  <Label>
    <text>Amount</text>
  </Label>
  <paragraph>
    <text>$</text>
  </paragraph>
  <textbox>Amount</textbox>
  <Label>
    <text>With normal TextField</text>
  </Label>
  <text>¬†</text>
  <paragraph>
    <text>Kg</text>
  </paragraph>
  <textbox>With normal TextField</textbox>
  <text>¬†</text>
  <textbox description="Weight">weight</textbox>
  <paragraph>
    <text>Kg</text>
  </paragraph>
  <paragraph>
    <text>Weight</text>
  </paragraph>
  <Label>
    <text>Password</text>
  </Label>
  <text>¬†</text>
  <textbox>Password</textbox>
  <button>toggle password visibility</button>
  <Label>
    <text>Amount</text>
  </Label>
  <text>¬†</text>
  <paragraph>
    <text>$</text>
  </paragraph>
  <textbox>Amount</textbox>
  <Label>
    <text>With normal TextField</text>
  </Label>
  <text>¬†</text>
  <paragraph>
    <text>Kg</text>
  </paragraph>
  <textbox>With normal TextField</textbox>
  <text>¬†</text>
  <textbox description="Weight">weight</textbox>
  <paragraph>
    <text>Kg</text>
  </paragraph>
  <paragraph>
    <text>Weight</text>
  </paragraph>
  <Label>
    <text>Password</text>
  </Label>
  <text>¬†</text>
  <textbox>Password</textbox>
  <button>toggle password visibility</button>
  <Label>
    <text>Amount</text>
  </Label>
  <text>¬†</text>
  <paragraph>
    <text>$</text>
  </paragraph>
  <textbox>Amount</textbox>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Sizes
    <text>Sizes</text>
  </heading>
  <paragraph>
    <text>Fancy smaller inputs? Use the</text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <Label>
      <text>Size</text>
    </Label>
    <textbox value="Small">
      Size
      <text>Small</text>
    </textbox>
    <Label>
      <text>Size</text>
    </Label>
    <textbox value="Normal">
      Size
      <text>Normal</text>
    </textbox>
    <Label>
      <text>Size</text>
    </Label>
    <text>¬†</text>
    <textbox value="Small">
      Size
      <text>Small</text>
    </textbox>
    <Label>
      <text>Size</text>
    </Label>
    <text>¬†</text>
    <textbox value="Normal">
      Size
      <text>Normal</text>
    </textbox>
    <Label>
      <text>Size</text>
    </Label>
    <text>¬†</text>
    <textbox value="Small">
      Size
      <text>Small</text>
    </textbox>
    <Label>
      <text>Size</text>
    </Label>
    <text>¬†</text>
    <textbox value="Normal">
      Size
      <text>Normal</text>
    </textbox>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>
      variant input height can be further reduced by rendering the label outside
      of it.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <text>¬†</text>
    <textbox value="Small">
      <text>Small</text>
    </textbox>
    <text>¬†</text>
    <textbox value="Normal">
      <text>Normal</text>
    </textbox>
  </form>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Layout
    <text>Layout</text>
  </heading>
  <paragraph>
    <code>$SOME_CODE</code>
    <text>prop can be used to alter the vertical spacing of inputs. Using</text>
    <code>$SOME_CODE</code>
    <text>(default) will not apply margins to the</text>
    <code>$SOME_CODE</code>
    <text>, whereas</text>
    <code>$SOME_CODE</code>
    <text>and</text>
    <code>$SOME_CODE</code>
    <text>will.</text>
    <code>$SOME_CODE</code>
    <text>and</text>
    <code>$SOME_CODE</code>
    <text>alter other styles to meet the specification.</text>
  </paragraph>
  <paragraph>
    <code>$SOME_CODE</code>
    <text>
      can be used to make the input take up the full width of its container.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Label</text>
  </Label>
  <textbox description="Full width!">Label</textbox>
  <paragraph>
    <text>Full width!</text>
  </paragraph>
  <Label>
    <text>None</text>
  </Label>
  <textbox description="Some important text" value="Default Value">
    None
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <Label>
    <text>Dense</text>
  </Label>
  <textbox description="Some important text" value="Default Value">
    Dense
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <Label>
    <text>Normal</text>
  </Label>
  <textbox description="Some important text" value="Default Value">
    Normal
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <Label>
    <text>Label</text>
  </Label>
  <text>¬†</text>
  <textbox description="Full width!">Label</textbox>
  <paragraph>
    <text>Full width!</text>
  </paragraph>
  <Label>
    <text>None</text>
  </Label>
  <text>¬†</text>
  <textbox description="Some important text" value="Default Value">
    None
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <Label>
    <text>Dense</text>
  </Label>
  <text>¬†</text>
  <textbox description="Some important text" value="Default Value">
    Dense
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <Label>
    <text>Normal</text>
  </Label>
  <text>¬†</text>
  <textbox description="Some important text" value="Default Value">
    Normal
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <Label>
    <text>Label</text>
  </Label>
  <text>¬†</text>
  <textbox description="Full width!">Label</textbox>
  <paragraph>
    <text>Full width!</text>
  </paragraph>
  <Label>
    <text>None</text>
  </Label>
  <text>¬†</text>
  <textbox description="Some important text" value="Default Value">
    None
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <Label>
    <text>Dense</text>
  </Label>
  <text>¬†</text>
  <textbox description="Some important text" value="Default Value">
    Dense
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <Label>
    <text>Normal</text>
  </Label>
  <text>¬†</text>
  <textbox description="Some important text" value="Default Value">
    Normal
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Uncontrolled vs. Controlled
    <text>Uncontrolled vs. Controlled</text>
  </heading>
  <paragraph>
    <text>The component can be controlled or uncontrolled.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <Label>
      <text>Name</text>
    </Label>
    <textbox value="Cat in the Hat">
      Name
      <text>Cat in the Hat</text>
    </textbox>
    <Label>
      <text>Uncontrolled</text>
    </Label>
    <textbox value="foo">
      Uncontrolled
      <text>foo</text>
    </textbox>
  </form>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Components
    <text>Components</text>
  </heading>
  <paragraph>
    <code>$SOME_CODE</code>
    <text>is composed of smaller components (</text>
    <link>
      FormControl
      <code>$SOME_CODE</code>
    </link>
    <text>,</text>
    <link>
      Input
      <code>$SOME_CODE</code>
    </link>
    <text>,</text>
    <link>
      FilledInput
      <code>$SOME_CODE</code>
    </link>
    <text>,</text>
    <link>
      InputLabel
      <code>$SOME_CODE</code>
    </link>
    <text>,</text>
    <link>
      OutlinedInput
      <code>$SOME_CODE</code>
    </link>
    <text>, and</text>
    <link>
      FormHelperText
      <code>$SOME_CODE</code>
    </link>
    <text>
      ) that you can leverage directly to significantly customize your form
      inputs.
    </text>
  </paragraph>
  <paragraph>
    <text>
      You might also have noticed that some native HTML input properties are
      missing from the
    </text>
    <code>$SOME_CODE</code>
    <text>
      component. This is on purpose. The component takes care of the most used
      properties. Then, it's up to the user to use the underlying component
      shown in the following demo. Still, you can use
    </text>
    <code>$SOME_CODE</code>
    <text>(and</text>
    <code>$SOME_CODE</code>
    <text>,</text>
    <code>$SOME_CODE</code>
    <text>properties) if you want to avoid some boilerplate.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <Label>
      <text>Name</text>
    </Label>
    <text>¬†</text>
    <textbox value="Composed TextField">
      Name
      <text>Composed TextField</text>
    </textbox>
    <Label>
      <text>Name</text>
    </Label>
    <text>¬†</text>
    <textbox
      description="Some important helper text"
      value="Composed TextField"
    >
      Name
      <text>Composed TextField</text>
    </textbox>
    <paragraph>
      <text>Some important helper text</text>
    </paragraph>
    <Label>
      <text>Name</text>
    </Label>
    <text>¬†</text>
    <textbox disabled="true" value="Composed TextField">
      Name
      <text>Composed TextField</text>
    </textbox>
    <paragraph>
      <text>Disabled</text>
    </paragraph>
    <Label>
      <text>Name</text>
    </Label>
    <text>¬†</text>
    <textbox description="Error" invalid="true" value="Composed TextField">
      Name
      <text>Composed TextField</text>
    </textbox>
    <paragraph>
      <text>Error</text>
    </paragraph>
    <Label>
      <text>Name</text>
    </Label>
    <textbox value="Composed TextField">
      Name
      <text>Composed TextField</text>
    </textbox>
    <Label>
      <text>Name</text>
    </Label>
    <text>¬†</text>
    <textbox value="Composed TextField">
      Name
      <text>Composed TextField</text>
    </textbox>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Inputs
    <text>Inputs</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <text>¬†</text>
    <textbox value="Hello world">
      description
      <text>Hello world</text>
    </textbox>
    <text>¬†</text>
    <textbox>description</textbox>
    <text>¬†</text>
    <textbox disabled="true" value="Disabled">
      description
      <text>Disabled</text>
    </textbox>
    <text>¬†</text>
    <textbox invalid="true" value="Error">
      description
      <text>Error</text>
    </textbox>
  </form>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Color
    <text>Color</text>
  </heading>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>
      prop changes the highlight color of the text field when focused.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <Label>
      <text>Outlined secondary</text>
    </Label>
    <textbox>Outlined secondary</textbox>
    <Label>
      <text>Filled secondary</text>
    </Label>
    <text>¬†</text>
    <textbox>Filled secondary</textbox>
    <Label>
      <text>Standard secondary</text>
    </Label>
    <text>¬†</text>
    <textbox>Standard secondary</textbox>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Customized inputs
    <text>Customized inputs</text>
  </heading>
  <paragraph>
    <text>
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link>overrides documentation page</link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <Label>
      <text>Bootstrap</text>
    </Label>
    <textbox value="react-bootstrap">
      Bootstrap
      <text>react-bootstrap</text>
    </textbox>
    <Label>
      <text>Reddit</text>
    </Label>
    <textbox value="react-reddit">
      Reddit
      <text>react-reddit</text>
    </textbox>
    <Label>
      <text>Custom CSS</text>
    </Label>
    <textbox>Custom CSS</textbox>
    <Label>
      <text>CSS validation style</text>
    </Label>
    <textbox required="true" value="Success">
      CSS validation style
      <text>Success</text>
    </textbox>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <paragraph>
    <text>
      Customization does not stop at CSS. You can use composition to build
      custom components and give your app a unique feel. Below is an example
      using the
    </text>
    <link>
      InputBase
      <code>$SOME_CODE</code>
    </link>
    <text>component, inspired by Google Maps.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <button>menu</button>
    <textbox>search google maps</textbox>
    <button>search</button>
    <separator orientation="horizontal"></separator>
    <button>directions</button>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <paragraph>
    <text>üé® If you are looking for inspiration, you can check</text>
    <link>MUI Treasury's customization examples</link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    useFormControl
    <code>$SOME_CODE</code>
  </heading>
  <paragraph>
    <text>For advanced customization use cases, a</text>
    <code>$SOME_CODE</code>
    <text>
      hook is exposed. This hook returns the context value of the parent
    </text>
    <code>$SOME_CODE</code>
    <text>component.</text>
  </paragraph>
  <paragraph>
    <text>API</text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>Returns</text>
  </paragraph>
  <paragraph>
    <code>$SOME_CODE</code>
    <text>(object):</text>
  </paragraph>
  <list>
    <listitem level="1">
      <code>$SOME_CODE</code>
      <text>(bool): Indicate whether the child</text>
      <code>$SOME_CODE</code>
      <text>or</text>
      <code>$SOME_CODE</code>
      <text>component has a start adornment.</text>
    </listitem>
    <listitem level="1">
      <code>$SOME_CODE</code>
      <text>(func): Setter function for</text>
      <code>$SOME_CODE</code>
      <text>state value.</text>
    </listitem>
    <listitem level="1">
      <code>$SOME_CODE</code>
      <text>(string): The theme color is being used, inherited from</text>
      <code>$SOME_CODE</code>
      <code>$SOME_CODE</code>
      <text>prop .</text>
    </listitem>
    <listitem level="1">
      <code>$SOME_CODE</code>
      <text>
        (bool): Indicate whether the component is being displayed in a disabled
        state, inherited from
      </text>
      <code>$SOME_CODE</code>
      <code>$SOME_CODE</code>
      <text>prop.</text>
    </listitem>
    <listitem level="1">
      <code>$SOME_CODE</code>
      <text>
        (bool): Indicate whether the component is being displayed in an error
        state, inherited from
      </text>
      <code>$SOME_CODE</code>
      <code>$SOME_CODE</code>
      <text>prop</text>
    </listitem>
    <listitem level="1">
      <code>$SOME_CODE</code>
      <text>(bool): Indicate whether input is filled</text>
    </listitem>
    <listitem level="1">
      <code>$SOME_CODE</code>
      <text>
        (bool): Indicate whether the component and its children are being
        displayed in a focused state
      </text>
    </listitem>
    <listitem level="1">
      <code>$SOME_CODE</code>
      <text>
        (bool): Indicate whether the component is taking up the full width of
        its container, inherited from
      </text>
      <code>$SOME_CODE</code>
      <code>$SOME_CODE</code>
      <text>prop</text>
    </listitem>
    <listitem level="1">
      <code>$SOME_CODE</code>
      <text>
        (bool): Indicate whether the label is being hidden, inherited from
      </text>
      <code>$SOME_CODE</code>
      <code>$SOME_CODE</code>
      <text>prop</text>
    </listitem>
    <listitem level="1">
      <code>$SOME_CODE</code>
      <text>
        (bool): Indicate whether the label is indicating that the input is
        required input, inherited from the
      </text>
      <code>$SOME_CODE</code>
      <code>$SOME_CODE</code>
      <text>prop</text>
    </listitem>
    <listitem level="1">
      <code>$SOME_CODE</code>
      <text>(string): The size of the component, inherited from the</text>
      <code>$SOME_CODE</code>
      <code>$SOME_CODE</code>
      <text>prop</text>
    </listitem>
    <listitem level="1">
      <code>$SOME_CODE</code>
      <text>(string): The variant is being used by the</text>
      <code>$SOME_CODE</code>
      <text>component and its children, inherited from</text>
      <code>$SOME_CODE</code>
      <code>$SOME_CODE</code>
      <text>prop</text>
    </listitem>
    <listitem level="1">
      <code>$SOME_CODE</code>
      <text>(func): Should be called when the input is blurred</text>
    </listitem>
    <listitem level="1">
      <code>$SOME_CODE</code>
      <text>(func): Should be called when the input is focused</text>
    </listitem>
    <listitem level="1">
      <code>$SOME_CODE</code>
      <text>(func): Should be called when the input is emptied</text>
    </listitem>
    <listitem level="1">
      <code>$SOME_CODE</code>
      <text>(func): Should be called when the input is filled</text>
    </listitem>
  </list>
  <paragraph>
    <text>Example</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <textbox>Please enter text</textbox>
    <paragraph>
      <text>Helper text</text>
    </paragraph>
  </form>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Limitations
    <text>Limitations</text>
  </heading>
  <heading level="3">
    Shrink
    <text>Shrink</text>
  </heading>
  <paragraph>
    <text>
      The input label "shrink" state isn't always correct. The
      input label is supposed to shrink as soon as the input is displaying
      something. In some circumstances, we can't determine the
      "shrink" state (number input, datetime input, Stripe input). You
      might notice an overlap.
    </text>
  </paragraph>
  <paragraph>
    <img>shrink</img>
  </paragraph>
  <paragraph>
    <text>
      To workaround the issue, you can force the "shrink" state of the
      label.
    </text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>or</text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="3">
    Floating label
    <text>Floating label</text>
  </heading>
  <paragraph>
    <text>
      The floating label is absolutely positioned. It won't impact the
      layout of the page. Make sure that the input is larger than the label to
      display correctly.
    </text>
  </paragraph>
  <heading level="3">
    type="number"
    <text>type="number"</text>
  </heading>
  <paragraph>
    <text>
      Inputs of type="number" have potential usability issues:
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <text>
        Allowing certain non-numeric characters ('e', '+',
        '-', '.') and silently discarding others
      </text>
    </listitem>
    <listitem level="1">
      <text>
        The functionality of scrolling to increment/decrement the number can
        cause accidental and hard-to-notice changes
      </text>
    </listitem>
  </list>
  <paragraph>
    <text>and more - see</text>
    <link>this article</link>
    <text>
      by the GOV.UK Design System team for a more detailed explanation.
    </text>
  </paragraph>
  <paragraph>
    <text>
      For number validation, one viable alternative is to use the default input
      type="text" with thepatternattribute, for example:
    </text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>In the future, we might provide a</text>
    <link>number input component</link>
    <text>.</text>
  </paragraph>
  <heading level="3">
    Helper text
    <text>Helper text</text>
  </heading>
  <paragraph>
    <text>
      The helper text prop affects the height of the text field. If two text
      fields are placed side by side, one with a helper text and one without,
      they will have different heights. For example:
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Name</text>
  </Label>
  <textbox description="Please enter your name">Name</textbox>
  <paragraph>
    <text>Please enter your name</text>
  </paragraph>
  <Label>
    <text>Name</text>
  </Label>
  <textbox>Name</textbox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>This can be fixed by passing a space character to the</text>
    <code>$SOME_CODE</code>
    <text>prop:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Name</text>
  </Label>
  <textbox description="Please enter your name">Name</textbox>
  <paragraph>
    <text>Please enter your name</text>
  </paragraph>
  <Label>
    <text>Name</text>
  </Label>
  <textbox description="‚Äã">Name</textbox>
  <paragraph>
    <text>‚Äã</text>
  </paragraph>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Integration with 3rd party input libraries
    <text>Integration with 3rd party input libraries</text>
  </heading>
  <paragraph>
    <text>
      You can use third-party libraries to format an input. You have to provide
      a custom implementation of the
    </text>
    <code>$SOME_CODE</code>
    <text>element with the</text>
    <code>$SOME_CODE</code>
    <text>property.</text>
  </paragraph>
  <paragraph>
    <text>The following demo uses the</text>
    <link>react-text-mask</link>
    <text>and</text>
    <link>react-number-format</link>
    <text>libraries. The same concept could be applied to</text>
    <link>e.g. react-stripe-element</link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>react-text-mask</text>
  </Label>
  <text>¬†</text>
  <textbox value="(1‚ÄÄ‚ÄÄ) ‚ÄÄ‚ÄÄ‚ÄÄ-‚ÄÄ‚ÄÄ‚ÄÄ‚ÄÄ">
    react-text-mask
    <text>(1‚ÄÄ‚ÄÄ) ‚ÄÄ‚ÄÄ‚ÄÄ-‚ÄÄ‚ÄÄ‚ÄÄ‚ÄÄ</text>
  </textbox>
  <Label>
    <text>react-number-format</text>
  </Label>
  <text>¬†</text>
  <textbox value="$1,320">
    react-number-format
    <text>$1,320</text>
  </textbox>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <paragraph>
    <text>
      The provided input component should expose a ref with a value that
      implements the following interface:
    </text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Accessibility
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>
      In order for the text field to be accessible,the input should be linked to
      the label and the helper text. The underlying DOM nodes should have this
      structure:
    </text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <list>
    <listitem level="1">
      <text>If you are using the</text>
      <code>$SOME_CODE</code>
      <text>component, you just have to provide a unique</text>
      <code>$SOME_CODE</code>
      <text>.</text>
    </listitem>
    <listitem level="1">
      <text>If you are composing the component:</text>
    </listitem>
  </list>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Complementary projects
    <text>Complementary projects</text>
  </heading>
  <paragraph>
    <text>
      For more advanced use cases, you might be able to take advantage of:
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <link>react-hook-form</link>
      <text>: React hook for form validation.</text>
    </listitem>
    <listitem level="1">
      <link>formik-material-ui</link>
      <text>: Bindings for using Material-UI with</text>
      <link>formik</link>
      <text>.</text>
    </listitem>
    <listitem level="1">
      <link>redux-form-material-ui</link>
      <text>: Bindings for using Material-UI with</text>
      <link>Redux Form</link>
      <text>.</text>
    </listitem>
    <listitem level="1">
      <link>mui-rff</link>
      <text>: Bindings for using Material-UI with</text>
      <link>React Final Form</link>
      <text>.</text>
    </listitem>
  </list>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <link>
        <FilledInput />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <FormControl />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <FormHelperText />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <Input />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <InputAdornment />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <InputBase />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <InputLabel />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <OutlinedInput />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <TextField />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link>Switch</link>
    <group>
      Was this page helpful?
      <text>Was this page helpful?</text>
      <button pressed="false">Yes</button>
      <button pressed="false">No</button>
    </group>
    <link>Transfer List</link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/tooltips/ 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Tooltip
    <text>Tooltip</text>
  </heading>
  <paragraph>
    <text>
      Tooltips display informative text when users hover over, focus on, or tap
      an element.
    </text>
  </paragraph>
  <paragraph>
    <text>
      When activated, Tooltips display a text label identifying an element, such
      as a description of its function.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <link>Feedback</link>
    </listitem>
    <listitem level="1">
      <link>WAI-ARIA</link>
    </listitem>
    <listitem level="1">
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem level="1">
      <link>Material Design</link>
    </listitem>
    <listitem level="1">
      <link>Figma</link>
    </listitem>
    <listitem level="1">
      <link>Adobe</link>
    </listitem>
    <listitem level="1">
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Basic tooltip
    <text>Basic tooltip</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>Delete</button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Positioned tooltips
    <text>Positioned tooltips</text>
  </heading>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>
      has 12placementschoice. They don't have directional arrows; instead,
      they rely on motion emanating from the source to convey direction.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>TOP-START</text>
  </button>
  <button>
    Add
    <text>TOP</text>
  </button>
  <button>
    Add
    <text>TOP-END</text>
  </button>
  <button>
    Add
    <text>LEFT-START</text>
  </button>
  <LineBreak></LineBreak>
  <button>
    Add
    <text>LEFT</text>
  </button>
  <LineBreak></LineBreak>
  <button>
    Add
    <text>LEFT-END</text>
  </button>
  <button>
    Add
    <text>RIGHT-START</text>
  </button>
  <button>
    Add
    <text>RIGHT</text>
  </button>
  <button>
    Add
    <text>RIGHT-END</text>
  </button>
  <button>
    Add
    <text>BOTTOM-START</text>
  </button>
  <button>
    Add
    <text>BOTTOM</text>
  </button>
  <button>
    Add
    <text>BOTTOM-END</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Customized tooltips
    <text>Customized tooltips</text>
  </heading>
  <paragraph>
    <text>
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link>overrides documentation page</link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>LIGHT</text>
  </button>
  <button>
    Add
    <text>BOOTSTRAP</text>
  </button>
  <button>
    HTML
    <text>HTML</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Arrow tooltips
    <text>Arrow tooltips</text>
  </heading>
  <paragraph>
    <text>You can use the</text>
    <code>$SOME_CODE</code>
    <text>
      prop to give your tooltip an arrow indicating which element it refers to.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>ARROW</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Custom child element
    <text>Custom child element</text>
  </heading>
  <paragraph>
    <text>
      The tooltip needs to apply DOM event listeners to its child element. If
      the child is a custom React element, you need to make sure that it spreads
      its props to the underlying DOM element.
    </text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>You can find a similar concept in the</text>
    <link>wrapping components</link>
    <text>guide.</text>
  </paragraph>
  <heading level="2">
    Triggers
    <text>Triggers</text>
  </heading>
  <paragraph>
    <text>
      You can define the types of events that cause a tooltip to show.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>HOVER OR TOUCH</text>
  </button>
  <button>
    Add
    <text>FOCUS OR TOUCH</text>
  </button>
  <button>
    Add
    <text>HOVER</text>
  </button>
  <button>
    Add
    <text>CLICK</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Controlled tooltips
    <text>Controlled tooltips</text>
  </heading>
  <paragraph>
    <text>You can use the</text>
    <code>$SOME_CODE</code>
    <text>,</text>
    <code>$SOME_CODE</code>
    <text>and</text>
    <code>$SOME_CODE</code>
    <text>props to control the behavior of the tooltip.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>CONTROLLED</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Variable width
    <text>Variable width</text>
  </heading>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>wraps long text by default to make it readable.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Aliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est,
    vel aliquam tellus. Praesent non nunc mollis, fermentum neque at, semper
    arcu. Nullam eget est sed sem iaculis gravida eget vitae justo.
    <text>DEFAULT WIDTH [300PX]</text>
  </button>
  <button>
    Aliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est,
    vel aliquam tellus. Praesent non nunc mollis, fermentum neque at, semper
    arcu. Nullam eget est sed sem iaculis gravida eget vitae justo.
    <text>CUSTOM WIDTH [500PX]</text>
  </button>
  <button>
    Aliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est,
    vel aliquam tellus. Praesent non nunc mollis, fermentum neque at, semper
    arcu. Nullam eget est sed sem iaculis gravida eget vitae justo.
    <text>NO WRAPPING</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Interactive
    <text>Interactive</text>
  </heading>
  <paragraph>
    <text>Tooltips are interactive by default (to pass</text>
    <link>WCAG 2.1 success criterion 1.4.13</link>
    <text>
      ). It won't close when the user hovers over the tooltip before the
    </text>
    <code>$SOME_CODE</code>
    <text>
      is expired. You can disable this behavior (thus failing the success
      criterion which is required to reach level AA) by passing
    </text>
    <code>$SOME_CODE</code>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>NOT INTERACTIVE</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Disabled elements
    <text>Disabled elements</text>
  </heading>
  <paragraph>
    <text>By default disabled elements like</text>
    <code>$SOME_CODE</code>
    <text>do not trigger user interactions so a</text>
    <code>$SOME_CODE</code>
    <text>
      will not activate on normal events like hover. To accommodate disabled
      elements, add a simple wrapper element, such as a
    </text>
    <code>$SOME_CODE</code>
    <text>.</text>
  </paragraph>
  <blockquote>
    <paragraph>
      <text>
        ‚ö†Ô∏è In order to work with Safari, you need at least one display block or
        flex item below the tooltip wrapper.
      </text>
    </paragraph>
  </blockquote>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button disabled="true">
    A DISABLED BUTTON
    <text>A DISABLED BUTTON</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <blockquote>
    <paragraph>
      <text>
        If you're not wrapping a Material-UI component that inherits from
      </text>
      <code>$SOME_CODE</code>
      <text>, for instance, a native</text>
      <code>$SOME_CODE</code>
      <text>
        element, you should also add the CSS propertypointer-events: none;to
        your element when disabled:
      </text>
    </paragraph>
  </blockquote>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Transitions
    <text>Transitions</text>
  </heading>
  <paragraph>
    <text>Use a different transition.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>GROW</text>
  </button>
  <button>
    Add
    <text>FADE</text>
  </button>
  <button>
    Add
    <text>ZOOM</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Follow cursor
    <text>Follow cursor</text>
  </heading>
  <paragraph>
    <text>You can enable the tooltip to follow the cursor by setting</text>
    <code>$SOME_CODE</code>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Disabled Action</text>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Virtual element
    <text>Virtual element</text>
  </heading>
  <paragraph>
    <text>
      In the event you need to implement a custom placement, you can use the
    </text>
    <code>$SOME_CODE</code>
    <text>prop: The value of the</text>
    <code>$SOME_CODE</code>
    <text>
      prop can be a reference to a fake DOM element. You need to create an
      object shaped like the
    </text>
    <link>
      VirtualElement
      <code>$SOME_CODE</code>
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Hover</text>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Showing and hiding
    <text>Showing and hiding</text>
  </heading>
  <paragraph>
    <text>
      The tooltip is normally shown immediately when the user's mouse
      hovers over the element, and hides immediately when the user's mouse
      leaves. A delay in showing or hiding the tooltip can be added through the
    </text>
    <code>$SOME_CODE</code>
    <text>and</text>
    <code>$SOME_CODE</code>
    <text>props, as shown in the Controlled Tooltips demo above.</text>
  </paragraph>
  <paragraph>
    <text>
      On mobile, the tooltip is displayed when the user longpresses the element
      and hides after a delay of 1500ms. You can disable this feature with the
    </text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>[500MS, 200MS]</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Accessibility
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(WAI-ARIA:</text>
    <link>https://www.w3.org/TR/wai-aria-practices/#tooltip</link>
    <text>)</text>
  </paragraph>
  <paragraph>
    <text>
      By default, the tooltip only labels its child element. This is notably
      different from
    </text>
    <code>$SOME_CODE</code>
    <text>
      which can either labelordescribe its child depending on whether the child
      already has a label. For example, in:
    </text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>the</text>
    <code>$SOME_CODE</code>
    <text>
      acts as an accessible description. If you want the tooltip to act as an
      accessible description you can pass
    </text>
    <code>$SOME_CODE</code>
    <text>. Note that you shouldn't use</text>
    <code>$SOME_CODE</code>
    <text>
      if the tooltip provides the only visual label. Otherwise, the child would
      have no accessible name and the tooltip would violate
    </text>
    <link>success criterion 2.5.3 in WCAG 2.1</link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>Delete</button>
  <button description="Does not add if it already exists.">
    ADD
    <text>ADD</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <link>
        <Tooltip />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link>Table</link>
    <group>
      Was this page helpful?
      <text>Was this page helpful?</text>
      <button pressed="false">Yes</button>
      <button pressed="false">No</button>
    </group>
    <link>Typography</link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/transfer-list 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Transfer List
    <text>Transfer List</text>
  </heading>
  <paragraph>
    <text>
      A transfer list (or "shuttle") enables the user to move one or
      more list items between lists.
    </text>
  </paragraph>
  <heading level="2">
    Basic transfer list
    <text>Basic transfer list</text>
  </heading>
  <paragraph>
    <text>
      For completeness, this example includes buttons for "move all",
      but not every transfer list needs these.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <list>
    <listitem level="1">
      List item 1<checkbox checked="false">List item 1</checkbox>
      <text>List item 1</text>
    </listitem>
    <listitem level="1">
      List item 2<checkbox checked="false">List item 2</checkbox>
      <text>List item 2</text>
    </listitem>
    <listitem level="1">
      List item 3<checkbox checked="false">List item 3</checkbox>
      <text>List item 3</text>
    </listitem>
    <listitem level="1">
      List item 4<checkbox checked="false">List item 4</checkbox>
      <text>List item 4</text>
    </listitem>
    <listitem level="1"></listitem>
  </list>
  <button>
    move all right
    <text>‚â´</text>
  </button>
  <button disabled="true">
    move selected right
    <text>></text>
  </button>
  <button disabled="true">
    move selected left
    <text><</text>
  </button>
  <button>
    move all left
    <text>‚â™</text>
  </button>
  <list>
    <listitem level="1">
      List item 5<checkbox checked="false">List item 5</checkbox>
      <text>List item 5</text>
    </listitem>
    <listitem level="1">
      List item 6<checkbox checked="false">List item 6</checkbox>
      <text>List item 6</text>
    </listitem>
    <listitem level="1">
      List item 7<checkbox checked="false">List item 7</checkbox>
      <text>List item 7</text>
    </listitem>
    <listitem level="1">
      List item 8<checkbox checked="false">List item 8</checkbox>
      <text>List item 8</text>
    </listitem>
    <listitem level="1"></listitem>
  </list>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Enhanced transfer list
    <text>Enhanced transfer list</text>
  </heading>
  <paragraph>
    <text>
      This example exchanges the "move all" buttons for a "select
      all / select none" checkbox, and adds a counter.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="false">all items selected</checkbox>
  <text>Choices0/4 selected</text>
  <separator orientation="horizontal"></separator>
  <list>
    <listitem level="1">
      List item 1<checkbox checked="false">List item 1</checkbox>
      <text>List item 1</text>
    </listitem>
    <listitem level="1">
      List item 2<checkbox checked="false">List item 2</checkbox>
      <text>List item 2</text>
    </listitem>
    <listitem level="1">
      List item 3<checkbox checked="false">List item 3</checkbox>
      <text>List item 3</text>
    </listitem>
    <listitem level="1">
      List item 4<checkbox checked="false">List item 4</checkbox>
      <text>List item 4</text>
    </listitem>
    <listitem level="1"></listitem>
  </list>
  <button disabled="true">
    move selected right
    <text>></text>
  </button>
  <button disabled="true">
    move selected left
    <text><</text>
  </button>
  <checkbox checked="false">all items selected</checkbox>
  <text>Chosen0/4 selected</text>
  <separator orientation="horizontal"></separator>
  <list>
    <listitem level="1">
      List item 5<checkbox checked="false">List item 5</checkbox>
      <text>List item 5</text>
    </listitem>
    <listitem level="1">
      List item 6<checkbox checked="false">List item 6</checkbox>
      <text>List item 6</text>
    </listitem>
    <listitem level="1">
      List item 7<checkbox checked="false">List item 7</checkbox>
      <text>List item 7</text>
    </listitem>
    <listitem level="1">
      List item 8<checkbox checked="false">List item 8</checkbox>
      <text>List item 8</text>
    </listitem>
    <listitem level="1"></listitem>
  </list>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <link>
        <Checkbox />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <List />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <ListItem />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <Switch />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link>Text field</link>
    <group>
      Was this page helpful?
      <text>Was this page helpful?</text>
      <button pressed="false">Yes</button>
      <button pressed="false">No</button>
    </group>
    <link>Toggle Button</link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/tree-view/ 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Tree View
    <text>Tree View</text>
  </heading>
  <paragraph>
    <text>A tree view widget presents a hierarchical list.</text>
  </paragraph>
  <paragraph>
    <text>
      Tree views can be used to represent a file system navigator displaying
      folders and files, an item representing a folder can be expanded to reveal
      the contents of the folder, which may be files, folders, or both.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <link>Feedback</link>
    </listitem>
    <listitem level="1">
      <link>WAI-ARIA</link>
    </listitem>
    <listitem level="1">
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem level="1">
      <link>Figma</link>
    </listitem>
    <listitem level="1">
      <link>Adobe</link>
    </listitem>
    <listitem level="1">
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Basic tree view
    <text>Basic tree view</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    file system navigator
    <treeitem level="1">
      Applications
      <text>Applications</text>
    </treeitem>
    <treeitem level="1">
      Documents
      <text>Documents</text>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Multi-selection
    <text>Multi-selection</text>
  </heading>
  <paragraph>
    <text>Tree views also support multi-selection.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree multiselectable="true">
    multi-select
    <treeitem level="1">
      Applications
      <text>Applications</text>
    </treeitem>
    <treeitem level="1">
      Documents
      <text>Documents</text>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Controlled tree view
    <text>Controlled tree view</text>
  </heading>
  <paragraph>
    <text>The tree view also offers a controlled API.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    EXPAND ALL
    <text>EXPAND ALL</text>
  </button>
  <button>
    SELECT ALL
    <text>SELECT ALL</text>
  </button>
  <tree multiselectable="true">
    controlled
    <treeitem level="1">
      Applications
      <text>Applications</text>
    </treeitem>
    <treeitem level="1">
      Documents
      <text>Documents</text>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Rich object
    <text>Rich object</text>
  </heading>
  <paragraph>
    <text>While the</text>
    <code>$SOME_CODE</code>
    <text>/</text>
    <code>$SOME_CODE</code>
    <text>
      component API maximizes flexibility, an extra step is needed to handle a
      rich object.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Let's consider a data variable with the following shape, recursion
      can be used to handle it.
    </text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    rich object
    <treeitem expanded="true" level="1">
      Parent
      <text>Parent</text>
      <group>
        <treeitem level="2">
          Child - 1<text>Child - 1</text>
        </treeitem>
        <treeitem level="2">
          Child - 3<text>Child - 3</text>
        </treeitem>
      </group>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    ContentComponent prop
    <text>ContentComponent prop</text>
  </heading>
  <paragraph>
    <text>You can use the</text>
    <code>$SOME_CODE</code>
    <text>prop and the</text>
    <code>$SOME_CODE</code>
    <text>hook to further customize the behavior of the TreeItem.</text>
  </paragraph>
  <paragraph>
    <text>Such as limiting expansion to clicking the icon:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    icon expansion
    <treeitem level="1">
      Applications
      <text>Applications</text>
    </treeitem>
    <treeitem level="1">
      Documents
      <text>Documents</text>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <paragraph>
    <text>Or increasing the width of the state indicator:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    icon expansion
    <treeitem level="1">
      Applications
      <text>Applications</text>
    </treeitem>
    <treeitem level="1">
      Documents
      <text>Documents</text>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Customized tree view
    <text>Customized tree view</text>
  </heading>
  <heading level="3">
    Custom icons, border and animation
    <text>Custom icons, border and animation</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    customized
    <treeitem expanded="true" level="1">
      Main
      <text>Main</text>
      <group>
        <treeitem level="2">
          Hello
          <text>Hello</text>
        </treeitem>
        <treeitem level="2">
          Subtree with children
          <text>Subtree with children</text>
        </treeitem>
        <treeitem level="2">
          World
          <text>World</text>
        </treeitem>
        <treeitem level="2">
          Something something
          <text>Something something</text>
        </treeitem>
      </group>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="3">
    Gmail clone
    <text>Gmail clone</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    gmail
    <treeitem level="1">
      All Mail
      <paragraph>
        <text>All Mail</text>
      </paragraph>
    </treeitem>
    <treeitem level="1">
      Trash
      <paragraph>
        <text>Trash</text>
      </paragraph>
    </treeitem>
    <treeitem expanded="true" level="1">
      Categories
      <paragraph>
        <text>Categories</text>
      </paragraph>
      <group>
        <treeitem level="2">
          Social 90
          <paragraph>
            <text>Social</text>
          </paragraph>
          <text>90</text>
        </treeitem>
        <treeitem level="2">
          Updates 2,294
          <paragraph>
            <text>Updates</text>
          </paragraph>
          <text>2,294</text>
        </treeitem>
        <treeitem level="2">
          Forums 3,566
          <paragraph>
            <text>Forums</text>
          </paragraph>
          <text>3,566</text>
        </treeitem>
        <treeitem level="2">
          Promotions 733
          <paragraph>
            <text>Promotions</text>
          </paragraph>
          <text>733</text>
        </treeitem>
      </group>
    </treeitem>
    <treeitem level="1">
      History
      <paragraph>
        <text>History</text>
      </paragraph>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <heading level="2">
    Disabled tree items
    <text>Disabled tree items</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="false">Focus disabled items</checkbox>
  <tree multiselectable="true">
    disabled items
    <treeitem level="1">
      One
      <text>One</text>
    </treeitem>
    <treeitem disabled="true" level="1">
      Five
      <text>Five</text>
    </treeitem>
    <treeitem level="1">
      Seven
      <text>Seven</text>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <combobox haspopup="menu">See more</combobox>
  </toolbar>
  <paragraph>
    <text>The behavior of disabled tree items depends on the</text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <paragraph>
    <text>If it is false:</text>
  </paragraph>
  <list>
    <listitem level="1">
      <text>
        Arrow keys will not focus disabled items and, the next non-disabled item
        will be focused.
      </text>
    </listitem>
    <listitem level="1">
      <text>
        Typing the first character of a disabled item's label will not
        focus the item.
      </text>
    </listitem>
    <listitem level="1">
      <text>
        Mouse or keyboard interaction will not expand/collapse disabled items.
      </text>
    </listitem>
    <listitem level="1">
      <text>Mouse or keyboard interaction will not select disabled items.</text>
    </listitem>
    <listitem level="1">
      <text>
        Shift + arrow keys will skip disabled items and, the next non-disabled
        item will be selected.
      </text>
    </listitem>
    <listitem level="1">
      <text>Programmatic focus will not focus disabled items.</text>
    </listitem>
  </list>
  <paragraph>
    <text>If it is true:</text>
  </paragraph>
  <list>
    <listitem level="1">
      <text>Arrow keys will focus disabled items.</text>
    </listitem>
    <listitem level="1">
      <text>
        Typing the first character of a disabled item's label will focus
        the item.
      </text>
    </listitem>
    <listitem level="1">
      <text>
        Mouse or keyboard interaction will not expand/collapse disabled items.
      </text>
    </listitem>
    <listitem level="1">
      <text>Mouse or keyboard interaction will not select disabled items.</text>
    </listitem>
    <listitem level="1">
      <text>
        Shift + arrow keys will not skip disabled items but, the disabled item
        will not be selected.
      </text>
    </listitem>
    <listitem level="1">
      <text>Programmatic focus will focus disabled items.</text>
    </listitem>
  </list>
  <heading level="2">
    Accessibility
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(WAI-ARIA:</text>
    <link>https://www.w3.org/TR/wai-aria-practices/#TreeView</link>
    <text>)</text>
  </paragraph>
  <paragraph>
    <text>The component follows the WAI-ARIA authoring practices.</text>
  </paragraph>
  <paragraph>
    <text>To have an accessible tree view you must use</text>
    <code>$SOME_CODE</code>
    <text>or</text>
    <code>$SOME_CODE</code>
    <text>
      to reference or provide a label on the TreeView, otherwise screen readers
      will announce it as "tree", making it hard to understand the
      context of a specific tree item.
    </text>
  </paragraph>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <link>
        <TreeItem />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <link>
        <TreeView />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link>Trap Focus</link>
    <group>
      Was this page helpful?
      <text>Was this page helpful?</text>
      <button pressed="false">Yes</button>
      <button pressed="false">No</button>
    </group>
    <link>Accordion</link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`firefox / 1`] = `
<document>
  Material-UI: A popular React UI framework
  <link>Skip to content</link>
  <landmark>
    <button>Open main navigation</button>
    <combobox autocomplete="list" haspopup="true">
      Search
    </combobox>
    <text>Ctrl+K</text>
    <buttonmenu haspopup="true">
      Change language
      <text>ENGLISH</text>
    </buttonmenu>
    <button>Toggle settings drawer</button>
    <buttonmenu haspopup="true">Toggle notifications panel</buttonmenu>
    <link>GitHub repository</link>
  </landmark>
  <landmark>Main navigation</landmark>
  <landmark>
    <img></img>
    <heading level="1">
      MATERIAL-UI
      <text>MATERIAL-UI</text>
    </heading>
    <paragraph>
      <text>
        Material-UI is a simple and customizable component library to build
        faster, beautiful, and more accessible React applications. Follow your
        own design system, or start with Material Design.
      </text>
    </paragraph>
    <link>GET STARTED</link>
    <link>Star</link>
    <link>Follow</link>
    <link>Get Professional Support</link>
    <text>random sponsor</text>
    <link>a random quick word</link>
    <heading level="2">
      Installation
      <text>Installation</text>
    </heading>
    <text>
      Install Material-UI's source files via npm. We take care of injecting
      the CSS needed.$ npm install @material-ui/core@next @emotion/react
      @emotion/styled
    </text>
    <link>or use a CDN.</link>
    <text>
      Load the default Roboto font.<link rel="stylesheet"
      href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
      />
    </text>
    <separator></separator>
    <link>READ INSTALLATION DOCS</link>
    <heading level="2">
      Usage
      <text>Usage</text>
    </heading>
    <text>
      Material-UI components work without any additional setup, and don't
      pollute the global scope.import * as React from 'react'; import
      { Button } from '@material-ui/core'; function App()
      { return <Button>Hello World</Button>; }
    </text>
    <separator></separator>
    <link>EXPLORE THE DOCS</link>
    <heading level="2">
      Premium themes
      <text>Premium themes</text>
    </heading>
    <paragraph>
      <text>
        Take your project to the next level with premium themes from our store ‚Äì
        all built on Material-UI.
      </text>
    </paragraph>
    <link>
      Browse themes
      <img value="https://material-ui.com/store/?utm_source=docs&utm_medium=referral&utm_campaign=home-store">
        Browse themes
      </img>
    </link>
    <link>BROWSE THEMES</link>
    <separator></separator>
    <heading level="2">
      Material-UI's sponsors
      <text>Material-UI's sponsors</text>
    </heading>
    <paragraph>
      <text>
        The continued development and maintenance of Material-UI is made
        possible by these generous sponsors:
      </text>
    </paragraph>
    <heading level="3">
      Diamond üíé
      <text>Diamond üíé</text>
    </heading>
    <link>
      octopus
      <img
        description="Repeatable, reliable deployments"
        value="https://octopus.com/?utm_source=materialui&utm_medium=referral"
      >
        octopus
      </img>
    </link>
    <link>
      doit-intl
      <img
        description="Management Platform for Google Cloud and AWS"
        value="https://www.doit-intl.com/?utm_source=materialui&utm_medium=referral"
      >
        doit-intl
      </img>
    </link>
    <paragraph>
      <text>1/3 slots available</text>
    </paragraph>
    <heading level="3">
      Gold üèÜ
      <text>Gold üèÜ</text>
    </heading>
    <link>
      tidelift
      <img
        description="Enterprise-ready open source software"
        value="https://tidelift.com/subscription/pkg/npm-material-ui?utm_source=npm-material-ui&utm_medium=referral&utm_campaign=homepage"
      >
        tidelift
      </img>
    </link>
    <link>
      bitsrc
      <img description="The fastest way to share code" value="https://bit.dev/">
        bitsrc
      </img>
    </link>
    <link>
      elevator
      <img
        description="The dopest new hip hop, upcoming artsits, music news, culture, and style"
        value="https://www.elevatormag.com/"
      >
        elevator
      </img>
    </link>
    <link>
      call-em-all
      <img
        description="Mass Text Messaging & Automated Calling"
        value="https://www.text-em-all.com/"
      >
        call-em-all
      </img>
    </link>
    <link>
      canadacasino
      <img value="https://www.canadacasino.ca/">canadacasino</img>
    </link>
    <link>
      hoodiebees
      <img value="https://hoodiebees.com/">hoodiebees</img>
    </link>
    <heading level="3">
      There are more!
      <text>There are more!</text>
    </heading>
    <paragraph>
      <text>See the full list of</text>
      <link>our sponsors</link>
      <text>
        , and learn how you can contribute to the future of Material-UI.
      </text>
    </paragraph>
    <separator></separator>
    <heading level="2">
      Praise for Material-UI
      <text>Praise for Material-UI</text>
    </heading>
    <paragraph>
      <text>Here's what some of our users are saying.</text>
    </paragraph>
    <link>a random quote about Material-UI</link>
    <link>a random quote about Material-UI</link>
    <link>a random quote about Material-UI</link>
    <separator></separator>
    <heading level="2">
      Who's using Material-UI?
      <text>Who's using Material-UI?</text>
    </heading>
    <paragraph>
      <text>Join these and other great organizations!</text>
    </paragraph>
    <img>NASA</img>
    <img>Walmart Labs</img>
    <img>Capgemini</img>
    <img>Uniqlo</img>
    <img>Bethesda</img>
    <img>J.P. Morgan</img>
    <img>Shutterstock</img>
    <img>Netflix</img>
    <img>Coursera</img>
    <img>Amazon</img>
    <img>Unity</img>
    <paragraph>
      <text>Are you using Material-UI?</text>
    </paragraph>
    <link>LET US KNOW!</link>
  </landmark>
  <separator></separator>
  <landmark>
    <img></img>
    <link>Material-UI</link>
    <heading level="2">
      Community
      <text>Community</text>
    </heading>
    <list>
      <listitem>
        GitHub
        <link>GitHub</link>
      </listitem>
      <listitem>
        Twitter
        <link>Twitter</link>
      </listitem>
      <listitem>
        StackOverflow
        <link>StackOverflow</link>
      </listitem>
      <listitem>
        Team
        <link>Team</link>
      </listitem>
    </list>
    <heading level="2">
      Resources
      <text>Resources</text>
    </heading>
    <list>
      <listitem>
        Support
        <link>Support</link>
      </listitem>
      <listitem>
        Blog
        <link>Blog</link>
      </listitem>
      <listitem>
        Material Icons
        <link>Material Icons</link>
      </listitem>
    </list>
    <heading level="2">
      Company
      <text>Company</text>
    </heading>
    <list>
      <listitem>
        About
        <link>About</link>
      </listitem>
      <listitem>
        Contact Us
        <link>Contact Us</link>
      </listitem>
      <listitem>
        Careers HIRING
        <link>Careers</link>
        <link>HIRING</link>
      </listitem>
    </list>
    <paragraph>
      <text>Currently</text>
      <link>v5.0.0-alpha.35. View versions page.</link>
      <text>. Released under the</text>
      <link>MIT License</link>
      <text>. Copyright ¬© 2021 Material-UI.</text>
    </paragraph>
  </landmark>
  <text>
    <alert></alert>
  </text>
</document>;

`;

exports[`firefox /api/button/ 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Button API
    <text>Button API</text>
  </heading>
  <paragraph>
    <text>
      API documentation for the React Button component. Learn about the
      available props, and the CSS API.
    </text>
  </paragraph>
  <heading level="2">
    Import
    <text>Import</text>
  </heading>
  <text>
    import Button from '@material-ui/core/Button'; // or import {
    Button } from '@material-ui/core';You can learn about the
    difference by
  </text>
  <link>reading this guide on minimizing bundle size</link>
  <text>.</text>
  <heading level="2">
    Component name
    <text>Component name</text>
  </heading>
  <text>The name MuiButton can be used when providing</text>
  <link>default props</link>
  <text>or</text>
  <link>style overrides</link>
  <text>in the theme.</text>
  <heading level="2">
    Props
    <text>Props</text>
  </heading>
  <table>
    <row>
      <cell>
        <text>Name</text>
      </cell>
      <cell>
        <text>Type</text>
      </cell>
      <cell>
        <text>Default</text>
      </cell>
      <cell>
        <text>Description</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>children</text>
      </cell>
      <cell>
        <text>node</text>
      </cell>
      <cell></cell>
      <cell>
        <text>The content of the component.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>classes</text>
      </cell>
      <cell>
        <text>object</text>
      </cell>
      <cell></cell>
      <cell>
        <text>Override or extend the styles applied to the component. See</text>
        <link>CSS API</link>
        <text>below for more details.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>color</text>
      </cell>
      <cell>
        <text>'inherit'</text>
        <whitespace></whitespace>
        <text>|¬†'primary'</text>
        <whitespace></whitespace>
        <text>|¬†'secondary'</text>
        <whitespace></whitespace>
        <text>|¬†string</text>
      </cell>
      <cell>
        <text>'primary'</text>
      </cell>
      <cell>
        <text>
          The color of the component. It supports those theme colors that make
          sense for this component.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>component</text>
      </cell>
      <cell>
        <text>elementType</text>
      </cell>
      <cell></cell>
      <cell>
        <text>
          The component used for the root node. Either a string to use a HTML
          element or a component.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>disabled</text>
      </cell>
      <cell>
        <text>bool</text>
      </cell>
      <cell>
        <text>false</text>
      </cell>
      <cell>
        <text>If true, the component is disabled.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>disableElevation</text>
      </cell>
      <cell>
        <text>bool</text>
      </cell>
      <cell>
        <text>false</text>
      </cell>
      <cell>
        <text>If true, no elevation is used.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>disableFocusRipple</text>
      </cell>
      <cell>
        <text>bool</text>
      </cell>
      <cell>
        <text>false</text>
      </cell>
      <cell>
        <text>If true, the keyboard focus ripple is disabled.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>disableRipple</text>
      </cell>
      <cell>
        <text>bool</text>
      </cell>
      <cell>
        <text>false</text>
      </cell>
      <cell>
        <text>If true, the ripple effect is disabled.</text>
        <whitespace></whitespace>
        <text>
          ‚ö†Ô∏è Without a ripple there is no styling for :focus-visible by default.
          Be sure to highlight the element by applying separate styles with the
          .Mui-focusedVisible class.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>endIcon</text>
      </cell>
      <cell>
        <text>node</text>
      </cell>
      <cell></cell>
      <cell>
        <text>Element placed after the children.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>fullWidth</text>
      </cell>
      <cell>
        <text>bool</text>
      </cell>
      <cell>
        <text>false</text>
      </cell>
      <cell>
        <text>
          If true, the button will take up the full width of its container.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>href</text>
      </cell>
      <cell>
        <text>string</text>
      </cell>
      <cell></cell>
      <cell>
        <text>
          The URL to link to when the button is clicked. If defined, an a
          element will be used as the root node.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>size</text>
      </cell>
      <cell>
        <text>'small'</text>
        <whitespace></whitespace>
        <text>|¬†'medium'</text>
        <whitespace></whitespace>
        <text>|¬†'large'</text>
        <whitespace></whitespace>
        <text>|¬†string</text>
      </cell>
      <cell>
        <text>'medium'</text>
      </cell>
      <cell>
        <text>
          The size of the component. small is equivalent to the dense button
          styling.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>startIcon</text>
      </cell>
      <cell>
        <text>node</text>
      </cell>
      <cell></cell>
      <cell>
        <text>Element placed before the children.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>sx</text>
      </cell>
      <cell>
        <text>object</text>
      </cell>
      <cell></cell>
      <cell>
        <text>
          The system prop that allows defining system overrides as well as
          additional CSS styles. See the
        </text>
        <link>\`sx\` page</link>
        <text>for more details.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>variant</text>
      </cell>
      <cell>
        <text>'contained'</text>
        <whitespace></whitespace>
        <text>|¬†'outlined'</text>
        <whitespace></whitespace>
        <text>|¬†'text'</text>
        <whitespace></whitespace>
        <text>|¬†string</text>
      </cell>
      <cell>
        <text>'text'</text>
      </cell>
      <cell>
        <text>The variant to use.</text>
      </cell>
    </row>
  </table>
  <whitespace></whitespace>
  <text>The ref is forwarded to the root element.</text>
  <whitespace></whitespace>
  <text>Any other props supplied will be provided to the root element (</text>
  <link>ButtonBase</link>
  <text>).</text>
  <heading level="3">
    Inheritance
    <text>Inheritance</text>
  </heading>
  <text>While not explicitly documented above, the props of the</text>
  <link>ButtonBase</link>
  <text>
    component are also available on Button. You can take advantage of this to
  </text>
  <link>target nested components</link>
  <text>.</text>
  <heading level="2">
    CSS
    <text>CSS</text>
  </heading>
  <table>
    <row>
      <cell>
        <text>Rule name</text>
      </cell>
      <cell>
        <text>Global class</text>
      </cell>
      <cell>
        <text>Description</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>root</text>
      </cell>
      <cell>
        <text>.MuiButton-root</text>
      </cell>
      <cell>
        <text>Styles applied to the root element.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>label</text>
      </cell>
      <cell>
        <text>.MuiButton-label</text>
      </cell>
      <cell>
        <text>Styles applied to the span element that wraps the children.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>text</text>
      </cell>
      <cell>
        <text>.MuiButton-text</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if variant="text".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>textInherit</text>
      </cell>
      <cell>
        <text>.MuiButton-textInherit</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if variant="text" and
          color="inherit".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>textPrimary</text>
      </cell>
      <cell>
        <text>.MuiButton-textPrimary</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if variant="text" and
          color="primary".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>textSecondary</text>
      </cell>
      <cell>
        <text>.MuiButton-textSecondary</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if variant="text" and
          color="secondary".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>outlined</text>
      </cell>
      <cell>
        <text>.MuiButton-outlined</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if variant="outlined".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>outlinedInherit</text>
      </cell>
      <cell>
        <text>.MuiButton-outlinedInherit</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if variant="outlined" and
          color="inherit".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>outlinedPrimary</text>
      </cell>
      <cell>
        <text>.MuiButton-outlinedPrimary</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if variant="outlined" and
          color="primary".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>outlinedSecondary</text>
      </cell>
      <cell>
        <text>.MuiButton-outlinedSecondary</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if variant="outlined" and
          color="secondary".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>contained</text>
      </cell>
      <cell>
        <text>.MuiButton-contained</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if variant="contained".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>containedInherit</text>
      </cell>
      <cell>
        <text>.MuiButton-containedInherit</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if variant="contained"
          and color="inherit".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>containedPrimary</text>
      </cell>
      <cell>
        <text>.MuiButton-containedPrimary</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if variant="contained"
          and color="primary".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>containedSecondary</text>
      </cell>
      <cell>
        <text>.MuiButton-containedSecondary</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if variant="contained"
          and color="secondary".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>disableElevation</text>
      </cell>
      <cell>
        <text>.MuiButton-disableElevation</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if
          disableElevation={true}.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>focusVisible</text>
      </cell>
      <cell>
        <text>.Mui-focusVisible</text>
      </cell>
      <cell>
        <text>
          Pseudo-class applied to the ButtonBase root element if the button is
          keyboard focused.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>disabled</text>
      </cell>
      <cell>
        <text>.Mui-disabled</text>
      </cell>
      <cell>
        <text>
          Pseudo-class applied to the root element if disabled={true}.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>colorInherit</text>
      </cell>
      <cell>
        <text>.MuiButton-colorInherit</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if color="inherit".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>textSizeSmall</text>
      </cell>
      <cell>
        <text>.MuiButton-textSizeSmall</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if size="small" and
          variant="text".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>textSizeMedium</text>
      </cell>
      <cell>
        <text>.MuiButton-textSizeMedium</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if size="medium" and
          variant="text".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>textSizeLarge</text>
      </cell>
      <cell>
        <text>.MuiButton-textSizeLarge</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if size="large" and
          variant="text".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>outlinedSizeSmall</text>
      </cell>
      <cell>
        <text>.MuiButton-outlinedSizeSmall</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if size="small" and
          variant="outlined".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>outlinedSizeMedium</text>
      </cell>
      <cell>
        <text>.MuiButton-outlinedSizeMedium</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if size="medium" and
          variant="outlined".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>outlinedSizeLarge</text>
      </cell>
      <cell>
        <text>.MuiButton-outlinedSizeLarge</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if size="large" and
          variant="outlined".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>containedSizeSmall</text>
      </cell>
      <cell>
        <text>.MuiButton-containedSizeSmall</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if size="small" and
          variant="contained".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>containedSizeMedium</text>
      </cell>
      <cell>
        <text>.MuiButton-containedSizeMedium</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if size="small" and
          variant="contained".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>containedSizeLarge</text>
      </cell>
      <cell>
        <text>.MuiButton-containedSizeLarge</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if size="large" and
          variant="contained".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>sizeSmall</text>
      </cell>
      <cell>
        <text>.MuiButton-sizeSmall</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if size="small".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>sizeMedium</text>
      </cell>
      <cell>
        <text>.MuiButton-sizeMedium</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if size="medium".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>sizeLarge</text>
      </cell>
      <cell>
        <text>.MuiButton-sizeLarge</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if size="large".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>fullWidth</text>
      </cell>
      <cell>
        <text>.MuiButton-fullWidth</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if fullWidth={true}.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>startIcon</text>
      </cell>
      <cell>
        <text>.MuiButton-startIcon</text>
      </cell>
      <cell>
        <text>Styles applied to the startIcon element if supplied.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>endIcon</text>
      </cell>
      <cell>
        <text>.MuiButton-endIcon</text>
      </cell>
      <cell>
        <text>Styles applied to the endIcon element if supplied.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>iconSizeSmall</text>
      </cell>
      <cell>
        <text>.MuiButton-iconSizeSmall</text>
      </cell>
      <cell>
        <text>
          Styles applied to the icon element if supplied and
          size="small".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>iconSizeMedium</text>
      </cell>
      <cell>
        <text>.MuiButton-iconSizeMedium</text>
      </cell>
      <cell>
        <text>
          Styles applied to the icon element if supplied and
          size="medium".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>iconSizeLarge</text>
      </cell>
      <cell>
        <text>.MuiButton-iconSizeLarge</text>
      </cell>
      <cell>
        <text>
          Styles applied to the icon element if supplied and
          size="large".
        </text>
      </cell>
    </row>
  </table>
  <whitespace></whitespace>
  <text>
    You can override the style of the component using one of these customization
    options:
  </text>
  <list>
    <listitem>
      With a global class name .<text>With a</text>
      <link>global class name</link>
      <text>.</text>
    </listitem>
    <listitem>
      With a rule name as part of the component's styleOverrides property
      in a custom theme.
      <text>With a rule name as part of the component's</text>
      <link>styleOverrides property</link>
      <text>in a custom theme.</text>
    </listitem>
  </list>
  <heading level="2">
    Demos
    <text>Demos</text>
  </heading>
  <list>
    <listitem>
      Button Group
      <link>Button Group</link>
    </listitem>
    <listitem>
      Buttons
      <link>Buttons</link>
    </listitem>
  </list>
  <separator></separator>
  <link>Breadcrumbs</link>
  <group>
    Was this page helpful?
    <text>Was this page helpful?</text>
    <togglebutton>Yes</togglebutton>
    <togglebutton>No</togglebutton>
  </group>
  <link>ButtonBase</link>
</landmark>;

`;

exports[`firefox /api/select/ 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Select API
    <text>Select API</text>
  </heading>
  <paragraph>
    <text>
      API documentation for the React Select component. Learn about the
      available props, and the CSS API.
    </text>
  </paragraph>
  <heading level="2">
    Import
    <text>Import</text>
  </heading>
  <text>
    import Select from '@material-ui/core/Select'; // or import {
    Select } from '@material-ui/core';You can learn about the
    difference by
  </text>
  <link>reading this guide on minimizing bundle size</link>
  <text>.</text>
  <heading level="2">
    Component name
    <text>Component name</text>
  </heading>
  <text>The name MuiSelect can be used when providing</text>
  <link>default props</link>
  <text>or</text>
  <link>style overrides</link>
  <text>in the theme.</text>
  <heading level="2">
    Props
    <text>Props</text>
  </heading>
  <table>
    <row>
      <cell>
        <text>Name</text>
      </cell>
      <cell>
        <text>Type</text>
      </cell>
      <cell>
        <text>Default</text>
      </cell>
      <cell>
        <text>Description</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>autoWidth</text>
      </cell>
      <cell>
        <text>bool</text>
      </cell>
      <cell>
        <text>false</text>
      </cell>
      <cell>
        <text>
          If true, the width of the popover will automatically be set according
          to the items inside the menu, otherwise it will be at least the width
          of the select input.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>children</text>
      </cell>
      <cell>
        <text>node</text>
      </cell>
      <cell></cell>
      <cell>
        <text>
          The option elements to populate the select with. Can be some MenuItem
          when native is false and option when native is true.
        </text>
        <whitespace></whitespace>
        <text>
          ‚ö†Ô∏èThe MenuItem elements must be direct descendants when native is
          false.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>classes</text>
      </cell>
      <cell>
        <text>object</text>
      </cell>
      <cell>
        <text>{}</text>
      </cell>
      <cell>
        <text>Override or extend the styles applied to the component. See</text>
        <link>CSS API</link>
        <text>below for more details.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>defaultValue</text>
      </cell>
      <cell>
        <text>any</text>
      </cell>
      <cell></cell>
      <cell>
        <text>
          The default value. Use when the component is not controlled.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>displayEmpty</text>
      </cell>
      <cell>
        <text>bool</text>
      </cell>
      <cell>
        <text>false</text>
      </cell>
      <cell>
        <text>
          If true, a value is displayed even if no items are selected.
        </text>
        <whitespace></whitespace>
        <text>
          In order to display a meaningful value, a function can be passed to
          the renderValue prop which returns the value to be displayed when no
          items are selected.
        </text>
        <whitespace></whitespace>
        <text>
          ‚ö†Ô∏è When using this prop, make sure the label doesn't overlap with
          the empty displayed value. The label should either be hidden or forced
          to a shrunk state.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>IconComponent</text>
      </cell>
      <cell>
        <text>elementType</text>
      </cell>
      <cell>
        <text>ArrowDropDownIcon</text>
      </cell>
      <cell>
        <text>The icon that displays the arrow.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>id</text>
      </cell>
      <cell>
        <text>string</text>
      </cell>
      <cell></cell>
      <cell>
        <text>
          The id of the wrapper element or the select element when native.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>input</text>
      </cell>
      <cell>
        <text>element</text>
      </cell>
      <cell></cell>
      <cell>
        <text>
          An Input element; does not have to be a material-ui specific Input.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>inputProps</text>
      </cell>
      <cell>
        <text>object</text>
      </cell>
      <cell></cell>
      <cell>
        <link>Attributes</link>
        <text>
          applied to the input element. When native is true, the attributes are
          applied on the select element.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>label</text>
      </cell>
      <cell>
        <text>node</text>
      </cell>
      <cell></cell>
      <cell>
        <text>See</text>
        <link>OutlinedInput#label</link>
      </cell>
    </row>
    <row>
      <cell>
        <text>labelId</text>
      </cell>
      <cell>
        <text>string</text>
      </cell>
      <cell></cell>
      <cell>
        <text>
          The ID of an element that acts as an additional label. The Select will
          be labelled by the additional label and the selected value.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>MenuProps</text>
      </cell>
      <cell>
        <text>object</text>
      </cell>
      <cell></cell>
      <cell>
        <text>Props applied to the</text>
        <link>Menu</link>
        <text>element.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>multiple</text>
      </cell>
      <cell>
        <text>bool</text>
      </cell>
      <cell>
        <text>false</text>
      </cell>
      <cell>
        <text>
          If true, value must be an array and the menu will support multiple
          selections.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>native</text>
      </cell>
      <cell>
        <text>bool</text>
      </cell>
      <cell>
        <text>false</text>
      </cell>
      <cell>
        <text>If true, the component uses a native select element.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>onChange</text>
      </cell>
      <cell>
        <text>func</text>
      </cell>
      <cell></cell>
      <cell>
        <text>Callback fired when a menu item is selected.</text>
        <whitespace></whitespace>
        <whitespace></whitespace>
        <text>Signature:</text>
        <whitespace></whitespace>
        <text>function(event: object, child?: object) => void</text>
        <whitespace></whitespace>
        <text>
          event: The event source of the callback. You can pull out the new
          value by accessing event.target.value (any). Warning: This is a
          generic event not a change event.
        </text>
        <whitespace></whitespace>
        <text>
          child: The react element that was selected when native is false
          (default).
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>onClose</text>
      </cell>
      <cell>
        <text>func</text>
      </cell>
      <cell></cell>
      <cell>
        <text>
          Callback fired when the component requests to be closed. Use in
          controlled mode (see open).
        </text>
        <whitespace></whitespace>
        <whitespace></whitespace>
        <text>Signature:</text>
        <whitespace></whitespace>
        <text>function(event: object) => void</text>
        <whitespace></whitespace>
        <text>event: The event source of the callback.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>onOpen</text>
      </cell>
      <cell>
        <text>func</text>
      </cell>
      <cell></cell>
      <cell>
        <text>
          Callback fired when the component requests to be opened. Use in
          controlled mode (see open).
        </text>
        <whitespace></whitespace>
        <whitespace></whitespace>
        <text>Signature:</text>
        <whitespace></whitespace>
        <text>function(event: object) => void</text>
        <whitespace></whitespace>
        <text>event: The event source of the callback.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>open</text>
      </cell>
      <cell>
        <text>bool</text>
      </cell>
      <cell>
        <text>false</text>
      </cell>
      <cell>
        <text>
          If true, the component is shown. You can only use it when the native
          prop is false (default).
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>renderValue</text>
      </cell>
      <cell>
        <text>func</text>
      </cell>
      <cell></cell>
      <cell>
        <text>
          Render the selected value. You can only use it when the native prop is
          false (default).
        </text>
        <whitespace></whitespace>
        <whitespace></whitespace>
        <text>Signature:</text>
        <whitespace></whitespace>
        <text>function(value: any) => ReactNode</text>
        <whitespace></whitespace>
        <text>value: The value provided to the component.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>SelectDisplayProps</text>
      </cell>
      <cell>
        <text>object</text>
      </cell>
      <cell></cell>
      <cell>
        <text>Props applied to the clickable div element.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>sx</text>
      </cell>
      <cell>
        <text>object</text>
      </cell>
      <cell></cell>
      <cell>
        <text>
          The system prop that allows defining system overrides as well as
          additional CSS styles. See the
        </text>
        <link>\`sx\` page</link>
        <text>for more details.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>value</text>
      </cell>
      <cell>
        <text>any</text>
      </cell>
      <cell></cell>
      <cell>
        <text>
          The input value. Providing an empty string will select no options. Set
          to an empty string '' if you don't want any of the
          available options to be selected.
        </text>
        <whitespace></whitespace>
        <text>
          If the value is an object it must have reference equality with the
          option in order to be selected. If the value is not an object, the
          string representation must match with the string representation of the
          option in order to be selected.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>variant</text>
      </cell>
      <cell>
        <text>'filled'</text>
        <whitespace></whitespace>
        <text>|¬†'outlined'</text>
        <whitespace></whitespace>
        <text>|¬†'standard'</text>
      </cell>
      <cell>
        <text>'outlined'</text>
      </cell>
      <cell>
        <text>The variant to use.</text>
      </cell>
    </row>
  </table>
  <whitespace></whitespace>
  <text>The ref is forwarded to the root element.</text>
  <whitespace></whitespace>
  <text>Any other props supplied will be provided to the root element (</text>
  <link>OutlinedInput</link>
  <text>).</text>
  <heading level="3">
    Inheritance
    <text>Inheritance</text>
  </heading>
  <text>While not explicitly documented above, the props of the</text>
  <link>OutlinedInput</link>
  <text>
    component are also available on Select. You can take advantage of this to
  </text>
  <link>target nested components</link>
  <text>.</text>
  <heading level="2">
    CSS
    <text>CSS</text>
  </heading>
  <table>
    <row>
      <cell>
        <text>Rule name</text>
      </cell>
      <cell>
        <text>Global class</text>
      </cell>
      <cell>
        <text>Description</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>root</text>
      </cell>
      <cell>
        <text>.MuiSelect-root</text>
      </cell>
      <cell>
        <text>Styles applied to the root element.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>select</text>
      </cell>
      <cell>
        <text>.MuiSelect-select</text>
      </cell>
      <cell>
        <text>Styles applied to the select component \`select\` class.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>filled</text>
      </cell>
      <cell>
        <text>.MuiSelect-filled</text>
      </cell>
      <cell>
        <text>
          Styles applied to the select component if variant="filled".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>outlined</text>
      </cell>
      <cell>
        <text>.MuiSelect-outlined</text>
      </cell>
      <cell>
        <text>
          Styles applied to the select component if
          variant="outlined".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>standard</text>
      </cell>
      <cell>
        <text>.MuiSelect-standard</text>
      </cell>
      <cell>
        <text>
          Styles applied to the select component if
          variant="standard".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>disabled</text>
      </cell>
      <cell>
        <text>.Mui-disabled</text>
      </cell>
      <cell>
        <text>
          Pseudo-class applied to the select component \`disabled\` class.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>icon</text>
      </cell>
      <cell>
        <text>.MuiSelect-icon</text>
      </cell>
      <cell>
        <text>Styles applied to the icon component.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>iconOpen</text>
      </cell>
      <cell>
        <text>.MuiSelect-iconOpen</text>
      </cell>
      <cell>
        <text>Styles applied to the icon component if the popup is open.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>iconFilled</text>
      </cell>
      <cell>
        <text>.MuiSelect-iconFilled</text>
      </cell>
      <cell>
        <text>
          Styles applied to the icon component if variant="filled".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>iconOutlined</text>
      </cell>
      <cell>
        <text>.MuiSelect-iconOutlined</text>
      </cell>
      <cell>
        <text>
          Styles applied to the icon component if variant="outlined".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>iconStandard</text>
      </cell>
      <cell>
        <text>.MuiSelect-iconStandard</text>
      </cell>
      <cell>
        <text>
          Styles applied to the icon component if variant="standard".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>nativeInput</text>
      </cell>
      <cell>
        <text>.MuiSelect-nativeInput</text>
      </cell>
      <cell>
        <text>Styles applied to the underlying native input component.</text>
      </cell>
    </row>
  </table>
  <whitespace></whitespace>
  <text>
    You can override the style of the component using one of these customization
    options:
  </text>
  <list>
    <listitem>
      With a global class name .<text>With a</text>
      <link>global class name</link>
      <text>.</text>
    </listitem>
    <listitem>
      With a rule name as part of the component's styleOverrides property
      in a custom theme.
      <text>With a rule name as part of the component's</text>
      <link>styleOverrides property</link>
      <text>in a custom theme.</text>
    </listitem>
  </list>
  <heading level="2">
    Demos
    <text>Demos</text>
  </heading>
  <list>
    <listitem>
      Selects
      <link>Selects</link>
    </listitem>
  </list>
  <separator></separator>
  <link>ScopedCssBaseline</link>
  <group>
    Was this page helpful?
    <text>Was this page helpful?</text>
    <togglebutton>Yes</togglebutton>
    <togglebutton>No</togglebutton>
  </group>
  <link>Skeleton</link>
</landmark>;

`;

exports[`firefox /components/breadcrumbs 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Breadcrumbs
    <text>Breadcrumbs</text>
  </heading>
  <paragraph>
    <text>
      Breadcrumbs allow users to make selections from a range of values.
    </text>
  </paragraph>
  <list>
    <listitem>
      Feedback
      <link>Feedback</link>
    </listitem>
    <listitem>
      WAI-ARIA
      <link>WAI-ARIA</link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Figma
      <link>Figma</link>
    </listitem>
    <listitem>
      Adobe
      <link>Adobe</link>
    </listitem>
    <listitem>
      Sketch
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Basic breadcrumbs
    <text>Basic breadcrumbs</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    breadcrumb
    <list>
      <listitem>
        Material-UI
        <link>Material-UI</link>
      </listitem>
      <listitem>
        Core
        <link>Core</link>
      </listitem>
      <listitem>
        Breadcrumb
        <paragraph>
          <text>Breadcrumb</text>
        </paragraph>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Breadcrumbs aria-label="breadcrumb"> <Link
    color="inherit" href="/"> Material-UI </Link>
    <Link color="inherit"
    href="/getting-started/installation/"> Core </Link>
    <Typography
    color="text.primary">Breadcrumb</Typography>
    </Breadcrumbs>
  </text>
  <heading level="2">
    Active last breadcrumb
    <text>Active last breadcrumb</text>
  </heading>
  <paragraph>
    <text>Keep the last breadcrumb interactive.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    breadcrumb
    <list>
      <listitem>
        Material-UI
        <link>Material-UI</link>
      </listitem>
      <listitem>
        Core
        <link>Core</link>
      </listitem>
      <listitem>
        Breadcrumb
        <link>Breadcrumb</link>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Breadcrumbs aria-label="breadcrumb"> <Link
    color="inherit" href="/"> Material-UI </Link>
    <Link color="inherit"
    href="/getting-started/installation/"> Core </Link>
    <Link color="text.primary"
    href="/components/breadcrumbs/" aria-current="page" >
    Breadcrumb </Link> </Breadcrumbs>
  </text>
  <heading level="2">
    Custom separator
    <text>Custom separator</text>
  </heading>
  <paragraph>
    <text>
      In the following examples, we are using two string separators and an SVG
      icon.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    breadcrumb
    <list>
      <listitem>
        Material-UI
        <link>Material-UI</link>
      </listitem>
      <listitem>
        Core
        <link>Core</link>
      </listitem>
      <listitem>
        Breadcrumb
        <paragraph>
          <text>Breadcrumb</text>
        </paragraph>
      </listitem>
    </list>
  </landmark>
  <landmark>
    breadcrumb
    <list>
      <listitem>
        Material-UI
        <link>Material-UI</link>
      </listitem>
      <listitem>
        Core
        <link>Core</link>
      </listitem>
      <listitem>
        Breadcrumb
        <paragraph>
          <text>Breadcrumb</text>
        </paragraph>
      </listitem>
    </list>
  </landmark>
  <landmark>
    breadcrumb
    <list>
      <listitem>
        Material-UI
        <link>Material-UI</link>
      </listitem>
      <listitem>
        Core
        <link>Core</link>
      </listitem>
      <listitem>
        Breadcrumb
        <paragraph>
          <text>Breadcrumb</text>
        </paragraph>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Breadcrumbs separator="‚Ä∫"
    aria-label="breadcrumb"> {breadcrumbs}
    </Breadcrumbs> <Breadcrumbs separator="-"
    aria-label="breadcrumb"> {breadcrumbs}
    </Breadcrumbs> <Breadcrumbs separator={<NavigateNextIcon
    fontSize="small" />} aria-label="breadcrumb"
    > {breadcrumbs} </Breadcrumbs>
  </text>
  <heading level="2">
    Breadcrumbs with icons
    <text>Breadcrumbs with icons</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    breadcrumb
    <list>
      <listitem>
        Material-UI
        <link>Material-UI</link>
      </listitem>
      <listitem>
        Core
        <link>Core</link>
      </listitem>
      <listitem>
        Breadcrumb
        <text>Breadcrumb</text>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Collapsed breadcrumbs
    <text>Collapsed breadcrumbs</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    breadcrumb
    <list>
      <listitem>
        Home
        <link>Home</link>
      </listitem>
      <listitem>
        Show path
        <button>Show path</button>
      </listitem>
      <listitem>
        Belts
        <paragraph>
          <text>Belts</text>
        </paragraph>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Breadcrumbs maxItems={2} aria-label="breadcrumb">
    <Link color="inherit" href="#"> Home </Link>
    <Link color="inherit" href="#"> Catalog
    </Link> <Link color="inherit" href="#">
    Accessories </Link> <Link color="inherit"
    href="#"> New Collection </Link> <Typography
    color="text.primary">Belts</Typography>
    </Breadcrumbs>
  </text>
  <heading level="2">
    Customized breadcrumbs
    <text>Customized breadcrumbs</text>
  </heading>
  <paragraph>
    <text>
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link>overrides documentation page</link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    breadcrumb
    <list>
      <listitem>
        Home
        <link>Home</link>
      </listitem>
      <listitem>
        Catalog
        <link>Catalog</link>
      </listitem>
      <listitem>
        Accessories
        <button>
          Accessories
          <text>Accessories</text>
        </button>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Breadcrumbs aria-label="breadcrumb"> <StyledBreadcrumb
    component="a" href="#" label="Home"
    icon={<HomeIcon fontSize="small" />} />
    <StyledBreadcrumb component="a" href="#"
    label="Catalog" /> <StyledBreadcrumb
    label="Accessories" deleteIcon={<ExpandMoreIcon
    />} onDelete={handleClick} /> </Breadcrumbs>
  </text>
  <heading level="2">
    Integration with react-router
    <text>Integration with react-router</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    breadcrumb
    <list>
      <listitem>
        Home
        <link>Home</link>
      </listitem>
      <listitem>
        Inbox
        <paragraph>
          <text>Inbox</text>
        </paragraph>
      </listitem>
    </list>
  </landmark>
  <landmark>
    mailbox folders
    <list>
      <listitem level="1">
        Inbox
        <button>
          Inbox
          <text>Inbox</text>
        </button>
      </listitem>
      <listitem level="1">
        Important
        <list>
          <listitem level="2">
            Important
            <button>
              Important
              <text>Important</text>
            </button>
          </listitem>
        </list>
      </listitem>
      <listitem level="1">
        Trash
        <button>
          Trash
          <text>Trash</text>
        </button>
      </listitem>
      <listitem level="1">
        Spam
        <button>
          Spam
          <text>Spam</text>
        </button>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Accessibility
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(WAI-ARIA:</text>
    <link>https://www.w3.org/TR/wai-aria-practices/#breadcrumb</link>
    <text>)</text>
  </paragraph>
  <paragraph>
    <text>
      Be sure to add a aria-label description on the Breadcrumbs component.
    </text>
  </paragraph>
  <paragraph>
    <text>The accessibility of this component relies on:</text>
  </paragraph>
  <list>
    <listitem>
      The set of links is structured using an ordered list ( <ol>
      element).
      <text>
        The set of links is structured using an ordered list (<ol>
        element).
      </text>
    </listitem>
    <listitem>
      To prevent screen reader announcement of the visual separators between
      links, they are hidden with aria-hidden .
      <text>
        To prevent screen reader announcement of the visual separators between
        links, they are hidden with aria-hidden.
      </text>
    </listitem>
    <listitem>
      A nav element labeled with aria-label identifies the structure as a
      breadcrumb trail and makes it a navigation landmark so that it is easy to
      locate.
      <text>
        A nav element labeled with aria-label identifies the structure as a
        breadcrumb trail and makes it a navigation landmark so that it is easy
        to locate.
      </text>
    </listitem>
  </list>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem>
      <Breadcrumbs />
      <link><Breadcrumbs /></link>
    </listitem>
    <listitem>
      <Link />
      <link><Link /></link>
    </listitem>
    <listitem>
      <Typography />
      <link><Typography /></link>
    </listitem>
  </list>
  <separator></separator>
  <link>Bottom Navigation</link>
  <group>
    Was this page helpful?
    <text>Was this page helpful?</text>
    <togglebutton>Yes</togglebutton>
    <togglebutton>No</togglebutton>
  </group>
  <link>Drawer</link>
</landmark>;

`;

exports[`firefox /components/button-group/ 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Button group
    <text>Button group</text>
  </heading>
  <paragraph>
    <text>The ButtonGroup component can be used to group related buttons.</text>
  </paragraph>
  <list>
    <listitem>
      Feedback
      <link>Feedback</link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Figma
      <link>Figma</link>
    </listitem>
    <listitem>
      Adobe
      <link>Adobe</link>
    </listitem>
    <listitem>
      Sketch
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Basic button group
    <text>Basic button group</text>
  </heading>
  <paragraph>
    <text>
      The buttons can be grouped by wrapping them with the ButtonGroup
      component. They need to be immediate children.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    outlined primary button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <ButtonGroup variant="contained" aria-label="outlined
    primary button group"> <Button>One</Button>
    <Button>Two</Button> <Button>Three</Button>
    </ButtonGroup>
  </text>
  <heading level="2">
    Button variants
    <text>Button variants</text>
  </heading>
  <paragraph>
    <text>All the standard button variants are supported.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    outlined button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <group>
    text button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <ButtonGroup variant="outlined" aria-label="outlined
    button group"> <Button>One</Button>
    <Button>Two</Button> <Button>Three</Button>
    </ButtonGroup> <ButtonGroup variant="text"
    aria-label="text button group">
    <Button>One</Button> <Button>Two</Button>
    <Button>Three</Button> </ButtonGroup>
  </text>
  <heading level="2">
    Sizes and colors
    <text>Sizes and colors</text>
  </heading>
  <paragraph>
    <text>
      The size and color props can be used to control the appearance of the
      button group.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    small button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <group>
    medium secondary button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <group>
    large button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <ButtonGroup size="small" aria-label="small button
    group"> {buttons} </ButtonGroup> <ButtonGroup
    color="secondary" aria-label="medium secondary button
    group"> {buttons} </ButtonGroup> <ButtonGroup
    size="large" aria-label="large button group">
    {buttons} </ButtonGroup>
  </text>
  <heading level="2">
    Vertical group
    <text>Vertical group</text>
  </heading>
  <paragraph>
    <text>
      The button group can be displayed vertically using the orientation prop.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    vertical outlined button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <group>
    vertical contained button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <group>
    vertical contained button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Split button
    <text>Split button</text>
  </heading>
  <paragraph>
    <text>
      ButtonGroup can also be used to create a split button. The dropdown can
      change the button action (as in this example) or be used to immediately
      trigger a related action.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    split button
    <button>
      SQUASH AND MERGE
      <text>SQUASH AND MERGE</text>
    </button>
    <button haspopup="true">select merge strategy</button>
  </group>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Disabled elevation
    <text>Disabled elevation</text>
  </heading>
  <paragraph>
    <text>You can remove the elevation with the disableElevation prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
  </group>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <ButtonGroup disableElevation variant="contained">
    <Button>One</Button> <Button>Two</Button>
    </ButtonGroup>
  </text>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem>
      <Button />
      <link><Button /></link>
    </listitem>
    <listitem>
      <ButtonGroup />
      <link><ButtonGroup /></link>
    </listitem>
  </list>
  <separator></separator>
  <link>Button</link>
  <group>
    Was this page helpful?
    <text>Was this page helpful?</text>
    <togglebutton>Yes</togglebutton>
    <togglebutton>No</togglebutton>
  </group>
  <link>Checkbox</link>
</landmark>;

`;

exports[`firefox /components/buttons/ 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Button
    <text>Button</text>
  </heading>
  <paragraph>
    <text>
      Buttons allow users to take actions, and make choices, with a single tap.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Buttons communicate actions that users can take. They are typically placed
      throughout your UI, in places like:
    </text>
  </paragraph>
  <list>
    <listitem>
      Dialogs
      <text>Dialogs</text>
    </listitem>
    <listitem>
      Modal windows
      <text>Modal windows</text>
    </listitem>
    <listitem>
      Forms
      <text>Forms</text>
    </listitem>
    <listitem>
      Cards
      <text>Cards</text>
    </listitem>
    <listitem>
      Toolbars
      <text>Toolbars</text>
    </listitem>
  </list>
  <list>
    <listitem>
      Feedback
      <link>Feedback</link>
    </listitem>
    <listitem>
      WAI-ARIA
      <link>WAI-ARIA</link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Material Design
      <link>Material Design</link>
    </listitem>
    <listitem>
      Figma
      <link>Figma</link>
    </listitem>
    <listitem>
      Adobe
      <link>Adobe</link>
    </listitem>
    <listitem>
      Sketch
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Basic Button
    <text>Basic Button</text>
  </heading>
  <paragraph>
    <text>
      The Button comes with three variants: text (default), contained, and
      outlined.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    TEXT
    <text>TEXT</text>
  </button>
  <button>
    CONTAINED
    <text>CONTAINED</text>
  </button>
  <button>
    OUTLINED
    <text>OUTLINED</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Button variant="text">Text</Button> <Button
    variant="contained">Contained</Button> <Button
    variant="outlined">Outlined</Button>
  </text>
  <heading level="3">
    Text buttons
    <text>Text buttons</text>
  </heading>
  <paragraph>
    <link>Text buttons</link>
    <text>
      are typically used for less-pronounced actions, including those located:
      in dialogs, in cards. In cards, text buttons help maintain an emphasis on
      card content.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    PRIMARY
    <text>PRIMARY</text>
  </button>
  <button disabled="true">
    DISABLED
    <text>DISABLED</text>
  </button>
  <link>LINK</link>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Button>Primary</Button> <Button
    disabled>Disabled</Button> <Button
    href="#text-buttons">Link</Button>
  </text>
  <heading level="3">
    Contained buttons
    <text>Contained buttons</text>
  </heading>
  <paragraph>
    <link>Contained buttons</link>
    <text>
      are high-emphasis, distinguished by their use of elevation and fill. They
      contain actions that are primary to your app.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    CONTAINED
    <text>CONTAINED</text>
  </button>
  <button disabled="true">
    DISABLED
    <text>DISABLED</text>
  </button>
  <link>LINK</link>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Button variant="contained">Contained</Button>
    <Button variant="contained" disabled> Disabled
    </Button> <Button variant="contained"
    href="#contained-buttons"> Link </Button>
  </text>
  <paragraph>
    <text>You can remove the elevation with the disableElevation prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    DISABLE ELEVATION
    <text>DISABLE ELEVATION</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Button variant="contained" disableElevation> Disable
    elevation </Button>
  </text>
  <heading level="3">
    Outlined buttons
    <text>Outlined buttons</text>
  </heading>
  <paragraph>
    <link>Outlined buttons</link>
    <text>
      are medium-emphasis buttons. They contain actions that are important but
      aren't the primary action in an app.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Outlined buttons are also a lower emphasis alternative to contained
      buttons, or a higher emphasis alternative to text buttons.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    PRIMARY
    <text>PRIMARY</text>
  </button>
  <button disabled="true">
    DISABLED
    <text>DISABLED</text>
  </button>
  <link>LINK</link>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Button variant="outlined">Primary</Button> <Button
    variant="outlined" disabled> Disabled </Button>
    <Button variant="outlined"
    href="#outlined-buttons"> Link </Button>
  </text>
  <heading level="2">
    Handling clicks
    <text>Handling clicks</text>
  </heading>
  <paragraph>
    <text>
      All components accept an onClick handler that is applied to the root DOM
      element.
    </text>
  </paragraph>
  <text>
    <Button onClick={() => { alert('clicked');
    }} > Click me </Button>
  </text>
  <paragraph>
    <text>Note that the documentation</text>
    <link>avoids</link>
    <text>
      mentioning native props (there are a lot) in the API section of the
      components.
    </text>
  </paragraph>
  <heading level="2">
    Color
    <text>Color</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    SECONDARY
    <text>SECONDARY</text>
  </button>
  <button>
    SECONDARY
    <text>SECONDARY</text>
  </button>
  <button>
    SECONDARY
    <text>SECONDARY</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Button color="secondary">Secondary</Button>
    <Button variant="contained" color="secondary">
    Secondary </Button> <Button variant="outlined"
    color="secondary"> Secondary </Button>
  </text>
  <paragraph>
    <text>
      In addition to using the default button colors, you can add custom ones,
      or disable any you don't need. See the
    </text>
    <link>Adding new colors</link>
    <text>example for more info.</text>
  </paragraph>
  <heading level="2">
    Sizes
    <text>Sizes</text>
  </heading>
  <paragraph>
    <text>For larger or smaller buttons, use the size prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    SMALL
    <text>SMALL</text>
  </button>
  <button>
    MEDIUM
    <text>MEDIUM</text>
  </button>
  <button>
    LARGE
    <text>LARGE</text>
  </button>
  <button>
    SMALL
    <text>SMALL</text>
  </button>
  <button>
    MEDIUM
    <text>MEDIUM</text>
  </button>
  <button>
    LARGE
    <text>LARGE</text>
  </button>
  <button>
    SMALL
    <text>SMALL</text>
  </button>
  <button>
    MEDIUM
    <text>MEDIUM</text>
  </button>
  <button>
    LARGE
    <text>LARGE</text>
  </button>
  <button>delete</button>
  <button>delete</button>
  <button>delete</button>
  <button>delete</button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Upload button
    <text>Upload button</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    UPLOAD
    <button>
      UPLOAD
      <text>UPLOAD</text>
    </button>
  </label>
  <label>
    upload picture
    <button>upload picture</button>
  </label>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <label htmlFor="contained-button-file"> <Input
    accept="image/*" id="contained-button-file" multiple
    type="file" /> <Button variant="contained"
    component="span"> Upload </Button> </label>
    <label htmlFor="icon-button-file"> <Input
    accept="image/*" id="icon-button-file"
    type="file" /> <IconButton color="primary"
    aria-label="upload picture" component="span">
    <PhotoCamera /> </IconButton> </label>
  </text>
  <heading level="2">
    Buttons with icons and label
    <text>Buttons with icons and label</text>
  </heading>
  <paragraph>
    <text>
      Sometimes you might want to have icons for certain buttons to enhance the
      UX of the application as we recognize logos more easily than plain text.
      For example, if you have a delete button you can label it with a dustbin
      icon.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    DELETE
    <text>DELETE</text>
  </button>
  <button>
    SEND
    <text>SEND</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Button variant="outlined" startIcon={<DeleteIcon
    />}> Delete </Button> <Button
    variant="contained" endIcon={<SendIcon />}>
    Send </Button>
  </text>
  <heading level="2">
    Icon button
    <text>Icon button</text>
  </heading>
  <paragraph>
    <text>Icon buttons are commonly found in app bars and toolbars.</text>
  </paragraph>
  <paragraph>
    <text>
      Icons are also appropriate for toggle buttons that allow a single choice
      to be selected or deselected, such as adding or removing a star to an
      item.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>delete</button>
  <button disabled="true">delete</button>
  <button>add an alarm</button>
  <button>add to shopping cart</button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <IconButton aria-label="delete"> <DeleteIcon />
    </IconButton> <IconButton aria-label="delete" disabled
    color="primary"> <DeleteIcon /> </IconButton>
    <IconButton color="secondary" aria-label="add an
    alarm"> <AlarmIcon /> </IconButton> <IconButton
    color="primary" aria-label="add to shopping cart">
    <AddShoppingCartIcon /> </IconButton>
  </text>
  <heading level="2">
    Customized buttons
    <text>Customized buttons</text>
  </heading>
  <paragraph>
    <text>
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link>overrides documentation page</link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    CUSTOM CSS
    <text>CUSTOM CSS</text>
  </button>
  <button>
    Bootstrap
    <text>Bootstrap</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <paragraph>
    <text>üé® If you are looking for inspiration, you can check</text>
    <link>MUI Treasury's customization examples</link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Loading buttons
    <text>Loading buttons</text>
  </heading>
  <paragraph>
    <text>
      The loading buttons can show loading state and disable interactions.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button disabled="true">
    50
    <progressbar checked="mixed" value="50" valuetext="50">
      <diagram></diagram>
    </progressbar>
  </button>
  <button disabled="true">
    LOADING...
    <text>LOADING...</text>
  </button>
  <button disabled="true">
    50 SAVE
    <progressbar checked="mixed" value="50" valuetext="50">
      <diagram></diagram>
    </progressbar>
    <text>SAVE</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <LoadingButton loading variant="outlined"> Submit
    </LoadingButton> <LoadingButton loading
    loadingIndicator="Loading..." variant="outlined">
    Fetch data </LoadingButton> <LoadingButton loading
    loadingPosition="start" startIcon={<SaveIcon />}
    variant="outlined" > Save </LoadingButton>
  </text>
  <paragraph>
    <text>
      Toggle the switch to see the transition between the different states.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Loading
    <checkbox>Loading</checkbox>
    <text>Loading</text>
  </label>
  <button>
    SUBMIT
    <text>SUBMIT</text>
  </button>
  <button>
    FETCH DATA
    <text>FETCH DATA</text>
  </button>
  <button>
    SEND
    <text>SEND</text>
  </button>
  <button>
    SAVE
    <text>SAVE</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Complex buttons
    <text>Complex buttons</text>
  </heading>
  <paragraph>
    <text>
      The Text Buttons, Contained Buttons, Floating Action Buttons and Icon
      Buttons are built on top of the same component: the ButtonBase. You can
      take advantage of this lower-level component to build custom interactions.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Breakfast
    <text>Breakfast</text>
  </button>
  <button>
    Burgers
    <text>Burgers</text>
  </button>
  <button>
    Camera
    <text>Camera</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Third-party routing library
    <text>Third-party routing library</text>
  </heading>
  <paragraph>
    <text>
      One frequent use case is to perform navigation on the client only, without
      an HTTP round-trip to the server. The ButtonBase component provides the
      component prop to handle this use case. Here is a
    </text>
    <link>more detailed guide</link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Limitations
    <text>Limitations</text>
  </heading>
  <heading level="3">
    Cursor not-allowed
    <text>Cursor not-allowed</text>
  </heading>
  <paragraph>
    <text>
      The ButtonBase component sets pointer-events: none; on disabled buttons,
      which prevents the appearance of a disabled cursor.
    </text>
  </paragraph>
  <paragraph>
    <text>If you wish to use not-allowed, you have two options:</text>
  </paragraph>
  <list>
    <listitem>
      CSS only . You can remove the pointer-events style on the disabled state
      of the <button> element:
      <text>
        CSS only. You can remove the pointer-events style on the disabled state
        of the <button> element:
      </text>
    </listitem>
  </list>
  <text>
    .MuiButtonBase-root:disabled { cursor: not-allowed; pointer-events:
    auto; }
  </text>
  <paragraph>
    <text>However:</text>
  </paragraph>
  <list>
    <listitem>
      You should add pointer-events: none; back when you need to display
      tooltips on disabled elements .
      <text>
        You should add pointer-events: none; back when you need to display
      </text>
      <link>tooltips on disabled elements</link>
      <text>.</text>
    </listitem>
    <listitem>
      The cursor won't change if you render something other than a button
      element, for instance, a link <a> element.
      <text>
        The cursor won't change if you render something other than a button
        element, for instance, a link <a> element.
      </text>
    </listitem>
  </list>
  <list>
    <listitem>
      DOM change . You can wrap the button:
      <text>DOM change. You can wrap the button:</text>
    </listitem>
  </list>
  <text>
    <span style={{ cursor: 'not-allowed' }}>
    <Button component={Link} disabled> disabled </Button>
    </span>
  </text>
  <paragraph>
    <text>
      This has the advantage of supporting any element, for instance, a link
      <a> element.
    </text>
  </paragraph>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem>
      <Button />
      <link><Button /></link>
    </listitem>
    <listitem>
      <ButtonBase />
      <link><ButtonBase /></link>
    </listitem>
    <listitem>
      <IconButton />
      <link><IconButton /></link>
    </listitem>
    <listitem>
      <LoadingButton />
      <link><LoadingButton /></link>
    </listitem>
  </list>
  <separator></separator>
  <link>Autocomplete</link>
  <group>
    Was this page helpful?
    <text>Was this page helpful?</text>
    <togglebutton>Yes</togglebutton>
    <togglebutton>No</togglebutton>
  </group>
  <link>Button Group</link>
</landmark>;

`;

exports[`firefox /components/checkboxes/ 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Checkbox
    <text>Checkbox</text>
  </heading>
  <paragraph>
    <text>
      Checkboxes allow the user to select one or more items from a set.
    </text>
  </paragraph>
  <paragraph>
    <text>Checkboxes can be used to turn an option on or off.</text>
  </paragraph>
  <paragraph>
    <text>
      If you have multiple options appearing in a list, you can preserve space
      by using checkboxes instead of on/off switches. If you have a single
      option, avoid using a checkbox and use an on/off switch instead.
    </text>
  </paragraph>
  <list>
    <listitem>
      Feedback
      <link>Feedback</link>
    </listitem>
    <listitem>
      WAI-ARIA
      <link>WAI-ARIA</link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Material Design
      <link>Material Design</link>
    </listitem>
    <listitem>
      Figma
      <link>Figma</link>
    </listitem>
    <listitem>
      Adobe
      <link>Adobe</link>
    </listitem>
    <listitem>
      Sketch
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Basic checkboxes
    <text>Basic checkboxes</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">Checkbox demo</checkbox>
  <checkbox>Checkbox demo</checkbox>
  <checkbox disabled="true">Checkbox demo</checkbox>
  <checkbox checked="true" disabled="true">
    Checkbox demo
  </checkbox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Checkbox {...label} defaultChecked /> <Checkbox
    {...label} /> <Checkbox {...label} disabled />
    <Checkbox {...label} disabled checked />
  </text>
  <heading level="2">
    Label
    <text>Label</text>
  </heading>
  <paragraph>
    <text>
      You can provide a label to the Checkbox thanks to the FormControlLabel
      component.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Label
    <checkbox checked="true">Label</checkbox>
    <text>Label</text>
  </label>
  <label>
    Disabled
    <checkbox disabled="true">Disabled</checkbox>
    <text>Disabled</text>
  </label>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <FormGroup> <FormControlLabel control={<Checkbox
    defaultChecked />} label="Label" />
    <FormControlLabel disabled control={<Checkbox />}
    label="Disabled" /> </FormGroup>
  </text>
  <heading level="2">
    Size
    <text>Size</text>
  </heading>
  <paragraph>
    <text>
      Use the size prop or customize the font size of the svg icons to change
      the size of the checkboxes.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">Checkbox demo</checkbox>
  <checkbox checked="true">Checkbox demo</checkbox>
  <checkbox checked="true">Checkbox demo</checkbox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Checkbox {...label} defaultChecked size="small"
    /> <Checkbox {...label} defaultChecked /> <Checkbox
    {...label} defaultChecked sx={{ '&
    .MuiSvgIcon-root': { fontSize: 28 } }} />
  </text>
  <heading level="2">
    Color
    <text>Color</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">Checkbox demo</checkbox>
  <checkbox checked="true">Checkbox demo</checkbox>
  <checkbox checked="true">Checkbox demo</checkbox>
  <checkbox checked="true">Checkbox demo</checkbox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Checkbox {...label} defaultChecked /> <Checkbox
    {...label} defaultChecked color="secondary" />
    <Checkbox {...label} defaultChecked color="default"
    /> <Checkbox {...label} defaultChecked sx={{
    color: green[800], '&.Mui-checked': { color: green[600],
    }, }} />
  </text>
  <heading level="2">
    Icon
    <text>Icon</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox>Checkbox demo</checkbox>
  <checkbox>Checkbox demo</checkbox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Checkbox {...label} icon={<FavoriteBorder />}
    checkedIcon={<Favorite />} /> <Checkbox
    {...label} icon={<BookmarkBorderIcon />}
    checkedIcon={<BookmarkIcon />} />
  </text>
  <heading level="2">
    Controlled
    <text>Controlled</text>
  </heading>
  <paragraph>
    <text>
      You can control the checkbox with the checked and onChange props:
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">controlled</checkbox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Checkbox checked={checked} onChange={handleChange}
    inputProps={{ 'aria-label': 'controlled'
    }} />
  </text>
  <heading level="2">
    Indeterminate
    <text>Indeterminate</text>
  </heading>
  <paragraph>
    <text>
      A checkbox input can only have two states in a form: checked or unchecked.
      It either submits its value or doesn't. Visually, there are three
      states a checkbox can be in: checked, unchecked, or indeterminate.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Parent
    <checkbox>Parent</checkbox>
    <text>Parent</text>
  </label>
  <label>
    Child 1<checkbox checked="true">Child 1</checkbox>
    <text>Child 1</text>
  </label>
  <label>
    Child 2<checkbox>Child 2</checkbox>
    <text>Child 2</text>
  </label>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <FormControlLabel label="Parent" control={ <Checkbox
    checked={checked[0] && checked[1]}
    indeterminate={checked[0] !== checked[1]}
    onChange={handleChange1} /> } /> {children}
  </text>
  <blockquote>
    <paragraph>
      <text>
        ‚ö†Ô∏è When indeterminate is set, the value of the checked prop only impacts
        the form submitted values. It has no accessibility or UX implications.
      </text>
    </paragraph>
  </blockquote>
  <heading level="2">
    FormGroup
    <text>FormGroup</text>
  </heading>
  <paragraph>
    <text>
      FormGroup is a helpful wrapper used to group selection control components.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    Assign responsibility
    <label>
      Assign responsibility
      <text>Assign responsibility</text>
    </label>
    <label>
      Gilad Gray
      <checkbox checked="true">Gilad Gray</checkbox>
      <text>Gilad Gray</text>
    </label>
    <label>
      Jason Killian
      <checkbox>Jason Killian</checkbox>
      <text>Jason Killian</text>
    </label>
    <label>
      Antoine Llorca
      <checkbox>Antoine Llorca</checkbox>
      <text>Antoine Llorca</text>
    </label>
    <paragraph>
      <text>Be careful</text>
    </paragraph>
  </group>
  <group>
    Pick two
    <label>
      Pick two
      <text>Pick two</text>
    </label>
    <label>
      Gilad Gray
      <checkbox checked="true">Gilad Gray</checkbox>
      <text>Gilad Gray</text>
    </label>
    <label>
      Jason Killian
      <checkbox>Jason Killian</checkbox>
      <text>Jason Killian</text>
    </label>
    <label>
      Antoine Llorca
      <checkbox>Antoine Llorca</checkbox>
      <text>Antoine Llorca</text>
    </label>
    <paragraph>
      <text>You can display an error</text>
    </paragraph>
  </group>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Label placement
    <text>Label placement</text>
  </heading>
  <paragraph>
    <text>You can change the placement of the label:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    Label placement
    <label>
      Label placement
      <text>Label placement</text>
    </label>
    <label>
      Top
      <checkbox>Top</checkbox>
      <text>Top</text>
    </label>
    <label>
      Start
      <checkbox>Start</checkbox>
      <text>Start</text>
    </label>
    <label>
      Bottom
      <checkbox>Bottom</checkbox>
      <text>Bottom</text>
    </label>
    <label>
      End
      <checkbox>End</checkbox>
      <text>End</text>
    </label>
  </group>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Customized checkbox
    <text>Customized checkbox</text>
  </heading>
  <paragraph>
    <text>
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link>overrides documentation page</link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox>Checkbox demo</checkbox>
  <checkbox checked="true">Checkbox demo</checkbox>
  <checkbox disabled="true">Checkbox demo</checkbox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <BpCheckbox /> <BpCheckbox defaultChecked /> <BpCheckbox
    disabled />
  </text>
  <paragraph>
    <text>üé® If you are looking for inspiration, you can check</text>
    <link>MUI Treasury's customization examples</link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    When to use
    <text>When to use</text>
  </heading>
  <list>
    <listitem>
      Checkboxes vs. Radio Buttons
      <link>Checkboxes vs. Radio Buttons</link>
    </listitem>
    <listitem>
      Checkboxes vs. Switches
      <link>Checkboxes vs. Switches</link>
    </listitem>
  </list>
  <heading level="2">
    Accessibility
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(WAI-ARIA:</text>
    <link>https://www.w3.org/TR/wai-aria-practices/#checkbox</link>
    <text>)</text>
  </paragraph>
  <list>
    <listitem>
      All form controls should have labels, and this includes radio buttons,
      checkboxes, and switches. In most cases, this is done by using the
      <label> element ( FormControlLabel ).
      <text>
        All form controls should have labels, and this includes radio buttons,
        checkboxes, and switches. In most cases, this is done by using the
        <label> element (
      </text>
      <link>FormControlLabel</link>
      <text>).</text>
    </listitem>
    <listitem>
      When a label can't be used, it's necessary to add an attribute
      directly to the input component. In this case, you can apply the
      additional attribute (e.g. aria-label , aria-labelledby , title ) via the
      inputProps prop.
      <text>
        When a label can't be used, it's necessary to add an attribute
        directly to the input component. In this case, you can apply the
        additional attribute (e.g. aria-label, aria-labelledby, title) via the
        inputProps prop.
      </text>
    </listitem>
  </list>
  <text>
    <Checkbox value="checkedA" inputProps={{
    'aria-label': 'Checkbox A', }} />
  </text>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem>
      <Checkbox />
      <link><Checkbox /></link>
    </listitem>
    <listitem>
      <FormControl />
      <link><FormControl /></link>
    </listitem>
    <listitem>
      <FormControlLabel />
      <link><FormControlLabel /></link>
    </listitem>
    <listitem>
      <FormGroup />
      <link><FormGroup /></link>
    </listitem>
    <listitem>
      <FormLabel />
      <link><FormLabel /></link>
    </listitem>
  </list>
  <separator></separator>
  <link>Button Group</link>
  <group>
    Was this page helpful?
    <text>Was this page helpful?</text>
    <togglebutton>Yes</togglebutton>
    <togglebutton>No</togglebutton>
  </group>
  <link>Floating Action Button</link>
</landmark>;

`;

exports[`firefox /components/dialogs/ 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Dialog
    <text>Dialog</text>
  </heading>
  <paragraph>
    <text>
      Dialogs inform users about a task and can contain critical information,
      require decisions, or involve multiple tasks.
    </text>
  </paragraph>
  <paragraph>
    <text>A Dialog is a type of</text>
    <link>modal</link>
    <text>
      window that appears in front of app content to provide critical
      information or ask for a decision. Dialogs disable all app functionality
      when they appear, and remain on screen until confirmed, dismissed, or a
      required action has been taken.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Dialogs are purposefully interruptive, so they should be used sparingly.
    </text>
  </paragraph>
  <list>
    <listitem>
      Feedback
      <link>Feedback</link>
    </listitem>
    <listitem>
      WAI-ARIA
      <link>WAI-ARIA</link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Material Design
      <link>Material Design</link>
    </listitem>
    <listitem>
      Figma
      <link>Figma</link>
    </listitem>
    <listitem>
      Adobe
      <link>Adobe</link>
    </listitem>
    <listitem>
      Sketch
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Basic dialog
    <text>Basic dialog</text>
  </heading>
  <paragraph>
    <text>
      Simple dialogs can provide additional details or actions about a list
      item. For example, they can display avatars, icons, clarifying subtext, or
      orthogonal actions (such as adding an account).
    </text>
  </paragraph>
  <paragraph>
    <text>Touch mechanics:</text>
  </paragraph>
  <list>
    <listitem>
      Choosing an option immediately commits the option and closes the menu
      <text>
        Choosing an option immediately commits the option and closes the menu
      </text>
    </listitem>
    <listitem>
      Touching outside of the dialog, or pressing Back, cancels the action and
      closes the dialog
      <text>
        Touching outside of the dialog, or pressing Back, cancels the action and
        closes the dialog
      </text>
    </listitem>
  </list>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Selected: user02@gmail.com</text>
  <whitespace></whitespace>
  <button>
    OPEN SIMPLE DIALOG
    <text>OPEN SIMPLE DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Typography variant="subtitle1" component="div">
    Selected: {selectedValue} </Typography> <br />
    <Button variant="outlined"
    onClick={handleClickOpen}> Open simple dialog </Button>
    <SimpleDialog selectedValue={selectedValue}
    open={open} onClose={handleClose} />
  </text>
  <heading level="2">
    Alerts
    <text>Alerts</text>
  </heading>
  <paragraph>
    <text>
      Alerts are urgent interruptions, requiring acknowledgement, that inform
      the user about a situation.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Most alerts don't need titles. They summarize a decision in a
      sentence or two by either:
    </text>
  </paragraph>
  <list>
    <listitem>
      Asking a question (e.g. "Delete this conversation?")
      <text>
        Asking a question (e.g. "Delete this conversation?")
      </text>
    </listitem>
    <listitem>
      Making a statement related to the action buttons
      <text>Making a statement related to the action buttons</text>
    </listitem>
  </list>
  <paragraph>
    <text>
      Use title bar alerts only for high-risk situations, such as the potential
      loss of connectivity. Users should be able to understand the choices based
      on the title and button text alone.
    </text>
  </paragraph>
  <paragraph>
    <text>If a title is required:</text>
  </paragraph>
  <list>
    <listitem>
      Use a clear question or statement with an explanation in the content area,
      such as "Erase USB storage?".
      <text>
        Use a clear question or statement with an explanation in the content
        area, such as "Erase USB storage?".
      </text>
    </listitem>
    <listitem>
      Avoid apologies, ambiguity, or questions, such as "Warning!" or
      "Are you sure?"
      <text>
        Avoid apologies, ambiguity, or questions, such as "Warning!"
        or "Are you sure?"
      </text>
    </listitem>
  </list>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN ALERT DIALOG
    <text>OPEN ALERT DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Transitions
    <text>Transitions</text>
  </heading>
  <paragraph>
    <text>
      You can also swap out the transition, the next example uses Slide.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    SLIDE IN ALERT DIALOG
    <text>SLIDE IN ALERT DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Form dialogs
    <text>Form dialogs</text>
  </heading>
  <paragraph>
    <text>
      Form dialogs allow users to fill out form fields within a dialog. For
      example, if your site prompts for potential subscribers to fill in their
      email address, they can fill out the email field and touch
      'Submit'.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN FORM DIALOG
    <text>OPEN FORM DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Customized dialogs
    <text>Customized dialogs</text>
  </heading>
  <paragraph>
    <text>
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link>overrides documentation page</link>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>The dialog has a close button added to aide usability.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN DIALOG
    <text>OPEN DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Full-screen dialogs
    <text>Full-screen dialogs</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN FULL-SCREEN DIALOG
    <text>OPEN FULL-SCREEN DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Optional sizes
    <text>Optional sizes</text>
  </heading>
  <paragraph>
    <text>
      You can set a dialog maximum width by using the maxWidth enumerable in
      combination with the fullWidth boolean. When the fullWidth prop is true,
      the dialog will adapt based on the maxWidth value.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN MAX-WIDTH DIALOG
    <text>OPEN MAX-WIDTH DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Responsive full-screen
    <text>Responsive full-screen</text>
  </heading>
  <paragraph>
    <text>You may make a dialog responsively full screen using</text>
    <link>useMediaQuery</link>
    <text>.</text>
  </paragraph>
  <text>
    import useMediaQuery from '@material-ui/core/useMediaQuery';
    function MyComponent() { const theme = useTheme(); const fullScreen =
    useMediaQuery(theme.breakpoints.down('md')); return <Dialog
    fullScreen={fullScreen} />; }
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN RESPONSIVE DIALOG
    <text>OPEN RESPONSIVE DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Confirmation dialogs
    <text>Confirmation dialogs</text>
  </heading>
  <paragraph>
    <text>
      Confirmation dialogs require users to explicitly confirm their choice
      before an option is committed. For example, users can listen to multiple
      ringtones but only make a final selection upon touching "OK".
    </text>
  </paragraph>
  <paragraph>
    <text>
      Touching "Cancel" in a confirmation dialog, or pressing Back,
      cancels the action, discards any changes, and closes the dialog.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    <button disabled="true">
      Interruptions
      <text>Interruptions</text>
    </button>
    <buttonmenu haspopup="true">
      phone ringtone
      <text>Phone ringtone</text>
      <paragraph>
        <text>Dione</text>
      </paragraph>
    </buttonmenu>
    <button disabled="true">
      Default notification ringtone Tethys
      <text>Default notification ringtone</text>
      <paragraph>
        <text>Tethys</text>
      </paragraph>
    </button>
  </group>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Draggable dialog
    <text>Draggable dialog</text>
  </heading>
  <paragraph>
    <text>You can create a draggable dialog by using</text>
    <link>react-draggable</link>
    <text>
      . To do so, you can pass the imported Draggable component as the
      PaperComponent of the Dialog component. This will make the entire dialog
      draggable.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN DRAGGABLE DIALOG
    <text>OPEN DRAGGABLE DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Scrolling long content
    <text>Scrolling long content</text>
  </heading>
  <paragraph>
    <text>
      When dialogs become too long for the user's viewport or device, they
      scroll.
    </text>
  </paragraph>
  <list>
    <listitem>
      scroll=paper the content of the dialog scrolls within the paper element.
      <text>
        scroll=paper the content of the dialog scrolls within the paper element.
      </text>
    </listitem>
    <listitem>
      scroll=body the content of the dialog scrolls within the body element.
      <text>
        scroll=body the content of the dialog scrolls within the body element.
      </text>
    </listitem>
  </list>
  <paragraph>
    <text>Try the demo below to see what we mean:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    SCROLL=PAPER
    <text>SCROLL=PAPER</text>
  </button>
  <button>
    SCROLL=BODY
    <text>SCROLL=BODY</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Performance
    <text>Performance</text>
  </heading>
  <paragraph>
    <text>Follow the</text>
    <link>Modal performance section</link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Limitations
    <text>Limitations</text>
  </heading>
  <paragraph>
    <text>Follow the</text>
    <link>Modal limitations section</link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Accessibility
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>Follow the</text>
    <link>Modal accessibility section</link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem>
      <Dialog />
      <link><Dialog /></link>
    </listitem>
    <listitem>
      <DialogActions />
      <link><DialogActions /></link>
    </listitem>
    <listitem>
      <DialogContent />
      <link><DialogContent /></link>
    </listitem>
    <listitem>
      <DialogContentText />
      <link><DialogContentText /></link>
    </listitem>
    <listitem>
      <DialogTitle />
      <link><DialogTitle /></link>
    </listitem>
    <listitem>
      <Slide />
      <link><Slide /></link>
    </listitem>
  </list>
  <separator></separator>
  <link>Backdrop</link>
  <group>
    Was this page helpful?
    <text>Was this page helpful?</text>
    <togglebutton>Yes</togglebutton>
    <togglebutton>No</togglebutton>
  </group>
  <link>Progress</link>
</landmark>;

`;

exports[`firefox /components/pagination/ 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Pagination
    <text>Pagination</text>
  </heading>
  <paragraph>
    <text>
      The Pagination component enables the user to select a specific page from a
      range of pages.
    </text>
  </paragraph>
  <list>
    <listitem>
      Feedback
      <link>Feedback</link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Figma
      <link>Figma</link>
    </listitem>
    <listitem>
      Adobe
      <link>Adobe</link>
    </listitem>
    <listitem>
      Sketch
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Basic pagination
    <text>Basic pagination</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        Go to end-ellipsis page
        <text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        Go to end-ellipsis page
        <text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        Go to end-ellipsis page
        <text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button disabled="true">
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button disabled="true">
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button disabled="true">
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button disabled="true">
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button disabled="true">
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        Go to end-ellipsis page
        <text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button disabled="true">
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button disabled="true">Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Pagination count={10} /> <Pagination
    count={10} color="primary" /> <Pagination
    count={10} color="secondary" /> <Pagination
    count={10} disabled />
  </text>
  <heading level="2">
    Outlined pagination
    <text>Outlined pagination</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        Go to end-ellipsis page
        <text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        Go to end-ellipsis page
        <text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        Go to end-ellipsis page
        <text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button disabled="true">
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button disabled="true">
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button disabled="true">
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button disabled="true">
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button disabled="true">
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        Go to end-ellipsis page
        <text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button disabled="true">
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button disabled="true">Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Pagination count={10} variant="outlined" />
    <Pagination count={10} variant="outlined"
    color="primary" /> <Pagination count={10}
    variant="outlined" color="secondary" />
    <Pagination count={10} variant="outlined" disabled
    />
  </text>
  <heading level="2">
    Rounded pagination
    <text>Rounded pagination</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        Go to end-ellipsis page
        <text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        Go to end-ellipsis page
        <text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Pagination count={10} shape="rounded" />
    <Pagination count={10} variant="outlined"
    shape="rounded" />
  </text>
  <heading level="2">
    Pagination size
    <text>Pagination size</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        Go to end-ellipsis page
        <text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        Go to end-ellipsis page
        <text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        Go to end-ellipsis page
        <text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Pagination count={10} size="small" />
    <Pagination count={10} /> <Pagination
    count={10} size="large" />
  </text>
  <heading level="2">
    Buttons
    <text>Buttons</text>
  </heading>
  <paragraph>
    <text>
      You can optionally enable first-page and last-page buttons, or disable the
      previous-page and next-page buttons.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to first page
        <button disabled="true">Go to first page</button>
      </listitem>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        Go to end-ellipsis page
        <text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
      <listitem>
        Go to last page
        <button>Go to last page</button>
      </listitem>
    </list>
  </landmark>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        Go to end-ellipsis page
        <text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Pagination count={10} showFirstButton showLastButton />
    <Pagination count={10} hidePrevButton hideNextButton />
  </text>
  <heading level="2">
    Pagination ranges
    <text>Pagination ranges</text>
  </heading>
  <paragraph>
    <text>
      You can specify how many digits to display either side of current page
      with the siblingRange prop, and adjacent to the start and end page number
      with the boundaryRange prop.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button>Go to previous page</button>
      </listitem>
      <listitem>
        Go to page 1
        <button>
          Go to page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to start-ellipsis page
        <text>‚Ä¶</text>
      </listitem>
      <listitem>
        page 6
        <button>
          page 6<text>6</text>
        </button>
      </listitem>
      <listitem>
        Go to end-ellipsis page
        <text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 11
        <button>
          Go to page 11
          <text>11</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button>Go to previous page</button>
      </listitem>
      <listitem>
        Go to page 1
        <button>
          Go to page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to start-ellipsis page
        <text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        page 6
        <button>
          page 6<text>6</text>
        </button>
      </listitem>
      <listitem>
        Go to page 7
        <button>
          Go to page 7<text>7</text>
        </button>
      </listitem>
      <listitem>
        Go to end-ellipsis page
        <text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 11
        <button>
          Go to page 11
          <text>11</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button>Go to previous page</button>
      </listitem>
      <listitem>
        Go to page 1
        <button>
          Go to page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to start-ellipsis page
        <text>‚Ä¶</text>
      </listitem>
      <listitem>
        page 6
        <button>
          page 6<text>6</text>
        </button>
      </listitem>
      <listitem>
        Go to end-ellipsis page
        <text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to page 11
        <button>
          Go to page 11
          <text>11</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button>Go to previous page</button>
      </listitem>
      <listitem>
        Go to page 1
        <button>
          Go to page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to start-ellipsis page
        <text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        page 6
        <button>
          page 6<text>6</text>
        </button>
      </listitem>
      <listitem>
        Go to page 7
        <button>
          Go to page 7<text>7</text>
        </button>
      </listitem>
      <listitem>
        Go to end-ellipsis page
        <text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to page 11
        <button>
          Go to page 11
          <text>11</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Pagination count={11} defaultPage={6}
    siblingCount={0} /> <Pagination count={11}
    defaultPage={6} /> {/* Default ranges */}
    <Pagination count={11} defaultPage={6}
    siblingCount={0} boundaryCount={2} /> <Pagination
    count={11} defaultPage={6} boundaryCount={2}
    />
  </text>
  <heading level="2">
    Controlled pagination
    <text>Controlled pagination</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Page: 1</text>
  </paragraph>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        Go to end-ellipsis page
        <text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Typography>Page: {page}</Typography> <Pagination
    count={10} page={page} onChange={handleChange}
    />
  </text>
  <heading level="2">
    Router integration
    <text>Router integration</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        Go to end-ellipsis page
        <text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    usePagination
    <text>usePagination</text>
  </heading>
  <paragraph>
    <text>
      For advanced customization use cases, a headless usePagination() hook is
      exposed. It accepts almost the same options as the Pagination component
      minus all the props related to the rendering of JSX. The Pagination
      component is built on this hook.
    </text>
  </paragraph>
  <text>
    import { usePagination } from
    '@material-ui/core/Pagination';
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    <list>
      <listitem>
        previous
        <button disabled="true">
          previous
          <text>previous</text>
        </button>
      </listitem>
      <listitem>
        1
        <button>
          1<text>1</text>
        </button>
      </listitem>
      <listitem>
        2
        <button>
          2<text>2</text>
        </button>
      </listitem>
      <listitem>
        3
        <button>
          3<text>3</text>
        </button>
      </listitem>
      <listitem>
        4
        <button>
          4<text>4</text>
        </button>
      </listitem>
      <listitem>
        5
        <button>
          5<text>5</text>
        </button>
      </listitem>
      <listitem>
        ‚Ä¶<text>‚Ä¶</text>
      </listitem>
      <listitem>
        10
        <button>
          10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        next
        <button>
          next
          <text>next</text>
        </button>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Table pagination
    <text>Table pagination</text>
  </heading>
  <paragraph>
    <text>
      The Pagination component was designed to paginate a list of arbitrary
      items when infinite loading isn't used. It's preferred in
      contexts where SEO is important, for instance, a blog.
    </text>
  </paragraph>
  <paragraph>
    <text>
      For the pagination of a large set of tabular data, you should use the
      TablePagination component.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Rows per page:</text>
  </paragraph>
  <button haspopup="true">
    Rows per page: 10
    <text>10</text>
  </button>
  <paragraph>
    <text>21-30 of 100</text>
  </paragraph>
  <button>Go to previous page</button>
  <button>Go to next page</button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <TablePagination component="div" count={100}
    page={page} onPageChange={handleChangePage}
    rowsPerPage={rowsPerPage}
    onRowsPerPageChange={handleChangeRowsPerPage} />
  </text>
  <blockquote>
    <paragraph>
      <text>
        ‚ö†Ô∏è Note that the Pagination page prop starts at 1 to match the
        requirement of including the value in the URL, while the TablePagination
        page prop stats at 0 to match the requirement of zero-based JavaScript
        arrays that comes with rendering a lot of tabular data.
      </text>
    </paragraph>
  </blockquote>
  <paragraph>
    <text>You can learn more about this use case in the</text>
    <link>table section</link>
    <text>of the documentation.</text>
  </paragraph>
  <heading level="2">
    Accessibility
    <text>Accessibility</text>
  </heading>
  <heading level="3">
    ARIA
    <text>ARIA</text>
  </heading>
  <paragraph>
    <text>
      The root node has a role of "navigation" and aria-label
      "pagination navigation" by default. The page items have an
      aria-label that identifies the purpose of the item ("go to first
      page", "go to previous page", "go to page 1"
      etc.). You can override these using the getItemAriaLabel prop.
    </text>
  </paragraph>
  <heading level="3">
    Keyboard
    <text>Keyboard</text>
  </heading>
  <paragraph>
    <text>
      The pagination items are in tab order, with a tabindex of "0".
    </text>
  </paragraph>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem>
      <Pagination />
      <link><Pagination /></link>
    </listitem>
    <listitem>
      <PaginationItem />
      <link><PaginationItem /></link>
    </listitem>
  </list>
  <separator></separator>
  <link>Menu</link>
  <group>
    Was this page helpful?
    <text>Was this page helpful?</text>
    <togglebutton>Yes</togglebutton>
    <togglebutton>No</togglebutton>
  </group>
  <link>Speed Dial</link>
</landmark>;

`;

exports[`firefox /components/pickers 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Date / Time pickers
    <text>Date / Time pickers</text>
  </heading>
  <paragraph>
    <text>
      Date pickers and Time pickers provide a simple way to select a single
      value from a pre-determined set.
    </text>
  </paragraph>
  <list>
    <listitem>
      On mobile, pickers are best suited for display in confirmation dialog.
      <text>
        On mobile, pickers are best suited for display in confirmation dialog.
      </text>
    </listitem>
    <listitem>
      For inline display, such as on a form, consider using compact controls
      such as segmented dropdown buttons.
      <text>
        For inline display, such as on a form, consider using compact controls
        such as segmented dropdown buttons.
      </text>
    </listitem>
  </list>
  <list>
    <listitem>
      Feedback
      <link>Feedback</link>
    </listitem>
    <listitem>
      WAI-ARIA
      <link>WAI-ARIA</link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Material Design
      <link>Material Design</link>
    </listitem>
    <listitem>
      Figma
      <link>Figma</link>
    </listitem>
    <listitem>
      Adobe
      <link>Adobe</link>
    </listitem>
    <listitem>
      Sketch
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    React components
    <text>React components</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Date picker desktop
    <text>Date picker desktop</text>
  </label>
  <textbox value="08/18/2014">
    mm/dd/yyyy
    <text>08/18/2014</text>
  </textbox>
  <button>Choose date, selected date is Aug 18, 2014</button>
  <paragraph>
    <text>mm/dd/yyyy</text>
  </paragraph>
  <label>
    Date picker mobile
    <text>Date picker mobile</text>
  </label>
  <textbox readonly="true" value="08/18/2014">
    Choose date, selected date is Aug 18, 2014
    <text>08/18/2014</text>
  </textbox>
  <label>
    Time picker
    <text>Time picker</text>
  </label>
  <textbox value="09:11 pm">
    hh:mm (a|p)m
    <text>09:11 pm</text>
  </textbox>
  <button>Choose time, selected time is 9:11 PM</button>
  <paragraph>
    <text>hh:mm (a|p)m</text>
  </paragraph>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Native pickers
    <text>Native pickers</text>
  </heading>
  <paragraph>
    <text>‚ö†Ô∏è Native input controls support by browsers</text>
    <link>isn't perfect</link>
    <text>.</text>
  </paragraph>
  <heading level="3">
    Date picker
    <text>Date picker</text>
  </heading>
  <paragraph>
    <text>A native datepicker example with type="date".</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <label>
      Birthday
      <text>Birthday</text>
    </label>
    <DateTime>
      Birthday
      <spinbutton value="05" valuetext="05">
        Month
        <text>05</text>
      </spinbutton>
      <text>/</text>
      <spinbutton value="24" valuetext="24">
        Day
        <text>24</text>
      </spinbutton>
      <text>/</text>
      <spinbutton value="2017" valuetext="2017">
        Year
        <text>2017</text>
      </spinbutton>
      <button>
        Clear
        <diagram></diagram>
      </button>
    </DateTime>
  </form>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <form noValidate> <TextField id="date"
    label="Birthday" type="date"
    defaultValue="2017-05-24" sx={{ width: 220 }}
    InputLabelProps={{ shrink: true, }} /> </form>
  </text>
  <heading level="3">
    Date & Time picker
    <text>Date & Time picker</text>
  </heading>
  <paragraph>
    <text>
      A native date & time picker example with
      type="datetime-local".
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <label>
      Next appointment
      <text>Next appointment</text>
    </label>
    <textbox value="2017-05-24T10:30">
      Next appointment
      <text>2017-05-24T10:30</text>
    </textbox>
  </form>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <form noValidate> <TextField id="datetime-local"
    label="Next appointment" type="datetime-local"
    defaultValue="2017-05-24T10:30" sx={{ width: 250
    }} InputLabelProps={{ shrink: true, }} />
    </form>
  </text>
  <heading level="3">
    Time picker
    <text>Time picker</text>
  </heading>
  <paragraph>
    <text>A native time picker example with type="time".</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <label>
      Alarm clock
      <text>Alarm clock</text>
    </label>
    <InputTime>
      Alarm clock
      <spinbutton value="07" valuetext="07">
        Hours
        <text>07</text>
      </spinbutton>
      <text>:</text>
      <spinbutton value="30" valuetext="30">
        Minutes
        <text>30</text>
      </spinbutton>
      <text></text>
      <textbox autocomplete="inline" value="AM">
        AM/PM
        <text>AM</text>
      </textbox>
      <button>
        Clear
        <diagram></diagram>
      </button>
    </InputTime>
  </form>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <form noValidate> <TextField id="time" label="Alarm
    clock" type="time" defaultValue="07:30"
    InputLabelProps={{ shrink: true, }}
    inputProps={{ step: 300, // 5 min }} sx={{
    width: 150 }} /> </form>
  </text>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem>
      <TextField />
      <link><TextField /></link>
    </listitem>
  </list>
  <separator></separator>
  <link>About the lab üß™</link>
  <group>
    Was this page helpful?
    <text>Was this page helpful?</text>
    <togglebutton>Yes</togglebutton>
    <togglebutton>No</togglebutton>
  </group>
  <link>Date Picker</link>
</landmark>;

`;

exports[`firefox /components/radio-buttons 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Radio
    <text>Radio</text>
  </heading>
  <paragraph>
    <text>Radio buttons allow the user to select one option from a set.</text>
  </paragraph>
  <paragraph>
    <text>
      Use radio buttons when the user needs to see all available options. If
      available options can be collapsed, consider using a dropdown menu because
      it uses less space.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Radio buttons should have the most commonly used option selected by
      default.
    </text>
  </paragraph>
  <list>
    <listitem>
      Feedback
      <link>Feedback</link>
    </listitem>
    <listitem>
      WAI-ARIA
      <link>WAI-ARIA</link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Material Design
      <link>Material Design</link>
    </listitem>
    <listitem>
      Figma
      <link>Figma</link>
    </listitem>
    <listitem>
      Adobe
      <link>Adobe</link>
    </listitem>
    <listitem>
      Sketch
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Radio group
    <text>Radio group</text>
  </heading>
  <paragraph>
    <text>
      RadioGroup is a helpful wrapper used to group Radio components that
      provides an easier API, and proper keyboard accessibility to the group.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    Gender
    <label>
      Gender
      <text>Gender</text>
    </label>
    <group>
      gender
      <label>
        Female
        <radio checked="true">Female</radio>
        <text>Female</text>
      </label>
      <label>
        Male
        <radio>Male</radio>
        <text>Male</text>
      </label>
      <label>
        Other
        <radio>Other</radio>
        <text>Other</text>
      </label>
    </group>
  </group>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <FormControl component="fieldset"> <FormLabel
    component="legend">Gender</FormLabel> <RadioGroup
    aria-label="gender" defaultValue="female"
    name="radio-buttons-group" > <FormControlLabel
    value="female" control={<Radio />}
    label="Female" /> <FormControlLabel value="male"
    control={<Radio />} label="Male" />
    <FormControlLabel value="other" control={<Radio
    />} label="Other" /> </RadioGroup>
    </FormControl>
  </text>
  <heading level="3">
    Direction
    <text>Direction</text>
  </heading>
  <paragraph>
    <text>To lay out the buttons horizontally, set the row prop:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    Gender
    <label>
      Gender
      <text>Gender</text>
    </label>
    <group>
      gender
      <label>
        Female
        <radio>Female</radio>
        <text>Female</text>
      </label>
      <label>
        Male
        <radio>Male</radio>
        <text>Male</text>
      </label>
      <label>
        Other
        <radio>Other</radio>
        <text>Other</text>
      </label>
      <label>
        other
        <radio disabled="true">other</radio>
        <text>other</text>
      </label>
    </group>
  </group>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <FormControl component="fieldset"> <FormLabel
    component="legend">Gender</FormLabel> <RadioGroup row
    aria-label="gender" name="row-radio-buttons-group">
    <FormControlLabel value="female" control={<Radio
    />} label="Female" /> <FormControlLabel
    value="male" control={<Radio />}
    label="Male" /> <FormControlLabel value="other"
    control={<Radio />} label="Other" />
    <FormControlLabel value="disabled" disabled
    control={<Radio />} label="other" />
    </RadioGroup> </FormControl>
  </text>
  <heading level="3">
    Controlled
    <text>Controlled</text>
  </heading>
  <paragraph>
    <text>You can control the radio with the value and onChange props:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    Gender
    <label>
      Gender
      <text>Gender</text>
    </label>
    <group>
      gender
      <label>
        Female
        <radio checked="true">Female</radio>
        <text>Female</text>
      </label>
      <label>
        Male
        <radio>Male</radio>
        <text>Male</text>
      </label>
    </group>
  </group>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <FormControl component="fieldset"> <FormLabel
    component="legend">Gender</FormLabel> <RadioGroup
    aria-label="gender"
    name="controlled-radio-buttons-group" value={value}
    onChange={handleChange} > <FormControlLabel
    value="female" control={<Radio />}
    label="Female" /> <FormControlLabel value="male"
    control={<Radio />} label="Male" />
    </RadioGroup> </FormControl>
  </text>
  <heading level="2">
    Standalone radio buttons
    <text>Standalone radio buttons</text>
  </heading>
  <paragraph>
    <text>
      Radio can also be used standalone, without the RadioGroup wrapper.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <radio checked="true">A</radio>
  <radio>B</radio>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Radio checked={selectedValue === 'a'}
    onChange={handleChange} value="a"
    name="radio-buttons" inputProps={{
    'aria-label': 'A' }} /> <Radio
    checked={selectedValue === 'b'}
    onChange={handleChange} value="b"
    name="radio-buttons" inputProps={{
    'aria-label': 'B' }} />
  </text>
  <heading level="2">
    Size
    <text>Size</text>
  </heading>
  <paragraph>
    <text>
      Use the size prop or customize the font size of the svg icons to change
      the size of the radios.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <radio checked="true">a</radio>
  <radio>b</radio>
  <radio>c</radio>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Radio {...controlProps('a')} size="small"
    /> <Radio {...controlProps('b')} /> <Radio
    {...controlProps('c')} sx={{ '&
    .MuiSvgIcon-root': { fontSize: 28, }, }} />
  </text>
  <heading level="2">
    Color
    <text>Color</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <radio checked="true">a</radio>
  <radio>b</radio>
  <radio>c</radio>
  <radio>d</radio>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Radio {...controlProps('a')} /> <Radio
    {...controlProps('b')} color="secondary" />
    <Radio {...controlProps('c')}
    color="default" /> <Radio
    {...controlProps('d')} sx={{ color:
    green[800], '&.Mui-checked': { color: green[600], },
    }} />
  </text>
  <heading level="2">
    Label placement
    <text>Label placement</text>
  </heading>
  <paragraph>
    <text>
      You can change the placement of the label with the FormControlLabel
      component's labelPlacement prop:
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    labelPlacement
    <label>
      labelPlacement
      <text>labelPlacement</text>
    </label>
    <group>
      position
      <label>
        Top
        <radio checked="true">Top</radio>
        <text>Top</text>
      </label>
      <label>
        Start
        <radio>Start</radio>
        <text>Start</text>
      </label>
      <label>
        Bottom
        <radio>Bottom</radio>
        <text>Bottom</text>
      </label>
      <label>
        End
        <radio>End</radio>
        <text>End</text>
      </label>
    </group>
  </group>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Show error
    <text>Show error</text>
  </heading>
  <paragraph>
    <text>
      In general, radio buttons should have a value selected by default. If this
      is not the case, you can display an error if no value is selected when the
      form is submitted:
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <group>
      Pop quiz: Material-UI is...
      <label>
        Pop quiz: Material-UI is...
        <text>Pop quiz: Material-UI is...</text>
      </label>
      <group>
        quiz
        <label>
          The best!
          <radio>The best!</radio>
          <text>The best!</text>
        </label>
        <label>
          The worst.
          <radio>The worst.</radio>
          <text>The worst.</text>
        </label>
      </group>
      <paragraph>
        <text>Choose wisely</text>
      </paragraph>
      <button>
        CHECK ANSWER
        <text>CHECK ANSWER</text>
      </button>
    </group>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Customized radios
    <text>Customized radios</text>
  </heading>
  <paragraph>
    <text>
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link>overrides documentation page</link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    Gender
    <label>
      Gender
      <text>Gender</text>
    </label>
    <group>
      gender
      <label>
        Female
        <radio checked="true">Female</radio>
        <text>Female</text>
      </label>
      <label>
        Male
        <radio>Male</radio>
        <text>Male</text>
      </label>
      <label>
        Other
        <radio>Other</radio>
        <text>Other</text>
      </label>
      <label>
        (Disabled option)
        <radio disabled="true">(Disabled option)</radio>
        <text>(Disabled option)</text>
      </label>
    </group>
  </group>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <FormControl component="fieldset"> <FormLabel
    component="legend">Gender</FormLabel> <RadioGroup
    defaultValue="female" aria-label="gender"
    name="customized-radios"> <FormControlLabel
    value="female" control={<BpRadio />}
    label="Female" /> <FormControlLabel value="male"
    control={<BpRadio />} label="Male" />
    <FormControlLabel value="other" control={<BpRadio
    />} label="Other" /> <FormControlLabel
    value="disabled" disabled control={<BpRadio />}
    label="(Disabled option)" /> </RadioGroup>
    </FormControl>
  </text>
  <heading level="2">
    useRadioGroup
    <text>useRadioGroup</text>
  </heading>
  <paragraph>
    <text>
      For advanced customization use cases, a useRadioGroup() hook is exposed.
      It returns the context value of the parent radio group. The Radio
      component uses this hook internally.
    </text>
  </paragraph>
  <heading level="3">
    API
    <text>API</text>
  </heading>
  <text>
    import { useRadioGroup } from
    '@material-ui/core/RadioGroup';
  </text>
  <heading level="4">
    Returns
    <text>Returns</text>
  </heading>
  <paragraph>
    <text>value (object):</text>
  </paragraph>
  <list>
    <listitem>
      value.name ( string [optional]): The name used to reference the value of
      the control.
      <text>
        value.name (string [optional]): The name used to reference the value of
        the control.
      </text>
    </listitem>
    <listitem>
      value.onChange ( func [optional]): Callback fired when a radio button is
      selected.
      <text>
        value.onChange (func [optional]): Callback fired when a radio button is
        selected.
      </text>
    </listitem>
    <listitem>
      value.value ( any [optional]): Value of the selected radio button.
      <text>
        value.value (any [optional]): Value of the selected radio button.
      </text>
    </listitem>
  </list>
  <heading level="4">
    Example
    <text>Example</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    <label>
      First
      <radio checked="true">First</radio>
      <text>First</text>
    </label>
    <label>
      Second
      <radio>Second</radio>
      <text>Second</text>
    </label>
  </group>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <RadioGroup name="use-radio-group"
    defaultValue="first"> <MyFormControlLabel
    value="first" label="First" control={<Radio
    />} /> <MyFormControlLabel value="second"
    label="Second" control={<Radio />} />
    </RadioGroup>
  </text>
  <heading level="2">
    When to use
    <text>When to use</text>
  </heading>
  <list>
    <listitem>
      Checkboxes vs. Radio Buttons
      <link>Checkboxes vs. Radio Buttons</link>
    </listitem>
  </list>
  <heading level="2">
    Accessibility
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(WAI-ARIA:</text>
    <link>https://www.w3.org/TR/wai-aria-practices/#radiobutton</link>
    <text>)</text>
  </paragraph>
  <list>
    <listitem>
      All form controls should have labels, and this includes radio buttons,
      checkboxes, and switches. In most cases, this is done by using the
      <label> element ( FormControlLabel ).
      <text>
        All form controls should have labels, and this includes radio buttons,
        checkboxes, and switches. In most cases, this is done by using the
        <label> element (
      </text>
      <link>FormControlLabel</link>
      <text>).</text>
    </listitem>
    <listitem>
      When a label can't be used, it's necessary to add an attribute
      directly to the input component. In this case, you can apply the
      additional attribute (e.g. aria-label , aria-labelledby , title ) via the
      inputProps property.
      <text>
        When a label can't be used, it's necessary to add an attribute
        directly to the input component. In this case, you can apply the
        additional attribute (e.g. aria-label, aria-labelledby, title) via the
        inputProps property.
      </text>
    </listitem>
  </list>
  <text>
    <Radio value="radioA" inputProps={{
    'aria-label': 'Radio A', }} />
  </text>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem>
      <FormControl />
      <link><FormControl /></link>
    </listitem>
    <listitem>
      <FormControlLabel />
      <link><FormControlLabel /></link>
    </listitem>
    <listitem>
      <FormLabel />
      <link><FormLabel /></link>
    </listitem>
    <listitem>
      <Radio />
      <link><Radio /></link>
    </listitem>
    <listitem>
      <RadioGroup />
      <link><RadioGroup /></link>
    </listitem>
  </list>
  <separator></separator>
  <link>Floating Action Button</link>
  <group>
    Was this page helpful?
    <text>Was this page helpful?</text>
    <togglebutton>Yes</togglebutton>
    <togglebutton>No</togglebutton>
  </group>
  <link>Rating</link>
</landmark>;

`;

exports[`firefox /components/rating/ 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Rating
    <text>Rating</text>
  </heading>
  <paragraph>
    <text>
      Ratings provide insight regarding others' opinions and experiences,
      and can allow the user to submit a rating of their own.
    </text>
  </paragraph>
  <list>
    <listitem>
      Feedback
      <link>Feedback</link>
    </listitem>
    <listitem>
      WAI-ARIA
      <link>WAI-ARIA</link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Figma
      <link>Figma</link>
    </listitem>
    <listitem>
      Adobe
      <link>Adobe</link>
    </listitem>
    <listitem>
      Sketch
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Basic rating
    <text>Basic rating</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Controlled
    <text>Controlled</text>
  </label>
  <label>
    1 Star
    <text>1 Star</text>
  </label>
  <radio>1 Star</radio>
  <label>
    2 Stars
    <text>2 Stars</text>
  </label>
  <radio checked="true">2 Stars</radio>
  <label>
    3 Stars
    <text>3 Stars</text>
  </label>
  <radio>3 Stars</radio>
  <label>
    4 Stars
    <text>4 Stars</text>
  </label>
  <radio>4 Stars</radio>
  <label>
    5 Stars
    <text>5 Stars</text>
  </label>
  <radio>5 Stars</radio>
  <label>
    Empty
    <radio>Empty</radio>
    <text>Empty</text>
  </label>
  <label>
    Read only
    <text>Read only</text>
  </label>
  <img>2 Stars</img>
  <label>
    Disabled
    <text>Disabled</text>
  </label>
  <label>
    1 Star
    <text>1 Star</text>
  </label>
  <radio disabled="true">1 Star</radio>
  <label>
    2 Stars
    <text>2 Stars</text>
  </label>
  <radio checked="true" disabled="true">
    2 Stars
  </radio>
  <label>
    3 Stars
    <text>3 Stars</text>
  </label>
  <radio disabled="true">3 Stars</radio>
  <label>
    4 Stars
    <text>4 Stars</text>
  </label>
  <radio disabled="true">4 Stars</radio>
  <label>
    5 Stars
    <text>5 Stars</text>
  </label>
  <radio disabled="true">5 Stars</radio>
  <label>
    No rating given
    <text>No rating given</text>
  </label>
  <label>
    1 Star
    <text>1 Star</text>
  </label>
  <radio>1 Star</radio>
  <label>
    2 Stars
    <text>2 Stars</text>
  </label>
  <radio>2 Stars</radio>
  <label>
    3 Stars
    <text>3 Stars</text>
  </label>
  <radio>3 Stars</radio>
  <label>
    4 Stars
    <text>4 Stars</text>
  </label>
  <radio>4 Stars</radio>
  <label>
    5 Stars
    <text>5 Stars</text>
  </label>
  <radio>5 Stars</radio>
  <label>
    Empty
    <radio checked="true">Empty</radio>
    <text>Empty</text>
  </label>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Typography component="legend">Controlled</Typography>
    <Rating name="simple-controlled" value={value}
    onChange={(event, newValue) => { setValue(newValue);
    }} /> <Typography component="legend">Read
    only</Typography> <Rating name="read-only"
    value={value} readOnly /> <Typography
    component="legend">Disabled</Typography> <Rating
    name="disabled" value={value} disabled />
    <Typography component="legend">No rating
    given</Typography> <Rating name="no-value"
    value={null} />
  </text>
  <heading level="2">
    Rating precision
    <text>Rating precision</text>
  </heading>
  <paragraph>
    <text>
      The rating can display any float number with the value prop. Use the
      precision prop to define the minimum increment value change allowed.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    0.5 Stars
    <text>0.5 Stars</text>
  </label>
  <radio>0.5 Stars</radio>
  <label>
    1 Star
    <text>1 Star</text>
  </label>
  <radio>1 Star</radio>
  <label>
    1.5 Stars
    <text>1.5 Stars</text>
  </label>
  <radio>1.5 Stars</radio>
  <label>
    2 Stars
    <text>2 Stars</text>
  </label>
  <radio>2 Stars</radio>
  <label>
    2.5 Stars
    <text>2.5 Stars</text>
  </label>
  <radio checked="true">2.5 Stars</radio>
  <label>
    3 Stars
    <text>3 Stars</text>
  </label>
  <radio>3 Stars</radio>
  <label>
    3.5 Stars
    <text>3.5 Stars</text>
  </label>
  <radio>3.5 Stars</radio>
  <label>
    4 Stars
    <text>4 Stars</text>
  </label>
  <radio>4 Stars</radio>
  <label>
    4.5 Stars
    <text>4.5 Stars</text>
  </label>
  <radio>4.5 Stars</radio>
  <label>
    5 Stars
    <text>5 Stars</text>
  </label>
  <radio>5 Stars</radio>
  <label>
    Empty
    <radio>Empty</radio>
    <text>Empty</text>
  </label>
  <img>2.5 Stars</img>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Rating name="half-rating" defaultValue={2.5}
    precision={0.5} /> <Rating name="half-rating-read"
    defaultValue={2.5} precision={0.5} readOnly />
  </text>
  <heading level="2">
    Hover feedback
    <text>Hover feedback</text>
  </heading>
  <paragraph>
    <text>
      You can display a label on hover to help the user pick the correct rating
      value. The demo uses the onChangeActive prop.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    0.5 Stars
    <text>0.5 Stars</text>
  </label>
  <radio>0.5 Stars</radio>
  <label>
    1 Star
    <text>1 Star</text>
  </label>
  <radio>1 Star</radio>
  <label>
    1.5 Stars
    <text>1.5 Stars</text>
  </label>
  <radio>1.5 Stars</radio>
  <label>
    2 Stars
    <text>2 Stars</text>
  </label>
  <radio checked="true">2 Stars</radio>
  <label>
    2.5 Stars
    <text>2.5 Stars</text>
  </label>
  <radio>2.5 Stars</radio>
  <label>
    3 Stars
    <text>3 Stars</text>
  </label>
  <radio>3 Stars</radio>
  <label>
    3.5 Stars
    <text>3.5 Stars</text>
  </label>
  <radio>3.5 Stars</radio>
  <label>
    4 Stars
    <text>4 Stars</text>
  </label>
  <radio>4 Stars</radio>
  <label>
    4.5 Stars
    <text>4.5 Stars</text>
  </label>
  <radio>4.5 Stars</radio>
  <label>
    5 Stars
    <text>5 Stars</text>
  </label>
  <radio>5 Stars</radio>
  <label>
    Empty
    <radio>Empty</radio>
    <text>Empty</text>
  </label>
  <text>Poor+</text>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Rating name="hover-feedback" value={value}
    precision={0.5} onChange={(event, newValue) => {
    setValue(newValue); }} onChangeActive={(event, newHover)
    => { setHover(newHover); }} emptyIcon={<StarIcon
    style={{ opacity: 0.55 }} fontSize="inherit"
    />} /> {value !== null && ( <Box sx={{
    ml: 2 }}>{labels[hover !== -1 ? hover :
    value]}</Box> )}
  </text>
  <heading level="2">
    Sizes
    <text>Sizes</text>
  </heading>
  <paragraph>
    <text>For larger or smaller ratings use the size prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    1 Star
    <text>1 Star</text>
  </label>
  <radio>1 Star</radio>
  <label>
    2 Stars
    <text>2 Stars</text>
  </label>
  <radio checked="true">2 Stars</radio>
  <label>
    3 Stars
    <text>3 Stars</text>
  </label>
  <radio>3 Stars</radio>
  <label>
    4 Stars
    <text>4 Stars</text>
  </label>
  <radio>4 Stars</radio>
  <label>
    5 Stars
    <text>5 Stars</text>
  </label>
  <radio>5 Stars</radio>
  <label>
    Empty
    <radio>Empty</radio>
    <text>Empty</text>
  </label>
  <label>
    1 Star
    <text>1 Star</text>
  </label>
  <radio>1 Star</radio>
  <label>
    2 Stars
    <text>2 Stars</text>
  </label>
  <radio checked="true">2 Stars</radio>
  <label>
    3 Stars
    <text>3 Stars</text>
  </label>
  <radio>3 Stars</radio>
  <label>
    4 Stars
    <text>4 Stars</text>
  </label>
  <radio>4 Stars</radio>
  <label>
    5 Stars
    <text>5 Stars</text>
  </label>
  <radio>5 Stars</radio>
  <label>
    Empty
    <radio>Empty</radio>
    <text>Empty</text>
  </label>
  <label>
    1 Star
    <text>1 Star</text>
  </label>
  <radio>1 Star</radio>
  <label>
    2 Stars
    <text>2 Stars</text>
  </label>
  <radio checked="true">2 Stars</radio>
  <label>
    3 Stars
    <text>3 Stars</text>
  </label>
  <radio>3 Stars</radio>
  <label>
    4 Stars
    <text>4 Stars</text>
  </label>
  <radio>4 Stars</radio>
  <label>
    5 Stars
    <text>5 Stars</text>
  </label>
  <radio>5 Stars</radio>
  <label>
    Empty
    <radio>Empty</radio>
    <text>Empty</text>
  </label>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Rating name="size-small" defaultValue={2}
    size="small" /> <Rating name="size-medium"
    defaultValue={2} /> <Rating name="size-large"
    defaultValue={2} size="large" />
  </text>
  <heading level="2">
    Customized rating
    <text>Customized rating</text>
  </heading>
  <paragraph>
    <text>
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link>overrides documentation page</link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Custom icon and color
    <text>Custom icon and color</text>
  </label>
  <label>
    0.5 Hearts
    <text>0.5 Hearts</text>
  </label>
  <radio>0.5 Hearts</radio>
  <label>
    1 Heart
    <text>1 Heart</text>
  </label>
  <radio>1 Heart</radio>
  <label>
    1.5 Hearts
    <text>1.5 Hearts</text>
  </label>
  <radio>1.5 Hearts</radio>
  <label>
    2 Hearts
    <text>2 Hearts</text>
  </label>
  <radio checked="true">2 Hearts</radio>
  <label>
    2.5 Hearts
    <text>2.5 Hearts</text>
  </label>
  <radio>2.5 Hearts</radio>
  <label>
    3 Hearts
    <text>3 Hearts</text>
  </label>
  <radio>3 Hearts</radio>
  <label>
    3.5 Hearts
    <text>3.5 Hearts</text>
  </label>
  <radio>3.5 Hearts</radio>
  <label>
    4 Hearts
    <text>4 Hearts</text>
  </label>
  <radio>4 Hearts</radio>
  <label>
    4.5 Hearts
    <text>4.5 Hearts</text>
  </label>
  <radio>4.5 Hearts</radio>
  <label>
    5 Hearts
    <text>5 Hearts</text>
  </label>
  <radio>5 Hearts</radio>
  <label>
    Empty
    <radio>Empty</radio>
    <text>Empty</text>
  </label>
  <label>
    10 stars
    <text>10 stars</text>
  </label>
  <label>
    1 Star
    <text>1 Star</text>
  </label>
  <radio>1 Star</radio>
  <label>
    2 Stars
    <text>2 Stars</text>
  </label>
  <radio checked="true">2 Stars</radio>
  <label>
    3 Stars
    <text>3 Stars</text>
  </label>
  <radio>3 Stars</radio>
  <label>
    4 Stars
    <text>4 Stars</text>
  </label>
  <radio>4 Stars</radio>
  <label>
    5 Stars
    <text>5 Stars</text>
  </label>
  <radio>5 Stars</radio>
  <label>
    6 Stars
    <text>6 Stars</text>
  </label>
  <radio>6 Stars</radio>
  <label>
    7 Stars
    <text>7 Stars</text>
  </label>
  <radio>7 Stars</radio>
  <label>
    8 Stars
    <text>8 Stars</text>
  </label>
  <radio>8 Stars</radio>
  <label>
    9 Stars
    <text>9 Stars</text>
  </label>
  <radio>9 Stars</radio>
  <label>
    10 Stars
    <text>10 Stars</text>
  </label>
  <radio>10 Stars</radio>
  <label>
    Empty
    <radio>Empty</radio>
    <text>Empty</text>
  </label>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Typography component="legend">Custom icon and
    color</Typography> <StyledRating name="customized-color"
    defaultValue={2} getLabelText={(value) =>
    \`\${value} Heart\${value !== 1 ? 's' :
    ''}\`} precision={0.5}
    icon={<FavoriteIcon fontSize="inherit" />}
    emptyIcon={<FavoriteBorderIcon fontSize="inherit"
    />} /> <Typography component="legend">10
    stars</Typography> <Rating name="customized-10"
    defaultValue={2} max={10} />
  </text>
  <heading level="2">
    Radio group
    <text>Radio group</text>
  </heading>
  <paragraph>
    <text>
      The rating is implemented with a radio group, set highlightSelectedOnly to
      restore the natural behavior.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    1 Star
    <text>1 Star</text>
  </label>
  <radio>1 Star</radio>
  <label>
    2 Stars
    <text>2 Stars</text>
  </label>
  <radio checked="true">2 Stars</radio>
  <label>
    3 Stars
    <text>3 Stars</text>
  </label>
  <radio>3 Stars</radio>
  <label>
    4 Stars
    <text>4 Stars</text>
  </label>
  <radio>4 Stars</radio>
  <label>
    5 Stars
    <text>5 Stars</text>
  </label>
  <radio>5 Stars</radio>
  <label>
    Empty
    <radio>Empty</radio>
    <text>Empty</text>
  </label>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Rating name="highlight-selected-only"
    defaultValue={2} IconContainerComponent={IconContainer}
    highlightSelectedOnly />
  </text>
  <heading level="2">
    Accessibility
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(</text>
    <link>WAI tutorial</link>
    <text>)</text>
  </paragraph>
  <paragraph>
    <text>The accessibility of this component relies on:</text>
  </paragraph>
  <list>
    <listitem>
      A radio group with its fields visually hidden. It contains six radio
      buttons, one for each star, and another for 0 stars that is checked by
      default. Be sure to provide a value for the name prop that is unique to
      the parent form.
      <text>
        A radio group with its fields visually hidden. It contains six radio
        buttons, one for each star, and another for 0 stars that is checked by
        default. Be sure to provide a value for the name prop that is unique to
        the parent form.
      </text>
    </listitem>
    <listitem>
      Labels for the radio buttons containing actual text (‚Äú1 Star‚Äù, ‚Äú2 Stars‚Äù,
      ‚Ä¶). Be sure to provide a suitable function to the getLabelText prop when
      the page is in a language other than English. You can use the included
      locales , or provide your own.
      <text>
        Labels for the radio buttons containing actual text (‚Äú1 Star‚Äù, ‚Äú2
        Stars‚Äù, ‚Ä¶). Be sure to provide a suitable function to the getLabelText
        prop when the page is in a language other than English. You can use the
      </text>
      <link>included locales</link>
      <text>, or provide your own.</text>
    </listitem>
    <listitem>
      A visually distinct appearance for the rating icons. By default, the
      rating component uses both a difference of color and shape (filled and
      empty icons) to indicate the value. In the event that you are using color
      as the only means to indicate the value, the information should also be
      also displayed as text, as in this demo. This is important to match
      success Criterion 1.4.1 of WCAG2.1.
      <text>
        A visually distinct appearance for the rating icons. By default, the
        rating component uses both a difference of color and shape (filled and
        empty icons) to indicate the value. In the event that you are using
        color as the only means to indicate the value, the information should
        also be also displayed as text, as in this demo. This is important to
        match
      </text>
      <link>success Criterion 1.4.1</link>
      <text>of WCAG2.1.</text>
    </listitem>
  </list>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <img>3.5 Stars</img>
  <text>Good</text>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Rating name="text-feedback" value={value} readOnly
    precision={0.5} emptyIcon={<StarIcon style={{
    opacity: 0.55 }} fontSize="inherit" />} />
    <Box sx={{ ml: 2
    }}>{labels[value]}</Box>
  </text>
  <heading level="3">
    ARIA
    <text>ARIA</text>
  </heading>
  <paragraph>
    <text>
      The read only rating has a role of "img", and an aria-label that
      describes the displayed rating.
    </text>
  </paragraph>
  <heading level="3">
    Keyboard
    <text>Keyboard</text>
  </heading>
  <paragraph>
    <text>
      Because the rating component uses radio buttons, keyboard interaction
      follows the native browser behavior. Tab will focus the current rating,
      and cursor keys control the selected rating.
    </text>
  </paragraph>
  <paragraph>
    <text>The read only rating is not focusable.</text>
  </paragraph>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem>
      <Rating />
      <link><Rating /></link>
    </listitem>
  </list>
  <separator></separator>
  <link>Radio button</link>
  <group>
    Was this page helpful?
    <text>Was this page helpful?</text>
    <togglebutton>Yes</togglebutton>
    <togglebutton>No</togglebutton>
  </group>
  <link>Select</link>
</landmark>;

`;

exports[`firefox /components/selects/ 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Select
    <text>Select</text>
  </heading>
  <paragraph>
    <text>
      Select components are used for collecting user provided information from a
      list of options.
    </text>
  </paragraph>
  <list>
    <listitem>
      Feedback
      <link>Feedback</link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Figma
      <link>Figma</link>
    </listitem>
    <listitem>
      Adobe
      <link>Adobe</link>
    </listitem>
    <listitem>
      Sketch
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Basic select
    <text>Basic select</text>
  </heading>
  <paragraph>
    <text>
      Menus are positioned over their emitting elements such that the currently
      selected menu item appears on top of the emitting element.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Age
    <text>Age</text>
  </label>
  <button haspopup="true">
    Age ‚Äã<text>‚Äã</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <FormControl fullWidth> <InputLabel
    id="demo-simple-select-label">Age</InputLabel> <Select
    labelId="demo-simple-select-label"
    id="demo-simple-select" value={age}
    label="Age" onChange={handleChange} > <MenuItem
    value={10}>Ten</MenuItem> <MenuItem
    value={20}>Twenty</MenuItem> <MenuItem
    value={30}>Thirty</MenuItem> </Select>
    </FormControl>
  </text>
  <heading level="2">
    Advanced features
    <text>Advanced features</text>
  </heading>
  <paragraph>
    <text>
      The Select component is meant to be interchangeable with a native
      <select> element.
    </text>
  </paragraph>
  <paragraph>
    <text>
      If you are looking for more advanced features, like combobox, multiselect,
      autocomplete, async or creatable support, head to the
    </text>
    <link>Autocomplete component</link>
    <text>
      . It's meant to be an improved version of the
      "react-select" and "downshift" packages.
    </text>
  </paragraph>
  <heading level="2">
    Props
    <text>Props</text>
  </heading>
  <paragraph>
    <text>
      The Select component is implemented as a custom <input> element of
      the
    </text>
    <link>InputBase</link>
    <text>. It extends the</text>
    <link>text field components</link>
    <text>sub-components, either the</text>
    <link>OutlinedInput</link>
    <text>,</text>
    <link>Input</link>
    <text>, or</text>
    <link>FilledInput</link>
    <text>
      , depending on the variant selected. It shares the same styles and many of
      the same props. Refer to the respective component's API page for
      details.
    </text>
  </paragraph>
  <heading level="3">
    Filled and standard variants
    <text>Filled and standard variants</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Age
    <text>Age</text>
  </label>
  <statictext>¬†</statictext>
  <button haspopup="true">
    Age ‚Äã<text>‚Äã</text>
  </button>
  <label>
    Age
    <text>Age</text>
  </label>
  <statictext>¬†</statictext>
  <button haspopup="true">
    Age ‚Äã<text>‚Äã</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="3">
    Labels and helper text
    <text>Labels and helper text</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Age
    <text>Age</text>
  </label>
  <button haspopup="true">
    Age ‚Äã<text>‚Äã</text>
  </button>
  <paragraph>
    <text>With label + helper text</text>
  </paragraph>
  <button haspopup="true">
    Without label
    <text>None</text>
  </button>
  <paragraph>
    <text>Without label</text>
  </paragraph>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="3">
    Auto width
    <text>Auto width</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Age
    <text>Age</text>
  </label>
  <button haspopup="true">
    Age ‚Äã<text>‚Äã</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="3">
    Other props
    <text>Other props</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Age
    <text>Age</text>
  </label>
  <button disabled="true" haspopup="true">
    Age ‚Äã<text>‚Äã</text>
  </button>
  <paragraph>
    <text>Disabled</text>
  </paragraph>
  <label>
    Age
    <text>Age</text>
  </label>
  <button haspopup="true">
    Age ‚Äã<text>‚Äã</text>
  </button>
  <paragraph>
    <text>Error</text>
  </paragraph>
  <label>
    Age
    <text>Age</text>
  </label>
  <button haspopup="true">
    Age ‚Äã<text>‚Äã</text>
  </button>
  <paragraph>
    <text>Read only</text>
  </paragraph>
  <label>
    Age
    <text>Age</text>
  </label>
  <button haspopup="true">
    Age ‚Äã<text>‚Äã</text>
  </button>
  <paragraph>
    <text>Required</text>
  </paragraph>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Native select
    <text>Native select</text>
  </heading>
  <paragraph>
    <text>
      As the user experience can be improved on mobile using the native select
      of the platform, we allow such pattern.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Age
    <text>Age</text>
  </label>
  <statictext>¬†</statictext>
  <combobox haspopup="true" value="Thirty">
    Age
    <MenuListPopup>
      <menuitem>
        Ten
        <text>Ten</text>
      </menuitem>
      <menuitem>
        Twenty
        <text>Twenty</text>
      </menuitem>
      <menuitem selected="true">
        Thirty
        <text>Thirty</text>
      </menuitem>
    </MenuListPopup>
  </combobox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <FormControl fullWidth> <InputLabel variant="standard"
    htmlFor="uncontrolled-native"> Age </InputLabel>
    <NativeSelect defaultValue={30} inputProps={{ name:
    'age', id: 'uncontrolled-native', }} >
    <option value={10}>Ten</option> <option
    value={20}>Twenty</option> <option
    value={30}>Thirty</option> </NativeSelect>
    </FormControl>
  </text>
  <heading level="2">
    TextField
    <text>TextField</text>
  </heading>
  <paragraph>
    <text>
      The TextField wrapper component is a complete form control including a
      label, input and help text. You can find an example with the select mode
    </text>
    <link>in this section</link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Customized selects
    <text>Customized selects</text>
  </heading>
  <paragraph>
    <text>
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link>overrides documentation page</link>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>
      The first step is to style the InputBase component. Once it's styled,
      you can either use it directly as a text field or provide it to the select
      input prop to have a select field. Notice that the "standard"
      variant is easier to customize, since it does not wrap the contents in a
      fieldset/legend markup.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Age
    <text>Age</text>
  </label>
  <textbox>Age</textbox>
  <label>
    Age
    <text>Age</text>
  </label>
  <button haspopup="true">
    Age ‚Äã<text>‚Äã</text>
  </button>
  <label>
    Age
    <text>Age</text>
  </label>
  <combobox haspopup="true" value="None">
    Age
    <MenuListPopup>
      <menuitem selected="true">None</menuitem>
      <menuitem>
        Ten
        <text>Ten</text>
      </menuitem>
      <menuitem>
        Twenty
        <text>Twenty</text>
      </menuitem>
      <menuitem>
        Thirty
        <text>Thirty</text>
      </menuitem>
    </MenuListPopup>
  </combobox>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <paragraph>
    <text>üé® If you are looking for inspiration, you can check</text>
    <link>MUI Treasury's customization examples</link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Multiple select
    <text>Multiple select</text>
  </heading>
  <paragraph>
    <text>
      The Select component can handle multiple selections. It's enabled
      with the multiple prop.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Like with the single selection, you can pull out the new value by
      accessing event.target.value in the onChange callback. It's always an
      array.
    </text>
  </paragraph>
  <heading level="3">
    Default
    <text>Default</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Name
    <text>Name</text>
  </label>
  <button haspopup="true">
    Name ‚Äã<text>‚Äã</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="3">
    Checkmarks
    <text>Checkmarks</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Tag
    <text>Tag</text>
  </label>
  <button haspopup="true">
    Tag ‚Äã<text>‚Äã</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="3">
    Chip
    <text>Chip</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Chip
    <text>Chip</text>
  </label>
  <button haspopup="true">
    Chip ‚Äã<text>‚Äã</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="3">
    Placeholder
    <text>Placeholder</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button haspopup="true">
    Without label
    <text>Placeholder</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="3">
    Native
    <text>Native</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Native
    <text>Native</text>
  </label>
  <listbox multiselectable="true">
    Native
    <option>
      Oliver Hansen
      <text>Oliver Hansen</text>
    </option>
    <option>
      Van Henry
      <text>Van Henry</text>
    </option>
    <option>
      April Tucker
      <text>April Tucker</text>
    </option>
    <option>
      Ralph Hubbard
      <text>Ralph Hubbard</text>
    </option>
    <option>
      Omar Alexander
      <text>Omar Alexander</text>
    </option>
    <option>
      Carlos Abbott
      <text>Carlos Abbott</text>
    </option>
    <option>
      Miriam Wagner
      <text>Miriam Wagner</text>
    </option>
    <option>
      Bradley Wilkerson
      <text>Bradley Wilkerson</text>
    </option>
    <option>
      Virginia Andrews
      <text>Virginia Andrews</text>
    </option>
    <option>
      Kelly Snyder
      <text>Kelly Snyder</text>
    </option>
  </listbox>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Controlled open select
    <text>Controlled open select</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN THE SELECT
    <text>OPEN THE SELECT</text>
  </button>
  <label>
    Age
    <text>Age</text>
  </label>
  <button haspopup="true">
    Age ‚Äã<text>‚Äã</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    With a dialog
    <text>With a dialog</text>
  </heading>
  <paragraph>
    <text>
      While it's discouraged by the Material Design specification, you can
      use a select inside a dialog.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN SELECT DIALOG
    <text>OPEN SELECT DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Grouping
    <text>Grouping</text>
  </heading>
  <paragraph>
    <text>
      Display categories with the ListSubheader component or the native
      <optgroup> element.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Grouping
    <text>Grouping</text>
  </label>
  <combobox haspopup="true" value="None">
    Grouping
    <MenuListPopup>
      <menuitem selected="true">None</menuitem>
      <group>
        Category 1<statictext>Category 1</statictext>
        <menuitem level="2">
          Option 1<text>Option 1</text>
        </menuitem>
        <menuitem level="2">
          Option 2<text>Option 2</text>
        </menuitem>
      </group>
      <group>
        Category 2<statictext>Category 2</statictext>
        <menuitem level="2">
          Option 3<text>Option 3</text>
        </menuitem>
        <menuitem level="2">
          Option 4<text>Option 4</text>
        </menuitem>
      </group>
    </MenuListPopup>
  </combobox>
  <label>
    Grouping
    <text>Grouping</text>
  </label>
  <button haspopup="true">
    ‚Äã<text>‚Äã</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Accessibility
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>
      To properly label your Select input you need an extra element with an id
      that contains a label. That id needs to match the labelId of the Select
      e.g.
    </text>
  </paragraph>
  <text>
    <InputLabel id="label">Age</InputLabel> <Select
    labelId="label" id="select" value="20">
    <MenuItem value="10">Ten</MenuItem> <MenuItem
    value="20">Twenty</MenuItem> </Select>
  </text>
  <paragraph>
    <text>
      Alternatively a TextField with an id and label creates the proper markup
      and ids for you:
    </text>
  </paragraph>
  <text>
    <TextField id="select" label="Age"
    value="20" select> <MenuItem
    value="10">Ten</MenuItem> <MenuItem
    value="20">Twenty</MenuItem> </TextField>
  </text>
  <paragraph>
    <text>For a</text>
    <link>native select</link>
    <text>
      , you should mention a label by giving the value of the id attribute of
      the select element to the InputLabel's htmlFor attribute:
    </text>
  </paragraph>
  <text>
    <InputLabel htmlFor="select">Age</InputLabel>
    <NativeSelect id="select"> <option
    value="10">Ten</option> <option
    value="20">Twenty</option> </NativeSelect>
  </text>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem>
      <NativeSelect />
      <link><NativeSelect /></link>
    </listitem>
    <listitem>
      <Select />
      <link><Select /></link>
    </listitem>
  </list>
  <separator></separator>
  <link>Rating</link>
  <group>
    Was this page helpful?
    <text>Was this page helpful?</text>
    <togglebutton>Yes</togglebutton>
    <togglebutton>No</togglebutton>
  </group>
  <link>Slider</link>
</landmark>;

`;

exports[`firefox /components/slider 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Slider
    <text>Slider</text>
  </heading>
  <paragraph>
    <text>Sliders allow users to make selections from a range of values.</text>
  </paragraph>
  <paragraph>
    <text>
      Sliders reflect a range of values along a bar, from which users may select
      a single value. They are ideal for adjusting settings such as volume,
      brightness, or applying image filters.
    </text>
  </paragraph>
  <list>
    <listitem>
      Feedback
      <link>Feedback</link>
    </listitem>
    <listitem>
      WAI-ARIA
      <link>WAI-ARIA</link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Material Design
      <link>Material Design</link>
    </listitem>
    <listitem>
      Figma
      <link>Figma</link>
    </listitem>
    <listitem>
      Adobe
      <link>Adobe</link>
    </listitem>
    <listitem>
      Sketch
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Continuous sliders
    <text>Continuous sliders</text>
  </heading>
  <paragraph>
    <text>
      Continuous sliders allow users to select a value along a subjective range.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <slider orientation="horizontal" value="30" valuetext="30">
    Volume
  </slider>
  <slider disabled="true" orientation="horizontal" value="30" valuetext="30">
    Disabled slider
  </slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Stack spacing={2} direction="row" sx={{
    mb: 1 }}> <VolumeDown /> <Slider
    aria-label="Volume" value={value}
    onChange={handleChange} /> <VolumeUp /> </Stack>
    <Slider disabled defaultValue={30} aria-label="Disabled
    slider" />
  </text>
  <heading level="2">
    Discrete sliders
    <text>Discrete sliders</text>
  </heading>
  <paragraph>
    <text>
      Discrete sliders can be adjusted to a specific value by referencing its
      value indicator. You can generate a mark for each step with
      marks={true}.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <slider orientation="horizontal" value="30¬∞C" valuetext="30¬∞C">
    Temperature
  </slider>
  <slider
    disabled="true"
    orientation="horizontal"
    value="30"
    valuetext="30"
  ></slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Slider aria-label="Temperature" defaultValue={30}
    getAriaValueText={valuetext} valueLabelDisplay="auto"
    step={10} marks min={10} max={110} />
    <Slider defaultValue={30} step={10} marks
    min={10} max={110} disabled />
  </text>
  <heading level="3">
    Small steps
    <text>Small steps</text>
  </heading>
  <paragraph>
    <text>You can change the default step increment.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <slider orientation="horizontal" value="5e-8¬∞C" valuetext="5e-8¬∞C">
    Small steps
  </slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Slider aria-label="Small steps"
    defaultValue={0.00000005} getAriaValueText={valuetext}
    step={0.00000001} marks min={-0.00000005}
    max={0.0000001} valueLabelDisplay="auto" />
  </text>
  <heading level="3">
    Custom marks
    <text>Custom marks</text>
  </heading>
  <paragraph>
    <text>
      You can have custom marks by providing a rich array to the marks prop.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <slider orientation="horizontal" value="20¬∞C" valuetext="20¬∞C">
    Custom marks
  </slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Slider aria-label="Custom marks" defaultValue={20}
    getAriaValueText={valuetext} step={10}
    valueLabelDisplay="auto" marks={marks} />
  </text>
  <heading level="3">
    Restricted values
    <text>Restricted values</text>
  </heading>
  <paragraph>
    <text>
      You can restrict the selectable values to those provided with the marks
      prop with step={null}.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <slider orientation="horizontal" value="20¬∞C" valuetext="20¬∞C">
    Restricted values
  </slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Slider aria-label="Restricted values"
    defaultValue={20} valueLabelFormat={valueLabelFormat}
    getAriaValueText={valuetext} step={null}
    valueLabelDisplay="auto" marks={marks} />
  </text>
  <heading level="3">
    Label always visible
    <text>Label always visible</text>
  </heading>
  <paragraph>
    <text>
      You can force the thumb label to be always visible with
      valueLabelDisplay="on".
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <slider orientation="horizontal" value="80¬∞C" valuetext="80¬∞C">
    Always visible
  </slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Slider aria-label="Always visible" defaultValue={80}
    getAriaValueText={valuetext} step={10}
    marks={marks} valueLabelDisplay="on" />
  </text>
  <heading level="2">
    Range slider
    <text>Range slider</text>
  </heading>
  <paragraph>
    <text>
      The slider can be used to set the start and end of a range by supplying an
      array of values to the value prop.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <slider orientation="horizontal" value="20¬∞C" valuetext="20¬∞C">
    Temperature range
  </slider>
  <slider orientation="horizontal" value="37¬∞C" valuetext="37¬∞C">
    Temperature range
  </slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Slider getAriaLabel={() => 'Temperature range'}
    value={value} onChange={handleChange}
    valueLabelDisplay="auto" getAriaValueText={valuetext}
    />
  </text>
  <heading level="3">
    Minimum distance
    <text>Minimum distance</text>
  </heading>
  <paragraph>
    <text>
      You can enforce a minimum distance between values in the onChange event
      handler. By default, when you move the pointer over a thumb while dragging
      another thumb, the active thumb will swap to the hovered thumb. You can
      disable this behavior with the disableSwap prop. If you want the range to
      shift when reaching minimum distance, you can utilize the activeThumb
      parameter in onChange.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <slider orientation="horizontal" value="20¬∞C" valuetext="20¬∞C">
    Minimum distance
  </slider>
  <slider orientation="horizontal" value="37¬∞C" valuetext="37¬∞C">
    Minimum distance
  </slider>
  <slider orientation="horizontal" value="20¬∞C" valuetext="20¬∞C">
    Minimum distance shift
  </slider>
  <slider orientation="horizontal" value="37¬∞C" valuetext="37¬∞C">
    Minimum distance shift
  </slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Slider getAriaLabel={() => 'Minimum distance'}
    value={value1} onChange={handleChange1}
    valueLabelDisplay="auto" getAriaValueText={valuetext}
    disableSwap /> <Slider getAriaLabel={() => 'Minimum
    distance shift'} value={value2}
    onChange={handleChange2} valueLabelDisplay="auto"
    getAriaValueText={valuetext} disableSwap />
  </text>
  <heading level="2">
    Slider with input field
    <text>Slider with input field</text>
  </heading>
  <paragraph>
    <text>In this example, an input allows a discrete value to be set.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Volume</text>
  </paragraph>
  <slider orientation="horizontal" value="30" valuetext="30">
    Volume
  </slider>
  <statictext>¬†</statictext>
  <spinbutton value="30" valuetext="30">
    Volume
    <text>30</text>
  </spinbutton>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Color
    <text>Color</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <slider orientation="horizontal" value="30¬∞C" valuetext="30¬∞C">
    Temperature
  </slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Slider aria-label="Temperature" defaultValue={30}
    getAriaValueText={valuetext} color="secondary" />
  </text>
  <heading level="2">
    Customized sliders
    <text>Customized sliders</text>
  </heading>
  <paragraph>
    <text>
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link>overrides documentation page</link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>iOS</text>
  </paragraph>
  <slider orientation="horizontal" value="60" valuetext="60">
    ios slider
  </slider>
  <paragraph>
    <text>pretto.fr</text>
  </paragraph>
  <slider orientation="horizontal" value="20" valuetext="20">
    pretto slider
  </slider>
  <paragraph>
    <text>Tooltip value label</text>
  </paragraph>
  <slider orientation="horizontal" value="20" valuetext="20">
    custom thumb label
  </slider>
  <paragraph>
    <text>Airbnb</text>
  </paragraph>
  <slider orientation="horizontal" value="20" valuetext="20">
    Minimum price
  </slider>
  <slider orientation="horizontal" value="40" valuetext="40">
    Maximum price
  </slider>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Vertical sliders
    <text>Vertical sliders</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <slider orientation="vertical" value="30¬∞C" valuetext="30¬∞C">
    Temperature
  </slider>
  <slider disabled="true" orientation="vertical" value="30" valuetext="30">
    Temperature
  </slider>
  <slider orientation="vertical" value="20¬∞C" valuetext="20¬∞C">
    Temperature
  </slider>
  <slider orientation="vertical" value="37¬∞C" valuetext="37¬∞C">
    Temperature
  </slider>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <paragraph>
    <text>
      WARNING: Chrome, Safari and newer Edge versions i.e. any browser based on
      WebKit exposes <Slider orientation="vertical" /> as
      horizontal (
    </text>
    <link>chromium issue #1158217</link>
    <text>
      ). By applying -webkit-appearance: slider-vertical; the slider is exposed
      as vertical.
    </text>
  </paragraph>
  <paragraph>
    <text>
      However, by applying -webkit-appearance: slider-vertical; keyboard
      navigation for horizontal keys (Arrow Left, Arrow Right) is reversed (
    </text>
    <link>chromium issue #1162640</link>
    <text>
      ). Usually, up and right should increase and left and down should decrease
      the value. If you apply -webkit-appearance you could prevent keyboard
      navigation for horizontal arrow keys for a truly vertical slider. This
      might be less confusing to users compared to a change in direction.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <slider orientation="vertical" value="30" valuetext="30">
    Temperature
  </slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Slider sx={{ '& input[type="range"]':
    { WebkitAppearance: 'slider-vertical', }, }}
    orientation="vertical" defaultValue={30}
    aria-label="Temperature"
    onKeyDown={preventHorizontalKeyboardNavigation} />
  </text>
  <heading level="2">
    Track
    <text>Track</text>
  </heading>
  <paragraph>
    <text>The track shows the range available for user selection.</text>
  </paragraph>
  <heading level="3">
    Removed track
    <text>Removed track</text>
  </heading>
  <paragraph>
    <text>The track can be turned off with track={false}.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Removed track</text>
  </paragraph>
  <slider orientation="horizontal" value="30¬∞C" valuetext="30¬∞C">
    Removed track
  </slider>
  <paragraph>
    <text>Removed track range slider</text>
  </paragraph>
  <slider orientation="horizontal" value="20¬∞C" valuetext="20¬∞C">
    Removed track range slider
  </slider>
  <slider orientation="horizontal" value="37¬∞C" valuetext="37¬∞C">
    Removed track range slider
  </slider>
  <slider orientation="horizontal" value="50¬∞C" valuetext="50¬∞C">
    Removed track range slider
  </slider>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="3">
    Inverted track
    <text>Inverted track</text>
  </heading>
  <paragraph>
    <text>The track can be inverted with track="inverted".</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Inverted track</text>
  </paragraph>
  <slider orientation="horizontal" value="30¬∞C" valuetext="30¬∞C">
    Inverted track
  </slider>
  <paragraph>
    <text>Inverted track range</text>
  </paragraph>
  <slider orientation="horizontal" value="20¬∞C" valuetext="20¬∞C">
    Inverted track range
  </slider>
  <slider orientation="horizontal" value="37¬∞C" valuetext="37¬∞C">
    Inverted track range
  </slider>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Non-linear scale
    <text>Non-linear scale</text>
  </heading>
  <paragraph>
    <text>
      You can use the scale prop to represent the value on a different scale.
    </text>
  </paragraph>
  <paragraph>
    <text>
      In the following demo, the value x represents the value 2^x. Increasing x
      by one increases the represented value by factor 2.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Storage: 1 MB</text>
  </paragraph>
  <slider orientation="horizontal" value="1 MB" valuetext="1 MB">
    Storage: 1 MB
  </slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Typography id="non-linear-slider" gutterBottom> Storage:
    {valueLabelFormat(calculateValue(value))} </Typography>
    <Slider value={value} min={5} step={1}
    max={30} scale={calculateValue}
    getAriaValueText={valueLabelFormat}
    valueLabelFormat={valueLabelFormat}
    onChange={handleChange} valueLabelDisplay="auto"
    aria-labelledby="non-linear-slider" />
  </text>
  <heading level="2">
    Unstyled
    <text>Unstyled</text>
  </heading>
  <list>
    <listitem>
      üì¶ 5.6 kB gzipped
      <text>üì¶</text>
      <link>5.6 kB gzipped</link>
    </listitem>
  </list>
  <paragraph>
    <text>
      The slider also comes with an unstyled version. It's ideal for doing
      heavy customizations and minimizing bundle size.
    </text>
  </paragraph>
  <text>
    import SliderUnstyled from '@material-ui/unstyled/SliderUnstyled';
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <slider orientation="horizontal" value="10" valuetext="10"></slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text><StyledSlider defaultValue={10} /></text>
  <heading level="2">
    Accessibility
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(WAI-ARIA:</text>
    <link>https://www.w3.org/TR/wai-aria-practices/#slider</link>
    <text>)</text>
  </paragraph>
  <paragraph>
    <text>
      The component handles most of the work necessary to make it accessible.
      However, you need to make sure that:
    </text>
  </paragraph>
  <list>
    <listitem>
      Each thumb has a user-friendly label ( aria-label , aria-labelledby or
      getAriaLabel prop).
      <text>
        Each thumb has a user-friendly label (aria-label, aria-labelledby or
        getAriaLabel prop).
      </text>
    </listitem>
    <listitem>
      Each thumb has a user-friendly text for its current value. This is not
      required if the value matches the semantics of the label. You can change
      the name with the getAriaValueText or aria-valuetext prop.
      <text>
        Each thumb has a user-friendly text for its current value. This is not
        required if the value matches the semantics of the label. You can change
        the name with the getAriaValueText or aria-valuetext prop.
      </text>
    </listitem>
  </list>
  <heading level="2">
    Limitations
    <text>Limitations</text>
  </heading>
  <heading level="3">
    IE 11
    <text>IE 11</text>
  </heading>
  <paragraph>
    <text>
      The slider's value label is not centered in IE 11. The alignement is
      not handled to make customizations easier with the lastest browsers. You
      can solve the issue with:
    </text>
  </paragraph>
  <text>.MuiSlider-valueLabel { left: calc(-50% - 4px); }</text>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem>
      <Slider />
      <link><Slider /></link>
    </listitem>
    <listitem>
      <SliderUnstyled />
      <link><SliderUnstyled /></link>
    </listitem>
  </list>
  <separator></separator>
  <link>Select</link>
  <group>
    Was this page helpful?
    <text>Was this page helpful?</text>
    <togglebutton>Yes</togglebutton>
    <togglebutton>No</togglebutton>
  </group>
  <link>Switch</link>
</landmark>;

`;

exports[`firefox /components/switches/ 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Switch
    <text>Switch</text>
  </heading>
  <paragraph>
    <text>Switches toggle the state of a single setting on or off.</text>
  </paragraph>
  <paragraph>
    <text>
      Switches are the preferred way to adjust settings on mobile. The option
      that the switch controls, as well as the state it's in, should be
      made clear from the corresponding inline label.
    </text>
  </paragraph>
  <list>
    <listitem>
      Feedback
      <link>Feedback</link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Material Design
      <link>Material Design</link>
    </listitem>
    <listitem>
      Figma
      <link>Figma</link>
    </listitem>
    <listitem>
      Adobe
      <link>Adobe</link>
    </listitem>
    <listitem>
      Sketch
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Basic switches
    <text>Basic switches</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">Switch demo</checkbox>
  <checkbox>Switch demo</checkbox>
  <checkbox checked="true" disabled="true">
    Switch demo
  </checkbox>
  <checkbox disabled="true">Switch demo</checkbox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Switch {...label} defaultChecked /> <Switch
    {...label} /> <Switch {...label} disabled
    defaultChecked /> <Switch {...label} disabled />
  </text>
  <heading level="2">
    Label
    <text>Label</text>
  </heading>
  <paragraph>
    <text>
      You can provide a label to the Switch thanks to the FormControlLabel
      component.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Label
    <checkbox checked="true">Label</checkbox>
    <text>Label</text>
  </label>
  <label>
    Disabled
    <checkbox disabled="true">Disabled</checkbox>
    <text>Disabled</text>
  </label>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <FormGroup> <FormControlLabel control={<Switch
    defaultChecked />} label="Label" />
    <FormControlLabel disabled control={<Switch />}
    label="Disabled" /> </FormGroup>
  </text>
  <heading level="2">
    Size
    <text>Size</text>
  </heading>
  <paragraph>
    <text>Use the size prop to change the size of the switch.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">Switch demo</checkbox>
  <checkbox checked="true">Switch demo</checkbox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Switch {...label} defaultChecked size="small" />
    <Switch {...label} defaultChecked />
  </text>
  <heading level="2">
    Color
    <text>Color</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">Switch demo</checkbox>
  <checkbox checked="true">Switch demo</checkbox>
  <checkbox checked="true">Switch demo</checkbox>
  <checkbox checked="true">Switch demo</checkbox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Switch {...label} defaultChecked /> <Switch
    {...label} defaultChecked color="secondary" />
    <Switch {...label} defaultChecked color="default"
    /> <GreenSwitch {...label} defaultChecked />
  </text>
  <heading level="2">
    Controlled
    <text>Controlled</text>
  </heading>
  <paragraph>
    <text>You can control the switch with the checked and onChange props:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">controlled</checkbox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Switch checked={checked} onChange={handleChange}
    inputProps={{ 'aria-label': 'controlled'
    }} />
  </text>
  <heading level="2">
    Switches with FormGroup
    <text>Switches with FormGroup</text>
  </heading>
  <paragraph>
    <text>
      FormGroup is a helpful wrapper used to group selection controls components
      that provides an easier API. However, you are encouraged to use
    </text>
    <link>Checkboxes</link>
    <text>instead if multiple related controls are required. (See:</text>
    <link>When to use</link>
    <text>).</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    Assign responsibility
    <label>
      Assign responsibility
      <text>Assign responsibility</text>
    </label>
    <label>
      Gilad Gray
      <checkbox checked="true">Gilad Gray</checkbox>
      <text>Gilad Gray</text>
    </label>
    <label>
      Jason Killian
      <checkbox>Jason Killian</checkbox>
      <text>Jason Killian</text>
    </label>
    <label>
      Antoine Llorca
      <checkbox checked="true">Antoine Llorca</checkbox>
      <text>Antoine Llorca</text>
    </label>
    <paragraph>
      <text>Be careful</text>
    </paragraph>
  </group>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Customized switches
    <text>Customized switches</text>
  </heading>
  <paragraph>
    <text>
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link>overrides documentation page</link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Material-UI switch
    <checkbox checked="true">Material-UI switch</checkbox>
    <text>Material-UI switch</text>
  </label>
  <label>
    Android 12
    <checkbox checked="true">Android 12</checkbox>
    <text>Android 12</text>
  </label>
  <label>
    iOS style
    <checkbox checked="true">iOS style</checkbox>
    <text>iOS style</text>
  </label>
  <paragraph>
    <text>Off</text>
  </paragraph>
  <checkbox checked="true">ant design</checkbox>
  <paragraph>
    <text>On</text>
  </paragraph>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <paragraph>
    <text>üé® If you are looking for inspiration, you can check</text>
    <link>MUI Treasury's customization examples</link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Label placement
    <text>Label placement</text>
  </heading>
  <paragraph>
    <text>You can change the placement of the label:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    Label placement
    <label>
      Label placement
      <text>Label placement</text>
    </label>
    <label>
      Top
      <checkbox>Top</checkbox>
      <text>Top</text>
    </label>
    <label>
      Start
      <checkbox>Start</checkbox>
      <text>Start</text>
    </label>
    <label>
      Bottom
      <checkbox>Bottom</checkbox>
      <text>Bottom</text>
    </label>
    <label>
      End
      <checkbox>End</checkbox>
      <text>End</text>
    </label>
  </group>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    When to use
    <text>When to use</text>
  </heading>
  <list>
    <listitem>
      Checkboxes vs. Switches
      <link>Checkboxes vs. Switches</link>
    </listitem>
  </list>
  <heading level="2">
    Accessibility
    <text>Accessibility</text>
  </heading>
  <list>
    <listitem>
      It will render an element with the checkbox role not switch role since
      this role isn't widely supported yet. Please test first if assistive
      technology of your target audience supports this role properly. Then you
      can change the role with <Switch inputProps={{ role:
      'switch' }}>
      <text>
        It will render an element with the checkbox role not switch role since
        this role isn't widely supported yet. Please test first if
        assistive technology of your target audience supports this role
        properly. Then you can change the role with <Switch
        inputProps={{ role: 'switch' }}>
      </text>
    </listitem>
    <listitem>
      All form controls should have labels, and this includes radio buttons,
      checkboxes, and switches. In most cases, this is done by using the
      <label> element ( FormControlLabel ).
      <text>
        All form controls should have labels, and this includes radio buttons,
        checkboxes, and switches. In most cases, this is done by using the
        <label> element (
      </text>
      <link>FormControlLabel</link>
      <text>).</text>
    </listitem>
    <listitem>
      When a label can't be used, it's necessary to add an attribute
      directly to the input component. In this case, you can apply the
      additional attribute (e.g. aria-label , aria-labelledby , title ) via the
      inputProps prop.
      <text>
        When a label can't be used, it's necessary to add an attribute
        directly to the input component. In this case, you can apply the
        additional attribute (e.g. aria-label, aria-labelledby, title) via the
        inputProps prop.
      </text>
    </listitem>
  </list>
  <text>
    <Switch value="checkedA" inputProps={{
    'aria-label': 'Switch A' }} />
  </text>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem>
      <FormControl />
      <link><FormControl /></link>
    </listitem>
    <listitem>
      <FormControlLabel />
      <link><FormControlLabel /></link>
    </listitem>
    <listitem>
      <FormGroup />
      <link><FormGroup /></link>
    </listitem>
    <listitem>
      <FormLabel />
      <link><FormLabel /></link>
    </listitem>
    <listitem>
      <Switch />
      <link><Switch /></link>
    </listitem>
  </list>
  <separator></separator>
  <link>Slider</link>
  <group>
    Was this page helpful?
    <text>Was this page helpful?</text>
    <togglebutton>Yes</togglebutton>
    <togglebutton>No</togglebutton>
  </group>
  <link>Text field</link>
</landmark>;

`;

exports[`firefox /components/tabs/ 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Tabs
    <text>Tabs</text>
  </heading>
  <paragraph>
    <text>
      Tabs make it easy to explore and switch between different views.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Tabs organize and allow navigation between groups of content that are
      related and at the same level of hierarchy.
    </text>
  </paragraph>
  <list>
    <listitem>
      Feedback
      <link>Feedback</link>
    </listitem>
    <listitem>
      WAI-ARIA
      <link>WAI-ARIA</link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Material Design
      <link>Material Design</link>
    </listitem>
    <listitem>
      Figma
      <link>Figma</link>
    </listitem>
    <listitem>
      Adobe
      <link>Adobe</link>
    </listitem>
    <listitem>
      Sketch
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Basic tabs
    <text>Basic tabs</text>
  </heading>
  <paragraph>
    <text>A basic example with tab panels.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    basic tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
  </tablist>
  <tabpanel>
    ITEM ONE
    <paragraph>
      <text>Item One</text>
    </paragraph>
  </tabpanel>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Box sx={{ borderBottom: 1, borderColor: 'divider'
    }}> <Tabs value={value}
    onChange={handleChange} aria-label="basic tabs
    example"> <Tab label="Item One"
    {...a11yProps(0)} /> <Tab label="Item Two"
    {...a11yProps(1)} /> <Tab label="Item Three"
    {...a11yProps(2)} /> </Tabs> </Box> <TabPanel
    value={value} index={0}> Item One </TabPanel>
    <TabPanel value={value} index={1}> Item Two
    </TabPanel> <TabPanel value={value}
    index={2}> Item Three </TabPanel>
  </text>
  <heading level="2">
    Experimental API
    <text>Experimental API</text>
  </heading>
  <paragraph>
    <text>
      @material-ui/lab offers utility components that inject props to implement
      accessible tabs following
    </text>
    <link>WAI-ARIA authoring practices</link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    lab API tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
  </tablist>
  <tabpanel>
    ITEM ONE
    <text>Item One</text>
  </tabpanel>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <TabContext value={value}> <Box sx={{
    borderBottom: 1, borderColor: 'divider' }}>
    <TabList onChange={handleChange} aria-label="lab API tabs
    example"> <Tab label="Item One" value="1"
    /> <Tab label="Item Two" value="2" /> <Tab
    label="Item Three" value="3" /> </TabList>
    </Box> <TabPanel value="1">Item One</TabPanel>
    <TabPanel value="2">Item Two</TabPanel> <TabPanel
    value="3">Item Three</TabPanel> </TabContext>
  </text>
  <heading level="2">
    Wrapped labels
    <text>Wrapped labels</text>
  </heading>
  <paragraph>
    <text>
      Long labels will automatically wrap on tabs. If the label is too long for
      the tab, it will overflow, and the text will not be visible.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    wrapped label tabs example
    <tab selected="true">
      NEW ARRIVALS IN THE LONGEST TEXT OF NONFICTION THAT SHOULD APPEAR IN THE
      NEXT LINE
      <text>
        NEW ARRIVALS IN THE LONGEST TEXT OF NONFICTION THAT SHOULD APPEAR IN THE
        NEXT LINE
      </text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Tabs value={value} onChange={handleChange}
    aria-label="wrapped label tabs example" > <Tab
    value="one" label="New Arrivals in the Longest Text of
    Nonfiction that should appear in the next line" wrapped /> <Tab
    value="two" label="Item Two" /> <Tab
    value="three" label="Item Three" /> </Tabs>
  </text>
  <heading level="2">
    Colored tab
    <text>Colored tab</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    secondary tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Tabs value={value} onChange={handleChange}
    textColor="secondary" indicatorColor="secondary"
    aria-label="secondary tabs example" > <Tab
    value="one" label="Item One" /> <Tab
    value="two" label="Item Two" /> <Tab
    value="three" label="Item Three" /> </Tabs>
  </text>
  <heading level="2">
    Disabled tab
    <text>Disabled tab</text>
  </heading>
  <paragraph>
    <text>A tab can be disabled by setting the disabled prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    disabled tabs example
    <tab>
      ACTIVE
      <text>ACTIVE</text>
    </tab>
    <tab disabled="true">
      DISABLED
      <text>DISABLED</text>
    </tab>
    <tab selected="true">
      ACTIVE
      <text>ACTIVE</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Tabs value={value} onChange={handleChange}
    aria-label="disabled tabs example"> <Tab
    label="Active" /> <Tab label="Disabled" disabled
    /> <Tab label="Active" /> </Tabs>
  </text>
  <heading level="2">
    Fixed tabs
    <text>Fixed tabs</text>
  </heading>
  <paragraph>
    <text>
      Fixed tabs should be used with a limited number of tabs, and when a
      consistent placement will aid muscle memory.
    </text>
  </paragraph>
  <heading level="3">
    Full width
    <text>Full width</text>
  </heading>
  <paragraph>
    <text>
      The variant="fullWidth" prop should be used for smaller views.
      This demo also uses
    </text>
    <link>react-swipeable-views</link>
    <text>
      to animate the Tab transition, and allowing tabs to be swiped on touch
      devices.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    full width tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
  </tablist>
  <tabpanel>
    ITEM ONE
    <paragraph>
      <text>Item One</text>
    </paragraph>
  </tabpanel>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="3">
    Centered
    <text>Centered</text>
  </heading>
  <paragraph>
    <text>The centered prop should be used for larger views.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Tabs value={value} onChange={handleChange}
    centered> <Tab label="Item One" /> <Tab
    label="Item Two" /> <Tab label="Item Three" />
    </Tabs>
  </text>
  <heading level="2">
    Scrollable tabs
    <text>Scrollable tabs</text>
  </heading>
  <heading level="3">
    Automatic scroll buttons
    <text>Automatic scroll buttons</text>
  </heading>
  <paragraph>
    <text>
      By default, left and right scroll buttons are automatically presented on
      desktop and hidden on mobile. (based on viewport width)
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    scrollable auto tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
    <tab>
      ITEM FOUR
      <text>ITEM FOUR</text>
    </tab>
    <tab>
      ITEM FIVE
      <text>ITEM FIVE</text>
    </tab>
    <tab>
      ITEM SIX
      <text>ITEM SIX</text>
    </tab>
    <tab>
      ITEM SEVEN
      <text>ITEM SEVEN</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Tabs value={value} onChange={handleChange}
    variant="scrollable" scrollButtons="auto"
    aria-label="scrollable auto tabs example" > <Tab
    label="Item One" /> <Tab label="Item Two" />
    <Tab label="Item Three" /> <Tab label="Item
    Four" /> <Tab label="Item Five" /> <Tab
    label="Item Six" /> <Tab label="Item Seven" />
    </Tabs>
  </text>
  <heading level="3">
    Forced scroll buttons
    <text>Forced scroll buttons</text>
  </heading>
  <paragraph>
    <text>
      Left and right scroll buttons be presented (reserve space) regardless of
      the viewport width with scrollButtons={true}
      allowScrollButtonsMobile:
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    scrollable force tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
    <tab>
      ITEM FOUR
      <text>ITEM FOUR</text>
    </tab>
    <tab>
      ITEM FIVE
      <text>ITEM FIVE</text>
    </tab>
    <tab>
      ITEM SIX
      <text>ITEM SIX</text>
    </tab>
    <tab>
      ITEM SEVEN
      <text>ITEM SEVEN</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Tabs value={value} onChange={handleChange}
    variant="scrollable" scrollButtons allowScrollButtonsMobile
    aria-label="scrollable force tabs example" > <Tab
    label="Item One" /> <Tab label="Item Two" />
    <Tab label="Item Three" /> <Tab label="Item
    Four" /> <Tab label="Item Five" /> <Tab
    label="Item Six" /> <Tab label="Item Seven" />
    </Tabs>
  </text>
  <paragraph>
    <text>
      If you want to make sure the buttons are always visible, you should
      customize the opacity.
    </text>
  </paragraph>
  <text>.MuiTabs-scrollButtons.Mui-disabled { opacity: 0.3; }</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    visible arrows tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
    <tab>
      ITEM FOUR
      <text>ITEM FOUR</text>
    </tab>
    <tab>
      ITEM FIVE
      <text>ITEM FIVE</text>
    </tab>
    <tab>
      ITEM SIX
      <text>ITEM SIX</text>
    </tab>
    <tab>
      ITEM SEVEN
      <text>ITEM SEVEN</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="3">
    Prevent scroll buttons
    <text>Prevent scroll buttons</text>
  </heading>
  <paragraph>
    <text>
      Left and right scroll buttons are never be presented with
      scrollButtons={false}. All scrolling must be initiated through
      user agent scrolling mechanisms (e.g. left/right swipe, shift mouse wheel,
      etc.)
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    scrollable prevent tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
    <tab>
      ITEM FOUR
      <text>ITEM FOUR</text>
    </tab>
    <tab>
      ITEM FIVE
      <text>ITEM FIVE</text>
    </tab>
    <tab>
      ITEM SIX
      <text>ITEM SIX</text>
    </tab>
    <tab>
      ITEM SEVEN
      <text>ITEM SEVEN</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Tabs value={value} onChange={handleChange}
    variant="scrollable" scrollButtons={false}
    aria-label="scrollable prevent tabs example" > <Tab
    label="Item One" /> <Tab label="Item Two" />
    <Tab label="Item Three" /> <Tab label="Item
    Four" /> <Tab label="Item Five" /> <Tab
    label="Item Six" /> <Tab label="Item Seven" />
    </Tabs>
  </text>
  <heading level="2">
    Customized tabs
    <text>Customized tabs</text>
  </heading>
  <paragraph>
    <text>
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link>overrides documentation page</link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    ant example
    <tab selected="true">
      Tab 1<text>Tab 1</text>
    </tab>
    <tab>
      Tab 2<text>Tab 2</text>
    </tab>
    <tab>
      Tab 3<text>Tab 3</text>
    </tab>
  </tablist>
  <tablist>
    styled tabs example
    <tab selected="true">
      Workflows
      <text>Workflows</text>
    </tab>
    <tab>
      Datasets
      <text>Datasets</text>
    </tab>
    <tab>
      Connections
      <text>Connections</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <paragraph>
    <text>üé® If you are looking for inspiration, you can check</text>
    <link>MUI Treasury's customization examples</link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Vertical tabs
    <text>Vertical tabs</text>
  </heading>
  <paragraph>
    <text>
      To make vertical tabs instead of default horizontal ones, there is
      orientation="vertical":
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist orientation="vertical">
    Vertical tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
    <tab>
      ITEM FOUR
      <text>ITEM FOUR</text>
    </tab>
    <tab>
      ITEM FIVE
      <text>ITEM FIVE</text>
    </tab>
    <tab>
      ITEM SIX
      <text>ITEM SIX</text>
    </tab>
    <tab>
      ITEM SEVEN
      <text>ITEM SEVEN</text>
    </tab>
  </tablist>
  <tabpanel>
    ITEM ONE
    <paragraph>
      <text>Item One</text>
    </paragraph>
  </tabpanel>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <paragraph>
    <text>Note that you can restore the scrollbar with visibleScrollbar.</text>
  </paragraph>
  <heading level="2">
    Nav tabs
    <text>Nav tabs</text>
  </heading>
  <paragraph>
    <text>
      By default, tabs use a button element, but you can provide your custom tag
      or component. Here's an example of implementing tabbed navigation:
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    nav tabs example
    <tab selected="true">
      PAGE ONE
      <text>PAGE ONE</text>
    </tab>
    <tab>
      PAGE TWO
      <text>PAGE TWO</text>
    </tab>
    <tab>
      PAGE THREE
      <text>PAGE THREE</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Tabs value={value} onChange={handleChange}
    aria-label="nav tabs example"> <LinkTab label="Page
    One" href="/drafts" /> <LinkTab label="Page
    Two" href="/trash" /> <LinkTab label="Page
    Three" href="/spam" /> </Tabs>
  </text>
  <heading level="2">
    Icon tabs
    <text>Icon tabs</text>
  </heading>
  <paragraph>
    <text>Tab labels may be either all icons or all text.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    icon tabs example
    <tab selected="true">phone</tab>
    <tab>favorite</tab>
    <tab>person</tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Tabs value={value} onChange={handleChange}
    aria-label="icon tabs example"> <Tab
    icon={<PhoneIcon />} aria-label="phone" />
    <Tab icon={<FavoriteIcon />}
    aria-label="favorite" /> <Tab icon={<PersonPinIcon
    />} aria-label="person" /> </Tabs>
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    icon label tabs example
    <tab selected="true">
      RECENTS
      <text>RECENTS</text>
    </tab>
    <tab>
      FAVORITES
      <text>FAVORITES</text>
    </tab>
    <tab>
      NEARBY
      <text>NEARBY</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Tabs value={value} onChange={handleChange}
    aria-label="icon label tabs example"> <Tab
    icon={<PhoneIcon />} label="RECENTS" /> <Tab
    icon={<FavoriteIcon />} label="FAVORITES" />
    <Tab icon={<PersonPinIcon />} label="NEARBY"
    /> </Tabs>
  </text>
  <heading level="2">
    Third-party routing library
    <text>Third-party routing library</text>
  </heading>
  <paragraph>
    <text>
      One frequent use case is to perform navigation on the client only, without
      an HTTP round-trip to the server. The Tab component provides the component
      prop to handle this use case. Here is a
    </text>
    <link>more detailed guide</link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Accessibility
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(WAI-ARIA:</text>
    <link>https://www.w3.org/TR/wai-aria-practices/#tabpanel</link>
    <text>)</text>
  </paragraph>
  <paragraph>
    <text>
      The following steps are needed in order to provide necessary information
      for assistive technologies:
    </text>
  </paragraph>
  <list>
    <listitem>
      Label Tabs via aria-label or aria-labelledby .
      <text>Label Tabs via aria-label or aria-labelledby.</text>
    </listitem>
    <listitem>
      Tab s need to be connected to their corresponding
      [role="tabpanel"] by setting the correct id , aria-controls and
      aria-labelledby .
      <text>
        Tabs need to be connected to their corresponding
        [role="tabpanel"] by setting the correct id, aria-controls and
        aria-labelledby.
      </text>
    </listitem>
  </list>
  <paragraph>
    <text>
      An example for the current implementation can be found in the demos on
      this page. We've also published
    </text>
    <link>an experimental API</link>
    <text>in @material-ui/lab that does not require extra work.</text>
  </paragraph>
  <heading level="3">
    Keyboard navigation
    <text>Keyboard navigation</text>
  </heading>
  <paragraph>
    <text>
      The components implement keyboard navigation using the "manual
      activation" behavior. If you want to switch to the "selection
      automatically follows focus" behavior you have pass
      selectionFollowsFocus to the Tabs component. The WAI-ARIA authoring
      practices have a detailed guide on
    </text>
    <link>how to decide when to make selection automatically follow focus</link>
    <text>.</text>
  </paragraph>
  <heading level="4">
    Demo
    <text>Demo</text>
  </heading>
  <paragraph>
    <text>
      The following two demos only differ in their keyboard navigation behavior.
      Focus a tab and navigate with arrow keys to notice the difference, e.g.
      Arrow Left.
    </text>
  </paragraph>
  <text>
    /* Tabs where selection follows focus */ <Tabs selectionFollowsFocus
    />
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    Tabs where selection follows focus
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    /* Tabs where each tab needs to be selected manually */ <Tabs />
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    Tabs where each tab needs to be selected manually
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem>
      <Tab />
      <link><Tab /></link>
    </listitem>
    <listitem>
      <TabContext />
      <link><TabContext /></link>
    </listitem>
    <listitem>
      <TabList />
      <link><TabList /></link>
    </listitem>
    <listitem>
      <TabPanel />
      <link><TabPanel /></link>
    </listitem>
    <listitem>
      <TabScrollButton />
      <link><TabScrollButton /></link>
    </listitem>
    <listitem>
      <Tabs />
      <link><Tabs /></link>
    </listitem>
  </list>
  <separator></separator>
  <link>Stepper</link>
  <group>
    Was this page helpful?
    <text>Was this page helpful?</text>
    <togglebutton>Yes</togglebutton>
    <togglebutton>No</togglebutton>
  </group>
  <link>Accordion</link>
</landmark>;

`;

exports[`firefox /components/text-fields/ 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Text Field
    <text>Text Field</text>
  </heading>
  <paragraph>
    <text>Text fields let users enter and edit text.</text>
  </paragraph>
  <paragraph>
    <text>
      Text fields allow users to enter text into a UI. They typically appear in
      forms and dialogs.
    </text>
  </paragraph>
  <list>
    <listitem>
      Feedback
      <link>Feedback</link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Material Design
      <link>Material Design</link>
    </listitem>
    <listitem>
      Figma
      <link>Figma</link>
    </listitem>
    <listitem>
      Adobe
      <link>Adobe</link>
    </listitem>
    <listitem>
      Sketch
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Basic TextField
    <text>Basic TextField</text>
  </heading>
  <paragraph>
    <text>
      The TextField wrapper component is a complete form control including a
      label, input, and help text. It comes with three variants: outlined
      (default), filled, and standard.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <label>
      Outlined
      <text>Outlined</text>
    </label>
    <textbox>Outlined</textbox>
    <label>
      Filled
      <text>Filled</text>
    </label>
    <statictext>¬†</statictext>
    <textbox>Filled</textbox>
    <label>
      Standard
      <text>Standard</text>
    </label>
    <statictext>¬†</statictext>
    <textbox>Standard</textbox>
  </form>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <TextField id="outlined-basic" label="Outlined"
    variant="outlined" /> <TextField id="filled-basic"
    label="Filled" variant="filled" /> <TextField
    id="standard-basic" label="Standard"
    variant="standard" />
  </text>
  <paragraph>
    <text>
      Note: The standard variant of the TextField is no longer documented in the
    </text>
    <link>Material Design guidelines</link>
    <text>(</text>
    <link>here's why</link>
    <text>), but Material-UI will continue to support it.</text>
  </paragraph>
  <heading level="2">
    Form props
    <text>Form props</text>
  </heading>
  <paragraph>
    <text>
      Standard form attributes are supported e.g. required, disabled, type, etc.
      as well as a helperText which is used to give context about a field's
      input, such as how the input will be used.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <label>
      Required
      <text>Required</text>
    </label>
    <textbox required="true" value="Hello World">
      Required
      <text>Hello World</text>
    </textbox>
    <label>
      Disabled
      <text>Disabled</text>
    </label>
    <textbox disabled="true" value="Hello World">
      Disabled
      <text>Hello World</text>
    </textbox>
    <label>
      Password
      <text>Password</text>
    </label>
    <textbox>Password</textbox>
    <label>
      Read Only
      <text>Read Only</text>
    </label>
    <textbox readonly="true" value="Hello World">
      Read Only
      <text>Hello World</text>
    </textbox>
    <label>
      Number
      <text>Number</text>
    </label>
    <spinbutton valuetext="">Number</spinbutton>
    <label>
      Search field
      <text>Search field</text>
    </label>
    <textbox>Search field</textbox>
    <label>
      Helper text
      <text>Helper text</text>
    </label>
    <textbox description="Some important text" value="Default Value">
      Helper text
      <text>Default Value</text>
    </textbox>
    <paragraph>
      <text>Some important text</text>
    </paragraph>
    <label>
      Required
      <text>Required</text>
    </label>
    <statictext>¬†</statictext>
    <textbox required="true" value="Hello World">
      Required
      <text>Hello World</text>
    </textbox>
    <label>
      Disabled
      <text>Disabled</text>
    </label>
    <statictext>¬†</statictext>
    <textbox disabled="true" value="Hello World">
      Disabled
      <text>Hello World</text>
    </textbox>
    <label>
      Password
      <text>Password</text>
    </label>
    <statictext>¬†</statictext>
    <textbox>Password</textbox>
    <label>
      Read Only
      <text>Read Only</text>
    </label>
    <statictext>¬†</statictext>
    <textbox readonly="true" value="Hello World">
      Read Only
      <text>Hello World</text>
    </textbox>
    <label>
      Number
      <text>Number</text>
    </label>
    <statictext>¬†</statictext>
    <spinbutton valuetext="">Number</spinbutton>
    <label>
      Search field
      <text>Search field</text>
    </label>
    <statictext>¬†</statictext>
    <textbox>Search field</textbox>
    <label>
      Helper text
      <text>Helper text</text>
    </label>
    <statictext>¬†</statictext>
    <textbox description="Some important text" value="Default Value">
      Helper text
      <text>Default Value</text>
    </textbox>
    <paragraph>
      <text>Some important text</text>
    </paragraph>
    <label>
      Required
      <text>Required</text>
    </label>
    <statictext>¬†</statictext>
    <textbox required="true" value="Hello World">
      Required
      <text>Hello World</text>
    </textbox>
    <label>
      Disabled
      <text>Disabled</text>
    </label>
    <statictext>¬†</statictext>
    <textbox disabled="true" value="Hello World">
      Disabled
      <text>Hello World</text>
    </textbox>
    <label>
      Password
      <text>Password</text>
    </label>
    <statictext>¬†</statictext>
    <textbox>Password</textbox>
    <label>
      Read Only
      <text>Read Only</text>
    </label>
    <statictext>¬†</statictext>
    <textbox readonly="true" value="Hello World">
      Read Only
      <text>Hello World</text>
    </textbox>
    <label>
      Number
      <text>Number</text>
    </label>
    <statictext>¬†</statictext>
    <spinbutton valuetext="">Number</spinbutton>
    <label>
      Search field
      <text>Search field</text>
    </label>
    <statictext>¬†</statictext>
    <textbox>Search field</textbox>
    <label>
      Helper text
      <text>Helper text</text>
    </label>
    <statictext>¬†</statictext>
    <textbox description="Some important text" value="Default Value">
      Helper text
      <text>Default Value</text>
    </textbox>
    <paragraph>
      <text>Some important text</text>
    </paragraph>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Validation
    <text>Validation</text>
  </heading>
  <paragraph>
    <text>
      The error prop toggles the error state. The helperText prop can then be
      used to provide feedback to the user about the error.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <label>
      Error
      <text>Error</text>
    </label>
    <textbox invalid="true" value="Hello World">
      Error
      <text>Hello World</text>
    </textbox>
    <label>
      Error
      <text>Error</text>
    </label>
    <textbox description="Incorrect entry." invalid="true" value="Hello World">
      Error
      <text>Hello World</text>
    </textbox>
    <paragraph>
      <text>Incorrect entry.</text>
    </paragraph>
    <label>
      Error
      <text>Error</text>
    </label>
    <statictext>¬†</statictext>
    <textbox invalid="true" value="Hello World">
      Error
      <text>Hello World</text>
    </textbox>
    <label>
      Error
      <text>Error</text>
    </label>
    <statictext>¬†</statictext>
    <textbox description="Incorrect entry." invalid="true" value="Hello World">
      Error
      <text>Hello World</text>
    </textbox>
    <paragraph>
      <text>Incorrect entry.</text>
    </paragraph>
    <label>
      Error
      <text>Error</text>
    </label>
    <statictext>¬†</statictext>
    <textbox invalid="true" value="Hello World">
      Error
      <text>Hello World</text>
    </textbox>
    <label>
      Error
      <text>Error</text>
    </label>
    <statictext>¬†</statictext>
    <textbox description="Incorrect entry." invalid="true" value="Hello World">
      Error
      <text>Hello World</text>
    </textbox>
    <paragraph>
      <text>Incorrect entry.</text>
    </paragraph>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Multiline
    <text>Multiline</text>
  </heading>
  <paragraph>
    <text>The multiline prop transforms the text field into a</text>
    <link><textarea></link>
    <text>
      element. Unless the rows prop is set, the height of the text field
      dynamically matches its content (using
    </text>
    <link>TextareaAutosize</link>
    <text>). You can use the minRows and maxRows props to bound it.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <label>
      Multiline
      <text>Multiline</text>
    </label>
    <textbox multiline="true" value="Controlled">
      Multiline
      <text>Controlled</text>
    </textbox>
    <label>
      Multiline Placeholder
      <text>Multiline Placeholder</text>
    </label>
    <textbox multiline="true">Multiline Placeholder</textbox>
    <label>
      Multiline
      <text>Multiline</text>
    </label>
    <textbox multiline="true" value="Default Value">
      Multiline
      <text>Default Value</text>
    </textbox>
    <label>
      Multiline
      <text>Multiline</text>
    </label>
    <statictext>¬†</statictext>
    <textbox multiline="true" value="Controlled">
      Multiline
      <text>Controlled</text>
    </textbox>
    <label>
      Multiline Placeholder
      <text>Multiline Placeholder</text>
    </label>
    <statictext>¬†</statictext>
    <textbox multiline="true">Multiline Placeholder</textbox>
    <label>
      Multiline
      <text>Multiline</text>
    </label>
    <statictext>¬†</statictext>
    <textbox multiline="true" value="Default Value">
      Multiline
      <text>Default Value</text>
    </textbox>
    <label>
      Multiline
      <text>Multiline</text>
    </label>
    <statictext>¬†</statictext>
    <textbox multiline="true" value="Controlled">
      Multiline
      <text>Controlled</text>
    </textbox>
    <label>
      Multiline Placeholder
      <text>Multiline Placeholder</text>
    </label>
    <statictext>¬†</statictext>
    <textbox multiline="true">Multiline Placeholder</textbox>
    <label>
      Multiline
      <text>Multiline</text>
    </label>
    <statictext>¬†</statictext>
    <textbox multiline="true" value="Default Value">
      Multiline
      <text>Default Value</text>
    </textbox>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Select
    <text>Select</text>
  </heading>
  <paragraph>
    <text>The select prop makes the text field use the</text>
    <link>Select</link>
    <text>component internally.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <label>
      Select
      <text>Select</text>
    </label>
    <button description="Please select your currency" haspopup="true">
      Select ‚Ç¨<text>‚Ç¨</text>
    </button>
    <paragraph>
      <text>Please select your currency</text>
    </paragraph>
    <label>
      Native select
      <text>Native select</text>
    </label>
    <combobox
      description="Please select your currency"
      haspopup="true"
      value="‚Ç¨"
    >
      Native select
      <MenuListPopup>
        <menuitem>
          $<text>$</text>
        </menuitem>
        <menuitem selected="true">
          ‚Ç¨<text>‚Ç¨</text>
        </menuitem>
        <menuitem>
          ‡∏ø<text>‡∏ø</text>
        </menuitem>
        <menuitem>
          ¬•<text>¬•</text>
        </menuitem>
      </MenuListPopup>
    </combobox>
    <paragraph>
      <text>Please select your currency</text>
    </paragraph>
    <label>
      Select
      <text>Select</text>
    </label>
    <statictext>¬†</statictext>
    <button description="Please select your currency" haspopup="true">
      Select ‚Ç¨<text>‚Ç¨</text>
    </button>
    <paragraph>
      <text>Please select your currency</text>
    </paragraph>
    <label>
      Native select
      <text>Native select</text>
    </label>
    <statictext>¬†</statictext>
    <combobox
      description="Please select your currency"
      haspopup="true"
      value="‚Ç¨"
    >
      Native select
      <MenuListPopup>
        <menuitem>
          $<text>$</text>
        </menuitem>
        <menuitem selected="true">
          ‚Ç¨<text>‚Ç¨</text>
        </menuitem>
        <menuitem>
          ‡∏ø<text>‡∏ø</text>
        </menuitem>
        <menuitem>
          ¬•<text>¬•</text>
        </menuitem>
      </MenuListPopup>
    </combobox>
    <paragraph>
      <text>Please select your currency</text>
    </paragraph>
    <label>
      Select
      <text>Select</text>
    </label>
    <statictext>¬†</statictext>
    <button description="Please select your currency" haspopup="true">
      Select ‚Ç¨<text>‚Ç¨</text>
    </button>
    <paragraph>
      <text>Please select your currency</text>
    </paragraph>
    <label>
      Native select
      <text>Native select</text>
    </label>
    <statictext>¬†</statictext>
    <combobox
      description="Please select your currency"
      haspopup="true"
      value="‚Ç¨"
    >
      Native select
      <MenuListPopup>
        <menuitem>
          $<text>$</text>
        </menuitem>
        <menuitem selected="true">
          ‚Ç¨<text>‚Ç¨</text>
        </menuitem>
        <menuitem>
          ‡∏ø<text>‡∏ø</text>
        </menuitem>
        <menuitem>
          ¬•<text>¬•</text>
        </menuitem>
      </MenuListPopup>
    </combobox>
    <paragraph>
      <text>Please select your currency</text>
    </paragraph>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Icons
    <text>Icons</text>
  </heading>
  <paragraph>
    <text>There are multiple ways to display an icon with a text field.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    With a start adornment
    <text>With a start adornment</text>
  </label>
  <statictext>¬†</statictext>
  <text>‚Äã</text>
  <textbox>With a start adornment</textbox>
  <label>
    TextField
    <text>TextField</text>
  </label>
  <statictext>¬†</statictext>
  <text>‚Äã</text>
  <textbox>TextField</textbox>
  <label>
    With sx
    <text>With sx</text>
  </label>
  <statictext>¬†</statictext>
  <textbox>With sx</textbox>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="3">
    Input Adornments
    <text>Input Adornments</text>
  </heading>
  <paragraph>
    <text>
      The main way is with an InputAdornment. This can be used to add a prefix,
      a suffix, or an action to an input. For instance, you can use an icon
      button to hide or reveal the password.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    With normal TextField
    <text>With normal TextField</text>
  </label>
  <paragraph>
    <text>Kg</text>
  </paragraph>
  <textbox>With normal TextField</textbox>
  <textbox description="Weight">weight</textbox>
  <paragraph>
    <text>Kg</text>
  </paragraph>
  <paragraph>
    <text>Weight</text>
  </paragraph>
  <label>
    Password
    <text>Password</text>
  </label>
  <textbox>Password</textbox>
  <button>toggle password visibility</button>
  <label>
    Amount
    <text>Amount</text>
  </label>
  <paragraph>
    <text>$</text>
  </paragraph>
  <textbox>Amount</textbox>
  <label>
    With normal TextField
    <text>With normal TextField</text>
  </label>
  <statictext>¬†</statictext>
  <paragraph>
    <text>Kg</text>
  </paragraph>
  <textbox>With normal TextField</textbox>
  <statictext>¬†</statictext>
  <textbox description="Weight">weight</textbox>
  <paragraph>
    <text>Kg</text>
  </paragraph>
  <paragraph>
    <text>Weight</text>
  </paragraph>
  <label>
    Password
    <text>Password</text>
  </label>
  <statictext>¬†</statictext>
  <textbox>Password</textbox>
  <button>toggle password visibility</button>
  <label>
    Amount
    <text>Amount</text>
  </label>
  <statictext>¬†</statictext>
  <paragraph>
    <text>$</text>
  </paragraph>
  <textbox>Amount</textbox>
  <label>
    With normal TextField
    <text>With normal TextField</text>
  </label>
  <statictext>¬†</statictext>
  <paragraph>
    <text>Kg</text>
  </paragraph>
  <textbox>With normal TextField</textbox>
  <statictext>¬†</statictext>
  <textbox description="Weight">weight</textbox>
  <paragraph>
    <text>Kg</text>
  </paragraph>
  <paragraph>
    <text>Weight</text>
  </paragraph>
  <label>
    Password
    <text>Password</text>
  </label>
  <statictext>¬†</statictext>
  <textbox>Password</textbox>
  <button>toggle password visibility</button>
  <label>
    Amount
    <text>Amount</text>
  </label>
  <statictext>¬†</statictext>
  <paragraph>
    <text>$</text>
  </paragraph>
  <textbox>Amount</textbox>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Sizes
    <text>Sizes</text>
  </heading>
  <paragraph>
    <text>Fancy smaller inputs? Use the size prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <label>
      Size
      <text>Size</text>
    </label>
    <textbox value="Small">
      Size
      <text>Small</text>
    </textbox>
    <label>
      Size
      <text>Size</text>
    </label>
    <textbox value="Normal">
      Size
      <text>Normal</text>
    </textbox>
    <label>
      Size
      <text>Size</text>
    </label>
    <statictext>¬†</statictext>
    <textbox value="Small">
      Size
      <text>Small</text>
    </textbox>
    <label>
      Size
      <text>Size</text>
    </label>
    <statictext>¬†</statictext>
    <textbox value="Normal">
      Size
      <text>Normal</text>
    </textbox>
    <label>
      Size
      <text>Size</text>
    </label>
    <statictext>¬†</statictext>
    <textbox value="Small">
      Size
      <text>Small</text>
    </textbox>
    <label>
      Size
      <text>Size</text>
    </label>
    <statictext>¬†</statictext>
    <textbox value="Normal">
      Size
      <text>Normal</text>
    </textbox>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <paragraph>
    <text>
      The filled variant input height can be further reduced by rendering the
      label outside of it.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <statictext>¬†</statictext>
    <textbox value="Small">
      <text>Small</text>
    </textbox>
    <statictext>¬†</statictext>
    <textbox value="Normal">
      <text>Normal</text>
    </textbox>
  </form>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <TextField hiddenLabel id="filled-hidden-label-small"
    defaultValue="Small" variant="filled"
    size="small" /> <TextField hiddenLabel
    id="filled-hidden-label-normal" defaultValue="Normal"
    variant="filled" />
  </text>
  <heading level="2">
    Layout
    <text>Layout</text>
  </heading>
  <paragraph>
    <text>
      margin prop can be used to alter the vertical spacing of inputs. Using
      none (default) will not apply margins to the FormControl, whereas dense
      and normal will. dense and normal alter other styles to meet the
      specification.
    </text>
  </paragraph>
  <paragraph>
    <text>
      fullWidth can be used to make the input take up the full width of its
      container.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Label
    <text>Label</text>
  </label>
  <textbox description="Full width!">Label</textbox>
  <paragraph>
    <text>Full width!</text>
  </paragraph>
  <label>
    None
    <text>None</text>
  </label>
  <textbox description="Some important text" value="Default Value">
    None
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <label>
    Dense
    <text>Dense</text>
  </label>
  <textbox description="Some important text" value="Default Value">
    Dense
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <label>
    Normal
    <text>Normal</text>
  </label>
  <textbox description="Some important text" value="Default Value">
    Normal
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <label>
    Label
    <text>Label</text>
  </label>
  <statictext>¬†</statictext>
  <textbox description="Full width!">Label</textbox>
  <paragraph>
    <text>Full width!</text>
  </paragraph>
  <label>
    None
    <text>None</text>
  </label>
  <statictext>¬†</statictext>
  <textbox description="Some important text" value="Default Value">
    None
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <label>
    Dense
    <text>Dense</text>
  </label>
  <statictext>¬†</statictext>
  <textbox description="Some important text" value="Default Value">
    Dense
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <label>
    Normal
    <text>Normal</text>
  </label>
  <statictext>¬†</statictext>
  <textbox description="Some important text" value="Default Value">
    Normal
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <label>
    Label
    <text>Label</text>
  </label>
  <statictext>¬†</statictext>
  <textbox description="Full width!">Label</textbox>
  <paragraph>
    <text>Full width!</text>
  </paragraph>
  <label>
    None
    <text>None</text>
  </label>
  <statictext>¬†</statictext>
  <textbox description="Some important text" value="Default Value">
    None
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <label>
    Dense
    <text>Dense</text>
  </label>
  <statictext>¬†</statictext>
  <textbox description="Some important text" value="Default Value">
    Dense
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <label>
    Normal
    <text>Normal</text>
  </label>
  <statictext>¬†</statictext>
  <textbox description="Some important text" value="Default Value">
    Normal
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Uncontrolled vs. Controlled
    <text>Uncontrolled vs. Controlled</text>
  </heading>
  <paragraph>
    <text>The component can be controlled or uncontrolled.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <label>
      Name
      <text>Name</text>
    </label>
    <textbox value="Cat in the Hat">
      Name
      <text>Cat in the Hat</text>
    </textbox>
    <label>
      Uncontrolled
      <text>Uncontrolled</text>
    </label>
    <textbox value="foo">
      Uncontrolled
      <text>foo</text>
    </textbox>
  </form>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <TextField id="outlined-name" label="Name"
    value={name} onChange={handleChange} /> <TextField
    id="outlined-uncontrolled" label="Uncontrolled"
    defaultValue="foo" />
  </text>
  <heading level="2">
    Components
    <text>Components</text>
  </heading>
  <paragraph>
    <text>TextField is composed of smaller components (</text>
    <link>FormControl</link>
    <text>,</text>
    <link>Input</link>
    <text>,</text>
    <link>FilledInput</link>
    <text>,</text>
    <link>InputLabel</link>
    <text>,</text>
    <link>OutlinedInput</link>
    <text>, and</text>
    <link>FormHelperText</link>
    <text>
      ) that you can leverage directly to significantly customize your form
      inputs.
    </text>
  </paragraph>
  <paragraph>
    <text>
      You might also have noticed that some native HTML input properties are
      missing from the TextField component. This is on purpose. The component
      takes care of the most used properties. Then, it's up to the user to
      use the underlying component shown in the following demo. Still, you can
      use inputProps (and InputProps, InputLabelProps properties) if you want to
      avoid some boilerplate.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <label>
      Name
      <text>Name</text>
    </label>
    <statictext>¬†</statictext>
    <textbox value="Composed TextField">
      Name
      <text>Composed TextField</text>
    </textbox>
    <label>
      Name
      <text>Name</text>
    </label>
    <statictext>¬†</statictext>
    <textbox
      description="Some important helper text"
      value="Composed TextField"
    >
      Name
      <text>Composed TextField</text>
    </textbox>
    <paragraph>
      <text>Some important helper text</text>
    </paragraph>
    <label>
      Name
      <text>Name</text>
    </label>
    <statictext>¬†</statictext>
    <textbox disabled="true" value="Composed TextField">
      Name
      <text>Composed TextField</text>
    </textbox>
    <paragraph>
      <text>Disabled</text>
    </paragraph>
    <label>
      Name
      <text>Name</text>
    </label>
    <statictext>¬†</statictext>
    <textbox description="Error" invalid="true" value="Composed TextField">
      Name
      <text>Composed TextField</text>
    </textbox>
    <paragraph>
      <text>Error</text>
    </paragraph>
    <label>
      Name
      <text>Name</text>
    </label>
    <textbox value="Composed TextField">
      Name
      <text>Composed TextField</text>
    </textbox>
    <label>
      Name
      <text>Name</text>
    </label>
    <statictext>¬†</statictext>
    <textbox value="Composed TextField">
      Name
      <text>Composed TextField</text>
    </textbox>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Inputs
    <text>Inputs</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <statictext>¬†</statictext>
    <textbox value="Hello world">
      description
      <text>Hello world</text>
    </textbox>
    <statictext>¬†</statictext>
    <textbox>description</textbox>
    <statictext>¬†</statictext>
    <textbox disabled="true" value="Disabled">
      description
      <text>Disabled</text>
    </textbox>
    <statictext>¬†</statictext>
    <textbox invalid="true" value="Error">
      description
      <text>Error</text>
    </textbox>
  </form>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Input defaultValue="Hello world"
    inputProps={ariaLabel} /> <Input
    placeholder="Placeholder" inputProps={ariaLabel} />
    <Input disabled defaultValue="Disabled"
    inputProps={ariaLabel} /> <Input
    defaultValue="Error" error inputProps={ariaLabel} />
  </text>
  <heading level="2">
    Color
    <text>Color</text>
  </heading>
  <paragraph>
    <text>
      The color prop changes the highlight color of the text field when focused.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <label>
      Outlined secondary
      <text>Outlined secondary</text>
    </label>
    <textbox>Outlined secondary</textbox>
    <label>
      Filled secondary
      <text>Filled secondary</text>
    </label>
    <statictext>¬†</statictext>
    <textbox>Filled secondary</textbox>
    <label>
      Standard secondary
      <text>Standard secondary</text>
    </label>
    <statictext>¬†</statictext>
    <textbox>Standard secondary</textbox>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Customized inputs
    <text>Customized inputs</text>
  </heading>
  <paragraph>
    <text>
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link>overrides documentation page</link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <label>
      Bootstrap
      <text>Bootstrap</text>
    </label>
    <textbox value="react-bootstrap">
      Bootstrap
      <text>react-bootstrap</text>
    </textbox>
    <label>
      Reddit
      <text>Reddit</text>
    </label>
    <textbox value="react-reddit">
      Reddit
      <text>react-reddit</text>
    </textbox>
    <label>
      Custom CSS
      <text>Custom CSS</text>
    </label>
    <textbox>Custom CSS</textbox>
    <label>
      CSS validation style
      <text>CSS validation style</text>
    </label>
    <textbox required="true" value="Success">
      CSS validation style
      <text>Success</text>
    </textbox>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <paragraph>
    <text>
      Customization does not stop at CSS. You can use composition to build
      custom components and give your app a unique feel. Below is an example
      using the
    </text>
    <link>InputBase</link>
    <text>component, inspired by Google Maps.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <button>menu</button>
    <textbox>search google maps</textbox>
    <button>search</button>
    <separator></separator>
    <button>directions</button>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <paragraph>
    <text>üé® If you are looking for inspiration, you can check</text>
    <link>MUI Treasury's customization examples</link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    useFormControl
    <text>useFormControl</text>
  </heading>
  <paragraph>
    <text>
      For advanced customization use cases, a useFormControl() hook is exposed.
      This hook returns the context value of the parent FormControl component.
    </text>
  </paragraph>
  <paragraph>
    <text>API</text>
  </paragraph>
  <text>
    import { useFormControl } from
    '@material-ui/core/FormControl';
  </text>
  <paragraph>
    <text>Returns</text>
  </paragraph>
  <paragraph>
    <text>value (object):</text>
  </paragraph>
  <list>
    <listitem>
      value.adornedStart ( bool ): Indicate whether the child Input or Select
      component has a start adornment.
      <text>
        value.adornedStart (bool): Indicate whether the child Input or Select
        component has a start adornment.
      </text>
    </listitem>
    <listitem>
      value.setAdornedStart ( func ): Setter function for adornedStart state
      value.
      <text>
        value.setAdornedStart (func): Setter function for adornedStart state
        value.
      </text>
    </listitem>
    <listitem>
      value.color ( string ): The theme color is being used, inherited from
      FormControl color prop .
      <text>
        value.color (string): The theme color is being used, inherited from
        FormControl color prop .
      </text>
    </listitem>
    <listitem>
      value.disabled ( bool ): Indicate whether the component is being displayed
      in a disabled state, inherited from FormControl disabled prop.
      <text>
        value.disabled (bool): Indicate whether the component is being displayed
        in a disabled state, inherited from FormControl disabled prop.
      </text>
    </listitem>
    <listitem>
      value.error ( bool ): Indicate whether the component is being displayed in
      an error state, inherited from FormControl error prop
      <text>
        value.error (bool): Indicate whether the component is being displayed in
        an error state, inherited from FormControl error prop
      </text>
    </listitem>
    <listitem>
      value.filled ( bool ): Indicate whether input is filled
      <text>value.filled (bool): Indicate whether input is filled</text>
    </listitem>
    <listitem>
      value.focused ( bool ): Indicate whether the component and its children
      are being displayed in a focused state
      <text>
        value.focused (bool): Indicate whether the component and its children
        are being displayed in a focused state
      </text>
    </listitem>
    <listitem>
      value.fullWidth ( bool ): Indicate whether the component is taking up the
      full width of its container, inherited from FormControl fullWidth prop
      <text>
        value.fullWidth (bool): Indicate whether the component is taking up the
        full width of its container, inherited from FormControl fullWidth prop
      </text>
    </listitem>
    <listitem>
      value.hiddenLabel ( bool ): Indicate whether the label is being hidden,
      inherited from FormControl hiddenLabel prop
      <text>
        value.hiddenLabel (bool): Indicate whether the label is being hidden,
        inherited from FormControl hiddenLabel prop
      </text>
    </listitem>
    <listitem>
      value.required ( bool ): Indicate whether the label is indicating that the
      input is required input, inherited from the FormControl required prop
      <text>
        value.required (bool): Indicate whether the label is indicating that the
        input is required input, inherited from the FormControl required prop
      </text>
    </listitem>
    <listitem>
      value.size ( string ): The size of the component, inherited from the
      FormControl size prop
      <text>
        value.size (string): The size of the component, inherited from the
        FormControl size prop
      </text>
    </listitem>
    <listitem>
      value.variant ( string ): The variant is being used by the FormControl
      component and its children, inherited from FormControl variant prop
      <text>
        value.variant (string): The variant is being used by the FormControl
        component and its children, inherited from FormControl variant prop
      </text>
    </listitem>
    <listitem>
      value.onBlur ( func ): Should be called when the input is blurred
      <text>
        value.onBlur (func): Should be called when the input is blurred
      </text>
    </listitem>
    <listitem>
      value.onFocus ( func ): Should be called when the input is focused
      <text>
        value.onFocus (func): Should be called when the input is focused
      </text>
    </listitem>
    <listitem>
      value.onEmpty ( func ): Should be called when the input is emptied
      <text>
        value.onEmpty (func): Should be called when the input is emptied
      </text>
    </listitem>
    <listitem>
      value.onFilled ( func ): Should be called when the input is filled
      <text>
        value.onFilled (func): Should be called when the input is filled
      </text>
    </listitem>
  </list>
  <paragraph>
    <text>Example</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <textbox>Please enter text</textbox>
    <paragraph>
      <text>Helper text</text>
    </paragraph>
  </form>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <FormControl sx={{ width: '25ch' }}>
    <OutlinedInput placeholder="Please enter text" />
    <MyFormHelperText /> </FormControl>
  </text>
  <heading level="2">
    Limitations
    <text>Limitations</text>
  </heading>
  <heading level="3">
    Shrink
    <text>Shrink</text>
  </heading>
  <paragraph>
    <text>
      The input label "shrink" state isn't always correct. The
      input label is supposed to shrink as soon as the input is displaying
      something. In some circumstances, we can't determine the
      "shrink" state (number input, datetime input, Stripe input). You
      might notice an overlap.
    </text>
  </paragraph>
  <paragraph>
    <img>shrink</img>
  </paragraph>
  <paragraph>
    <text>
      To workaround the issue, you can force the "shrink" state of the
      label.
    </text>
  </paragraph>
  <text>
    <TextField InputLabelProps={{ shrink: true }} />
  </text>
  <paragraph>
    <text>or</text>
  </paragraph>
  <text><InputLabel shrink>Count</InputLabel></text>
  <heading level="3">
    Floating label
    <text>Floating label</text>
  </heading>
  <paragraph>
    <text>
      The floating label is absolutely positioned. It won't impact the
      layout of the page. Make sure that the input is larger than the label to
      display correctly.
    </text>
  </paragraph>
  <heading level="3">
    type="number"
    <text>type="number"</text>
  </heading>
  <paragraph>
    <text>
      Inputs of type="number" have potential usability issues:
    </text>
  </paragraph>
  <list>
    <listitem>
      Allowing certain non-numeric characters ('e', '+',
      '-', '.') and silently discarding others
      <text>
        Allowing certain non-numeric characters ('e', '+',
        '-', '.') and silently discarding others
      </text>
    </listitem>
    <listitem>
      The functionality of scrolling to increment/decrement the number can cause
      accidental and hard-to-notice changes
      <text>
        The functionality of scrolling to increment/decrement the number can
        cause accidental and hard-to-notice changes
      </text>
    </listitem>
  </list>
  <paragraph>
    <text>and more - see</text>
    <link>this article</link>
    <text>
      by the GOV.UK Design System team for a more detailed explanation.
    </text>
  </paragraph>
  <paragraph>
    <text>
      For number validation, one viable alternative is to use the default input
      type="text" with the pattern attribute, for example:
    </text>
  </paragraph>
  <text>
    <TextField inputProps={{ inputMode: 'numeric',
    pattern: '[0-9]*' }} />
  </text>
  <paragraph>
    <text>In the future, we might provide a</text>
    <link>number input component</link>
    <text>.</text>
  </paragraph>
  <heading level="3">
    Helper text
    <text>Helper text</text>
  </heading>
  <paragraph>
    <text>
      The helper text prop affects the height of the text field. If two text
      fields are placed side by side, one with a helper text and one without,
      they will have different heights. For example:
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Name
    <text>Name</text>
  </label>
  <textbox description="Please enter your name">Name</textbox>
  <paragraph>
    <text>Please enter your name</text>
  </paragraph>
  <label>
    Name
    <text>Name</text>
  </label>
  <textbox>Name</textbox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <TextField helperText="Please enter your name"
    id="demo-helper-text-misaligned" label="Name" />
    <TextField id="demo-helper-text-misaligned-no-helper"
    label="Name" />
  </text>
  <paragraph>
    <text>
      This can be fixed by passing a space character to the helperText prop:
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Name
    <text>Name</text>
  </label>
  <textbox description="Please enter your name">Name</textbox>
  <paragraph>
    <text>Please enter your name</text>
  </paragraph>
  <label>
    Name
    <text>Name</text>
  </label>
  <textbox description="‚Äã">Name</textbox>
  <paragraph>
    <text>‚Äã</text>
  </paragraph>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <TextField helperText="Please enter your name"
    id="demo-helper-text-aligned" label="Name" />
    <TextField helperText=" "
    id="demo-helper-text-aligned-no-helper" label="Name"
    />
  </text>
  <heading level="2">
    Integration with 3rd party input libraries
    <text>Integration with 3rd party input libraries</text>
  </heading>
  <paragraph>
    <text>
      You can use third-party libraries to format an input. You have to provide
      a custom implementation of the <input> element with the
      inputComponent property.
    </text>
  </paragraph>
  <paragraph>
    <text>The following demo uses the</text>
    <link>react-text-mask</link>
    <text>and</text>
    <link>react-number-format</link>
    <text>libraries. The same concept could be applied to</text>
    <link>e.g. react-stripe-element</link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    react-text-mask
    <text>react-text-mask</text>
  </label>
  <statictext>¬†</statictext>
  <textbox value="(1‚ÄÄ‚ÄÄ) ‚ÄÄ‚ÄÄ‚ÄÄ-‚ÄÄ‚ÄÄ‚ÄÄ‚ÄÄ">
    react-text-mask
    <text>(1‚ÄÄ‚ÄÄ) ‚ÄÄ‚ÄÄ‚ÄÄ-‚ÄÄ‚ÄÄ‚ÄÄ‚ÄÄ</text>
  </textbox>
  <label>
    react-number-format
    <text>react-number-format</text>
  </label>
  <statictext>¬†</statictext>
  <textbox value="$1,320">
    react-number-format
    <text>$1,320</text>
  </textbox>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <paragraph>
    <text>
      The provided input component should expose a ref with a value that
      implements the following interface:
    </text>
  </paragraph>
  <text>
    interface InputElement { focus(): void; value?: string; } const
    MyInputComponent = React.forwardRef((props, ref) => { const {
    component: Component, ...other } = props; // implement \`InputElement\`
    interface React.useImperativeHandle(ref, () => ({ focus: () =>
    { // logic to focus the rendered component from 3rd party belongs here
    }, // hiding the value e.g. react-stripe-elements })); //
    \`Component\` will be your \`SomeThirdPartyComponent\` from below return
    <Component {...other} />; }); // usage <TextField
    InputProps={{ inputComponent: MyInputComponent, inputProps: {
    component: SomeThirdPartyComponent, }, }} />;
  </text>
  <heading level="2">
    Accessibility
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>
      In order for the text field to be accessible, the input should be linked
      to the label and the helper text. The underlying DOM nodes should have
      this structure:
    </text>
  </paragraph>
  <text>
    <div class="form-control"> <label
    for="my-input">Email address</label> <input
    id="my-input" aria-describedby="my-helper-text" />
    <span id="my-helper-text">We'll never share your
    email.</span> </div>
  </text>
  <list>
    <listitem>
      If you are using the TextField component, you just have to provide a
      unique id .
      <text>
        If you are using the TextField component, you just have to provide a
        unique id.
      </text>
    </listitem>
    <listitem>
      If you are composing the component:
      <text>If you are composing the component:</text>
    </listitem>
  </list>
  <text>
    <FormControl> <InputLabel htmlFor="my-input">Email
    address</InputLabel> <Input id="my-input"
    aria-describedby="my-helper-text" /> <FormHelperText
    id="my-helper-text">We'll never share your
    email.</FormHelperText> </FormControl>
  </text>
  <heading level="2">
    Complementary projects
    <text>Complementary projects</text>
  </heading>
  <paragraph>
    <text>
      For more advanced use cases, you might be able to take advantage of:
    </text>
  </paragraph>
  <list>
    <listitem>
      react-hook-form : React hook for form validation.
      <link>react-hook-form</link>
      <text>: React hook for form validation.</text>
    </listitem>
    <listitem>
      formik-material-ui : Bindings for using Material-UI with formik .
      <link>formik-material-ui</link>
      <text>: Bindings for using Material-UI with</text>
      <link>formik</link>
      <text>.</text>
    </listitem>
    <listitem>
      redux-form-material-ui : Bindings for using Material-UI with Redux Form .
      <link>redux-form-material-ui</link>
      <text>: Bindings for using Material-UI with</text>
      <link>Redux Form</link>
      <text>.</text>
    </listitem>
    <listitem>
      mui-rff : Bindings for using Material-UI with React Final Form .
      <link>mui-rff</link>
      <text>: Bindings for using Material-UI with</text>
      <link>React Final Form</link>
      <text>.</text>
    </listitem>
  </list>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem>
      <FilledInput />
      <link><FilledInput /></link>
    </listitem>
    <listitem>
      <FormControl />
      <link><FormControl /></link>
    </listitem>
    <listitem>
      <FormHelperText />
      <link><FormHelperText /></link>
    </listitem>
    <listitem>
      <Input />
      <link><Input /></link>
    </listitem>
    <listitem>
      <InputAdornment />
      <link><InputAdornment /></link>
    </listitem>
    <listitem>
      <InputBase />
      <link><InputBase /></link>
    </listitem>
    <listitem>
      <InputLabel />
      <link><InputLabel /></link>
    </listitem>
    <listitem>
      <OutlinedInput />
      <link><OutlinedInput /></link>
    </listitem>
    <listitem>
      <TextField />
      <link><TextField /></link>
    </listitem>
  </list>
  <separator></separator>
  <link>Switch</link>
  <group>
    Was this page helpful?
    <text>Was this page helpful?</text>
    <togglebutton>Yes</togglebutton>
    <togglebutton>No</togglebutton>
  </group>
  <link>Transfer List</link>
</landmark>;

`;

exports[`firefox /components/tooltips/ 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Tooltip
    <text>Tooltip</text>
  </heading>
  <paragraph>
    <text>
      Tooltips display informative text when users hover over, focus on, or tap
      an element.
    </text>
  </paragraph>
  <paragraph>
    <text>
      When activated, Tooltips display a text label identifying an element, such
      as a description of its function.
    </text>
  </paragraph>
  <list>
    <listitem>
      Feedback
      <link>Feedback</link>
    </listitem>
    <listitem>
      WAI-ARIA
      <link>WAI-ARIA</link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Material Design
      <link>Material Design</link>
    </listitem>
    <listitem>
      Figma
      <link>Figma</link>
    </listitem>
    <listitem>
      Adobe
      <link>Adobe</link>
    </listitem>
    <listitem>
      Sketch
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Basic tooltip
    <text>Basic tooltip</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>Delete</button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Tooltip title="Delete"> <IconButton> <DeleteIcon
    /> </IconButton> </Tooltip>
  </text>
  <heading level="2">
    Positioned tooltips
    <text>Positioned tooltips</text>
  </heading>
  <paragraph>
    <text>
      The Tooltip has 12 placements choice. They don't have directional
      arrows; instead, they rely on motion emanating from the source to convey
      direction.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>TOP-START</text>
  </button>
  <button>
    Add
    <text>TOP</text>
  </button>
  <button>
    Add
    <text>TOP-END</text>
  </button>
  <button>
    Add
    <text>LEFT-START</text>
  </button>
  <whitespace></whitespace>
  <button>
    Add
    <text>LEFT</text>
  </button>
  <whitespace></whitespace>
  <button>
    Add
    <text>LEFT-END</text>
  </button>
  <button>
    Add
    <text>RIGHT-START</text>
  </button>
  <button>
    Add
    <text>RIGHT</text>
  </button>
  <button>
    Add
    <text>RIGHT-END</text>
  </button>
  <button>
    Add
    <text>BOTTOM-START</text>
  </button>
  <button>
    Add
    <text>BOTTOM</text>
  </button>
  <button>
    Add
    <text>BOTTOM-END</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Customized tooltips
    <text>Customized tooltips</text>
  </heading>
  <paragraph>
    <text>
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link>overrides documentation page</link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>LIGHT</text>
  </button>
  <button>
    Add
    <text>BOOTSTRAP</text>
  </button>
  <button>
    HTML
    <text>HTML</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Arrow tooltips
    <text>Arrow tooltips</text>
  </heading>
  <paragraph>
    <text>
      You can use the arrow prop to give your tooltip an arrow indicating which
      element it refers to.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>ARROW</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Tooltip title="Add" arrow>
    <Button>Arrow</Button> </Tooltip>
  </text>
  <heading level="2">
    Custom child element
    <text>Custom child element</text>
  </heading>
  <paragraph>
    <text>
      The tooltip needs to apply DOM event listeners to its child element. If
      the child is a custom React element, you need to make sure that it spreads
      its props to the underlying DOM element.
    </text>
  </paragraph>
  <text>
    const MyComponent = React.forwardRef(function MyComponent(props, ref) {
    // Spread the props to the underlying DOM element. return <div
    {...props} ref={ref}>Bin</div> }); // ...
    <Tooltip title="Delete"> <MyComponent>
    </Tooltip>
  </text>
  <paragraph>
    <text>You can find a similar concept in the</text>
    <link>wrapping components</link>
    <text>guide.</text>
  </paragraph>
  <heading level="2">
    Triggers
    <text>Triggers</text>
  </heading>
  <paragraph>
    <text>
      You can define the types of events that cause a tooltip to show.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>HOVER OR TOUCH</text>
  </button>
  <button>
    Add
    <text>FOCUS OR TOUCH</text>
  </button>
  <button>
    Add
    <text>HOVER</text>
  </button>
  <button>
    Add
    <text>CLICK</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Controlled tooltips
    <text>Controlled tooltips</text>
  </heading>
  <paragraph>
    <text>
      You can use the open, onOpen and onClose props to control the behavior of
      the tooltip.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>CONTROLLED</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Tooltip open={open} onClose={handleClose}
    onOpen={handleOpen} title="Add">
    <Button>Controlled</Button> </Tooltip>
  </text>
  <heading level="2">
    Variable width
    <text>Variable width</text>
  </heading>
  <paragraph>
    <text>The Tooltip wraps long text by default to make it readable.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Aliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est,
    vel aliquam tellus. Praesent non nunc mollis, fermentum neque at, semper
    arcu. Nullam eget est sed sem iaculis gravida eget vitae justo.
    <text>DEFAULT WIDTH [300PX]</text>
  </button>
  <button>
    Aliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est,
    vel aliquam tellus. Praesent non nunc mollis, fermentum neque at, semper
    arcu. Nullam eget est sed sem iaculis gravida eget vitae justo.
    <text>CUSTOM WIDTH [500PX]</text>
  </button>
  <button>
    Aliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est,
    vel aliquam tellus. Praesent non nunc mollis, fermentum neque at, semper
    arcu. Nullam eget est sed sem iaculis gravida eget vitae justo.
    <text>NO WRAPPING</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Tooltip title={longText}> <Button sx={{ m: 1
    }}>Default Width [300px]</Button> </Tooltip>
    <CustomWidthTooltip title={longText}> <Button
    sx={{ m: 1 }}>Custom Width [500px]</Button>
    </CustomWidthTooltip> <NoMaxWidthTooltip
    title={longText}> <Button sx={{ m: 1
    }}>No wrapping</Button> </NoMaxWidthTooltip>
  </text>
  <heading level="2">
    Interactive
    <text>Interactive</text>
  </heading>
  <paragraph>
    <text>Tooltips are interactive by default (to pass</text>
    <link>WCAG 2.1 success criterion 1.4.13</link>
    <text>
      ). It won't close when the user hovers over the tooltip before the
      leaveDelay is expired. You can disable this behavior (thus failing the
      success criterion which is required to reach level AA) by passing
      disableInteractive.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>NOT INTERACTIVE</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Tooltip title="Add" disableInteractive> <Button>Not
    interactive</Button> </Tooltip>
  </text>
  <heading level="2">
    Disabled elements
    <text>Disabled elements</text>
  </heading>
  <paragraph>
    <text>
      By default disabled elements like <button> do not trigger user
      interactions so a Tooltip will not activate on normal events like hover.
      To accommodate disabled elements, add a simple wrapper element, such as a
      span.
    </text>
  </paragraph>
  <blockquote>
    <paragraph>
      <text>
        ‚ö†Ô∏è In order to work with Safari, you need at least one display block or
        flex item below the tooltip wrapper.
      </text>
    </paragraph>
  </blockquote>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button disabled="true">
    A DISABLED BUTTON
    <text>A DISABLED BUTTON</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Tooltip title="You don't have permission to do this">
    <span> <Button disabled>A Disabled Button</Button>
    </span> </Tooltip>
  </text>
  <blockquote>
    <paragraph>
      <text>
        If you're not wrapping a Material-UI component that inherits from
        ButtonBase, for instance, a native <button> element, you should
        also add the CSS property pointer-events: none; to your element when
        disabled:
      </text>
    </paragraph>
  </blockquote>
  <text>
    <Tooltip title="You don't have permission to do this">
    <span> <button disabled={disabled} style={disabled ?
    { pointerEvents: 'none' } : {}}> A
    disabled button </button> </span> </Tooltip>
  </text>
  <heading level="2">
    Transitions
    <text>Transitions</text>
  </heading>
  <paragraph>
    <text>Use a different transition.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>GROW</text>
  </button>
  <button>
    Add
    <text>FADE</text>
  </button>
  <button>
    Add
    <text>ZOOM</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Tooltip title="Add"> <Button>Grow</Button>
    </Tooltip> <Tooltip TransitionComponent={Fade}
    TransitionProps={{ timeout: 600 }} title="Add"
    > <Button>Fade</Button> </Tooltip> <Tooltip
    TransitionComponent={Zoom} title="Add">
    <Button>Zoom</Button> </Tooltip>
  </text>
  <heading level="2">
    Follow cursor
    <text>Follow cursor</text>
  </heading>
  <paragraph>
    <text>
      You can enable the tooltip to follow the cursor by setting
      followCursor={true}.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Disabled Action</text>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Tooltip title="You don't have permission to do this"
    followCursor> <Box sx={{ bgcolor: 'text.disabled',
    color: 'background.paper', p: 2 }}> Disabled Action
    </Box> </Tooltip>
  </text>
  <heading level="2">
    Virtual element
    <text>Virtual element</text>
  </heading>
  <paragraph>
    <text>
      In the event you need to implement a custom placement, you can use the
      anchorEl prop: The value of the anchorEl prop can be a reference to a fake
      DOM element. You need to create an object shaped like the
    </text>
    <link>VirtualElement</link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Hover</text>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Showing and hiding
    <text>Showing and hiding</text>
  </heading>
  <paragraph>
    <text>
      The tooltip is normally shown immediately when the user's mouse
      hovers over the element, and hides immediately when the user's mouse
      leaves. A delay in showing or hiding the tooltip can be added through the
      enterDelay and leaveDelay props, as shown in the Controlled Tooltips demo
      above.
    </text>
  </paragraph>
  <paragraph>
    <text>
      On mobile, the tooltip is displayed when the user longpresses the element
      and hides after a delay of 1500ms. You can disable this feature with the
      disableTouchListener prop.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>[500MS, 200MS]</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Tooltip title="Add" enterDelay={500}
    leaveDelay={200}> <Button>[500ms, 200ms]</Button>
    </Tooltip>
  </text>
  <heading level="2">
    Accessibility
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(WAI-ARIA:</text>
    <link>https://www.w3.org/TR/wai-aria-practices/#tooltip</link>
    <text>)</text>
  </paragraph>
  <paragraph>
    <text>
      By default, the tooltip only labels its child element. This is notably
      different from title which can either label or describe its child
      depending on whether the child already has a label. For example, in:
    </text>
  </paragraph>
  <text>
    <button title="some more information">A
    button</button>
  </text>
  <paragraph>
    <text>
      the title acts as an accessible description. If you want the tooltip to
      act as an accessible description you can pass describeChild. Note that you
      shouldn't use describeChild if the tooltip provides the only visual
      label. Otherwise, the child would have no accessible name and the tooltip
      would violate
    </text>
    <link>success criterion 2.5.3 in WCAG 2.1</link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>Delete</button>
  <button description="Does not add if it already exists.">
    ADD
    <text>ADD</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <Tooltip title="Delete"> <IconButton> <DeleteIcon
    /> </IconButton> </Tooltip> <Tooltip describeChild
    title="Does not add if it already exists.">
    <Button>Add</Button> </Tooltip>
  </text>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem>
      <Tooltip />
      <link><Tooltip /></link>
    </listitem>
  </list>
  <separator></separator>
  <link>Table</link>
  <group>
    Was this page helpful?
    <text>Was this page helpful?</text>
    <togglebutton>Yes</togglebutton>
    <togglebutton>No</togglebutton>
  </group>
  <link>Typography</link>
</landmark>;

`;

exports[`firefox /components/transfer-list 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Transfer List
    <text>Transfer List</text>
  </heading>
  <paragraph>
    <text>
      A transfer list (or "shuttle") enables the user to move one or
      more list items between lists.
    </text>
  </paragraph>
  <heading level="2">
    Basic transfer list
    <text>Basic transfer list</text>
  </heading>
  <paragraph>
    <text>
      For completeness, this example includes buttons for "move all",
      but not every transfer list needs these.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <list>
    <listitem>
      List item 1<checkbox>List item 1</checkbox>
      <text>List item 1</text>
    </listitem>
    <listitem>
      List item 2<checkbox>List item 2</checkbox>
      <text>List item 2</text>
    </listitem>
    <listitem>
      List item 3<checkbox>List item 3</checkbox>
      <text>List item 3</text>
    </listitem>
    <listitem>
      List item 4<checkbox>List item 4</checkbox>
      <text>List item 4</text>
    </listitem>
    <listitem></listitem>
  </list>
  <button>
    move all right
    <text>‚â´</text>
  </button>
  <button disabled="true">
    move selected right
    <text>></text>
  </button>
  <button disabled="true">
    move selected left
    <text><</text>
  </button>
  <button>
    move all left
    <text>‚â™</text>
  </button>
  <list>
    <listitem>
      List item 5<checkbox>List item 5</checkbox>
      <text>List item 5</text>
    </listitem>
    <listitem>
      List item 6<checkbox>List item 6</checkbox>
      <text>List item 6</text>
    </listitem>
    <listitem>
      List item 7<checkbox>List item 7</checkbox>
      <text>List item 7</text>
    </listitem>
    <listitem>
      List item 8<checkbox>List item 8</checkbox>
      <text>List item 8</text>
    </listitem>
    <listitem></listitem>
  </list>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Enhanced transfer list
    <text>Enhanced transfer list</text>
  </heading>
  <paragraph>
    <text>
      This example exchanges the "move all" buttons for a "select
      all / select none" checkbox, and adds a counter.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox>all items selected</checkbox>
  <text>Choices0/4 selected</text>
  <separator></separator>
  <list>
    <listitem>
      List item 1<checkbox>List item 1</checkbox>
      <text>List item 1</text>
    </listitem>
    <listitem>
      List item 2<checkbox>List item 2</checkbox>
      <text>List item 2</text>
    </listitem>
    <listitem>
      List item 3<checkbox>List item 3</checkbox>
      <text>List item 3</text>
    </listitem>
    <listitem>
      List item 4<checkbox>List item 4</checkbox>
      <text>List item 4</text>
    </listitem>
    <listitem></listitem>
  </list>
  <button disabled="true">
    move selected right
    <text>></text>
  </button>
  <button disabled="true">
    move selected left
    <text><</text>
  </button>
  <checkbox>all items selected</checkbox>
  <text>Chosen0/4 selected</text>
  <separator></separator>
  <list>
    <listitem>
      List item 5<checkbox>List item 5</checkbox>
      <text>List item 5</text>
    </listitem>
    <listitem>
      List item 6<checkbox>List item 6</checkbox>
      <text>List item 6</text>
    </listitem>
    <listitem>
      List item 7<checkbox>List item 7</checkbox>
      <text>List item 7</text>
    </listitem>
    <listitem>
      List item 8<checkbox>List item 8</checkbox>
      <text>List item 8</text>
    </listitem>
    <listitem></listitem>
  </list>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem>
      <Checkbox />
      <link><Checkbox /></link>
    </listitem>
    <listitem>
      <List />
      <link><List /></link>
    </listitem>
    <listitem>
      <ListItem />
      <link><ListItem /></link>
    </listitem>
    <listitem>
      <Switch />
      <link><Switch /></link>
    </listitem>
  </list>
  <separator></separator>
  <link>Text field</link>
  <group>
    Was this page helpful?
    <text>Was this page helpful?</text>
    <togglebutton>Yes</togglebutton>
    <togglebutton>No</togglebutton>
  </group>
  <link>Toggle Button</link>
</landmark>;

`;

exports[`firefox /components/tree-view/ 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">
    Tree View
    <text>Tree View</text>
  </heading>
  <paragraph>
    <text>A tree view widget presents a hierarchical list.</text>
  </paragraph>
  <paragraph>
    <text>
      Tree views can be used to represent a file system navigator displaying
      folders and files, an item representing a folder can be expanded to reveal
      the contents of the folder, which may be files, folders, or both.
    </text>
  </paragraph>
  <list>
    <listitem>
      Feedback
      <link>Feedback</link>
    </listitem>
    <listitem>
      WAI-ARIA
      <link>WAI-ARIA</link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link>
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Figma
      <link>Figma</link>
    </listitem>
    <listitem>
      Adobe
      <link>Adobe</link>
    </listitem>
    <listitem>
      Sketch
      <link>Sketch</link>
    </listitem>
  </list>
  <heading level="2">
    Basic tree view
    <text>Basic tree view</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    file system navigator
    <treeitem level="1">
      Applications
      <text>Applications</text>
    </treeitem>
    <treeitem level="1">
      Documents
      <text>Documents</text>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <text>
    <TreeView aria-label="file system navigator"
    defaultCollapseIcon={<ExpandMoreIcon />}
    defaultExpandIcon={<ChevronRightIcon />} sx={{
    height: 240, flexGrow: 1, maxWidth: 400, overflowY: 'auto'
    }} > <TreeItem nodeId="1"
    label="Applications"> <TreeItem nodeId="2"
    label="Calendar" /> </TreeItem> <TreeItem
    nodeId="5" label="Documents"> <TreeItem
    nodeId="10" label="OSS" /> <TreeItem
    nodeId="6" label="Material-UI"> <TreeItem
    nodeId="8" label="index.js" /> </TreeItem>
    </TreeItem> </TreeView>
  </text>
  <heading level="2">
    Multi-selection
    <text>Multi-selection</text>
  </heading>
  <paragraph>
    <text>Tree views also support multi-selection.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree multiselectable="true">
    multi-select
    <treeitem level="1">
      Applications
      <text>Applications</text>
    </treeitem>
    <treeitem level="1">
      Documents
      <text>Documents</text>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Controlled tree view
    <text>Controlled tree view</text>
  </heading>
  <paragraph>
    <text>The tree view also offers a controlled API.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    EXPAND ALL
    <text>EXPAND ALL</text>
  </button>
  <button>
    SELECT ALL
    <text>SELECT ALL</text>
  </button>
  <tree multiselectable="true">
    controlled
    <treeitem level="1">
      Applications
      <text>Applications</text>
    </treeitem>
    <treeitem level="1">
      Documents
      <text>Documents</text>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Rich object
    <text>Rich object</text>
  </heading>
  <paragraph>
    <text>
      While the TreeView/TreeItem component API maximizes flexibility, an extra
      step is needed to handle a rich object.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Let's consider a data variable with the following shape, recursion
      can be used to handle it.
    </text>
  </paragraph>
  <text>
    const data = { id: 'root', name: 'Parent',
    children: [ { id: '1', name: 'Child - 1', },
    // ‚Ä¶ ], };
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    rich object
    <treeitem expanded="true" level="1">
      Parent
      <text>Parent</text>
      <group>
        <treeitem level="2">
          Child - 1<text>Child - 1</text>
        </treeitem>
        <treeitem level="2">
          Child - 3<text>Child - 3</text>
        </treeitem>
      </group>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    ContentComponent prop
    <text>ContentComponent prop</text>
  </heading>
  <paragraph>
    <text>
      You can use the ContentComponent prop and the useTreeItem hook to further
      customize the behavior of the TreeItem.
    </text>
  </paragraph>
  <paragraph>
    <text>Such as limiting expansion to clicking the icon:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    icon expansion
    <treeitem level="1">
      Applications
      <text>Applications</text>
    </treeitem>
    <treeitem level="1">
      Documents
      <text>Documents</text>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <paragraph>
    <text>Or increasing the width of the state indicator:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    icon expansion
    <treeitem level="1">
      Applications
      <text>Applications</text>
    </treeitem>
    <treeitem level="1">
      Documents
      <text>Documents</text>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Customized tree view
    <text>Customized tree view</text>
  </heading>
  <heading level="3">
    Custom icons, border and animation
    <text>Custom icons, border and animation</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    customized
    <treeitem expanded="true" level="1">
      Main
      <text>Main</text>
      <group>
        <treeitem level="2">
          Hello
          <text>Hello</text>
        </treeitem>
        <treeitem level="2">
          Subtree with children
          <text>Subtree with children</text>
        </treeitem>
        <treeitem level="2">
          World
          <text>World</text>
        </treeitem>
        <treeitem level="2">
          Something something
          <text>Something something</text>
        </treeitem>
      </group>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="3">
    Gmail clone
    <text>Gmail clone</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    gmail
    <treeitem level="1">
      All Mail
      <paragraph>
        <text>All Mail</text>
      </paragraph>
    </treeitem>
    <treeitem level="1">
      Trash
      <paragraph>
        <text>Trash</text>
      </paragraph>
    </treeitem>
    <treeitem expanded="true" level="1">
      Categories
      <paragraph>
        <text>Categories</text>
      </paragraph>
      <group>
        <treeitem level="2">
          Social 90
          <paragraph>
            <text>Social</text>
          </paragraph>
          <text>90</text>
        </treeitem>
        <treeitem level="2">
          Updates 2,294
          <paragraph>
            <text>Updates</text>
          </paragraph>
          <text>2,294</text>
        </treeitem>
        <treeitem level="2">
          Forums 3,566
          <paragraph>
            <text>Forums</text>
          </paragraph>
          <text>3,566</text>
        </treeitem>
        <treeitem level="2">
          Promotions 733
          <paragraph>
            <text>Promotions</text>
          </paragraph>
          <text>733</text>
        </treeitem>
      </group>
    </treeitem>
    <treeitem level="1">
      History
      <paragraph>
        <text>History</text>
      </paragraph>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <heading level="2">
    Disabled tree items
    <text>Disabled tree items</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Focus disabled items
    <checkbox>Focus disabled items</checkbox>
    <text>Focus disabled items</text>
  </label>
  <tree multiselectable="true">
    disabled items
    <treeitem level="1">
      One
      <text>One</text>
    </treeitem>
    <treeitem disabled="true" level="1">
      Five
      <text>Five</text>
    </treeitem>
    <treeitem level="1">
      Seven
      <text>Seven</text>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true">See more</buttonmenu>
  </toolbar>
  <paragraph>
    <text>
      The behavior of disabled tree items depends on the disabledItemsFocusable
      prop.
    </text>
  </paragraph>
  <paragraph>
    <text>If it is false:</text>
  </paragraph>
  <list>
    <listitem>
      Arrow keys will not focus disabled items and, the next non-disabled item
      will be focused.
      <text>
        Arrow keys will not focus disabled items and, the next non-disabled item
        will be focused.
      </text>
    </listitem>
    <listitem>
      Typing the first character of a disabled item's label will not focus
      the item.
      <text>
        Typing the first character of a disabled item's label will not
        focus the item.
      </text>
    </listitem>
    <listitem>
      Mouse or keyboard interaction will not expand/collapse disabled items.
      <text>
        Mouse or keyboard interaction will not expand/collapse disabled items.
      </text>
    </listitem>
    <listitem>
      Mouse or keyboard interaction will not select disabled items.
      <text>Mouse or keyboard interaction will not select disabled items.</text>
    </listitem>
    <listitem>
      Shift + arrow keys will skip disabled items and, the next non-disabled
      item will be selected.
      <text>
        Shift + arrow keys will skip disabled items and, the next non-disabled
        item will be selected.
      </text>
    </listitem>
    <listitem>
      Programmatic focus will not focus disabled items.
      <text>Programmatic focus will not focus disabled items.</text>
    </listitem>
  </list>
  <paragraph>
    <text>If it is true:</text>
  </paragraph>
  <list>
    <listitem>
      Arrow keys will focus disabled items.
      <text>Arrow keys will focus disabled items.</text>
    </listitem>
    <listitem>
      Typing the first character of a disabled item's label will focus the
      item.
      <text>
        Typing the first character of a disabled item's label will focus
        the item.
      </text>
    </listitem>
    <listitem>
      Mouse or keyboard interaction will not expand/collapse disabled items.
      <text>
        Mouse or keyboard interaction will not expand/collapse disabled items.
      </text>
    </listitem>
    <listitem>
      Mouse or keyboard interaction will not select disabled items.
      <text>Mouse or keyboard interaction will not select disabled items.</text>
    </listitem>
    <listitem>
      Shift + arrow keys will not skip disabled items but, the disabled item
      will not be selected.
      <text>
        Shift + arrow keys will not skip disabled items but, the disabled item
        will not be selected.
      </text>
    </listitem>
    <listitem>
      Programmatic focus will focus disabled items.
      <text>Programmatic focus will focus disabled items.</text>
    </listitem>
  </list>
  <heading level="2">
    Accessibility
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(WAI-ARIA:</text>
    <link>https://www.w3.org/TR/wai-aria-practices/#TreeView</link>
    <text>)</text>
  </paragraph>
  <paragraph>
    <text>The component follows the WAI-ARIA authoring practices.</text>
  </paragraph>
  <paragraph>
    <text>
      To have an accessible tree view you must use aria-labelledby or aria-label
      to reference or provide a label on the TreeView, otherwise screen readers
      will announce it as "tree", making it hard to understand the
      context of a specific tree item.
    </text>
  </paragraph>
  <heading level="2">
    API
    <text>API</text>
  </heading>
  <list>
    <listitem>
      <TreeItem />
      <link><TreeItem /></link>
    </listitem>
    <listitem>
      <TreeView />
      <link><TreeView /></link>
    </listitem>
  </list>
  <separator></separator>
  <link>Trap Focus</link>
  <group>
    Was this page helpful?
    <text>Was this page helpful?</text>
    <togglebutton>Yes</togglebutton>
    <togglebutton>No</togglebutton>
  </group>
  <link>Accordion</link>
</landmark>;

`;
