// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`chromium / 1`] = `
<WebArea>
  Material-UI: A popular React UI framework
  <link>Skip to content</link>
  <button>Open main navigation</button>
  <combobox autocomplete="list" haspopup="listbox">
    Search
  </combobox>
  <combobox description="Change language" haspopup="menu">
    Change language
  </combobox>
  <combobox description="Toggle notifications panel" haspopup="menu">
    Toggle notifications panel
  </combobox>
  <link description="Edit website colors">Edit website colors</link>
  <link description="GitHub repository">GitHub repository</link>
  <button description="Toggle light/dark theme">Toggle light/dark theme</button>
  <button description="Toggle right-to-left/left-to-right">
    Toggle right-to-left/left-to-right
  </button>
  <main>
    <heading level="1">MATERIAL-UI</heading>
    <text>
      React components for faster and easier web development. Build your own
      design system, or start with Material Design.
    </text>
    <link>GET STARTED</link>
    <link>Star</link>
    <link>Follow</link>
    <link>Get Professional Support</link>
    <text>random sponsor</text>
    <link>a random quick word</link>
    <heading level="2">Installation</heading>
    <text>
      Install Material-UI's source files via npm. We take care of injecting
      the CSS needed.$ npm install @material-ui/core
    </text>
    <link>or use a CDN.</link>
    <text>
      Load the default Roboto
      font.<linkrel="stylesheet"href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"/>
    </text>
    <link>READ INSTALLATION DOCS</link>
    <heading level="2">Usage</heading>
    <text>
      Material-UI components work without any additional setup, and don't
      pollute the global
      scope.importReactfrom'react';import{Button}from'@material-ui/core';functionApp(){return<Buttoncolor="primary">Hello
      World</Button>;}
    </text>
    <link>EXPLORE THE DOCS</link>
    <heading level="2">Premium themes</heading>
    <text>
      Take your project to the next level with premium themes from our store ‚Äì
      all built on Material-UI.
    </text>
    <link>Browse themes</link>
    <link>BROWSE THEMES</link>
    <heading level="2">Material-UI's sponsors</heading>
    <text>
      The continued development and maintenance of Material-UI is made possible
      by these generous sponsors:
    </text>
    <heading level="3">Diamond üíé</heading>
    <link>sencha</link>
    <text>2/3 slots available</text>
    <heading level="3">Gold üèÜ</heading>
    <link>tidelift</link>
    <link>bitsrc</link>
    <link>call-em-all</link>
    <heading level="3">There are more!</heading>
    <text>See the full list of</text>
    <link>our sponsors</link>
    <text>
      , and learn how you can contribute to the future of Material-UI.
    </text>
    <heading level="2">Praise for Material-UI</heading>
    <text>Here's what some of our users are saying.</text>
    <link>a random quote about Material-UI</link>
    <link>a random quote about Material-UI</link>
    <link>a random quote about Material-UI</link>
    <heading level="2">Who's using Material-UI?</heading>
    <text>Join these and other great organisations!</text>
    <img>NASA</img>
    <img>Walmart Labs</img>
    <img>Capgemini</img>
    <img>Uniqlo</img>
    <img>Bethesda</img>
    <img>J.P. Morgan</img>
    <img>Shutterstock</img>
    <img>Netflix</img>
    <img>Coursera</img>
    <img>Amazon</img>
    <img>Unity</img>
    <text>Are you using Material-UI?</text>
    <link>LET US KNOW!</link>
  </main>
  <link>Material-UI</link>
  <heading level="2">Community</heading>
  <link>GitHub</link>
  <link>Twitter</link>
  <link>StackOverflow</link>
  <link>Team</link>
  <heading level="2">Resources</heading>
  <link>Support</link>
  <link>Blog</link>
  <link>Material Icons</link>
  <heading level="2">Company</heading>
  <link>About</link>
  <link>Contact Us</link>
  <text>Currently</text>
  <link>v4.10.1. View versions page.</link>
  <text>. Released under the</text>
  <link>MIT License</link>
  <text>.Copyright ¬©2020Material-UI.</text>
</WebArea>;

`;

exports[`chromium /api/button/ 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Button API</heading>
  <text>
    The API documentation of the Button React component. Learn more about the
    props and the CSS customization points.
  </text>
  <heading level="2">Import</heading>
  <text>
    importButtonfrom'@material-ui/core/Button';//
    orimport{Button}from'@material-ui/core';You can learn
    more about the difference by
  </text>
  <link>reading this guide</link>
  <text>.</text>
  <heading level="2">Component name</heading>
  <text>TheMuiButtonname can be used for providing</text>
  <link>default props</link>
  <text>or</text>
  <link>style overrides</link>
  <text>at the theme level.</text>
  <heading level="2">Props</heading>
  <text>
    NameTypeDefaultDescriptionchildren¬†*nodeThe content of the
    button.classesobjectOverride or extend the styles applied to the component.
    See
  </text>
  <link>CSS API</link>
  <text>
    below for more
    details.color'default'|¬†'inherit'|¬†'primary'|¬†'secondary''default'The
    color of the component. It supports those theme colors that make sense for
    this component.componentelementType'button'The component used for
    the root node. Either a string to use a HTML element or a
    component.disabledboolfalseIftrue, the button will be
    disabled.disableElevationboolfalseIftrue, no elevation is
    used.disableFocusRippleboolfalseIftrue, the keyboard focus ripple will be
    disabled.disableRippleboolIftrue, the ripple effect will be disabled.‚ö†Ô∏è
    Without a ripple there is no styling for :focus-visible by default. Be sure
    to highlight the element by applying separate styles with
    thefocusVisibleClassName.endIconnodeElement placed after the
    children.fullWidthboolfalseIftrue, the button will take up the full width of
    its container.hrefstringThe URL to link to when the button is clicked. If
    defined, anaelement will be used as the root
    node.size'small'|¬†'medium'|¬†'large''medium'The
    size of the button.smallis equivalent to the dense button
    styling.startIconnodeElement placed before the
    children.variant'text'|¬†'outlined'|¬†'contained''text'The
    variant to use.Therefis forwarded to the root element.Any other props
    supplied will be provided to the root element (
  </text>
  <link>ButtonBase</link>
  <text>).</text>
  <heading level="2">CSS</heading>
  <text>
    Rule nameGlobal classDescriptionroot.MuiButton-rootStyles applied to the
    root element.label.MuiButton-labelStyles applied to the span element that
    wraps the children.text.MuiButton-textStyles applied to the root element
    ifvariant="text".textPrimary.MuiButton-textPrimaryStyles applied
    to the root element
    ifvariant="text"andcolor="primary".textSecondary.MuiButton-textSecondaryStyles
    applied to the root element
    ifvariant="text"andcolor="secondary".outlined.MuiButton-outlinedStyles
    applied to the root element
    ifvariant="outlined".outlinedPrimary.MuiButton-outlinedPrimaryStyles
    applied to the root element
    ifvariant="outlined"andcolor="primary".outlinedSecondary.MuiButton-outlinedSecondaryStyles
    applied to the root element
    ifvariant="outlined"andcolor="secondary".contained.MuiButton-containedStyles
    applied to the root element
    ifvariant="contained".containedPrimary.MuiButton-containedPrimaryStyles
    applied to the root element
    ifvariant="contained"andcolor="primary".containedSecondary.MuiButton-containedSecondaryStyles
    applied to the root element
    ifvariant="contained"andcolor="secondary".disableElevation.MuiButton-disableElevationStyles
    applied to the root element
    ifdisableElevation={true}.focusVisible.Mui-focusVisiblePseudo-class
    applied to the ButtonBase root element if the button is keyboard
    focused.disabled.Mui-disabledPseudo-class applied to the root element
    ifdisabled={true}.colorInherit.MuiButton-colorInheritStyles
    applied to the root element
    ifcolor="inherit".textSizeSmall.MuiButton-textSizeSmallStyles
    applied to the root element
    ifsize="small"andvariant="text".textSizeLarge.MuiButton-textSizeLargeStyles
    applied to the root element
    ifsize="large"andvariant="text".outlinedSizeSmall.MuiButton-outlinedSizeSmallStyles
    applied to the root element
    ifsize="small"andvariant="outlined".outlinedSizeLarge.MuiButton-outlinedSizeLargeStyles
    applied to the root element
    ifsize="large"andvariant="outlined".containedSizeSmall.MuiButton-containedSizeSmallStyles
    applied to the root element
    ifsize="small"andvariant="contained".containedSizeLarge.MuiButton-containedSizeLargeStyles
    applied to the root element
    ifsize="large"andvariant="contained".sizeSmall.MuiButton-sizeSmallStyles
    applied to the root element
    ifsize="small".sizeLarge.MuiButton-sizeLargeStyles applied to the
    root element ifsize="large".fullWidth.MuiButton-fullWidthStyles
    applied to the root element
    iffullWidth={true}.startIcon.MuiButton-startIconStyles applied to
    the startIcon element if supplied.endIcon.MuiButton-endIconStyles applied to
    the endIcon element if supplied.iconSizeSmall.MuiButton-iconSizeSmallStyles
    applied to the icon element if supplied
    andsize="small".iconSizeMedium.MuiButton-iconSizeMediumStyles
    applied to the icon element if supplied
    andsize="medium".iconSizeLarge.MuiButton-iconSizeLargeStyles
    applied to the icon element if supplied andsize="large".You can
    override the style of the component thanks to one of these customization
    points:‚Ä¢With a rule name of the
  </text>
  <link>classes object prop</link>
  <text>.‚Ä¢With a</text>
  <link>global class name</link>
  <text>.‚Ä¢With a theme and an</text>
  <link>overrides property</link>
  <text>.If that's not sufficient, you can check the</text>
  <link>implementation of the component</link>
  <text>for more detail.</text>
  <heading level="2">Inheritance</heading>
  <text>The props of the</text>
  <link>ButtonBase</link>
  <text>
    component are also available. You can take advantage of this behavior to
  </text>
  <link>target nested components</link>
  <text>.</text>
  <heading level="2">Demos</heading>
  <text>‚Ä¢</text>
  <link>Button Group</link>
  <text>‚Ä¢</text>
  <link>Buttons</link>
  <link>Breadcrumbs</link>
  <link>Button Base</link>
</main>;

`;

exports[`chromium /api/select/ 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Select API</heading>
  <text>
    The API documentation of the Select React component. Learn more about the
    props and the CSS customization points.
  </text>
  <heading level="2">Import</heading>
  <text>
    importSelectfrom'@material-ui/core/Select';//
    orimport{Select}from'@material-ui/core';You can learn
    more about the difference by
  </text>
  <link>reading this guide</link>
  <text>.</text>
  <heading level="2">Component name</heading>
  <text>TheMuiSelectname can be used for providing</text>
  <link>default props</link>
  <text>or</text>
  <link>style overrides</link>
  <text>at the theme level.</text>
  <heading level="2">Props</heading>
  <text>
    NameTypeDefaultDescriptionautoWidthboolfalseIftrue, the width of the popover
    will automatically be set according to the items inside the menu, otherwise
    it will be at least the width of the select input.childrennodeThe option
    elements to populate the select with. Can be someMenuItemwhennativeis false
    andoptionwhennativeis true.‚ö†Ô∏èTheMenuItemelementsmustbe direct descendants
    whennativeis false.classesobjectOverride or extend the styles applied to the
    component. See
  </text>
  <link>CSS API</link>
  <text>
    below for more details.defaultValueanyThe default element value. Use when
    the component is not controlled.displayEmptyboolfalseIftrue, a value is
    displayed even if no items are selected.In order to display a meaningful
    value, a function should be passed to therenderValueprop which returns the
    value to be displayed when no items are selected. You can only use it when
    thenativeprop isfalse(default).IconComponentelementTypeArrowDropDownIconThe
    icon that displays the arrow.idstringTheidof the wrapper element or
    theselectelement whennative.inputelementAnInputelement; does not have to be
    a material-ui specificInput.inputPropsobject
  </text>
  <link>Attributes</link>
  <text>
    applied to theinputelement. Whennativeistrue, the attributes are applied on
    theselectelement.labelnodeSee
  </text>
  <link>OutlinedInput#label</link>
  <text>
    labelIdstringThe ID of an element that acts as an additional label. The
    Select will be labelled by the additional label and the selected
    value.labelWidthnumber0See
  </text>
  <link>OutlinedInput#label</link>
  <text>MenuPropsobjectProps applied to the</text>
  <link>Menu</link>
  <text>
    element.multipleboolfalseIftrue,valuemust be an array and the menu will
    support multiple selections.nativeboolfalseIftrue, the component will be
    using a nativeselectelement.onChangefuncCallback function fired when a menu
    item is selected.Signature:function(event: object, child?: object) =>
    voidevent:The event source of the callback. You can pull out the new value
    by accessingevent.target.value(any).child:The react element that was
    selected whennativeisfalse(default).onClosefuncCallback fired when the
    component requests to be closed. Use in controlled mode (see
    open).Signature:function(event: object) => voidevent:The event source of
    the callback.onOpenfuncCallback fired when the component requests to be
    opened. Use in controlled mode (see open).Signature:function(event: object)
    => voidevent:The event source of the callback.openboolControlselectopen
    state. You can only use it when thenativeprop
    isfalse(default).renderValuefuncRender the selected value. You can only use
    it when thenativeprop isfalse(default).Signature:function(value: any) =>
    ReactNodevalue:Thevalueprovided to the
    component.SelectDisplayPropsobjectProps applied to the clickable div
    element.valueanyThe input value. Providing an empty string will select no
    options. This prop is required when thenativeprop isfalse(default). Set to
    an empty string''if you don't want any of the available
    options to be selected.If the value is an object it must have reference
    equality with the option in order to be selected. If the value is not an
    object, the string representation must match with the string representation
    of the option in order to be
    selected.variant'filled'|¬†'outlined'|¬†'standard''standard'The
    variant to use.Therefis forwarded to the root element.Any other props
    supplied will be provided to the root element (
  </text>
  <link>Input</link>
  <text>).</text>
  <heading level="2">CSS</heading>
  <text>
    Rule nameGlobal classDescriptionroot.MuiSelect-rootStyles applied to the
    select componentrootclass.select.MuiSelect-selectStyles applied to the
    select componentselectclass.filled.MuiSelect-filledStyles applied to the
    select component
    ifvariant="filled".outlined.MuiSelect-outlinedStyles applied to
    the select component
    ifvariant="outlined".selectMenu.MuiSelect-selectMenuStyles applied
    to the select componentselectMenuclass.disabled.Mui-disabledPseudo-class
    applied to the select componentdisabledclass.icon.MuiSelect-iconStyles
    applied to the icon component.iconOpen.MuiSelect-iconOpenStyles applied to
    the icon component if the popup is
    open.iconFilled.MuiSelect-iconFilledStyles applied to the icon component
    ifvariant="filled".iconOutlined.MuiSelect-iconOutlinedStyles
    applied to the icon component ifvariant="outlined".You can
    override the style of the component thanks to one of these customization
    points:‚Ä¢With a rule name of the
  </text>
  <link>classes object prop</link>
  <text>.‚Ä¢With a</text>
  <link>global class name</link>
  <text>.‚Ä¢With a theme and an</text>
  <link>overrides property</link>
  <text>.If that's not sufficient, you can check the</text>
  <link>implementation of the component</link>
  <text>for more detail.</text>
  <heading level="2">Inheritance</heading>
  <text>The props of the</text>
  <link>Input</link>
  <text>
    component are also available. You can take advantage of this behavior to
  </text>
  <link>target nested components</link>
  <text>.</text>
  <heading level="2">Demos</heading>
  <text>‚Ä¢</text>
  <link>Selects</link>
  <link>Scoped Css Baseline</link>
  <link>Skeleton</link>
</main>;

`;

exports[`chromium /components/breadcrumbs 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Breadcrumbs</heading>
  <text>
    Breadcrumbs allow users to make selections from a range of values.
  </text>
  <heading level="2">Simple breadcrumbs</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <link>Material-UI</link>
  <link>Core</link>
  <text>Breadcrumb</text>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Breadcrumbsaria-label="breadcrumb"><Linkcolor="inherit"href="/"onClick={handleClick}>Material-UI</Link><Linkcolor="inherit"href="/getting-started/installation/"onClick={handleClick}>Core</Link><Typographycolor="textPrimary">Breadcrumb</Typography></Breadcrumbs>
  </text>
  <heading level="2">Active last breadcrumb</heading>
  <text>Keep the last breadcrumb interactive.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <link>Material-UI</link>
  <link>Core</link>
  <link>Breadcrumb</link>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Breadcrumbsaria-label="breadcrumb"><Linkcolor="inherit"href="/"onClick={handleClick}>Material-UI</Link><Linkcolor="inherit"href="/getting-started/installation/"onClick={handleClick}>Core</Link><Linkcolor="textPrimary"href="/components/breadcrumbs/"onClick={handleClick}aria-current="page">Breadcrumb</Link></Breadcrumbs>
  </text>
  <heading level="2">Custom separator</heading>
  <text>
    In the following examples, we are using two string separators, and an SVG
    icon.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <link>Material-UI</link>
  <link>Core</link>
  <text>Breadcrumb</text>
  <link>Material-UI</link>
  <link>Core</link>
  <text>Breadcrumb</text>
  <link>Material-UI</link>
  <link>Core</link>
  <text>Breadcrumb</text>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Breadcrumbs with icons</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <link>Material-UI</link>
  <link>Core</link>
  <text>Breadcrumb</text>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Collapsed breadcrumbs</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <link>Home</link>
  <button>Show path</button>
  <text>Belts</text>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <BreadcrumbsmaxItems={2}aria-label="breadcrumb"><Linkcolor="inherit"href="#"onClick={handleClick}>Home</Link><Linkcolor="inherit"href="#"onClick={handleClick}>Catalog</Link><Linkcolor="inherit"href="#"onClick={handleClick}>Accessories</Link><Linkcolor="inherit"href="#"onClick={handleClick}>New
    Collection</Link><Typographycolor="textPrimary">Belts</Typography></Breadcrumbs>
  </text>
  <heading level="2">Customized breadcrumbs</heading>
  <text>
    Here is an example of customizing the component. You can learn more about
    this in the
  </text>
  <link>overrides documentation page</link>
  <text>.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>Home</button>
  <button>Catalog</button>
  <button>Accessories</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Breadcrumbsaria-label="breadcrumb"><StyledBreadcrumbcomponent="a"href="#"label="Home"icon={<HomeIconfontSize="small"/>}onClick={handleClick}/><StyledBreadcrumbcomponent="a"href="#"label="Catalog"onClick={handleClick}/><StyledBreadcrumblabel="Accessories"deleteIcon={<ExpandMoreIcon/>}onClick={handleClick}onDelete={handleClick}/></Breadcrumbs>
  </text>
  <heading level="2">Integration with react-router</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <link>Home</link>
  <text>Inbox</text>
  <button>Inbox</button>
  <button>Important</button>
  <button>Trash</button>
  <button>Spam</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Accessibility</heading>
  <text>(WAI-ARIA:</text>
  <link>https://www.w3.org/TR/wai-aria-practices/#breadcrumb</link>
  <text>
    )Be sure to add aaria-labeldescription on theBreadcrumbscomponent.The
    accessibility of this component relies on:‚Ä¢The set of links is structured
    using an ordered list (<ol>element).‚Ä¢To prevent screen reader
    announcement of the visual separators between links, they are hidden
    witharia-hidden.‚Ä¢A nav element labeled witharia-labelidentifies the
    structure as a breadcrumb trail and makes it a navigation landmark so that
    it is easy to locate.
  </text>
  <heading level="2">API</heading>
  <text>‚Ä¢</text>
  <link><Breadcrumbs /></link>
  <text>‚Ä¢</text>
  <link><Link /></link>
  <text>‚Ä¢</text>
  <link><Typography /></link>
  <link>Bottom Navigation</link>
  <link>Drawer</link>
</main>;

`;

exports[`chromium /components/button-group/ 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Button group</heading>
  <text>The ButtonGroup component can be used to group related buttons.</text>
  <heading level="2">Basic button group</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>ONE</button>
  <button>TWO</button>
  <button>THREE</button>
  <button>ONE</button>
  <button>TWO</button>
  <button>THREE</button>
  <button>ONE</button>
  <button>TWO</button>
  <button>THREE</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <ButtonGroupcolor="primary"aria-label="outlined primary
    button
    group"><Button>One</Button><Button>Two</Button><Button>Three</Button></ButtonGroup><ButtonGroupvariant="contained"color="primary"aria-label="contained
    primary button
    group"><Button>One</Button><Button>Two</Button><Button>Three</Button></ButtonGroup><ButtonGroupvariant="text"color="primary"aria-label="text
    primary button
    group"><Button>One</Button><Button>Two</Button><Button>Three</Button></ButtonGroup>
  </text>
  <heading level="2">Sizes and colors</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>ONE</button>
  <button>TWO</button>
  <button>THREE</button>
  <button>ONE</button>
  <button>TWO</button>
  <button>THREE</button>
  <button>ONE</button>
  <button>TWO</button>
  <button>THREE</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <ButtonGroupsize="small"aria-label="small outlined button
    group"><Button>One</Button><Button>Two</Button><Button>Three</Button></ButtonGroup><ButtonGroupcolor="secondary"aria-label="outlined
    secondary button
    group"><Button>One</Button><Button>Two</Button><Button>Three</Button></ButtonGroup><ButtonGroupsize="large"color="primary"aria-label="large
    outlined primary button
    group"><Button>One</Button><Button>Two</Button><Button>Three</Button></ButtonGroup>
  </text>
  <heading level="2">Vertical group</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>ONE</button>
  <button>TWO</button>
  <button>THREE</button>
  <button>ONE</button>
  <button>TWO</button>
  <button>THREE</button>
  <button>ONE</button>
  <button>TWO</button>
  <button>THREE</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Split button</heading>
  <text>
    ButtonGroupcan also be used to create a split button. The dropdown can
    change the button action (as in this example), or be used to immediately
    trigger a related action.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>SQUASH AND MERGE</button>
  <combobox haspopup="menu">select merge strategy</combobox>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Disabled elevation</heading>
  <text>You can remove the elevation with thedisableElevationprop.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>ONE</button>
  <button>TWO</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <ButtonGroupdisableElevationvariant="contained"color="primary"><Button>One</Button><Button>Two</Button></ButtonGroup>
  </text>
  <heading level="2">API</heading>
  <text>‚Ä¢</text>
  <link><Button /></link>
  <text>‚Ä¢</text>
  <link><ButtonGroup /></link>
  <link>Button</link>
  <link>Checkbox</link>
</main>;

`;

exports[`chromium /components/buttons/ 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Button</heading>
  <text>
    Buttons allow users to take actions, and make choices, with a single tap.
  </text>
  <link>Buttons</link>
  <text>
    communicate actions that users can take. They are typically placed
    throughout your UI, in places like:‚Ä¢Dialogs‚Ä¢Modal
    windows‚Ä¢Forms‚Ä¢Cards‚Ä¢Toolbars
  </text>
  <heading level="2">Contained Buttons</heading>
  <link>Contained buttons</link>
  <text>
    are high-emphasis, distinguished by their use of elevation and fill. They
    contain actions that are primary to your app.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>DEFAULT</button>
  <button>PRIMARY</button>
  <button>SECONDARY</button>
  <button disabled="true">DISABLED</button>
  <link>LINK</link>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Buttonvariant="contained">Default</Button><Buttonvariant="contained"color="primary">Primary</Button><Buttonvariant="contained"color="secondary">Secondary</Button><Buttonvariant="contained"disabled>Disabled</Button><Buttonvariant="contained"color="primary"href="#contained-buttons">Link</Button>You
    can remove the elevation with thedisableElevationprop.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>DISABLE ELEVATION</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Buttonvariant="contained"color="primary"disableElevation>Disable
    elevation</Button>
  </text>
  <heading level="2">Text Buttons</heading>
  <link>Text buttons</link>
  <text>
    are typically used for less-pronounced actions, including those located:‚Ä¢In
    dialogs‚Ä¢In cardsIn cards, text buttons help maintain an emphasis on card
    content.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>DEFAULT</button>
  <button>PRIMARY</button>
  <button>SECONDARY</button>
  <button disabled="true">DISABLED</button>
  <link>LINK</link>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Button>Default</Button><Buttoncolor="primary">Primary</Button><Buttoncolor="secondary">Secondary</Button><Buttondisabled>Disabled</Button><Buttonhref="#text-buttons"color="primary">Link</Button>
  </text>
  <heading level="2">Outlined Buttons</heading>
  <link>Outlined buttons</link>
  <text>
    are medium-emphasis buttons. They contain actions that are important, but
    aren‚Äôt the primary action in an app.Outlined buttons are also a lower
    emphasis alternative to contained buttons, or a higher emphasis alternative
    to text buttons.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>DEFAULT</button>
  <button>PRIMARY</button>
  <button>SECONDARY</button>
  <button disabled="true">DISABLED</button>
  <link>LINK</link>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Buttonvariant="outlined">Default</Button><Buttonvariant="outlined"color="primary">Primary</Button><Buttonvariant="outlined"color="secondary">Secondary</Button><Buttonvariant="outlined"disabled>Disabled</Button><Buttonvariant="outlined"color="primary"href="#outlined-buttons">Link</Button>
  </text>
  <heading level="2">Handling clicks</heading>
  <text>
    All components accept anonClickhandler that is applied to the root DOM
    element.<ButtononClick={()=>{alert('clicked')}}>Click
    me</Button>Note that the documentation
  </text>
  <link>avoids</link>
  <text>
    mentioning native props (there are a lot) in the API section of the
    components.
  </text>
  <heading level="2">Upload button</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>UPLOAD</button>
  <button>upload picture</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Sizes</heading>
  <text>Fancy larger or smaller buttons? Use thesizeproperty.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>SMALL</button>
  <button>MEDIUM</button>
  <button>LARGE</button>
  <button>SMALL</button>
  <button>MEDIUM</button>
  <button>LARGE</button>
  <button>SMALL</button>
  <button>MEDIUM</button>
  <button>LARGE</button>
  <button>delete</button>
  <button>delete</button>
  <button>delete</button>
  <button>delete</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Buttons with icons and label</heading>
  <text>
    Sometimes you might want to have icons for certain button to enhance the UX
    of the application as we recognize logos more easily than plain text. For
    example, if you have a delete button you can label it with a dustbin icon.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>DELETE</button>
  <button>SEND</button>
  <button>UPLOAD</button>
  <button disabled="true">TALK</button>
  <button>SAVE</button>
  <button>SAVE</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Icon Buttons</heading>
  <text>
    Icon buttons are commonly found in app bars and toolbars.Icons are also
    appropriate for toggle buttons that allow a single choice to be selected or
    deselected, such as adding or removing a star to an item.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>delete</button>
  <button disabled="true">delete</button>
  <button>add an alarm</button>
  <button>add to shopping cart</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <IconButtonaria-label="delete"><DeleteIcon/></IconButton><IconButtonaria-label="delete"disabledcolor="primary"><DeleteIcon/></IconButton><IconButtoncolor="secondary"aria-label="add
    an
    alarm"><AlarmIcon/></IconButton><IconButtoncolor="primary"aria-label="add
    to shopping cart"><AddShoppingCartIcon/></IconButton>
  </text>
  <heading level="2">Customized buttons</heading>
  <text>
    Here are some examples of customizing the component. You can learn more
    about this in the
  </text>
  <link>overrides documentation page</link>
  <text>.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>CUSTOM CSS</button>
  <button>THEME PROVIDER</button>
  <button>Bootstrap</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>üé® If you are looking for inspiration, you can check</text>
  <link>MUI Treasury's customization examples</link>
  <text>.</text>
  <heading level="2">Complex Buttons</heading>
  <text>
    The Text Buttons, Contained Buttons, Floating Action Buttons and Icon
    Buttons are built on top of the same component: theButtonBase. You can take
    advantage of this lower level component to build custom interactions.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>Breakfast</button>
  <button>Burgers</button>
  <button>Camera</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Third-party routing library</heading>
  <text>
    One common use case is to use the button to trigger navigation to a new
    page. TheButtonBasecomponent provides a property to handle this use
    case:component. However for certain focus polyfillsButtonBaserequires the
    DOM node of the provided component. This is achieved by attaching a ref to
    the component and expecting that the component forwards this ref to the
    underlying DOM node. Given that many of the interactive components rely
    onButtonBase, you should be able to take advantage of it everywhere.Here is
    an
  </text>
  <link>integration example with react-router</link>
  <text>.</text>
  <heading level="2">Limitations</heading>
  <heading level="3">Cursor not-allowed</heading>
  <text>
    The ButtonBase component setspointer-events: none;on disabled buttons, which
    prevents the appearance of a disabled cursor.If you wish to usenot-allowed,
    you have two options:1.CSS only. You can remove the pointer events style on
    the disabled state of
    the<button>element:.MuiButtonBase-root:disabled{cursor:not-allowed;pointer-events:auto;}However:‚ó¶You
    should addpointer-events: none;back when you need to display
  </text>
  <link>tooltips on disabled elements</link>
  <text>
    .‚ó¶The cursor won't change if you render something other than a button
    element, for instance, a link<a>element.2.DOM change. You can wrap the
    button:<spanstyle={{cursor:'not-allowed'}}><Buttoncomponent={Link}disabled>disabled</Button></span>This
    has the advantage of supporting any element, for instance, a
    link<a>element.
  </text>
  <heading level="2">API</heading>
  <text>‚Ä¢</text>
  <link><Button /></link>
  <text>‚Ä¢</text>
  <link><ButtonBase /></link>
  <text>‚Ä¢</text>
  <link><IconButton /></link>
  <link>Hidden</link>
  <link>Button Group</link>
</main>;

`;

exports[`chromium /components/checkboxes/ 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Checkbox</heading>
  <text>Checkboxes allow the user to select one or more items from a set.</text>
  <link>Checkboxes</link>
  <text>
    can be used to turn an option on or off.If you have multiple options
    appearing in a list, you can preserve space by using checkboxes instead of
    on/off switches. If you have a single option, avoid using a checkbox and use
    an on/off switch instead.
  </text>
  <heading level="2">Basic checkboxes</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">primary checkbox</checkbox>
  <checkbox checked="true">secondary checkbox</checkbox>
  <checkbox checked="false">uncontrolled-checkbox</checkbox>
  <generic disabled="true">disabled checkbox</generic>
  <generic disabled="true">disabled checked checkbox</generic>
  <checkbox checked="true">indeterminate checkbox</checkbox>
  <checkbox checked="true">checkbox with default color</checkbox>
  <checkbox checked="true">checkbox with small size</checkbox>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Checkbox with FormControlLabel</heading>
  <text>
    Checkboxcan be provided with a label thanks to theFormControlLabelcomponent.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">Secondary</checkbox>
  <checkbox checked="true">Primary</checkbox>
  <checkbox checked="false">Uncontrolled</checkbox>
  <generic disabled="true">Disabled</generic>
  <generic disabled="true">Disabled</generic>
  <checkbox checked="true">Indeterminate</checkbox>
  <checkbox checked="true">Custom color</checkbox>
  <checkbox checked="false">Custom icon</checkbox>
  <checkbox checked="false">Custom size</checkbox>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Checkboxes with FormGroup</heading>
  <text>
    FormGroupis a helpful wrapper used to group selection controls components
    that provides an easier API.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Assign responsibility</text>
  <checkbox checked="true">Gilad Gray</checkbox>
  <checkbox checked="false">Jason Killian</checkbox>
  <checkbox checked="false">Antoine Llorca</checkbox>
  <text>Be carefulPick two</text>
  <checkbox checked="true">Gilad Gray</checkbox>
  <checkbox checked="false">Jason Killian</checkbox>
  <checkbox checked="false">Antoine Llorca</checkbox>
  <text>You can display an error</text>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Label placement</heading>
  <text>You can change the placement of the label:</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Label Placement</text>
  <checkbox checked="false">Top</checkbox>
  <checkbox checked="false">Start</checkbox>
  <checkbox checked="false">Bottom</checkbox>
  <checkbox checked="false">End</checkbox>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Customized checkbox</heading>
  <text>
    Here is an example of customizing the component. You can learn more about
    this in the
  </text>
  <link>overrides documentation page</link>
  <text>.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="false">decorative checkbox</checkbox>
  <checkbox checked="true">decorative checkbox</checkbox>
  <generic disabled="true">decorative checkbox</generic>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>üé® If you are looking for inspiration, you can check</text>
  <link>MUI Treasury's customization examples</link>
  <text>.</text>
  <heading level="2">When to use</heading>
  <text>‚Ä¢</text>
  <link>Checkboxes vs. Radio Buttons</link>
  <text>‚Ä¢</text>
  <link>Checkboxes vs. Switches</link>
  <heading level="2">Accessibility</heading>
  <text>(WAI-ARIA:</text>
  <link>https://www.w3.org/TR/wai-aria-practices/#checkbox</link>
  <text>
    )‚Ä¢All form controls should have labels, and this includes radio buttons,
    checkboxes, and switches. In most cases, this is done by using
    the<label>element (
  </text>
  <link>FormControlLabel</link>
  <text>
    ).‚Ä¢When a label can't be used, it's necessary to add an attribute
    directly to the input component. In this case, you can apply the additional
    attribute (e.g.aria-label,aria-labelledby,title) via
    theinputPropsproperty.<Checkboxvalue="checkedA"inputProps={{'aria-label':'Checkbox
    A'}}/>
  </text>
  <heading level="2">API</heading>
  <text>‚Ä¢</text>
  <link><Checkbox /></link>
  <text>‚Ä¢</text>
  <link><FormControl /></link>
  <text>‚Ä¢</text>
  <link><FormControlLabel /></link>
  <text>‚Ä¢</text>
  <link><FormGroup /></link>
  <text>‚Ä¢</text>
  <link><FormLabel /></link>
  <link>Button Group</link>
  <link>Floating Action Button</link>
</main>;

`;

exports[`chromium /components/dialogs/ 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Dialog</heading>
  <text>
    Dialogs inform users about a task and can contain critical information,
    require decisions, or involve multiple tasks.A
  </text>
  <link>Dialog</link>
  <text>is a type of</text>
  <link>modal</link>
  <text>
    window that appears in front of app content to provide critical information
    or ask for a decision. Dialogs disable all app functionality when they
    appear, and remain on screen until confirmed, dismissed, or a required
    action has been taken.Dialogs are purposefully interruptive, so they should
    be used sparingly.
  </text>
  <heading level="2">Simple Dialogs</heading>
  <text>
    Simple dialogs can provide additional details or actions about a list item.
    For example, they can display avatars, icons, clarifying subtext, or
    orthogonal actions (such as adding an account).Touch mechanics:‚Ä¢Choosing an
    option immediately commits the option and closes the menu‚Ä¢Touching outside
    of the dialog, or pressing Back, cancels the action and closes the dialog
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <heading level="6">Selected: user02@gmail.com</heading>
  <button>OPEN SIMPLE DIALOG</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Typographyvariant="subtitle1">Selected:{selectedValue}</Typography><br/><Buttonvariant="outlined"color="primary"onClick={handleClickOpen}>Open
    simple
    dialog</Button><SimpleDialogselectedValue={selectedValue}open={open}onClose={handleClose}/>
  </text>
  <heading level="2">Alerts</heading>
  <text>
    Alerts are urgent interruptions, requiring acknowledgement, that inform the
    user about a situation.Most alerts don't need titles. They summarize a
    decision in a sentence or two by either:‚Ä¢Asking a question (e.g.
    "Delete this conversation?")‚Ä¢Making a statement related to the
    action buttonsUse title bar alerts only for high-risk situations, such as
    the potential loss of connectivity. Users should be able to understand the
    choices based on the title and button text alone.If a title is required:‚Ä¢Use
    a clear question or statement with an explanation in the content area, such
    as "Erase USB storage?".‚Ä¢Avoid apologies, ambiguity, or questions,
    such as ‚ÄúWarning!‚Äù or ‚ÄúAre you sure?‚Äù
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>OPEN ALERT DIALOG</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Transitions</heading>
  <text>You can also swap out the transition, the next example usesSlide.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>SLIDE IN ALERT DIALOG</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Form dialogs</heading>
  <text>
    Form dialogs allow users to fill out form fields within a dialog. For
    example, if your site prompts for potential subscribers to fill in their
    email address, they can fill out the email field and touch
    'Submit'.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>OPEN FORM DIALOG</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Customized dialogs</heading>
  <text>
    Here is an example of customizing the component. You can learn more about
    this in the
  </text>
  <link>overrides documentation page</link>
  <text>.The dialog has a close button added to aide usability.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>OPEN DIALOG</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Full-screen dialogs</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>OPEN FULL-SCREEN DIALOG</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Optional sizes</heading>
  <text>
    You can set a dialog maximum width by using themaxWidthenumerable in
    combination with thefullWidthboolean. When thefullWidthproperty is true, the
    dialog will adapt based on themaxWidthvalue.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>OPEN MAX-WIDTH DIALOG</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Responsive full-screen</heading>
  <text>You may make a dialog responsively full screen using</text>
  <link>useMediaQuery</link>
  <text>
    .importuseMediaQueryfrom'@material-ui/core/useMediaQuery';functionMyComponent(){consttheme=useTheme();constfullScreen=useMediaQuery(theme.breakpoints.down('sm'));return<DialogfullScreen={fullScreen}/>}
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>OPEN RESPONSIVE DIALOG</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Confirmation dialogs</heading>
  <text>
    Confirmation dialogs require users to explicitly confirm their choice before
    an option is committed. For example, users can listen to multiple ringtones
    but only make a final selection upon touching ‚ÄúOK‚Äù.Touching ‚ÄúCancel‚Äù in a
    confirmation dialog, or pressing Back, cancels the action, discards any
    changes, and closes the dialog.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <listitem disabled="true" level="1">
    Interruptions
  </listitem>
  <listitem level="1" haspopup="menu">
    phone ringtone
  </listitem>
  <listitem disabled="true" level="1">
    Default notification ringtone Tethys
  </listitem>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Draggable dialog</heading>
  <text>You can create a draggable dialog by using</text>
  <link>react-draggable</link>
  <text>
    . To do so, you can pass the the importedDraggablecomponent as
    thePaperComponentof theDialogcomponent. This will make the entire dialog
    draggable.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>OPEN FORM DIALOG</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Scrolling long content</heading>
  <text>
    When dialogs become too long for the user‚Äôs viewport or device, they
    scroll.‚Ä¢scroll=paperthe content of the dialog scrolls within the paper
    element.‚Ä¢scroll=bodythe content of the dialog scrolls within the body
    element.Try the demo below to see what we mean:
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>SCROLL=PAPER</button>
  <button>SCROLL=BODY</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Limitations</heading>
  <text>Follow the</text>
  <link>Modal limitations section</link>
  <text>.</text>
  <heading level="2">Accessibility</heading>
  <text>Follow the</text>
  <link>Modal accessibility section</link>
  <text>.</text>
  <heading level="2">API</heading>
  <text>‚Ä¢</text>
  <link><Dialog /></link>
  <text>‚Ä¢</text>
  <link><DialogActions /></link>
  <text>‚Ä¢</text>
  <link><DialogContent /></link>
  <text>‚Ä¢</text>
  <link><DialogContentText /></link>
  <text>‚Ä¢</text>
  <link><DialogTitle /></link>
  <text>‚Ä¢</text>
  <link><Slide /></link>
  <link>Progress</link>
  <link>Snackbar</link>
</main>;

`;

exports[`chromium /components/pagination/ 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Pagination</heading>
  <text>
    The Pagination component enables the user to select a specific page from a
    range of pages.
  </text>
  <heading level="2">Basic pagination</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button disabled="true">Go to previous page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to next page</button>
  <button disabled="true">Go to previous page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to next page</button>
  <button disabled="true">Go to previous page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to next page</button>
  <button disabled="true">Go to previous page</button>
  <button disabled="true">page 1</button>
  <button disabled="true">Go to page 2</button>
  <button disabled="true">Go to page 3</button>
  <button disabled="true">Go to page 4</button>
  <button disabled="true">Go to page 5</button>
  <text>‚Ä¶</text>
  <button disabled="true">Go to page 10</button>
  <button disabled="true">Go to next page</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Paginationcount={10}/><Paginationcount={10}color="primary"/><Paginationcount={10}color="secondary"/><Paginationcount={10}disabled/>
  </text>
  <heading level="2">Outlined pagination</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button disabled="true">Go to previous page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to next page</button>
  <button disabled="true">Go to previous page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to next page</button>
  <button disabled="true">Go to previous page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to next page</button>
  <button disabled="true">Go to previous page</button>
  <button disabled="true">page 1</button>
  <button disabled="true">Go to page 2</button>
  <button disabled="true">Go to page 3</button>
  <button disabled="true">Go to page 4</button>
  <button disabled="true">Go to page 5</button>
  <text>‚Ä¶</text>
  <button disabled="true">Go to page 10</button>
  <button disabled="true">Go to next page</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Paginationcount={10}variant="outlined"/><Paginationcount={10}variant="outlined"color="primary"/><Paginationcount={10}variant="outlined"color="secondary"/><Paginationcount={10}variant="outlined"disabled/>
  </text>
  <heading level="2">Rounded pagination</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button disabled="true">Go to previous page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to next page</button>
  <button disabled="true">Go to previous page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to next page</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Paginationcount={10}shape="rounded"/><Paginationcount={10}variant="outlined"shape="rounded"/>
  </text>
  <heading level="2">Pagination size</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button disabled="true">Go to previous page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to next page</button>
  <button disabled="true">Go to previous page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to next page</button>
  <button disabled="true">Go to previous page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to next page</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Paginationcount={10}size="small"/><Paginationcount={10}/><Paginationcount={10}size="large"/>
  </text>
  <heading level="2">Buttons</heading>
  <text>
    You can optionally enable first-page and last-page buttons, or disable the
    previous-page and next-page buttons.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button disabled="true">Go to first page</button>
  <button disabled="true">Go to previous page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to next page</button>
  <button>Go to last page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Paginationcount={10}showFirstButtonshowLastButton/><Paginationcount={10}hidePrevButtonhideNextButton/>
  </text>
  <heading level="2">Pagination ranges</heading>
  <text>
    You can specify how many digits to display either side of current page with
    thesiblingRangeprop, and adjacent to the start and end page number with
    theboundaryRangeprop.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>Go to previous page</button>
  <button>Go to page 1</button>
  <text>‚Ä¶</text>
  <button>page 6</button>
  <text>‚Ä¶</text>
  <button>Go to page 11</button>
  <button>Go to next page</button>
  <button>Go to previous page</button>
  <button>Go to page 1</button>
  <text>‚Ä¶</text>
  <button>Go to page 5</button>
  <button>page 6</button>
  <button>Go to page 7</button>
  <text>‚Ä¶</text>
  <button>Go to page 11</button>
  <button>Go to next page</button>
  <button>Go to previous page</button>
  <button>Go to page 1</button>
  <button>Go to page 2</button>
  <text>‚Ä¶</text>
  <button>page 6</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to page 11</button>
  <button>Go to next page</button>
  <button>Go to previous page</button>
  <button>Go to page 1</button>
  <button>Go to page 2</button>
  <text>‚Ä¶</text>
  <button>Go to page 5</button>
  <button>page 6</button>
  <button>Go to page 7</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to page 11</button>
  <button>Go to next page</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Paginationcount={11}defaultPage={6}siblingCount={0}/><Paginationcount={11}defaultPage={6}/>{/*
    Default ranges
    */}<Paginationcount={11}defaultPage={6}siblingCount={0}boundaryCount={2}/><Paginationcount={11}defaultPage={6}boundaryCount={2}/>
  </text>
  <heading level="2">Controlled pagination</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Page:1</text>
  <button disabled="true">Go to previous page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to next page</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Typography>Page:{page}</Typography><Paginationcount={10}page={page}onChange={handleChange}/>
  </text>
  <heading level="2">Router integration</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button disabled="true">Go to previous page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to next page</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">usePagination</heading>
  <text>
    For advanced customization use cases, we expose ausePagination()hook. It
    accepts almost the same options as the Pagination component minus all the
    props related to the rendering of JSX. The Pagination component uses this
    hook
    internally.import{usePagination}from'@material-ui/lab/Pagination';
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button disabled="true">previous</button>
  <button>1</button>
  <button>2</button>
  <button>3</button>
  <button>4</button>
  <button>5</button>
  <text>‚Ä¶</text>
  <button>10</button>
  <button>next</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Table pagination</heading>
  <text>
    ThePaginationcomponent was designed to paginate a list of arbitrary items
    when infinite loading isn't used. It's preferred in contexts where
    SEO is important, for instance, a blog.For the pagination of a large set of
    tabular data, you should use theTablePaginationcomponent.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Rows per page:</text>
  <combobox haspopup="listbox">Rows per page: 10</combobox>
  <text>21-30 of 100</text>
  <button description="Previous page">Previous page</button>
  <button description="Next page">Next page</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <TablePaginationcomponent="div"count={100}page={page}onChangePage={handleChangePage}rowsPerPage={rowsPerPage}onChangeRowsPerPage={handleChangeRowsPerPage}/>You
    can learn more about this use case in the
  </text>
  <link>table section</link>
  <text>of the documentation.</text>
  <heading level="2">Accessibility</heading>
  <heading level="3">ARIA</heading>
  <text>
    The root node has a role of "navigation" and aria-label
    "pagination navigation" by default. The page items have an
    aria-label that identifies the purpose of the item ("go to first
    page", "go to previous page", "go to page 1" etc.).
    You can override these using thegetItemAriaLabelprop.
  </text>
  <heading level="3">Keyboard</heading>
  <text>
    The pagination items are in tab order, with a tabindex of "0".
  </text>
  <heading level="2">API</heading>
  <text>‚Ä¢</text>
  <link><Pagination /></link>
  <text>‚Ä¢</text>
  <link><PaginationItem /></link>
  <link>Autocomplete</link>
  <link>Rating</link>
</main>;

`;

exports[`chromium /components/pickers 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Date / Time pickers</heading>
  <text>
    Date pickers and Time pickers provide a simple way to select a single value
    from a pre-determined set.‚Ä¢On mobile, pickers are best suited for display in
    confirmation dialog.‚Ä¢For inline display, such as on a form, consider using
    compact controls such as segmented dropdown buttons.
  </text>
  <heading level="2">@material-ui/pickers</heading>
  <img>stars</img>
  <img>npm downloads</img>
  <link>@material-ui/pickers</link>
  <text>provides date picker and time picker controls.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Date picker inline¬†</text>
  <textbox value="08/18/2014">Date picker inline</textbox>
  <button>change date</button>
  <text>Date picker dialog¬†</text>
  <textbox value="08/18/2014">Date picker dialog</textbox>
  <button>change date</button>
  <text>Time picker¬†</text>
  <textbox value="09:11 PM">Time picker</textbox>
  <button>change time</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Native pickers</heading>
  <text>‚ö†Ô∏è Native input controls support by browsers</text>
  <link>isn't perfect</link>
  <text>. Have a look at</text>
  <link>@material-ui/pickers</link>
  <text>for a richer solution.</text>
  <heading level="3">Datepickers</heading>
  <text>A native datepicker example withtype="date".</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Birthday¬†</text>
  <Date value="2017-05-24">
    Birthday
    <spinbutton value="5" valuetext="05" valuemax="12" valuemin="1">
      Month
    </spinbutton>
    <text>/</text>
    <spinbutton value="24" valuetext="24" valuemax="31" valuemin="1">
      Day
    </spinbutton>
    <text>/</text>
    <spinbutton value="2017" valuetext="2017" valuemax="275760" valuemin="1">
      Year
    </spinbutton>
  </Date>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <formclassName={classes.container}noValidate><TextFieldid="date"label="Birthday"type="date"defaultValue="2017-05-24"className={classes.textField}InputLabelProps={{shrink:true,}}/></form>
  </text>
  <heading level="3">Date & Time pickers</heading>
  <text>
    A native date & time picker example withtype="datetime-local".
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Next appointment¬†</text>
  <DateTime value="2017-05-24T10:30">
    Next appointment
    <spinbutton value="5" valuetext="05" valuemax="12" valuemin="1">
      Month
    </spinbutton>
    <text>/</text>
    <spinbutton value="24" valuetext="24" valuemax="31" valuemin="1">
      Day
    </spinbutton>
    <text>/</text>
    <spinbutton value="2017" valuetext="2017" valuemax="275760" valuemin="1">
      Year
    </spinbutton>
    <text>,</text>
    <spinbutton value="10" valuetext="10" valuemax="12" valuemin="1">
      Hours
    </spinbutton>
    <text>:</text>
    <spinbutton value="30" valuetext="30" valuemax="59" valuemin="0">
      Minutes
    </spinbutton>
    <spinbutton value="1" valuetext="AM" valuemax="2" valuemin="1">
      AM/PM
    </spinbutton>
  </DateTime>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <formclassName={classes.container}noValidate><TextFieldid="datetime-local"label="Next
    appointment"type="datetime-local"defaultValue="2017-05-24T10:30"className={classes.textField}InputLabelProps={{shrink:true,}}/></form>
  </text>
  <heading level="3">Time pickers</heading>
  <text>A native time picker example withtype="time".</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Alarm clock¬†</text>
  <InputTime value="07:30">
    Alarm clock
    <spinbutton value="7" valuetext="07" valuemax="12" valuemin="1">
      Hours
    </spinbutton>
    <text>:</text>
    <spinbutton value="30" valuetext="30" valuemax="59" valuemin="0">
      Minutes
    </spinbutton>
    <spinbutton value="1" valuetext="AM" valuemax="2" valuemin="1">
      AM/PM
    </spinbutton>
  </InputTime>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <formclassName={classes.container}noValidate><TextFieldid="time"label="Alarm
    clock"type="time"defaultValue="07:30"className={classes.textField}InputLabelProps={{shrink:true,}}inputProps={{step:300,//
    5 min}}/></form>
  </text>
  <heading level="2">API</heading>
  <text>‚Ä¢</text>
  <link><TextField /></link>
  <link>Floating Action Button</link>
  <link>Radio</link>
</main>;

`;

exports[`chromium /components/radio-buttons 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Radio</heading>
  <text>Radio buttons allow the user to select one option from a set.Use</text>
  <link>radio buttons</link>
  <text>
    when the user needs to see all available options. If available options can
    be collapsed, consider using a dropdown menu because it uses less
    space.Radio buttons should have the most commonly used option selected by
    default.
  </text>
  <heading level="2">RadioGroup</heading>
  <text>
    RadioGroupis a helpful wrapper used to groupRadiocomponents that provides an
    easier API, and proper keyboard accessibility to the group.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Gender</text>
  <radio checked="true">Female</radio>
  <radio checked="false">Male</radio>
  <radio checked="false">Other</radio>
  <generic disabled="true">(Disabled option)</generic>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <FormControlcomponent="fieldset"><FormLabelcomponent="legend">Gender</FormLabel><RadioGrouparia-label="gender"name="gender1"value={value}onChange={handleChange}><FormControlLabelvalue="female"control={<Radio/>}label="Female"/><FormControlLabelvalue="male"control={<Radio/>}label="Male"/><FormControlLabelvalue="other"control={<Radio/>}label="Other"/><FormControlLabelvalue="disabled"disabledcontrol={<Radio/>}label="(Disabled
    option)"/></RadioGroup></FormControl>To lay out the
    buttons horizontally, set therowprop:<RadioGroup row />.
  </text>
  <heading level="2">Standalone radio buttons</heading>
  <text>Radiocan also be used standalone, without the RadioGroup wrapper.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <radio checked="true">A</radio>
  <radio checked="false">B</radio>
  <radio checked="false">C</radio>
  <radio checked="false">D</radio>
  <radio checked="false">E</radio>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Label placement</heading>
  <text>
    You can change the placement of the label with
    theFormControlLabelcomponent'slabelPlacementprop:
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>labelPlacement</text>
  <radio checked="true">Top</radio>
  <radio checked="false">Start</radio>
  <radio checked="false">Bottom</radio>
  <radio checked="false">End</radio>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Show error</heading>
  <text>
    In general, radio buttons should have a value selected by default. If this
    is not the case, you can display an error if no value is selected when the
    form is submitted:
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Pop quiz: Material-UI is...</text>
  <radio checked="false">The best!</radio>
  <radio checked="false">The worst.</radio>
  <text>Choose wisely</text>
  <button>CHECK ANSWER</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <formonSubmit={handleSubmit}><FormControlcomponent="fieldset"error={error}className={classes.formControl}><FormLabelcomponent="legend">Pop
    quiz:Material-UIis...</FormLabel><RadioGrouparia-label="quiz"name="quiz"value={value}onChange={handleRadioChange}><FormControlLabelvalue="best"control={<Radio/>}label="The
    best!"/><FormControlLabelvalue="worst"control={<Radio/>}label="The
    worst."/></RadioGroup><FormHelperText>{helperText}</FormHelperText><Buttontype="submit"variant="outlined"color="primary"className={classes.button}>Check
    Answer</Button></FormControl></form>
  </text>
  <heading level="2">Customized radios</heading>
  <text>
    Here is an example of customizing the component. You can learn more about
    this in the
  </text>
  <link>overrides documentation page</link>
  <text>.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Gender</text>
  <radio checked="true">Female</radio>
  <radio checked="false">Male</radio>
  <radio checked="false">Other</radio>
  <generic disabled="true">(Disabled option)</generic>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <FormControlcomponent="fieldset"><FormLabelcomponent="legend">Gender</FormLabel><RadioGroupdefaultValue="female"aria-label="gender"name="customized-radios"><FormControlLabelvalue="female"control={<StyledRadio/>}label="Female"/><FormControlLabelvalue="male"control={<StyledRadio/>}label="Male"/><FormControlLabelvalue="other"control={<StyledRadio/>}label="Other"/><FormControlLabelvalue="disabled"disabledcontrol={<StyledRadio/>}label="(Disabled
    option)"/></RadioGroup></FormControl>
  </text>
  <heading level="2">When to use</heading>
  <text>‚Ä¢</text>
  <link>Checkboxes vs. Radio Buttons</link>
  <heading level="2">Accessibility</heading>
  <text>(WAI-ARIA:</text>
  <link>https://www.w3.org/TR/wai-aria-practices/#radiobutton</link>
  <text>
    )‚Ä¢All form controls should have labels, and this includes radio buttons,
    checkboxes, and switches. In most cases, this is done by using
    the<label>element (
  </text>
  <link>FormControlLabel</link>
  <text>
    ).‚Ä¢When a label can't be used, it's necessary to add an attribute
    directly to the input component. In this case, you can apply the additional
    attribute (e.g.aria-label,aria-labelledby,title) via
    theinputPropsproperty.<RadioButtonvalue="radioA"inputProps={{'aria-label':'Radio
    A'}}/>
  </text>
  <heading level="2">API</heading>
  <text>‚Ä¢</text>
  <link><FormControl /></link>
  <text>‚Ä¢</text>
  <link><FormControlLabel /></link>
  <text>‚Ä¢</text>
  <link><FormLabel /></link>
  <text>‚Ä¢</text>
  <link><Radio /></link>
  <text>‚Ä¢</text>
  <link><RadioGroup /></link>
  <link>Date / Time</link>
  <link>Select</link>
</main>;

`;

exports[`chromium /components/rating/ 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Rating</heading>
  <text>
    Ratings provide insight regarding others‚Äô opinions and experiences with a
    product. Users can also rate products they‚Äôve purchased.
  </text>
  <heading level="2">Simple ratings</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Controlled</text>
  <radio checked="false">1 Star</radio>
  <radio checked="true">2 Stars</radio>
  <radio checked="false">3 Stars</radio>
  <radio checked="false">4 Stars</radio>
  <radio checked="false">5 Stars</radio>
  <text>Read only</text>
  <img>2 Stars</img>
  <text>Disabled</text>
  <radio disabled="true" checked="false">
    1 Star
  </radio>
  <radio disabled="true" checked="true">
    2 Stars
  </radio>
  <radio disabled="true" checked="false">
    3 Stars
  </radio>
  <radio disabled="true" checked="false">
    4 Stars
  </radio>
  <radio disabled="true" checked="false">
    5 Stars
  </radio>
  <text>Pristine</text>
  <radio checked="false">1 Star</radio>
  <radio checked="false">2 Stars</radio>
  <radio checked="false">3 Stars</radio>
  <radio checked="false">4 Stars</radio>
  <radio checked="false">5 Stars</radio>
  <radio checked="true">Empty</radio>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Customized ratings</heading>
  <text>
    Here are some examples of customizing the component. You can learn more
    about this in the
  </text>
  <link>overrides documentation page</link>
  <text>.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Custom empty icon</text>
  <radio checked="false">0.5 Stars</radio>
  <radio checked="false">1 Star</radio>
  <radio checked="false">1.5 Stars</radio>
  <radio checked="true">2 Stars</radio>
  <radio checked="false">2.5 Stars</radio>
  <radio checked="false">3 Stars</radio>
  <radio checked="false">3.5 Stars</radio>
  <radio checked="false">4 Stars</radio>
  <radio checked="false">4.5 Stars</radio>
  <radio checked="false">5 Stars</radio>
  <text>Custom icon and color</text>
  <radio checked="false">0.5 Hearts</radio>
  <radio checked="false">1 Heart</radio>
  <radio checked="false">1.5 Hearts</radio>
  <radio checked="true">2 Hearts</radio>
  <radio checked="false">2.5 Hearts</radio>
  <radio checked="false">3 Hearts</radio>
  <radio checked="false">3.5 Hearts</radio>
  <radio checked="false">4 Hearts</radio>
  <radio checked="false">4.5 Hearts</radio>
  <radio checked="false">5 Hearts</radio>
  <text>10 stars</text>
  <radio checked="false">1 Star</radio>
  <radio checked="true">2 Stars</radio>
  <radio checked="false">3 Stars</radio>
  <radio checked="false">4 Stars</radio>
  <radio checked="false">5 Stars</radio>
  <radio checked="false">6 Stars</radio>
  <radio checked="false">7 Stars</radio>
  <radio checked="false">8 Stars</radio>
  <radio checked="false">9 Stars</radio>
  <radio checked="false">10 Stars</radio>
  <text>Custom icon set</text>
  <radio checked="false">Very Dissatisfied</radio>
  <radio checked="true">Dissatisfied</radio>
  <radio checked="false">Neutral</radio>
  <radio checked="false">Satisfied</radio>
  <radio checked="false">Very Satisfied</radio>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Hover feedback</heading>
  <text>
    You can display a label on hover to help users pick the correct rating
    value. The demo uses theonChangeActiveprop.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <radio checked="false">0.5 Stars</radio>
  <radio checked="false">1 Star</radio>
  <radio checked="false">1.5 Stars</radio>
  <radio checked="true">2 Stars</radio>
  <radio checked="false">2.5 Stars</radio>
  <radio checked="false">3 Stars</radio>
  <radio checked="false">3.5 Stars</radio>
  <radio checked="false">4 Stars</radio>
  <radio checked="false">4.5 Stars</radio>
  <radio checked="false">5 Stars</radio>
  <text>Poor+</text>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Ratingname="hover-feedback"value={value}precision={0.5}onChange={(event,newValue)=>{setValue(newValue);}}onChangeActive={(event,newHover)=>{setHover(newHover);}}/>{value!==null&&<Boxml={2}>{labels[hover!==-1?hover:value]}</Box>}
  </text>
  <heading level="2">Half ratings</heading>
  <text>
    The rating can display any float number with thevalueprop. Use
    theprecisionprop to define the minimum increment value change allowed.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <radio checked="false">0.5 Stars</radio>
  <radio checked="false">1 Star</radio>
  <radio checked="false">1.5 Stars</radio>
  <radio checked="false">2 Stars</radio>
  <radio checked="true">2.5 Stars</radio>
  <radio checked="false">3 Stars</radio>
  <radio checked="false">3.5 Stars</radio>
  <radio checked="false">4 Stars</radio>
  <radio checked="false">4.5 Stars</radio>
  <radio checked="false">5 Stars</radio>
  <img>2.5 Stars</img>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Ratingname="half-rating"defaultValue={2.5}precision={0.5}/><Ratingname="half-rating-read"defaultValue={2.5}precision={0.5}readOnly/>
  </text>
  <heading level="2">Sizes</heading>
  <text>Fancy larger or smaller ratings? Use thesizeprop.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <radio checked="false">1 Star</radio>
  <radio checked="true">2 Stars</radio>
  <radio checked="false">3 Stars</radio>
  <radio checked="false">4 Stars</radio>
  <radio checked="false">5 Stars</radio>
  <radio checked="false">1 Star</radio>
  <radio checked="true">2 Stars</radio>
  <radio checked="false">3 Stars</radio>
  <radio checked="false">4 Stars</radio>
  <radio checked="false">5 Stars</radio>
  <radio checked="false">1 Star</radio>
  <radio checked="true">2 Stars</radio>
  <radio checked="false">3 Stars</radio>
  <radio checked="false">4 Stars</radio>
  <radio checked="false">5 Stars</radio>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Ratingname="size-small"defaultValue={2}size="small"/><Ratingname="size-medium"defaultValue={2}/><Ratingname="size-large"defaultValue={2}size="large"/>
  </text>
  <heading level="2">Accessibility</heading>
  <text>(WAI tutorial:</text>
  <link>
    https://www.w3.org/WAI/tutorials/forms/custom-controls/#a-star-rating
  </link>
  <text>
    )The accessibility of this component relies on:‚Ä¢A radio group is used with
    its fields visually hidden. It contains six radio buttons, one for each star
    and another for 0 stars, which is checked by default. Make sure you are
    providing anameprop that is unique to the parent form.‚Ä¢The labels for the
    radio buttons contain actual text (‚Äú1 Star‚Äù, ‚Äú2 Stars‚Äù, ‚Ä¶), make sure you
    provide agetLabelTextprop when the page language is not English.
  </text>
  <heading level="2">API</heading>
  <text>‚Ä¢</text>
  <link><Rating /></link>
  <link>Pagination</link>
  <link>Skeleton</link>
</main>;

`;

exports[`chromium /components/selects/ 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Select</heading>
  <text>
    Select components are used for collecting user provided information from a
    list of options.
  </text>
  <heading level="2">Simple Select</heading>
  <text>
    Menus are positioned over their emitting elements such that the currently
    selected menu item appears on top of the emitting element.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Age¬†</text>
  <combobox haspopup="listbox">Age ‚Äã</combobox>
  <text>Age¬†</text>
  <combobox haspopup="listbox">Age ‚Äã</combobox>
  <text>Some important helper text¬†</text>
  <combobox haspopup="listbox">Without label</combobox>
  <text>Without labelAge¬†</text>
  <combobox haspopup="listbox">Age None</combobox>
  <text>Label + placeholderName¬†</text>
  <combobox disabled="true" haspopup="listbox">
    Name ‚Äã
  </combobox>
  <text>DisabledName¬†</text>
  <combobox haspopup="listbox">Name ‚Äã</combobox>
  <text>ErrorName¬†</text>
  <combobox haspopup="listbox">Name ‚Äã</combobox>
  <text>Read onlyAge¬†</text>
  <combobox haspopup="listbox">Age ‚Äã</combobox>
  <text>Auto width¬†</text>
  <combobox haspopup="listbox">Without label</combobox>
  <text>PlaceholderAge¬†</text>
  <combobox haspopup="listbox">Age ‚Äã</combobox>
  <text>RequiredAge</text>
  <combobox haspopup="listbox">Age ‚Äã</combobox>
  <text>Age¬†</text>
  <combobox haspopup="listbox">Age ‚Äã</combobox>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Advanced features</heading>
  <text>
    The Select component is meant to be interchangeable with a
    native<select>element.If you are looking for more advanced features,
    like combobox, multiselect, autocomplete, async or creatable support, head
    to the
  </text>
  <link>Autocomplete component</link>
  <text>
    . It's meant to be an improved version of the "react-select"
    and "downshift" packages.
  </text>
  <heading level="2">Native Select</heading>
  <text>
    As the user experience can be improved on mobile using the native select of
    the platform, we allow such pattern.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Age¬†</text>
  <combobox value="None">
    Age
    <menuitem selected="true"></menuitem>
    <menuitem>Ten</menuitem>
    <menuitem>Twenty</menuitem>
    <menuitem>Thirty</menuitem>
  </combobox>
  <text>Age¬†</text>
  <combobox value="None">
    Age
    <menuitem selected="true"></menuitem>
    <menuitem>Ten</menuitem>
    <menuitem>Twenty</menuitem>
    <menuitem>Thirty</menuitem>
  </combobox>
  <text>Some important helper text¬†</text>
  <combobox value="None">
    age
    <menuitem selected="true">None</menuitem>
    <menuitem>Ten</menuitem>
    <menuitem>Twenty</menuitem>
    <menuitem>Thirty</menuitem>
  </combobox>
  <text>With visually hidden labelAge¬†</text>
  <combobox value="None">
    Age
    <menuitem selected="true">None</menuitem>
    <menuitem>Ten</menuitem>
    <menuitem>Twenty</menuitem>
    <menuitem>Thirty</menuitem>
  </combobox>
  <text>Label + placeholderName¬†</text>
  <combobox value="Hai" disabled="true">
    Name
    <menuitem>None</menuitem>
    <menuitem selected="true">Hai</menuitem>
    <menuitem>Olivier</menuitem>
    <menuitem>Kevin</menuitem>
  </combobox>
  <text>DisabledName¬†</text>
  <combobox value="Hai" invalid="true">
    Name
    <menuitem selected="true">Hai</menuitem>
    <menuitem>Olivier</menuitem>
    <menuitem>Kevin</menuitem>
  </combobox>
  <text>ErrorName¬†</text>
  <combobox value="Thirty">
    Name
    <menuitem>Ten</menuitem>
    <menuitem>Twenty</menuitem>
    <menuitem selected="true">Thirty</menuitem>
  </combobox>
  <text>Uncontrolled¬†</text>
  <combobox value="Placeholder">
    age
    <menuitem disabled="true">Placeholder</menuitem>
    <menuitem>Ten</menuitem>
    <menuitem>Twenty</menuitem>
    <menuitem>Thirty</menuitem>
  </combobox>
  <text>PlaceholderAge¬†</text>
  <combobox value="None">
    Age
    <menuitem selected="true"></menuitem>
    <menuitem>Ten</menuitem>
    <menuitem>Twenty</menuitem>
    <menuitem>Thirty</menuitem>
  </combobox>
  <text>RequiredAge</text>
  <combobox value="None">
    Age
    <menuitem selected="true"></menuitem>
    <menuitem>Ten</menuitem>
    <menuitem>Twenty</menuitem>
    <menuitem>Thirty</menuitem>
  </combobox>
  <text>Age¬†</text>
  <combobox value="None">
    Age
    <menuitem selected="true"></menuitem>
    <menuitem>Ten</menuitem>
    <menuitem>Twenty</menuitem>
    <menuitem>Thirty</menuitem>
  </combobox>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Text Fields</heading>
  <text>
    TheTextFieldwrapper component is a complete form control including a label,
    input and help text. You can find an example with the select mode
  </text>
  <link>in this section</link>
  <text>.</text>
  <heading level="2">Customized selects</heading>
  <text>
    Here are some examples of customizing the component. You can learn more
    about this in the
  </text>
  <link>overrides documentation page</link>
  <text>
    .The first step is to style theInputBasecomponent. Once it's styled,
    you can either use it directly as a text field or provide it to the
    selectinputproperty to have aselectfield.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Age</text>
  <textbox>Age</textbox>
  <text>Age</text>
  <combobox haspopup="listbox">Age ‚Äã</combobox>
  <text>Age</text>
  <combobox value="None">
    Age
    <menuitem selected="true"></menuitem>
    <menuitem>Ten</menuitem>
    <menuitem>Twenty</menuitem>
    <menuitem>Thirty</menuitem>
  </combobox>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>üé® If you are looking for inspiration, you can check</text>
  <link>MUI Treasury's customization examples</link>
  <text>.</text>
  <heading level="2">Multiple Select</heading>
  <text>
    TheSelectcomponent can handle multiple selections. It's enabled with
    themultipleproperty.Like with the single selection, you can pull out the new
    value by accessingevent.target.valuein theonChangecallback. It's always
    an array.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Name¬†</text>
  <combobox haspopup="listbox">Name ‚Äã</combobox>
  <text>Tag¬†</text>
  <combobox haspopup="listbox">Tag ‚Äã</combobox>
  <text>Chip¬†</text>
  <combobox haspopup="listbox">Chip ‚Äã</combobox>
  <text>¬†</text>
  <combobox haspopup="listbox">Without label</combobox>
  <text>Native¬†</text>
  <listbox multiselectable="true">
    Native
    <option>Oliver Hansen</option>
    <option>Van Henry</option>
    <option>April Tucker</option>
    <option>Ralph Hubbard</option>
    <option>Omar Alexander</option>
    <option>Carlos Abbott</option>
    <option>Miriam Wagner</option>
    <option>Bradley Wilkerson</option>
    <option>Virginia Andrews</option>
    <option>Kelly Snyder</option>
  </listbox>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Controlled Open Select</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>OPEN THE SELECT</button>
  <text>Age¬†</text>
  <combobox haspopup="listbox">Age ‚Äã</combobox>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">With a Dialog</heading>
  <text>
    While it's discouraged by the Material Design specification, you can
    use a select inside a dialog.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>OPEN SELECT DIALOG</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Grouping</heading>
  <text>
    Display categories with theListSubheadercomponent or the
    native<optgroup>element.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Grouping¬†</text>
  <combobox value="None">
    Grouping
    <menuitem selected="true"></menuitem>
    <menuitem>Option 1</menuitem>
    <menuitem>Option 2</menuitem>
    <menuitem>Option 3</menuitem>
    <menuitem>Option 4</menuitem>
  </combobox>
  <text>Grouping¬†</text>
  <combobox haspopup="listbox">‚Äã</combobox>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Accessibility</heading>
  <text>
    To properly label yourSelectinput you need an extra element with anidthat
    contains a label. Thatidneeds to match thelabelIdof
    theSelecte.g.<InputLabelid="label">Age</InputLabel><SelectlabelId="label"id="select"value="20"><MenuItemvalue="10">Ten</MenuItem><MenuItemvalue="20">Twenty</MenuItem></Select>Alternatively
    aTextFieldwith anidandlabelcreates the proper markup and ids for
    you:<TextFieldid="select"label="Age"value="20"select><MenuItemvalue="10">Ten</MenuItem><MenuItemvalue="20">Twenty</MenuItem></TextField>For
    a
  </text>
  <link>native select</link>
  <text>
    , you should mention a label by giving the value of theidattribute of the
    select element to
    theInputLabel'shtmlForattribute:<InputLabelhtmlFor="select">Age</InputLabel><NativeSelectid="select"><optionvalue="10">Ten</option><optionvalue="20">Twenty</option></NativeSelect>
  </text>
  <heading level="2">API</heading>
  <text>‚Ä¢</text>
  <link><NativeSelect /></link>
  <text>‚Ä¢</text>
  <link><Select /></link>
  <link>Radio</link>
  <link>Slider</link>
</main>;

`;

exports[`chromium /components/slider 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Slider</heading>
  <text>Sliders allow users to make selections from a range of values.</text>
  <link>Sliders</link>
  <text>
    reflect a range of values along a bar, from which users may select a single
    value. They are ideal for adjusting settings such as volume, brightness, or
    applying image filters.‚Ä¢üì¶
  </text>
  <link>22 kB gzipped</link>
  <text>
    (but only +8 kB when used together with other Material-UI components).
  </text>
  <heading level="2">Continuous sliders</heading>
  <text>
    Continuous sliders allow users to select a value along a subjective range.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Volume</text>
  <slider
    value="30"
    valuetext=""
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
  >
    Volume
  </slider>
  <text>Disabled slider</text>
  <slider
    value="30"
    valuetext=""
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
  >
    Disabled slider
  </slider>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Discrete sliders</heading>
  <text>
    Discrete sliders can be adjusted to a specific value by referencing its
    value indicator. By order of demos:You can generate a mark for each step
    withmarks={true}.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Temperature</text>
  <slider
    value="30"
    valuetext="30¬∞C"
    valuemax="110"
    valuemin="10"
    orientation="horizontal"
  >
    Temperature
  </slider>
  <text>Disabled</text>
  <slider
    value="30"
    valuetext="30¬∞C"
    valuemax="110"
    valuemin="10"
    orientation="horizontal"
  >
    Temperature
  </slider>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="3">Small steps</heading>
  <text>You can change the default step increment.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Small steps</text>
  <slider
    value="5.000000058430487e-8"
    valuetext="5e-8¬∞C"
    valuemax="1.0000000116860974e-7"
    valuemin="-5.000000058430487e-8"
    orientation="horizontal"
  >
    Small steps
  </slider>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Typographyid="discrete-slider-small-steps"gutterBottom>Small
    steps</Typography><SliderdefaultValue={0.00000005}getAriaValueText={valuetext}aria-labelledby="discrete-slider-small-steps"step={0.00000001}marksmin={-0.00000005}max={0.0000001}valueLabelDisplay="auto"/>
  </text>
  <heading level="3">Custom marks</heading>
  <text>
    You can have custom marks by providing a rich array to themarksprop.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Custom marks</text>
  <slider
    value="20"
    valuetext="20¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
  >
    Custom marks
  </slider>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Typographyid="discrete-slider-custom"gutterBottom>Custom
    marks</Typography><SliderdefaultValue={20}getAriaValueText={valuetext}aria-labelledby="discrete-slider-custom"step={10}valueLabelDisplay="auto"marks={marks}/>
  </text>
  <heading level="3">Restricted values</heading>
  <text>
    You can restrict the selectable values to those provided with themarksprop
    withstep={null}.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Restricted values</text>
  <slider
    value="20"
    valuetext="20¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
  >
    Restricted values
  </slider>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Typographyid="discrete-slider-restrict"gutterBottom>Restricted
    values</Typography><SliderdefaultValue={20}valueLabelFormat={valueLabelFormat}getAriaValueText={valuetext}aria-labelledby="discrete-slider-restrict"step={null}valueLabelDisplay="auto"marks={marks}/>
  </text>
  <heading level="3">Label always visible</heading>
  <text>
    You can force the thumb label to be always visible
    withvalueLabelDisplay="on".
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Always visible</text>
  <slider
    value="80"
    valuetext="80¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
  >
    Always visible
  </slider>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Typographyid="discrete-slider-always"gutterBottom>Always
    visible</Typography><SliderdefaultValue={80}getAriaValueText={valuetext}aria-labelledby="discrete-slider-always"step={10}marks={marks}valueLabelDisplay="on"/>
  </text>
  <heading level="2">Range slider</heading>
  <text>
    The slider can be used to set the start and end of a range by supplying an
    array of values to thevalueprop.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Temperature range</text>
  <slider
    value="20"
    valuetext="20¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
  ></slider>
  <slider
    value="37"
    valuetext="37¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
  ></slider>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Typographyid="range-slider"gutterBottom>Temperature
    range</Typography><Slidervalue={value}onChange={handleChange}valueLabelDisplay="auto"aria-labelledby="range-slider"getAriaValueText={valuetext}/>
  </text>
  <heading level="2">Slider with input field</heading>
  <text>In this example an input allows a discrete value to be set.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Volume</text>
  <slider
    value="30"
    valuetext=""
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
  >
    Volume
  </slider>
  <text>¬†</text>
  <spinbutton value="30" valuetext="" valuemax="100" valuemin="0">
    Volume
  </spinbutton>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Customized sliders</heading>
  <text>
    Here are some examples of customizing the component. You can learn more
    about this in the
  </text>
  <link>overrides documentation page</link>
  <text>.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>iOS</text>
  <slider
    value="60"
    valuetext=""
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
  >
    ios slider
  </slider>
  <text>pretto.fr</text>
  <slider
    value="20"
    valuetext=""
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
  >
    pretto slider
  </slider>
  <text>Tooltip value label</text>
  <slider
    value="20"
    valuetext=""
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
  >
    custom thumb label
  </slider>
  <text>Airbnb</text>
  <slider
    value="20"
    valuetext=""
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
  >
    Minimum price
  </slider>
  <slider
    value="40"
    valuetext=""
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
  >
    Maximum price
  </slider>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Vertical sliders</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Temperature</text>
  <slider
    value="30"
    valuetext="30¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="vertical"
  >
    Temperature
  </slider>
  <slider
    value="30"
    valuetext="30¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="vertical"
  >
    Temperature
  </slider>
  <slider
    value="20"
    valuetext="20¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="vertical"
  >
    Temperature
  </slider>
  <slider
    value="37"
    valuetext="37¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="vertical"
  >
    Temperature
  </slider>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Track</heading>
  <text>The track shows the range available for user selection.</text>
  <heading level="3">Removed track</heading>
  <text>The track can be turned off withtrack={false}.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Removed track</text>
  <slider
    value="30"
    valuetext="30¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
  >
    Removed track
  </slider>
  <text>Removed track range slider</text>
  <slider
    value="20"
    valuetext="20¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
  >
    Removed track range slider
  </slider>
  <slider
    value="37"
    valuetext="37¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
  >
    Removed track range slider
  </slider>
  <slider
    value="50"
    valuetext="50¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
  >
    Removed track range slider
  </slider>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="3">Inverted track</heading>
  <text>The track can be inverted withtrack="inverted".</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Inverted track</text>
  <slider
    value="30"
    valuetext="30¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
  >
    Inverted track
  </slider>
  <text>Inverted track range</text>
  <slider
    value="20"
    valuetext="20¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
  >
    Inverted track range
  </slider>
  <slider
    value="37"
    valuetext="37¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
  >
    Inverted track range
  </slider>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Non-linear scale</heading>
  <text>
    You can use thescaleprop to represent thevalueon a different scale. For
    instance, in the following demo, the valuexrepresents the power of10^x.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Temperature range</text>
  <slider
    value="1"
    valuetext="1e^0"
    valuemax="60466176"
    valuemin="0"
    orientation="horizontal"
  >
    Temperature range
  </slider>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Typographyid="non-linear-slider"gutterBottom>Temperature
    range</Typography><Slidervalue={value}min={0}step={0.1}max={6}scale={(x)=>x**10}getAriaValueText={valueLabelFormat}valueLabelFormat={valueLabelFormat}onChange={handleChange}valueLabelDisplay="auto"aria-labelledby="non-linear-slider"/>
  </text>
  <heading level="2">Accessibility</heading>
  <text>(WAI-ARIA:</text>
  <link>https://www.w3.org/TR/wai-aria-practices/#slider</link>
  <text>
    )The component handles most of the work necessary to make it accessible.
    However, you need to make sure that:‚Ä¢Each thumb has a user-friendly label
    (aria-label,aria-labelledbyorgetAriaLabelprop).‚Ä¢Each thumb has a
    user-friendly text for its current value. This is not required if the value
    matches the semantics of the label. You can change the name with
    thegetAriaValueTextoraria-valuetextprop.
  </text>
  <heading level="2">API</heading>
  <text>‚Ä¢</text>
  <link><Slider /></link>
  <link>Select</link>
  <link>Switch</link>
</main>;

`;

exports[`chromium /components/switches/ 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Switch</heading>
  <text>Switches toggle the state of a single setting on or off.</text>
  <link>Switches</link>
  <text>
    are the preferred way to adjust settings on mobile. The option that the
    switch controls, as well as the state it‚Äôs in, should be made clear from the
    corresponding inline label.
  </text>
  <heading level="2">Basic switches</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">secondary checkbox</checkbox>
  <checkbox checked="true">primary checkbox</checkbox>
  <checkbox checked="false">primary checkbox</checkbox>
  <generic disabled="true">disabled checkbox</generic>
  <generic disabled="true">primary checkbox</generic>
  <checkbox checked="true">checkbox with default color</checkbox>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Switch with FormControlLabel</heading>
  <text>
    Switchcan be provided with a description thanks to
    theFormControlLabelcomponent.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">Secondary</checkbox>
  <checkbox checked="true">Primary</checkbox>
  <checkbox checked="false">Uncontrolled</checkbox>
  <generic disabled="true">Disabled</generic>
  <generic disabled="true">Disabled</generic>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Switches with FormGroup</heading>
  <text>
    FormGroupis a helpful wrapper used to group selection controls components
    that provides an easier API. However, you are encouraged you to use
  </text>
  <link>Checkboxes</link>
  <text>instead if multiple related controls are required. (See:</text>
  <link>When to use</link>
  <text>).</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Assign responsibility</text>
  <checkbox checked="true">Gilad Gray</checkbox>
  <checkbox checked="false">Jason Killian</checkbox>
  <checkbox checked="true">Antoine Llorca</checkbox>
  <text>Be careful</text>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Customized switches</heading>
  <text>
    Here are some examples of customizing the component. You can learn more
    about this in the
  </text>
  <link>overrides documentation page</link>
  <text>.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">Custom color</checkbox>
  <checkbox checked="true">iOS style</checkbox>
  <checkbox checked="true">Off On</checkbox>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>üé® If you are looking for inspiration, you can check</text>
  <link>MUI Treasury's customization examples</link>
  <text>.</text>
  <heading level="2">Sizes</heading>
  <text>Fancy smaller switches? Use thesizeproperty.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="false">Small</checkbox>
  <checkbox checked="false">Normal</checkbox>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <FormGroup><FormControlLabelcontrol={<Switchsize="small"checked={checked}onChange={toggleChecked}/>}label="Small"/><FormControlLabelcontrol={<Switchchecked={checked}onChange={toggleChecked}/>}label="Normal"/></FormGroup>
  </text>
  <heading level="2">Label placement</heading>
  <text>You can change the placement of the label:</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="false">Top</checkbox>
  <checkbox checked="false">Start</checkbox>
  <checkbox checked="false">Bottom</checkbox>
  <checkbox checked="false">End</checkbox>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">When to use</heading>
  <text>‚Ä¢</text>
  <link>Checkboxes vs. Switches</link>
  <heading level="2">Accessibility</heading>
  <text>
    ‚Ä¢It will render an element with thecheckboxrole notswitchrole since this
    role isn't widely supported yet. Please test first if assistive
    technology of your target audience supports this role properly. Then you can
    change the role with<Switch inputProps={{ role:
    'switch' }}>‚Ä¢All form controls should have labels,
    and this includes radio buttons, checkboxes, and switches. In most cases,
    this is done by using the<label>element (
  </text>
  <link>FormControlLabel</link>
  <text>
    ).‚Ä¢When a label can't be used, it's necessary to add an attribute
    directly to the input component. In this case, you can apply the additional
    attribute (e.g.aria-label,aria-labelledby,title) via
    theinputPropsproperty.<Switchvalue="checkedA"inputProps={{'aria-label':'Switch
    A'}}/>
  </text>
  <heading level="2">API</heading>
  <text>‚Ä¢</text>
  <link><FormControl /></link>
  <text>‚Ä¢</text>
  <link><FormControlLabel /></link>
  <text>‚Ä¢</text>
  <link><FormGroup /></link>
  <text>‚Ä¢</text>
  <link><FormLabel /></link>
  <text>‚Ä¢</text>
  <link><Switch /></link>
  <link>Slider</link>
  <link>Text Field</link>
</main>;

`;

exports[`chromium /components/tabs/ 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Tabs</heading>
  <text>Tabs make it easy to explore and switch between different views.</text>
  <link>Tabs</link>
  <text>
    organize and allow navigation between groups of content that are related and
    at the same level of hierarchy.
  </text>
  <heading level="2">Simple Tabs</heading>
  <text>A simple example with no frills.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tab selected="true">ITEM ONE</tab>
  <tab>ITEM TWO</tab>
  <tab>ITEM THREE</tab>
  <text>Item One</text>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <AppBarposition="static"><Tabsvalue={value}onChange={handleChange}aria-label="simple
    tabs example"><Tab label="Item
    One"{...a11yProps(0)}/><Tab label="Item
    Two"{...a11yProps(1)}/><Tab label="Item
    Three"{...a11yProps(2)}/></Tabs></AppBar><TabPanelvalue={value}index={0}>Item
    One</TabPanel><TabPanelvalue={value}index={1}>Item
    Two</TabPanel><TabPanelvalue={value}index={2}>Item
    Three</TabPanel>
  </text>
  <heading level="3">Wrapped Labels</heading>
  <text>
    Long labels will automatically wrap on tabs. If the label is too long for
    the tab, it will overflow and the text will not be visible.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tab selected="true">NEW ARRIVALS IN THE LONGEST TEXT OF NONFICTION</tab>
  <tab>ITEM TWO</tab>
  <tab>ITEM THREE</tab>
  <text>Item One</text>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="3">Disabled Tab</heading>
  <text>A Tab can be disabled by settingdisabledproperty.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tab>ACTIVE</tab>
  <tab disabled="true">DISABLED</tab>
  <tab selected="true">ACTIVE</tab>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Papersquare><Tabsvalue={value}indicatorColor="primary"textColor="primary"onChange={handleChange}aria-label="disabled
    tabs
    example"><Tablabel="Active"/><Tablabel="Disabled"disabled/><Tablabel="Active"/></Tabs></Paper>
  </text>
  <heading level="2">Fixed Tabs</heading>
  <text>
    Fixed tabs should be used with a limited number of tabs and when consistent
    placement will aid muscle memory.
  </text>
  <heading level="3">Full width</heading>
  <text>
    Thevariant="fullWidth"property should be used for smaller views.
    This demo also uses
  </text>
  <link>react-swipeable-views</link>
  <text>
    to animate the Tab transition, and allowing tabs to be swiped on touch
    devices.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tab selected="true">ITEM ONE</tab>
  <tab>ITEM TWO</tab>
  <tab>ITEM THREE</tab>
  <text>Item One</text>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="3">Centered</heading>
  <text>Thecenteredproperty should be used for larger views.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tab selected="true">ITEM ONE</tab>
  <tab>ITEM TWO</tab>
  <tab>ITEM THREE</tab>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <PaperclassName={classes.root}><Tabsvalue={value}onChange={handleChange}indicatorColor="primary"textColor="primary"centered><Tablabel="Item
    One"/><Tablabel="Item Two"/><Tablabel="Item
    Three"/></Tabs></Paper>
  </text>
  <heading level="2">Scrollable Tabs</heading>
  <heading level="3">Automatic Scroll Buttons</heading>
  <text>
    Left and right scroll buttons will automatically be presented on desktop and
    hidden on mobile. (based on viewport width)
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tab selected="true">ITEM ONE</tab>
  <tab>ITEM TWO</tab>
  <tab>ITEM THREE</tab>
  <tab>ITEM FOUR</tab>
  <tab>ITEM FIVE</tab>
  <tab>ITEM SIX</tab>
  <tab>ITEM SEVEN</tab>
  <text>Item One</text>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="3">Forced Scroll Buttons</heading>
  <text>
    Left and right scroll buttons will be presented regardless of the viewport
    width.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tab selected="true">ITEM ONE</tab>
  <tab>ITEM TWO</tab>
  <tab>ITEM THREE</tab>
  <tab>ITEM FOUR</tab>
  <tab>ITEM FIVE</tab>
  <tab>ITEM SIX</tab>
  <tab>ITEM SEVEN</tab>
  <text>Item One</text>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="3">Prevent Scroll Buttons</heading>
  <text>
    Left and right scroll buttons will never be presented. All scrolling must be
    initiated through user agent scrolling mechanisms (e.g. left/right swipe,
    shift-mousewheel, etc.)
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tab selected="true">phone</tab>
  <tab>favorite</tab>
  <tab>person</tab>
  <tab>help</tab>
  <tab>shopping</tab>
  <tab>up</tab>
  <tab>down</tab>
  <text>Item One</text>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Customized tabs</heading>
  <text>
    Here is an example of customizing the component. You can learn more about
    this in the
  </text>
  <link>overrides documentation page</link>
  <text>.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tab selected="true">Tab 1</tab>
  <tab>Tab 2</tab>
  <tab>Tab 3</tab>
  <tab selected="true">Workflows</tab>
  <tab>Datasets</tab>
  <tab>Connections</tab>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <divclassName={classes.demo1}><AntTabsvalue={value}onChange={handleChange}aria-label="ant
    example"><AntTablabel="Tab
    1"/><AntTablabel="Tab 2"/><AntTablabel="Tab
    3"/></AntTabs><TypographyclassName={classes.padding}/></div><divclassName={classes.demo2}><StyledTabsvalue={value}onChange={handleChange}aria-label="styled
    tabs
    example"><StyledTablabel="Workflows"/><StyledTablabel="Datasets"/><StyledTablabel="Connections"/></StyledTabs><TypographyclassName={classes.padding}/></div>üé®
    If you are looking for inspiration, you can check
  </text>
  <link>MUI Treasury's customization examples</link>
  <text>.</text>
  <heading level="2">Vertical tabs</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tab selected="true">ITEM ONE</tab>
  <tab>ITEM TWO</tab>
  <tab>ITEM THREE</tab>
  <tab>ITEM FOUR</tab>
  <tab>ITEM FIVE</tab>
  <tab>ITEM SIX</tab>
  <tab>ITEM SEVEN</tab>
  <text>Item One</text>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Nav Tabs</heading>
  <text>
    By default tabs use abuttonelement, but you can provide your own custom tag
    or component. Here's an example of implementing tabbed navigation:
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tab selected="true">PAGE ONE</tab>
  <tab>PAGE TWO</tab>
  <tab>PAGE THREE</tab>
  <text>Page One</text>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Icon Tabs</heading>
  <text>Tab labels may be either all icons or all text.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tab selected="true">phone</tab>
  <tab>favorite</tab>
  <tab>person</tab>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <PapersquareclassName={classes.root}><Tabsvalue={value}onChange={handleChange}variant="fullWidth"indicatorColor="primary"textColor="primary"aria-label="icon
    tabs
    example"><Tabicon={<PhoneIcon/>}aria-label="phone"/><Tabicon={<FavoriteIcon/>}aria-label="favorite"/><Tabicon={<PersonPinIcon/>}aria-label="person"/></Tabs></Paper>
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tab selected="true">RECENTS</tab>
  <tab>FAVORITES</tab>
  <tab>NEARBY</tab>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <PapersquareclassName={classes.root}><Tabsvalue={value}onChange={handleChange}variant="fullWidth"indicatorColor="secondary"textColor="secondary"aria-label="icon
    label tabs
    example"><Tabicon={<PhoneIcon/>}label="RECENTS"/><Tabicon={<FavoriteIcon/>}label="FAVORITES"/><Tabicon={<PersonPinIcon/>}label="NEARBY"/></Tabs></Paper>
  </text>
  <heading level="2">Accessibility</heading>
  <text>(WAI-ARIA:</text>
  <link>https://www.w3.org/TR/wai-aria-practices/#tabpanel</link>
  <text>
    )The following steps are needed in order to provide necessary information
    for assistive technologies:1.LabelTabsviaaria-labeloraria-labelledby.2.Tabs
    need to be connected to their corresponding[role="tabpanel"]by
    setting the correctid,aria-controlsandaria-labelledby.An example for the
    current implementation can be found in the demos on this page. We've
    also published
  </text>
  <link>an experimental API</link>
  <text>in@material-ui/labthat does not require extra work.</text>
  <heading level="3">Keyboard navigation</heading>
  <text>
    The components implement keyboard navigation using the "manual
    activation" behavior. If you want to switch to the "selection
    automatically follows focus" behavior you have
    passselectionFollowsFocusto theTabscomponent. The WAI-ARIA authoring
    practices have a detailed guide on
  </text>
  <link>how to decide when to make selection automatically follow focus</link>
  <text>.</text>
  <heading level="4">Demo</heading>
  <text>
    The following two demos only differ in their keyboard navigation behavior.
    Focus a tab and navigate with arrow keys to notice the difference./* Tabs
    where selection follows focus */<TabsselectionFollowsFocus/>/* Tabs
    where each tab needs to be selected manually */<Tabs/>
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Tabs where selection follows focus</text>
  <tab selected="true">ITEM ONE</tab>
  <tab>ITEM TWO</tab>
  <tab>ITEM THREE</tab>
  <text>Tabs where each tab needs to be selected manually</text>
  <tab selected="true">ITEM ONE</tab>
  <tab>ITEM TWO</tab>
  <tab>ITEM THREE</tab>
  <text>Item One</text>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Experimental API</heading>
  <text>
    @material-ui/laboffers utility components that inject props to implement
    accessible tabs following
  </text>
  <link>WAI-ARIA authoring practices</link>
  <text>.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tab selected="true">ITEM ONE</tab>
  <tab>ITEM TWO</tab>
  <tab>ITEM THREE</tab>
  <text>Item One</text>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <TabContextvalue={value}><AppBarposition="static"><TabListonChange={handleChange}aria-label="simple
    tabs example"><Tablabel="Item
    One"value="1"/><Tablabel="Item
    Two"value="2"/><Tablabel="Item
    Three"value="3"/></TabList></AppBar><TabPanelvalue="1">Item
    One</TabPanel><TabPanelvalue="2">Item
    Two</TabPanel><TabPanelvalue="3">Item
    Three</TabPanel></TabContext>
  </text>
  <heading level="2">API</heading>
  <text>‚Ä¢</text>
  <link><Tab /></link>
  <text>‚Ä¢</text>
  <link><TabScrollButton /></link>
  <text>‚Ä¢</text>
  <link><Tabs /></link>
  <link>Stepper</link>
  <link>App Bar</link>
</main>;

`;

exports[`chromium /components/text-fields/ 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Text Field</heading>
  <text>Text fields let users enter and edit text.</text>
  <link>Text fields</link>
  <text>
    allow users to enter text into a UI. They typically appear in forms and
    dialogs.
  </text>
  <heading level="2">TextField</heading>
  <text>
    TheTextFieldwrapper component is a complete form control including a label,
    input and help text.It supports standard, outlined and filled styling.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Standard¬†</text>
  <textbox>Standard</textbox>
  <text>Filled¬†</text>
  <textbox>Filled</textbox>
  <text>Outlined</text>
  <textbox>Outlined</textbox>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <formclassName={classes.root}noValidateautoComplete="off"><TextFieldid="standard-basic"label="Standard"/><TextFieldid="filled-basic"label="Filled"variant="filled"/><TextFieldid="outlined-basic"label="Outlined"variant="outlined"/></form>Note:The
    standard variant of theTextFieldis no longer documented in the
  </text>
  <link>Material Design guidelines</link>
  <text>(</text>
  <link>here's why</link>
  <text>), but Material-UI will continue to support it.</text>
  <heading level="2">Form props</heading>
  <text>
    Standard form attributes are supported e.g.required,disabled,type, etc. as
    well as ahelperTextwhich is used to give context about a field‚Äôs input, such
    as how the input will be used.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Required¬†</text>
  <textbox value="Hello World" required="true">
    Required
  </textbox>
  <text>Disabled¬†</text>
  <textbox value="Hello World" disabled="true">
    Disabled
  </textbox>
  <text>Password¬†</text>
  <textbox>Password</textbox>
  <text>Read Only¬†</text>
  <textbox value="Hello World" readonly="true">
    Read Only
  </textbox>
  <text>Number¬†</text>
  <spinbutton valuetext="">Number</spinbutton>
  <text>Search field¬†</text>
  <searchbox>Search field</searchbox>
  <text>Helper text¬†</text>
  <textbox value="Default Value" description="Some important text">
    Helper text
  </textbox>
  <text>Some important textRequired¬†</text>
  <textbox value="Hello World" required="true">
    Required
  </textbox>
  <text>Disabled¬†</text>
  <textbox value="Hello World" disabled="true">
    Disabled
  </textbox>
  <text>Password¬†</text>
  <textbox>Password</textbox>
  <text>Read Only¬†</text>
  <textbox value="Hello World" readonly="true">
    Read Only
  </textbox>
  <text>Number¬†</text>
  <spinbutton valuetext="">Number</spinbutton>
  <text>Search field¬†</text>
  <searchbox>Search field</searchbox>
  <text>Helper text¬†</text>
  <textbox value="Default Value" description="Some important text">
    Helper text
  </textbox>
  <text>Some important textRequired</text>
  <textbox value="Hello World" required="true">
    Required
  </textbox>
  <text>Disabled</text>
  <textbox value="Hello World" disabled="true">
    Disabled
  </textbox>
  <text>Password</text>
  <textbox>Password</textbox>
  <text>Read Only</text>
  <textbox value="Hello World" readonly="true">
    Read Only
  </textbox>
  <text>Number</text>
  <spinbutton valuetext="">Number</spinbutton>
  <text>Search field</text>
  <searchbox>Search field</searchbox>
  <text>Helper text</text>
  <textbox value="Default Value" description="Some important text">
    Helper text
  </textbox>
  <text>Some important text</text>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Validation</heading>
  <text>
    Theerrorprop toggles the error state, thehelperTextprop can then be used to
    provide feedback to the user about the error.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Error¬†</text>
  <textbox value="Hello World" invalid="true">
    Error
  </textbox>
  <text>Error¬†</text>
  <textbox value="Hello World" description="Incorrect entry." invalid="true">
    Error
  </textbox>
  <text>Incorrect entry.Error¬†</text>
  <textbox value="Hello World" invalid="true">
    Error
  </textbox>
  <text>Error¬†</text>
  <textbox value="Hello World" description="Incorrect entry." invalid="true">
    Error
  </textbox>
  <text>Incorrect entry.Error</text>
  <textbox value="Hello World" invalid="true">
    Error
  </textbox>
  <text>Error</text>
  <textbox value="Hello World" description="Incorrect entry." invalid="true">
    Error
  </textbox>
  <text>Incorrect entry.</text>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Multiline</heading>
  <text>Themultilineprop transforms the text field into a</text>
  <link>textarea</link>
  <text>or a</text>
  <link>TextareaAutosize</link>
  <text>.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Multiline¬†</text>
  <textbox value="Controlled" multiline="true">
    Multiline
  </textbox>
  <text>Multiline Placeholder¬†</text>
  <textbox multiline="true">Multiline Placeholder</textbox>
  <text>Multiline¬†</text>
  <textbox value="Default Value" multiline="true">
    Multiline
  </textbox>
  <text>Multiline¬†</text>
  <textbox value="Controlled" multiline="true">
    Multiline
  </textbox>
  <text>Multiline Placeholder¬†</text>
  <textbox multiline="true">Multiline Placeholder</textbox>
  <text>Multiline¬†</text>
  <textbox value="Default Value" multiline="true">
    Multiline
  </textbox>
  <text>Multiline</text>
  <textbox value="Controlled" multiline="true">
    Multiline
  </textbox>
  <text>Multiline Placeholder</text>
  <textbox multiline="true">Multiline Placeholder</textbox>
  <text>Multiline</text>
  <textbox value="Default Value" multiline="true">
    Multiline
  </textbox>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Select</heading>
  <text>Theselectprop makes the text field use the</text>
  <link>Select</link>
  <text>component internally.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Select¬†</text>
  <combobox haspopup="listbox">Select ‚Ç¨</combobox>
  <text>Please select your currencyNative select¬†</text>
  <combobox value="‚Ç¨" description="Please select your currency">
    Native select
    <menuitem>$</menuitem>
    <menuitem selected="true">‚Ç¨</menuitem>
    <menuitem>‡∏ø</menuitem>
    <menuitem>¬•</menuitem>
  </combobox>
  <text>Please select your currencySelect¬†</text>
  <combobox haspopup="listbox">Select ‚Ç¨</combobox>
  <text>Please select your currencyNative select¬†</text>
  <combobox value="‚Ç¨" description="Please select your currency">
    Native select
    <menuitem>$</menuitem>
    <menuitem selected="true">‚Ç¨</menuitem>
    <menuitem>‡∏ø</menuitem>
    <menuitem>¬•</menuitem>
  </combobox>
  <text>Please select your currencySelect</text>
  <combobox haspopup="listbox">Select ‚Ç¨</combobox>
  <text>Please select your currencyNative select</text>
  <combobox value="‚Ç¨" description="Please select your currency">
    Native select
    <menuitem>$</menuitem>
    <menuitem selected="true">‚Ç¨</menuitem>
    <menuitem>‡∏ø</menuitem>
    <menuitem>¬•</menuitem>
  </combobox>
  <text>Please select your currency</text>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Icons</heading>
  <text>There are multiple ways to display an icon with a text field.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>With a start adornment¬†</text>
  <textbox>With a start adornment</textbox>
  <text>TextField¬†</text>
  <textbox>TextField</textbox>
  <text>With a grid¬†</text>
  <textbox>With a grid</textbox>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="3">Input Adornments</heading>
  <text>
    The main way is with anInputAdornment. This can be used to add a prefix, a
    suffix or an action to an input. For instance, you can use an icon button to
    hide or reveal the password.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>With normal TextField¬†Kg</text>
  <textbox>With normal TextField</textbox>
  <text>¬†</text>
  <textbox description="Weight">weight</textbox>
  <text>KgWeightPassword¬†</text>
  <textbox>Password</textbox>
  <button>toggle password visibility</button>
  <text>Amount¬†$</text>
  <textbox>Amount</textbox>
  <text>With normal TextField¬†Kg</text>
  <textbox>With normal TextField</textbox>
  <text>¬†</text>
  <textbox description="Weight">weight</textbox>
  <text>KgWeightPassword¬†</text>
  <textbox>Password</textbox>
  <button>toggle password visibility</button>
  <text>Amount¬†$</text>
  <textbox>Amount</textbox>
  <text>With normal TextFieldKg</text>
  <textbox>With normal TextField</textbox>
  <textbox description="Weight">weight</textbox>
  <text>KgWeightPassword</text>
  <textbox>Password</textbox>
  <button>toggle password visibility</button>
  <text>Amount$</text>
  <textbox>Amount</textbox>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Sizes</heading>
  <text>Fancy smaller inputs? Use thesizeprop.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Size¬†</text>
  <textbox value="Small">Size</textbox>
  <text>Size¬†</text>
  <textbox value="Normal">Size</textbox>
  <text>Size¬†</text>
  <textbox value="Small">Size</textbox>
  <text>Size¬†</text>
  <textbox value="Normal">Size</textbox>
  <text>Size</text>
  <textbox value="Small">Size</textbox>
  <text>Size</text>
  <textbox value="Normal">Size</textbox>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Layout</heading>
  <text>
    marginprop can be used to alter the vertical spacing of inputs.
    Usingnone(default) will not apply margins to theFormControl,
    whereasdenseandnormalwill.denseandnormalalter other styles to meet the
    specification.fullWidthcan be used to make the input take up the full width
    of its container.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Label¬†</text>
  <textbox description="Full width!">Label</textbox>
  <text>Full width!None¬†</text>
  <textbox value="Default Value" description="Some important text">
    None
  </textbox>
  <text>Some important textDense¬†</text>
  <textbox value="Default Value" description="Some important text">
    Dense
  </textbox>
  <text>Some important textNormal¬†</text>
  <textbox value="Default Value" description="Some important text">
    Normal
  </textbox>
  <text>Some important textLabel¬†</text>
  <textbox description="Full width!">Label</textbox>
  <text>Full width!None¬†</text>
  <textbox value="Default Value" description="Some important text">
    None
  </textbox>
  <text>Some important textDense¬†</text>
  <textbox value="Default Value" description="Some important text">
    Dense
  </textbox>
  <text>Some important textNormal¬†</text>
  <textbox value="Default Value" description="Some important text">
    Normal
  </textbox>
  <text>Some important textLabel</text>
  <textbox description="Full width!">Label</textbox>
  <text>Full width!None</text>
  <textbox value="Default Value" description="Some important text">
    None
  </textbox>
  <text>Some important textDense</text>
  <textbox value="Default Value" description="Some important text">
    Dense
  </textbox>
  <text>Some important textNormal</text>
  <textbox value="Default Value" description="Some important text">
    Normal
  </textbox>
  <text>Some important text</text>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Uncontrolled vs Controlled</heading>
  <text>The component can be controlled or uncontrolled.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Name¬†</text>
  <textbox value="Cat in the Hat">Name</textbox>
  <text>Uncontrolled¬†</text>
  <textbox value="foo">Uncontrolled</textbox>
  <text>Name¬†</text>
  <textbox value="Cat in the Hat">Name</textbox>
  <text>Uncontrolled¬†</text>
  <textbox value="foo">Uncontrolled</textbox>
  <text>Name</text>
  <textbox value="Cat in the Hat">Name</textbox>
  <text>Uncontrolled</text>
  <textbox value="foo">Uncontrolled</textbox>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Components</heading>
  <text>TextFieldis composed of smaller components (</text>
  <link>FormControl</link>
  <text>,</text>
  <link>Input</link>
  <text>,</text>
  <link>FilledInput</link>
  <text>,</text>
  <link>InputLabel</link>
  <text>,</text>
  <link>OutlinedInput</link>
  <text>, and</text>
  <link>FormHelperText</link>
  <text>
    ) that you can leverage directly to significantly customize your form
    inputs.You might also have noticed that some native HTML input properties
    are missing from theTextFieldcomponent. This is on purpose. The component
    takes care of the most used properties, then it's up to the user to use
    the underlying component shown in the following demo. Still, you can
    useinputProps(andInputProps,InputLabelPropsproperties) if you want to avoid
    some boilerplate.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Name¬†</text>
  <textbox value="Composed TextField">Name</textbox>
  <text>Name¬†</text>
  <textbox value="Composed TextField" description="Some important helper text">
    Name
  </textbox>
  <text>Some important helper textName¬†</text>
  <textbox value="Composed TextField" disabled="true">
    Name
  </textbox>
  <text>DisabledName¬†</text>
  <textbox value="Composed TextField" description="Error" invalid="true">
    Name
  </textbox>
  <text>ErrorName</text>
  <textbox value="Composed TextField">Name</textbox>
  <text>Name¬†</text>
  <textbox value="Composed TextField">Name</textbox>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Inputs</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>¬†</text>
  <textbox value="Hello world">description</textbox>
  <text>¬†</text>
  <textbox>description</textbox>
  <text>¬†</text>
  <textbox value="Disabled" disabled="true">
    description
  </textbox>
  <text>¬†</text>
  <textbox value="Error" invalid="true">
    description
  </textbox>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <formclassName={classes.root}noValidateautoComplete="off"><InputdefaultValue="Hello
    world"inputProps={{'aria-label':'description'}}/><Inputplaceholder="Placeholder"inputProps={{'aria-label':'description'}}/><InputdefaultValue="Disabled"disabledinputProps={{'aria-label':'description'}}/><InputdefaultValue="Error"errorinputProps={{'aria-label':'description'}}/></form>
  </text>
  <heading level="2">Color</heading>
  <text>
    Thecolorprop changes the highlight color of the text field when focused.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Standard secondary¬†</text>
  <textbox>Standard secondary</textbox>
  <text>Filled secondary¬†</text>
  <textbox>Filled secondary</textbox>
  <text>Outlined secondary</text>
  <textbox>Outlined secondary</textbox>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <formclassName={classes.root}noValidateautoComplete="off"><TextFieldid="standard-secondary"label="Standard
    secondary"color="secondary"/><TextFieldid="filled-secondary"label="Filled
    secondary"variant="filled"color="secondary"/><TextFieldid="outlined-secondary"label="Outlined
    secondary"variant="outlined"color="secondary"/></form>
  </text>
  <heading level="2">Customized inputs</heading>
  <text>
    Here are some examples of customizing the component. You can learn more
    about this in the
  </text>
  <link>overrides documentation page</link>
  <text>.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Custom CSS¬†</text>
  <textbox>Custom CSS</textbox>
  <text>Custom CSS</text>
  <textbox>Custom CSS</textbox>
  <text>ThemeProvider¬†</text>
  <textbox>ThemeProvider</textbox>
  <text>ThemeProvider</text>
  <textbox>ThemeProvider</textbox>
  <text>Bootstrap</text>
  <textbox value="react-bootstrap">Bootstrap</textbox>
  <text>Reddit</text>
  <textbox value="react-reddit">Reddit</textbox>
  <textbox value="Naked input">naked</textbox>
  <text>CSS validation style</text>
  <textbox value="Success" required="true">
    CSS validation style
  </textbox>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    Customization does not stop at CSS, you can use composition to build custom
    components and give your app a unique feel. Below is an example using the
  </text>
  <link>InputBase</link>
  <text>component, inspired by Google Maps.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>menu</button>
  <textbox>search google maps</textbox>
  <button>search</button>
  <button>directions</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>üé® If you are looking for inspiration, you can check</text>
  <link>MUI Treasury's customization examples</link>
  <text>.</text>
  <heading level="2">Limitations</heading>
  <heading level="3">Shrink</heading>
  <text>
    The input label "shrink" state isn't always correct. The
    input label is supposed to shrink as soon as the input is displaying
    something. In some circumstances, we can't determine the
    "shrink" state (number input, datetime input, Stripe input). You
    might notice an overlap.
  </text>
  <img>shrink</img>
  <text>
    To workaround the issue, you can force the "shrink" state of the
    label.<TextFieldInputLabelProps={{shrink:true}}/>or<InputLabelshrink>Count</InputLabel>
  </text>
  <heading level="3">Floating label</heading>
  <text>
    The floating label is absolutely positioned, it won't impact the layout
    of the page. You need to make sure that the input is larger than the label
    to display correctly.
  </text>
  <heading level="2">Integration with 3rd party input libraries</heading>
  <text>
    You can use third-party libraries to format an input. You have to provide a
    custom implementation of the<input>element with
    theinputComponentproperty.The following demo uses the
  </text>
  <link>react-text-mask</link>
  <text>and</text>
  <link>react-number-format</link>
  <text>libraries. The same concept could be applied to</text>
  <link>e.g. react-stripe-element</link>
  <text>.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>react-text-mask¬†</text>
  <textbox value="(1‚ÄÄ‚ÄÄ) ‚ÄÄ‚ÄÄ‚ÄÄ-‚ÄÄ‚ÄÄ‚ÄÄ‚ÄÄ">react-text-mask</textbox>
  <text>react-number-format¬†</text>
  <textbox value="$1,320">react-number-format</textbox>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    The provided input component should handle theinputRefproperty. The property
    should be called with a value that implements the following
    interface:interfaceInputElement{focus():void;value?:string;}functionMyInputComponent(props){const{component:Component,inputRef,...other}=props;//
    implement \`InputElement\`
    interfaceReact.useImperativeHandle(inputRef,()=>({focus:()=>{//
    logic to focus the rendered component from 3rd party belongs here},//
    hiding the value e.g. react-stripe-elements}));// \`Component\` will be
    your \`SomeThirdPartyComponent\` from
    belowreturn<Component{...other}/>;}//
    usage<TextFieldInputProps={{inputComponent:MyInputComponent,inputProps:{component:SomeThirdPartyComponent},}}/>;
  </text>
  <heading level="2">Accessibility</heading>
  <text>
    In order for the text field to be accessible,the input should be linked to
    the label and the helper text. The underlying DOM nodes should have this
    structure:<divclass="form-control"><labelfor="my-input">Email
    address</label><inputid="my-input"aria-describedby="my-helper-text"/><spanid="my-helper-text">We'll
    never share your email.</span></div>‚Ä¢If you are using
    theTextFieldcomponent, you just have to provide a uniqueid.‚Ä¢If you are
    composing the
    component:<FormControl><InputLabelhtmlFor="my-input">Email
    address</InputLabel><Inputid="my-input"aria-describedby="my-helper-text"/><FormHelperTextid="my-helper-text">We'll
    never share your email.</FormHelperText></FormControl>
  </text>
  <heading level="2">Complementary projects</heading>
  <text>
    For more advanced use cases you might be able to take advantage of:‚Ä¢
  </text>
  <link>formik-material-ui</link>
  <text>Bindings for using Material-UI with</text>
  <link>formik</link>
  <text>.‚Ä¢</text>
  <link>redux-form-material-ui</link>
  <text>Bindings for using Material-UI with</text>
  <link>Redux Form</link>
  <text>.‚Ä¢</text>
  <link>mui-rff</link>
  <text>Bindings for using Material-UI with</text>
  <link>React Final Form</link>
  <text>.</text>
  <heading level="2">API</heading>
  <text>‚Ä¢</text>
  <link><FilledInput /></link>
  <text>‚Ä¢</text>
  <link><FormControl /></link>
  <text>‚Ä¢</text>
  <link><FormHelperText /></link>
  <text>‚Ä¢</text>
  <link><Input /></link>
  <text>‚Ä¢</text>
  <link><InputAdornment /></link>
  <text>‚Ä¢</text>
  <link><InputBase /></link>
  <text>‚Ä¢</text>
  <link><InputLabel /></link>
  <text>‚Ä¢</text>
  <link><OutlinedInput /></link>
  <text>‚Ä¢</text>
  <link><TextField /></link>
  <link>Switch</link>
  <link>Transfer List</link>
</main>;

`;

exports[`chromium /components/tooltips/ 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Tooltip</heading>
  <text>
    Tooltips display informative text when users hover over, focus on, or tap an
    element.When activated,
  </text>
  <link>Tooltips</link>
  <text>
    display a text label identifying an element, such as a description of its
    function.
  </text>
  <heading level="2">Simple Tooltips</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button description="Delete">delete</button>
  <button description="Add">add</button>
  <button description="Add">add</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Tooltiptitle="Delete"><IconButtonaria-label="delete"><DeleteIcon/></IconButton></Tooltip><Tooltiptitle="Add"aria-label="add"><Fabcolor="primary"className={classes.fab}><AddIcon/></Fab></Tooltip><Tooltiptitle="Add"aria-label="add"><Fabcolor="secondary"className={classes.absolute}><AddIcon/></Fab></Tooltip>
  </text>
  <heading level="2">Positioned Tooltips</heading>
  <text>
    TheTooltiphas 12placementschoice. They don‚Äôt have directional arrows;
    instead, they rely on motion emanating from the source to convey direction.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button description="Add">TOP-START</button>
  <button description="Add">TOP</button>
  <button description="Add">TOP-END</button>
  <button description="Add">LEFT-START</button>
  <button description="Add">LEFT</button>
  <button description="Add">LEFT-END</button>
  <button description="Add">RIGHT-START</button>
  <button description="Add">RIGHT</button>
  <button description="Add">RIGHT-END</button>
  <button description="Add">BOTTOM-START</button>
  <button description="Add">BOTTOM</button>
  <button description="Add">BOTTOM-END</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Customized tooltips</heading>
  <text>
    Here are some examples of customizing the component. You can learn more
    about this in the
  </text>
  <link>overrides documentation page</link>
  <text>.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button description="Add">LIGHT</button>
  <button description="Add">BOOTSTRAP</button>
  <button>HTML</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Arrow Tooltips</heading>
  <text>
    You can use thearrowprop to give your tooltip an arrow indicating which
    element it refers to.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button description="Add">ARROW</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Tooltiptitle="Add"arrow><Button>Arrow</Button></Tooltip>
  </text>
  <heading level="2">Custom child element</heading>
  <text>
    The tooltip needs to apply DOM event listeners to its child element. If the
    child is a custom React element, you need to make sure that it spreads its
    properties to the underlying DOM
    element.constMyComponent=React.forwardRef(functionMyComponent(props,ref){//
    Spread the props to the underlying DOM
    element.return<div{...props}ref={ref}>Bin</div>});//
    ...<Tooltiptitle="Delete"><MyComponent></Tooltip>You
    can find a similar concept in the
  </text>
  <link>wrapping components</link>
  <text>guide.</text>
  <heading level="2">Triggers</heading>
  <text>You can define the types of events that cause a tooltip to show.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button description="Add">HOVER OR TOUCH</button>
  <button>FOCUS OR TOUCH</button>
  <button description="Add">HOVER</button>
  <button>CLICK</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Controlled Tooltips</heading>
  <text>
    You can use theopen,onOpenandonCloseproperties to control the behavior of
    the tooltip.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button description="Add">CONTROLLED</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Tooltipopen={open}onClose={handleClose}onOpen={handleOpen}title="Add"><Button>Controlled</Button></Tooltip>
  </text>
  <heading level="2">Variable Width</heading>
  <text>TheTooltipwraps long text by default to make it readable.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button description=" Aliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est, vel aliquam tellus. Praesent non nunc mollis, fermentum neque at, semper arcu. Nullam eget est sed sem iaculis gravida eget vitae justo. ">
    DEFAULT WIDTH [300PX]
  </button>
  <button description=" Aliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est, vel aliquam tellus. Praesent non nunc mollis, fermentum neque at, semper arcu. Nullam eget est sed sem iaculis gravida eget vitae justo. ">
    CUSTOM WIDTH [500PX]
  </button>
  <button description=" Aliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est, vel aliquam tellus. Praesent non nunc mollis, fermentum neque at, semper arcu. Nullam eget est sed sem iaculis gravida eget vitae justo. ">
    NO WRAPPING
  </button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Tooltiptitle={longText}><ButtonclassName={classes.button}>Default
    Width[300px]</Button></Tooltip><Tooltiptitle={longText}classes={{tooltip:classes.customWidth}}><ButtonclassName={classes.button}>Custom
    Width[500px]</Button></Tooltip><Tooltiptitle={longText}classes={{tooltip:classes.noMaxWidth}}><ButtonclassName={classes.button}>No
    wrapping</Button></Tooltip>
  </text>
  <heading level="2">Interactive</heading>
  <text>
    A tooltip can be interactive. It won't close when the user hovers over
    the tooltip before theleaveDelayis expired.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button description="Add">INTERACTIVE</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Tooltiptitle="Add"interactive><Button>Interactive</Button></Tooltip>
  </text>
  <heading level="2">Disabled Elements</heading>
  <text>
    By default disabled elements like<button>do not trigger user
    interactions so aTooltipwill not activate on normal events like hover. To
    accommodate disabled elements, add a simple wrapper element, such as
    aspan.‚ö†Ô∏è In order to work with Safari, you need at least one display block
    or flex item below the tooltip wrapper.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button disabled="true">A DISABLED BUTTON</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Tooltiptitle="You don't have permission to do
    this"><span><Buttondisabled>ADisabled
    Button</Button></span></Tooltip>If you're not
    wrapping a Material-UI component that inherits fromButtonBase, for instance,
    a native<button>element, you should also add the CSS
    propertypointer-events: none;to your element when
    disabled:<Tooltiptitle="You don't have permission to do
    this"><span><buttondisabled={disabled}style={disabled?{pointerEvents:"none"}:{}}>{'A
    disabled button'}</button></span></Tooltip>
  </text>
  <heading level="2">Transitions</heading>
  <text>Use a different transition.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button description="Add">GROW</button>
  <button description="Add">FADE</button>
  <button description="Add">ZOOM</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Tooltiptitle="Add"><Button>Grow</Button></Tooltip><TooltipTransitionComponent={Fade}TransitionProps={{timeout:600}}title="Add"><Button>Fade</Button></Tooltip><TooltipTransitionComponent={Zoom}title="Add"><Button>Zoom</Button></Tooltip>
  </text>
  <heading level="2">Showing and hiding</heading>
  <text>
    The tooltip is normally shown immediately when the user's mouse hovers
    over the element, and hides immediately when the user's mouse leaves. A
    delay in showing or hiding the tooltip can be added through the
    propertiesenterDelayandleaveDelay, as shown in the Controlled Tooltips demo
    above.On mobile, the tooltip is displayed when the user longpresses the
    element and hides after a delay of 1500ms. You can disable this feature with
    thedisableTouchListenerproperty.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button description="Add">[500MS, 200MS]</button>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the full source">Show the full source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <text>
    <Tooltiptitle="Add"enterDelay={500}leaveDelay={200}><Button>[500ms,200ms]</Button></Tooltip>
  </text>
  <heading level="2">API</heading>
  <text>‚Ä¢</text>
  <link><Tooltip /></link>
  <link>Table</link>
  <link>Typography</link>
</main>;

`;

exports[`chromium /components/transfer-list 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Transfer List</heading>
  <text>
    A transfer list (or "shuttle") enables the user to move one or
    more list items between lists.
  </text>
  <heading level="2">Simple Transfer List</heading>
  <text>
    For completeness, this example includes buttons for "move all",
    but not every transfer list needs these.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <listitem level="1">
    List item 1<checkbox checked="false">List item 1</checkbox>
    <text>List item 1</text>
  </listitem>
  <listitem level="1">
    List item 2<checkbox checked="false">List item 2</checkbox>
    <text>List item 2</text>
  </listitem>
  <listitem level="1">
    List item 3<checkbox checked="false">List item 3</checkbox>
    <text>List item 3</text>
  </listitem>
  <listitem level="1">
    List item 4<checkbox checked="false">List item 4</checkbox>
    <text>List item 4</text>
  </listitem>
  <button>move all right</button>
  <button disabled="true">move selected right</button>
  <button disabled="true">move selected left</button>
  <button>move all left</button>
  <listitem level="1">
    List item 5<checkbox checked="false">List item 5</checkbox>
    <text>List item 5</text>
  </listitem>
  <listitem level="1">
    List item 6<checkbox checked="false">List item 6</checkbox>
    <text>List item 6</text>
  </listitem>
  <listitem level="1">
    List item 7<checkbox checked="false">List item 7</checkbox>
    <text>List item 7</text>
  </listitem>
  <listitem level="1">
    List item 8<checkbox checked="false">List item 8</checkbox>
    <text>List item 8</text>
  </listitem>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Enhanced Transfer List</heading>
  <text>
    This example exchanges the "move all" buttons for a "select
    all / select none" checkbox, and adds a counter.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="false">all items selected</checkbox>
  <text>Choices0/4 selected</text>
  <listitem level="1">
    List item 1<checkbox checked="false">List item 1</checkbox>
    <text>List item 1</text>
  </listitem>
  <listitem level="1">
    List item 2<checkbox checked="false">List item 2</checkbox>
    <text>List item 2</text>
  </listitem>
  <listitem level="1">
    List item 3<checkbox checked="false">List item 3</checkbox>
    <text>List item 3</text>
  </listitem>
  <listitem level="1">
    List item 4<checkbox checked="false">List item 4</checkbox>
    <text>List item 4</text>
  </listitem>
  <button disabled="true">move selected right</button>
  <button disabled="true">move selected left</button>
  <checkbox checked="false">all items selected</checkbox>
  <text>Chosen0/4 selected</text>
  <listitem level="1">
    List item 5<checkbox checked="false">List item 5</checkbox>
    <text>List item 5</text>
  </listitem>
  <listitem level="1">
    List item 6<checkbox checked="false">List item 6</checkbox>
    <text>List item 6</text>
  </listitem>
  <listitem level="1">
    List item 7<checkbox checked="false">List item 7</checkbox>
    <text>List item 7</text>
  </listitem>
  <listitem level="1">
    List item 8<checkbox checked="false">List item 8</checkbox>
    <text>List item 8</text>
  </listitem>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">API</heading>
  <text>‚Ä¢</text>
  <link><Checkbox /></link>
  <text>‚Ä¢</text>
  <link><List /></link>
  <text>‚Ä¢</text>
  <link><ListItem /></link>
  <text>‚Ä¢</text>
  <link><Switch /></link>
  <link>Text Field</link>
  <link>Bottom Navigation</link>
</main>;

`;

exports[`chromium /components/tree-view/ 1`] = `
<main>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Tree View</heading>
  <text>
    A tree view widget presents a hierarchical list.Tree views can be used to
    represent a file system navigator displaying folders and files, an item
    representing a folder can be expanded to reveal the contents of the folder,
    which may be files, folders, or both.
  </text>
  <heading level="2">Basic tree view</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    <treeitem level="1">Applications</treeitem>
    <treeitem level="1">Documents</treeitem>
  </tree>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Multi selection</heading>
  <text>Tree views also support multi selection.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree multiselectable="true">
    <treeitem level="1">Applications</treeitem>
    <treeitem level="1">Documents</treeitem>
  </tree>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="3">Controlled tree view</heading>
  <text>The tree view also offers a controlled API.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    <treeitem level="1">Applications</treeitem>
    <treeitem level="1">Documents</treeitem>
  </tree>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Rich object</heading>
  <text>
    While theTreeView/TreeItemcomponent API maximizes flexibility, an extra step
    is needed to handle a rich object.Let's consider a data variable with
    the following shape, recursion can be used to handle
    it.constdata={id:'root',name:'Parent',children:[{id:'1',name:'Child
    - 1',},// ‚Ä¶],};
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    <treeitem expanded="true" level="1">
      Parent
      <treeitem level="2">Child - 1</treeitem>
      <treeitem level="2">Child - 3</treeitem>
    </treeitem>
  </tree>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Customized tree view</heading>
  <heading level="3">Custom icons, border and animation</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    <treeitem expanded="true" level="1">
      Main
      <treeitem level="2">Hello</treeitem>
      <treeitem level="2">Subtree with children</treeitem>
      <treeitem level="2">World</treeitem>
      <treeitem level="2">Something something</treeitem>
    </treeitem>
  </tree>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="3">Gmail clone</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    <treeitem level="1">All Mail</treeitem>
    <treeitem level="1">Trash</treeitem>
    <treeitem expanded="true" level="1">
      Categories
      <treeitem level="2">Social 90</treeitem>
      <treeitem level="2">Updates 2,294</treeitem>
      <treeitem level="2">Forums 3,566</treeitem>
      <treeitem level="2">Promotions 733</treeitem>
    </treeitem>
    <treeitem level="1">History</treeitem>
  </tree>
  <button pressed="true">Show JavaScript source</button>
  <button pressed="false">Show TypeScript source</button>
  <button description="Show the source">Show the source</button>
  <button description="Edit in CodeSandbox">Edit in CodeSandbox</button>
  <button description="Copy the source">Copy the source</button>
  <button description="Reset focus to test keyboard navigation">
    Reset focus to test keyboard navigation
  </button>
  <button description="Reset demo">Reset demo</button>
  <combobox haspopup="menu">See more</combobox>
  <heading level="2">Accessibility</heading>
  <text>(WAI-ARIA:</text>
  <link>https://www.w3.org/TR/wai-aria-practices/#TreeView</link>
  <text>)The component follows the WAI-ARIA authoring practices.</text>
  <heading level="2">API</heading>
  <text>‚Ä¢</text>
  <link><TreeItem /></link>
  <text>‚Ä¢</text>
  <link><TreeView /></link>
  <link>Toggle Button</link>
  <link>Alert</link>
</main>;

`;

exports[`firefox / 1`] = `
<document>
  Material-UI: A popular React UI framework
  <link>Skip to content</link>
  <button>Open main navigation</button>
  <combobox autocomplete="list" haspopup="true">
    Search
  </combobox>
  <buttonmenu haspopup="true">Change language</buttonmenu>
  <buttonmenu haspopup="true">Toggle notifications panel</buttonmenu>
  <link>Edit website colors</link>
  <link>GitHub repository</link>
  <button>Toggle light/dark theme</button>
  <button>Toggle right-to-left/left-to-right</button>
  <landmark>Main navigation</landmark>
  <landmark>
    <heading level="1">MATERIAL-UI</heading>
    <text>
      React components for faster and easier web development. Build your own
      design system, or start with Material Design.
    </text>
    <link>GET STARTED</link>
    <link>Star</link>
    <link>Follow</link>
    <link>Get Professional Support</link>
    <text>random sponsor</text>
    <link>a random quick word</link>
    <heading level="2">Installation</heading>
    <text>
      Install Material-UI's source files via npm. We take care of injecting
      the CSS needed.$ npm install @material-ui/core
    </text>
    <link>or use a CDN.</link>
    <text>Load the default Roboto font.</text>
    <text-container>
      <text>
        <linkrel="stylesheet"href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"/>
      </text>
    </text-container>
    <link>READ INSTALLATION DOCS</link>
    <heading level="2">Usage</heading>
    <text>
      Material-UI components work without any additional setup, and don't
      pollute the global scope.import React from'react';import{
      Button
      }from'@material-ui/core';functionApp(){return<Buttoncolor="primary">Hello
      World</Button>;}
    </text>
    <link>EXPLORE THE DOCS</link>
    <heading level="2">Premium themes</heading>
    <text>
      Take your project to the next level with premium themes from our store ‚Äì
      all built on Material-UI.
    </text>
    <link>Browse themes</link>
    <link>BROWSE THEMES</link>
    <heading level="2">Material-UI's sponsors</heading>
    <text>
      The continued development and maintenance of Material-UI is made possible
      by these generous sponsors:
    </text>
    <heading level="3">Diamond üíé</heading>
    <link>sencha</link>
    <text>2/3 slots available</text>
    <heading level="3">Gold üèÜ</heading>
    <link>tidelift</link>
    <link>bitsrc</link>
    <link>call-em-all</link>
    <heading level="3">There are more!</heading>
    <text>See the full list of</text>
    <link>our sponsors</link>
    <text>
      , and learn how you can contribute to the future of Material-UI.
    </text>
    <heading level="2">Praise for Material-UI</heading>
    <text>Here's what some of our users are saying.</text>
    <link>a random quote about Material-UI</link>
    <link>a random quote about Material-UI</link>
    <link>a random quote about Material-UI</link>
    <heading level="2">Who's using Material-UI?</heading>
    <text>Join these and other great organisations!</text>
    <img>NASA</img>
    <img>Walmart Labs</img>
    <img>Capgemini</img>
    <img>Uniqlo</img>
    <img>Bethesda</img>
    <img>J.P. Morgan</img>
    <img>Shutterstock</img>
    <img>Netflix</img>
    <img>Coursera</img>
    <img>Amazon</img>
    <img>Unity</img>
    <text>Are you using Material-UI?</text>
    <link>LET US KNOW!</link>
  </landmark>
  <link>Material-UI</link>
  <heading level="2">Community</heading>
  <link>GitHub</link>
  <link>Twitter</link>
  <link>StackOverflow</link>
  <link>Team</link>
  <heading level="2">Resources</heading>
  <link>Support</link>
  <link>Blog</link>
  <link>Material Icons</link>
  <heading level="2">Company</heading>
  <link>About</link>
  <link>Contact Us</link>
  <text>Currently</text>
  <link>v4.10.1. View versions page.</link>
  <text>. Released under the</text>
  <link>MIT License</link>
  <text>. Copyright ¬© 2020 Material-UI.</text>
</document>;

`;

exports[`firefox /api/button/ 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Button API</heading>
  <text>
    The API documentation of the Button React component. Learn more about the
    props and the CSS customization points.
  </text>
  <heading level="2">Import</heading>
  <text>
    import Button from'@material-ui/core/Button';// orimport{
    Button }from'@material-ui/core';You can learn more about the
    difference by
  </text>
  <link>reading this guide</link>
  <text>.</text>
  <heading level="2">Component name</heading>
  <text>The MuiButton name can be used for providing</text>
  <link>default props</link>
  <text>or</text>
  <link>style overrides</link>
  <text>at the theme level.</text>
  <heading level="2">Props</heading>
  <text>
    NameTypeDefaultDescriptionchildren¬†*nodeThe content of the
    button.classesobjectOverride or extend the styles applied to the component.
    See
  </text>
  <link>CSS API</link>
  <text>
    below for more
    details.color'default'|¬†'inherit'|¬†'primary'|¬†'secondary''default'The
    color of the component. It supports those theme colors that make sense for
    this component.componentelementType'button'The component used for
    the root node. Either a string to use a HTML element or a
    component.disabledboolfalseIf true, the button will be
    disabled.disableElevationboolfalseIf true, no elevation is
    used.disableFocusRippleboolfalseIf true, the keyboard focus ripple will be
    disabled.disableRippleboolIf true, the ripple effect will be disabled.‚ö†Ô∏è
    Without a ripple there is no styling for :focus-visible by default. Be sure
    to highlight the element by applying separate styles with the
    focusVisibleClassName.endIconnodeElement placed after the
    children.fullWidthboolfalseIf true, the button will take up the full width
    of its container.hrefstringThe URL to link to when the button is clicked. If
    defined, an a element will be used as the root
    node.size'small'|¬†'medium'|¬†'large''medium'The
    size of the button. small is equivalent to the dense button
    styling.startIconnodeElement placed before the
    children.variant'text'|¬†'outlined'|¬†'contained''text'The
    variant to use.The ref is forwarded to the root element.Any other props
    supplied will be provided to the root element (
  </text>
  <link>ButtonBase</link>
  <text>).</text>
  <heading level="2">CSS</heading>
  <text>
    Rule nameGlobal classDescriptionroot.MuiButton-rootStyles applied to the
    root element.label.MuiButton-labelStyles applied to the span element that
    wraps the children.text.MuiButton-textStyles applied to the root element if
    variant="text".textPrimary.MuiButton-textPrimaryStyles applied to
    the root element if variant="text" and
    color="primary".textSecondary.MuiButton-textSecondaryStyles
    applied to the root element if variant="text" and
    color="secondary".outlined.MuiButton-outlinedStyles applied to the
    root element if
    variant="outlined".outlinedPrimary.MuiButton-outlinedPrimaryStyles
    applied to the root element if variant="outlined" and
    color="primary".outlinedSecondary.MuiButton-outlinedSecondaryStyles
    applied to the root element if variant="outlined" and
    color="secondary".contained.MuiButton-containedStyles applied to
    the root element if
    variant="contained".containedPrimary.MuiButton-containedPrimaryStyles
    applied to the root element if variant="contained" and
    color="primary".containedSecondary.MuiButton-containedSecondaryStyles
    applied to the root element if variant="contained" and
    color="secondary".disableElevation.MuiButton-disableElevationStyles
    applied to the root element if
    disableElevation={true}.focusVisible.Mui-focusVisiblePseudo-class
    applied to the ButtonBase root element if the button is keyboard
    focused.disabled.Mui-disabledPseudo-class applied to the root element if
    disabled={true}.colorInherit.MuiButton-colorInheritStyles applied
    to the root element if
    color="inherit".textSizeSmall.MuiButton-textSizeSmallStyles
    applied to the root element if size="small" and
    variant="text".textSizeLarge.MuiButton-textSizeLargeStyles applied
    to the root element if size="large" and
    variant="text".outlinedSizeSmall.MuiButton-outlinedSizeSmallStyles
    applied to the root element if size="small" and
    variant="outlined".outlinedSizeLarge.MuiButton-outlinedSizeLargeStyles
    applied to the root element if size="large" and
    variant="outlined".containedSizeSmall.MuiButton-containedSizeSmallStyles
    applied to the root element if size="small" and
    variant="contained".containedSizeLarge.MuiButton-containedSizeLargeStyles
    applied to the root element if size="large" and
    variant="contained".sizeSmall.MuiButton-sizeSmallStyles applied to
    the root element if
    size="small".sizeLarge.MuiButton-sizeLargeStyles applied to the
    root element if size="large".fullWidth.MuiButton-fullWidthStyles
    applied to the root element if
    fullWidth={true}.startIcon.MuiButton-startIconStyles applied to
    the startIcon element if supplied.endIcon.MuiButton-endIconStyles applied to
    the endIcon element if supplied.iconSizeSmall.MuiButton-iconSizeSmallStyles
    applied to the icon element if supplied and
    size="small".iconSizeMedium.MuiButton-iconSizeMediumStyles applied
    to the icon element if supplied and
    size="medium".iconSizeLarge.MuiButton-iconSizeLargeStyles applied
    to the icon element if supplied and size="large".You can override
    the style of the component thanks to one of these customization points:
  </text>
  <statictext>‚Ä¢</statictext>
  <text>With a rule name of the</text>
  <link>classes object prop</link>
  <text>.</text>
  <statictext>‚Ä¢</statictext>
  <text>With a</text>
  <link>global class name</link>
  <text>.</text>
  <statictext>‚Ä¢</statictext>
  <text>With a theme and an</text>
  <link>overrides property</link>
  <text>.If that's not sufficient, you can check the</text>
  <link>implementation of the component</link>
  <text>for more detail.</text>
  <heading level="2">Inheritance</heading>
  <text>The props of the</text>
  <link>ButtonBase</link>
  <text>
    component are also available. You can take advantage of this behavior to
  </text>
  <link>target nested components</link>
  <text>.</text>
  <heading level="2">Demos</heading>
  <statictext>‚Ä¢</statictext>
  <link>Button Group</link>
  <statictext>‚Ä¢</statictext>
  <link>Buttons</link>
  <link>Breadcrumbs</link>
  <link>Button Base</link>
</landmark>;

`;

exports[`firefox /api/select/ 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Select API</heading>
  <text>
    The API documentation of the Select React component. Learn more about the
    props and the CSS customization points.
  </text>
  <heading level="2">Import</heading>
  <text>
    import Select from'@material-ui/core/Select';// orimport{
    Select }from'@material-ui/core';You can learn more about the
    difference by
  </text>
  <link>reading this guide</link>
  <text>.</text>
  <heading level="2">Component name</heading>
  <text>The MuiSelect name can be used for providing</text>
  <link>default props</link>
  <text>or</text>
  <link>style overrides</link>
  <text>at the theme level.</text>
  <heading level="2">Props</heading>
  <text>
    NameTypeDefaultDescriptionautoWidthboolfalseIf true, the width of the
    popover will automatically be set according to the items inside the menu,
    otherwise it will be at least the width of the select input.childrennodeThe
    option elements to populate the select with. Can be some MenuItem when
    native is false and option when native is true.‚ö†Ô∏èThe MenuItem elements must
    be direct descendants when native is false.classesobjectOverride or extend
    the styles applied to the component. See
  </text>
  <link>CSS API</link>
  <text>
    below for more details.defaultValueanyThe default element value. Use when
    the component is not controlled.displayEmptyboolfalseIf true, a value is
    displayed even if no items are selected.In order to display a meaningful
    value, a function should be passed to the renderValue prop which returns the
    value to be displayed when no items are selected. You can only use it when
    the native prop is false
    (default).IconComponentelementTypeArrowDropDownIconThe icon that displays
    the arrow.idstringThe id of the wrapper element or the select element when
    native.inputelementAn Input element; does not have to be a material-ui
    specific Input.inputPropsobject
  </text>
  <link>Attributes</link>
  <text>
    applied to the input element. When native is true, the attributes are
    applied on the select element.labelnodeSee
  </text>
  <link>OutlinedInput#label</link>
  <text>
    labelIdstringThe ID of an element that acts as an additional label. The
    Select will be labelled by the additional label and the selected
    value.labelWidthnumber0See
  </text>
  <link>OutlinedInput#label</link>
  <text>MenuPropsobjectProps applied to the</text>
  <link>Menu</link>
  <text>
    element.multipleboolfalseIf true, value must be an array and the menu will
    support multiple selections.nativeboolfalseIf true, the component will be
    using a native select element.onChangefuncCallback function fired when a
    menu item is selected.Signature:function(event: object, child?: object)
    => voidevent: The event source of the callback. You can pull out the new
    value by accessing event.target.value (any).child: The react element that
    was selected when native is false (default).onClosefuncCallback fired when
    the component requests to be closed. Use in controlled mode (see
    open).Signature:function(event: object) => voidevent: The event source of
    the callback.onOpenfuncCallback fired when the component requests to be
    opened. Use in controlled mode (see open).Signature:function(event: object)
    => voidevent: The event source of the callback.openboolControl select
    open state. You can only use it when the native prop is false
    (default).renderValuefuncRender the selected value. You can only use it when
    the native prop is false (default).Signature:function(value: any) =>
    ReactNodevalue: The value provided to the
    component.SelectDisplayPropsobjectProps applied to the clickable div
    element.valueanyThe input value. Providing an empty string will select no
    options. This prop is required when the native prop is false (default). Set
    to an empty string '' if you don't want any of the available
    options to be selected.If the value is an object it must have reference
    equality with the option in order to be selected. If the value is not an
    object, the string representation must match with the string representation
    of the option in order to be
    selected.variant'filled'|¬†'outlined'|¬†'standard''standard'The
    variant to use.The ref is forwarded to the root element.Any other props
    supplied will be provided to the root element (
  </text>
  <link>Input</link>
  <text>).</text>
  <heading level="2">CSS</heading>
  <text>
    Rule nameGlobal classDescriptionroot.MuiSelect-rootStyles applied to the
    select component root class.select.MuiSelect-selectStyles applied to the
    select component select class.filled.MuiSelect-filledStyles applied to the
    select component if
    variant="filled".outlined.MuiSelect-outlinedStyles applied to the
    select component if
    variant="outlined".selectMenu.MuiSelect-selectMenuStyles applied
    to the select component selectMenu class.disabled.Mui-disabledPseudo-class
    applied to the select component disabled class.icon.MuiSelect-iconStyles
    applied to the icon component.iconOpen.MuiSelect-iconOpenStyles applied to
    the icon component if the popup is
    open.iconFilled.MuiSelect-iconFilledStyles applied to the icon component if
    variant="filled".iconOutlined.MuiSelect-iconOutlinedStyles applied
    to the icon component if variant="outlined".You can override the
    style of the component thanks to one of these customization points:
  </text>
  <statictext>‚Ä¢</statictext>
  <text>With a rule name of the</text>
  <link>classes object prop</link>
  <text>.</text>
  <statictext>‚Ä¢</statictext>
  <text>With a</text>
  <link>global class name</link>
  <text>.</text>
  <statictext>‚Ä¢</statictext>
  <text>With a theme and an</text>
  <link>overrides property</link>
  <text>.If that's not sufficient, you can check the</text>
  <link>implementation of the component</link>
  <text>for more detail.</text>
  <heading level="2">Inheritance</heading>
  <text>The props of the</text>
  <link>Input</link>
  <text>
    component are also available. You can take advantage of this behavior to
  </text>
  <link>target nested components</link>
  <text>.</text>
  <heading level="2">Demos</heading>
  <statictext>‚Ä¢</statictext>
  <link>Selects</link>
  <link>Scoped Css Baseline</link>
  <link>Skeleton</link>
</landmark>;

`;

exports[`firefox /components/breadcrumbs 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Breadcrumbs</heading>
  <text>
    Breadcrumbs allow users to make selections from a range of values.
  </text>
  <heading level="2">Simple breadcrumbs</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <link>Material-UI</link>
  <link>Core</link>
  <text>Breadcrumb</text>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text-container>
    <text>
      <Breadcrumbsaria-label="breadcrumb"><Linkcolor="inherit"href="/"onClick={handleClick}>
      Material-UI</Link><Linkcolor="inherit"href="/getting-started/installation/"onClick={handleClick}>
      Core
      </Link><Typographycolor="textPrimary">Breadcrumb</Typography></Breadcrumbs>
    </text>
  </text-container>
  <heading level="2">Active last breadcrumb</heading>
  <text>Keep the last breadcrumb interactive.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <link>Material-UI</link>
  <link>Core</link>
  <link>Breadcrumb</link>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text-container>
    <text>
      <Breadcrumbsaria-label="breadcrumb"><Linkcolor="inherit"href="/"onClick={handleClick}>
      Material-UI</Link><Linkcolor="inherit"href="/getting-started/installation/"onClick={handleClick}>
      Core
      </Link><Linkcolor="textPrimary"href="/components/breadcrumbs/"onClick={handleClick}aria-current="page">
      Breadcrumb </Link></Breadcrumbs>
    </text>
  </text-container>
  <heading level="2">Custom separator</heading>
  <text>
    In the following examples, we are using two string separators, and an SVG
    icon.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <link>Material-UI</link>
  <link>Core</link>
  <text>Breadcrumb</text>
  <link>Material-UI</link>
  <link>Core</link>
  <text>Breadcrumb</text>
  <link>Material-UI</link>
  <link>Core</link>
  <text>Breadcrumb</text>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Breadcrumbs with icons</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <link>Material-UI</link>
  <link>Core</link>
  <text>Breadcrumb</text>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Collapsed breadcrumbs</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <link>Home</link>
  <button>Show path</button>
  <text>Belts</text>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <BreadcrumbsmaxItems={2}aria-label="breadcrumb"><Linkcolor="inherit"href="#"onClick={handleClick}>
    Home
    </Link><Linkcolor="inherit"href="#"onClick={handleClick}>
    Catalog
    </Link><Linkcolor="inherit"href="#"onClick={handleClick}>
    Accessories
    </Link><Linkcolor="inherit"href="#"onClick={handleClick}>
    New Collection
    </Link><Typographycolor="textPrimary">Belts</Typography></Breadcrumbs>
  </text>
  <heading level="2">Customized breadcrumbs</heading>
  <text>
    Here is an example of customizing the component. You can learn more about
    this in the
  </text>
  <link>overrides documentation page</link>
  <text>.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>Home</button>
  <button>Catalog</button>
  <button>Accessories</button>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Breadcrumbsaria-label="breadcrumb"><StyledBreadcrumbcomponent="a"href="#"label="Home"icon={<HomeIconfontSize="small"/>}onClick={handleClick}/><StyledBreadcrumbcomponent="a"href="#"label="Catalog"onClick={handleClick}/><StyledBreadcrumblabel="Accessories"deleteIcon={<ExpandMoreIcon/>}onClick={handleClick}onDelete={handleClick}/></Breadcrumbs>
  </text>
  <heading level="2">Integration with react-router</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <link>Home</link>
  <text>Inbox</text>
  <button>Inbox</button>
  <button>Important</button>
  <button>Trash</button>
  <button>Spam</button>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Accessibility</heading>
  <text>(WAI-ARIA:</text>
  <link>https://www.w3.org/TR/wai-aria-practices/#breadcrumb</link>
  <text>
    )Be sure to add a aria-label description on the Breadcrumbs component.The
    accessibility of this component relies on:
  </text>
  <statictext>‚Ä¢</statictext>
  <text>
    The set of links is structured using an ordered list (<ol> element).
  </text>
  <statictext>‚Ä¢</statictext>
  <text>
    To prevent screen reader announcement of the visual separators between
    links, they are hidden with aria-hidden.
  </text>
  <statictext>‚Ä¢</statictext>
  <text>
    A nav element labeled with aria-label identifies the structure as a
    breadcrumb trail and makes it a navigation landmark so that it is easy to
    locate.
  </text>
  <heading level="2">API</heading>
  <statictext>‚Ä¢</statictext>
  <link><Breadcrumbs /></link>
  <statictext>‚Ä¢</statictext>
  <link><Link /></link>
  <statictext>‚Ä¢</statictext>
  <link><Typography /></link>
  <link>Bottom Navigation</link>
  <link>Drawer</link>
</landmark>;

`;

exports[`firefox /components/button-group/ 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Button group</heading>
  <text>The ButtonGroup component can be used to group related buttons.</text>
  <heading level="2">Basic button group</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>ONE</button>
  <button>TWO</button>
  <button>THREE</button>
  <button>ONE</button>
  <button>TWO</button>
  <button>THREE</button>
  <button>ONE</button>
  <button>TWO</button>
  <button>THREE</button>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text-container>
    <text>
      <ButtonGroupcolor="primary"aria-label="outlined primary
      button
      group"><Button>One</Button><Button>Two</Button><Button>Three</Button></ButtonGroup><ButtonGroupvariant="contained"color="primary"aria-label="contained
      primary button
      group"><Button>One</Button><Button>Two</Button><Button>Three</Button></ButtonGroup><ButtonGroupvariant="text"color="primary"aria-label="text
      primary button
      group"><Button>One</Button><Button>Two</Button><Button>Three</Button></ButtonGroup>
    </text>
  </text-container>
  <heading level="2">Sizes and colors</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>ONE</button>
  <button>TWO</button>
  <button>THREE</button>
  <button>ONE</button>
  <button>TWO</button>
  <button>THREE</button>
  <button>ONE</button>
  <button>TWO</button>
  <button>THREE</button>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text-container>
    <text>
      <ButtonGroupsize="small"aria-label="small outlined
      button
      group"><Button>One</Button><Button>Two</Button><Button>Three</Button></ButtonGroup><ButtonGroupcolor="secondary"aria-label="outlined
      secondary button
      group"><Button>One</Button><Button>Two</Button><Button>Three</Button></ButtonGroup><ButtonGroupsize="large"color="primary"aria-label="large
      outlined primary button
      group"><Button>One</Button><Button>Two</Button><Button>Three</Button></ButtonGroup>
    </text>
  </text-container>
  <heading level="2">Vertical group</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>ONE</button>
  <button>TWO</button>
  <button>THREE</button>
  <button>ONE</button>
  <button>TWO</button>
  <button>THREE</button>
  <button>ONE</button>
  <button>TWO</button>
  <button>THREE</button>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Split button</heading>
  <text>
    ButtonGroup can also be used to create a split button. The dropdown can
    change the button action (as in this example), or be used to immediately
    trigger a related action.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>SQUASH AND MERGE</button>
  <button haspopup="true">select merge strategy</button>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Disabled elevation</heading>
  <text>You can remove the elevation with the disableElevation prop.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>ONE</button>
  <button>TWO</button>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <ButtonGroupdisableElevationvariant="contained"color="primary"><Button>One</Button><Button>Two</Button></ButtonGroup>
  </text>
  <heading level="2">API</heading>
  <statictext>‚Ä¢</statictext>
  <link><Button /></link>
  <statictext>‚Ä¢</statictext>
  <link><ButtonGroup /></link>
  <link>Button</link>
  <link>Checkbox</link>
</landmark>;

`;

exports[`firefox /components/buttons/ 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Button</heading>
  <text>
    Buttons allow users to take actions, and make choices, with a single tap.
  </text>
  <link>Buttons</link>
  <text>
    communicate actions that users can take. They are typically placed
    throughout your UI, in places like:
  </text>
  <statictext>‚Ä¢</statictext>
  <text>Dialogs</text>
  <statictext>‚Ä¢</statictext>
  <text>Modal windows</text>
  <statictext>‚Ä¢</statictext>
  <text>Forms</text>
  <statictext>‚Ä¢</statictext>
  <text>Cards</text>
  <statictext>‚Ä¢</statictext>
  <text>Toolbars</text>
  <heading level="2">Contained Buttons</heading>
  <link>Contained buttons</link>
  <text>
    are high-emphasis, distinguished by their use of elevation and fill. They
    contain actions that are primary to your app.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>DEFAULT</button>
  <button>PRIMARY</button>
  <button>SECONDARY</button>
  <button disabled="true">DISABLED</button>
  <link>LINK</link>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Buttonvariant="contained">Default</Button><Buttonvariant="contained"color="primary">
    Primary
    </Button><Buttonvariant="contained"color="secondary">
    Secondary </Button><Buttonvariant="contained"disabled>
    Disabled
    </Button><Buttonvariant="contained"color="primary"href="#contained-buttons">
    Link </Button>You can remove the elevation with the disableElevation
    prop.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>DISABLE ELEVATION</button>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Buttonvariant="contained"color="primary"disableElevation>
    Disable elevation </Button>
  </text>
  <heading level="2">Text Buttons</heading>
  <link>Text buttons</link>
  <text>
    are typically used for less-pronounced actions, including those located:
  </text>
  <statictext>‚Ä¢</statictext>
  <text>In dialogs</text>
  <statictext>‚Ä¢</statictext>
  <text>
    In cardsIn cards, text buttons help maintain an emphasis on card content.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>DEFAULT</button>
  <button>PRIMARY</button>
  <button>SECONDARY</button>
  <button disabled="true">DISABLED</button>
  <link>LINK</link>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Button>Default</Button><Buttoncolor="primary">Primary</Button><Buttoncolor="secondary">Secondary</Button><Buttondisabled>Disabled</Button><Buttonhref="#text-buttons"color="primary">
    Link </Button>
  </text>
  <heading level="2">Outlined Buttons</heading>
  <link>Outlined buttons</link>
  <text>
    are medium-emphasis buttons. They contain actions that are important, but
    aren‚Äôt the primary action in an app.Outlined buttons are also a lower
    emphasis alternative to contained buttons, or a higher emphasis alternative
    to text buttons.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>DEFAULT</button>
  <button>PRIMARY</button>
  <button>SECONDARY</button>
  <button disabled="true">DISABLED</button>
  <link>LINK</link>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Buttonvariant="outlined">Default</Button><Buttonvariant="outlined"color="primary">
    Primary
    </Button><Buttonvariant="outlined"color="secondary">
    Secondary </Button><Buttonvariant="outlined"disabled>
    Disabled
    </Button><Buttonvariant="outlined"color="primary"href="#outlined-buttons">
    Link </Button>
  </text>
  <heading level="2">Handling clicks</heading>
  <text>
    All components accept an onClick handler that is applied to the root DOM
    element.<ButtononClick={()=>{alert('clicked')}}>Click
    me</Button>Note that the documentation
  </text>
  <link>avoids</link>
  <text>
    mentioning native props (there are a lot) in the API section of the
    components.
  </text>
  <heading level="2">Upload button</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>UPLOAD</button>
  <button>upload picture</button>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Sizes</heading>
  <text>Fancy larger or smaller buttons? Use the size property.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>SMALL</button>
  <button>MEDIUM</button>
  <button>LARGE</button>
  <button>SMALL</button>
  <button>MEDIUM</button>
  <button>LARGE</button>
  <button>SMALL</button>
  <button>MEDIUM</button>
  <button>LARGE</button>
  <button>delete</button>
  <button>delete</button>
  <button>delete</button>
  <button>delete</button>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Buttons with icons and label</heading>
  <text>
    Sometimes you might want to have icons for certain button to enhance the UX
    of the application as we recognize logos more easily than plain text. For
    example, if you have a delete button you can label it with a dustbin icon.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>DELETE</button>
  <button>SEND</button>
  <button>UPLOAD</button>
  <button disabled="true">TALK</button>
  <button>SAVE</button>
  <button>SAVE</button>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Icon Buttons</heading>
  <text>
    Icon buttons are commonly found in app bars and toolbars.Icons are also
    appropriate for toggle buttons that allow a single choice to be selected or
    deselected, such as adding or removing a star to an item.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>delete</button>
  <button disabled="true">delete</button>
  <button>add an alarm</button>
  <button>add to shopping cart</button>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <IconButtonaria-label="delete"><DeleteIcon/></IconButton><IconButtonaria-label="delete"disabledcolor="primary"><DeleteIcon/></IconButton><IconButtoncolor="secondary"aria-label="add
    an
    alarm"><AlarmIcon/></IconButton><IconButtoncolor="primary"aria-label="add
    to shopping cart"><AddShoppingCartIcon/></IconButton>
  </text>
  <heading level="2">Customized buttons</heading>
  <text>
    Here are some examples of customizing the component. You can learn more
    about this in the
  </text>
  <link>overrides documentation page</link>
  <text>.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>CUSTOM CSS</button>
  <button>THEME PROVIDER</button>
  <button>Bootstrap</button>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>üé® If you are looking for inspiration, you can check</text>
  <link>MUI Treasury's customization examples</link>
  <text>.</text>
  <heading level="2">Complex Buttons</heading>
  <text>
    The Text Buttons, Contained Buttons, Floating Action Buttons and Icon
    Buttons are built on top of the same component: the ButtonBase. You can take
    advantage of this lower level component to build custom interactions.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>Breakfast</button>
  <button>Burgers</button>
  <button>Camera</button>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Third-party routing library</heading>
  <text>
    One common use case is to use the button to trigger navigation to a new
    page. The ButtonBase component provides a property to handle this use case:
    component. However for certain focus polyfills ButtonBase requires the DOM
    node of the provided component. This is achieved by attaching a ref to the
    component and expecting that the component forwards this ref to the
    underlying DOM node. Given that many of the interactive components rely on
    ButtonBase, you should be able to take advantage of it everywhere.Here is an
  </text>
  <link>integration example with react-router</link>
  <text>.</text>
  <heading level="2">Limitations</heading>
  <heading level="3">Cursor not-allowed</heading>
  <text>
    The ButtonBase component sets pointer-events: none; on disabled buttons,
    which prevents the appearance of a disabled cursor.If you wish to use
    not-allowed, you have two options:
  </text>
  <statictext>1.</statictext>
  <text>
    CSS only. You can remove the pointer events style on the disabled state of
    the <button> element:.MuiButtonBase-root:disabled{cursor:
    not-allowed;pointer-events: auto;}However:
  </text>
  <statictext>‚ó¶</statictext>
  <text>
    You should add pointer-events: none; back when you need to display
  </text>
  <link>tooltips on disabled elements</link>
  <text>.</text>
  <statictext>‚ó¶</statictext>
  <text>
    The cursor won't change if you render something other than a button
    element, for instance, a link <a> element.
  </text>
  <statictext>2.</statictext>
  <text>
    DOM change. You can wrap the button:<spanstyle={{
    cursor:'not-allowed'}}><Buttoncomponent={Link}disabled>
    disabled </Button></span>This has the advantage of supporting
    any element, for instance, a link <a> element.
  </text>
  <heading level="2">API</heading>
  <statictext>‚Ä¢</statictext>
  <link><Button /></link>
  <statictext>‚Ä¢</statictext>
  <link><ButtonBase /></link>
  <statictext>‚Ä¢</statictext>
  <link><IconButton /></link>
  <link>Hidden</link>
  <link>Button Group</link>
</landmark>;

`;

exports[`firefox /components/checkboxes/ 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Checkbox</heading>
  <text>Checkboxes allow the user to select one or more items from a set.</text>
  <link>Checkboxes</link>
  <text>
    can be used to turn an option on or off.If you have multiple options
    appearing in a list, you can preserve space by using checkboxes instead of
    on/off switches. If you have a single option, avoid using a checkbox and use
    an on/off switch instead.
  </text>
  <heading level="2">Basic checkboxes</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">primary checkbox</checkbox>
  <checkbox checked="true">secondary checkbox</checkbox>
  <checkbox>uncontrolled-checkbox</checkbox>
  <text-container disabled="true">
    <checkbox disabled="true">disabled checkbox</checkbox>
  </text-container>
  <text-container disabled="true">
    <checkbox disabled="true" checked="true">
      disabled checked checkbox
    </checkbox>
  </text-container>
  <checkbox checked="true">indeterminate checkbox</checkbox>
  <checkbox checked="true">checkbox with default color</checkbox>
  <checkbox checked="true">checkbox with small size</checkbox>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Checkbox with FormControlLabel</heading>
  <text>
    Checkbox can be provided with a label thanks to the FormControlLabel
    component.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">Secondary</checkbox>
  <text>Secondary</text>
  <checkbox checked="true">Primary</checkbox>
  <text>Primary</text>
  <checkbox>Uncontrolled</checkbox>
  <text>Uncontrolled</text>
  <text-container disabled="true">
    <checkbox disabled="true">Disabled</checkbox>
  </text-container>
  <text>Disabled</text>
  <text-container disabled="true">
    <checkbox disabled="true" checked="true">
      Disabled
    </checkbox>
  </text-container>
  <text>Disabled</text>
  <checkbox checked="true">Indeterminate</checkbox>
  <text>Indeterminate</text>
  <checkbox checked="true">Custom color</checkbox>
  <text>Custom color</text>
  <checkbox>Custom icon</checkbox>
  <text>Custom icon</text>
  <checkbox>Custom size</checkbox>
  <text>Custom size</text>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Checkboxes with FormGroup</heading>
  <text>
    FormGroup is a helpful wrapper used to group selection controls components
    that provides an easier API.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Assign responsibility</text>
  <checkbox checked="true">Gilad Gray</checkbox>
  <text>Gilad Gray</text>
  <checkbox>Jason Killian</checkbox>
  <text>Jason Killian</text>
  <checkbox>Antoine Llorca</checkbox>
  <text>Antoine LlorcaBe carefulPick two</text>
  <checkbox checked="true">Gilad Gray</checkbox>
  <text>Gilad Gray</text>
  <checkbox>Jason Killian</checkbox>
  <text>Jason Killian</text>
  <checkbox>Antoine Llorca</checkbox>
  <text>Antoine LlorcaYou can display an error</text>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Label placement</heading>
  <text>You can change the placement of the label:</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Label Placement</text>
  <checkbox>Top</checkbox>
  <text>Top</text>
  <checkbox>Start</checkbox>
  <text>Start</text>
  <checkbox>Bottom</checkbox>
  <text>Bottom</text>
  <checkbox>End</checkbox>
  <text>End</text>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Customized checkbox</heading>
  <text>
    Here is an example of customizing the component. You can learn more about
    this in the
  </text>
  <link>overrides documentation page</link>
  <text>.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox>decorative checkbox</checkbox>
  <checkbox checked="true">decorative checkbox</checkbox>
  <text-container disabled="true">
    <checkbox disabled="true">decorative checkbox</checkbox>
  </text-container>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>üé® If you are looking for inspiration, you can check</text>
  <link>MUI Treasury's customization examples</link>
  <text>.</text>
  <heading level="2">When to use</heading>
  <statictext>‚Ä¢</statictext>
  <link>Checkboxes vs. Radio Buttons</link>
  <statictext>‚Ä¢</statictext>
  <link>Checkboxes vs. Switches</link>
  <heading level="2">Accessibility</heading>
  <text>(WAI-ARIA:</text>
  <link>https://www.w3.org/TR/wai-aria-practices/#checkbox</link>
  <text>)</text>
  <statictext>‚Ä¢</statictext>
  <text>
    All form controls should have labels, and this includes radio buttons,
    checkboxes, and switches. In most cases, this is done by using the
    <label> element (
  </text>
  <link>FormControlLabel</link>
  <text>).</text>
  <statictext>‚Ä¢</statictext>
  <text>
    When a label can't be used, it's necessary to add an attribute
    directly to the input component. In this case, you can apply the additional
    attribute (e.g. aria-label, aria-labelledby, title) via the inputProps
    property.<Checkboxvalue="checkedA"inputProps={{'aria-label':'Checkbox
    A'}}/>
  </text>
  <heading level="2">API</heading>
  <statictext>‚Ä¢</statictext>
  <link><Checkbox /></link>
  <statictext>‚Ä¢</statictext>
  <link><FormControl /></link>
  <statictext>‚Ä¢</statictext>
  <link><FormControlLabel /></link>
  <statictext>‚Ä¢</statictext>
  <link><FormGroup /></link>
  <statictext>‚Ä¢</statictext>
  <link><FormLabel /></link>
  <link>Button Group</link>
  <link>Floating Action Button</link>
</landmark>;

`;

exports[`firefox /components/dialogs/ 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Dialog</heading>
  <text>
    Dialogs inform users about a task and can contain critical information,
    require decisions, or involve multiple tasks.A
  </text>
  <link>Dialog</link>
  <text>is a type of</text>
  <link>modal</link>
  <text>
    window that appears in front of app content to provide critical information
    or ask for a decision. Dialogs disable all app functionality when they
    appear, and remain on screen until confirmed, dismissed, or a required
    action has been taken.Dialogs are purposefully interruptive, so they should
    be used sparingly.
  </text>
  <heading level="2">Simple Dialogs</heading>
  <text>
    Simple dialogs can provide additional details or actions about a list item.
    For example, they can display avatars, icons, clarifying subtext, or
    orthogonal actions (such as adding an account).Touch mechanics:
  </text>
  <statictext>‚Ä¢</statictext>
  <text>
    Choosing an option immediately commits the option and closes the menu
  </text>
  <statictext>‚Ä¢</statictext>
  <text>
    Touching outside of the dialog, or pressing Back, cancels the action and
    closes the dialog
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <heading level="6">Selected: user02@gmail.com</heading>
  <button>OPEN SIMPLE DIALOG</button>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Typographyvariant="subtitle1">Selected:{selectedValue}</Typography><br/><Buttonvariant="outlined"color="primary"onClick={handleClickOpen}>
    Open simple dialog
    </Button><SimpleDialogselectedValue={selectedValue}open={open}onClose={handleClose}/>
  </text>
  <heading level="2">Alerts</heading>
  <text>
    Alerts are urgent interruptions, requiring acknowledgement, that inform the
    user about a situation.Most alerts don't need titles. They summarize a
    decision in a sentence or two by either:
  </text>
  <statictext>‚Ä¢</statictext>
  <text>Asking a question (e.g. "Delete this conversation?")</text>
  <statictext>‚Ä¢</statictext>
  <text>
    Making a statement related to the action buttonsUse title bar alerts only
    for high-risk situations, such as the potential loss of connectivity. Users
    should be able to understand the choices based on the title and button text
    alone.If a title is required:
  </text>
  <statictext>‚Ä¢</statictext>
  <text>
    Use a clear question or statement with an explanation in the content area,
    such as "Erase USB storage?".
  </text>
  <statictext>‚Ä¢</statictext>
  <text>
    Avoid apologies, ambiguity, or questions, such as ‚ÄúWarning!‚Äù or ‚ÄúAre you
    sure?‚Äù
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>OPEN ALERT DIALOG</button>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Transitions</heading>
  <text>
    You can also swap out the transition, the next example uses Slide.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>SLIDE IN ALERT DIALOG</button>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Form dialogs</heading>
  <text>
    Form dialogs allow users to fill out form fields within a dialog. For
    example, if your site prompts for potential subscribers to fill in their
    email address, they can fill out the email field and touch
    'Submit'.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>OPEN FORM DIALOG</button>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Customized dialogs</heading>
  <text>
    Here is an example of customizing the component. You can learn more about
    this in the
  </text>
  <link>overrides documentation page</link>
  <text>.The dialog has a close button added to aide usability.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>OPEN DIALOG</button>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Full-screen dialogs</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>OPEN FULL-SCREEN DIALOG</button>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Optional sizes</heading>
  <text>
    You can set a dialog maximum width by using the maxWidth enumerable in
    combination with the fullWidth boolean. When the fullWidth property is true,
    the dialog will adapt based on the maxWidth value.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>OPEN MAX-WIDTH DIALOG</button>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Responsive full-screen</heading>
  <text>You may make a dialog responsively full screen using</text>
  <link>useMediaQuery</link>
  <text>
    .import useMediaQuery
    from'@material-ui/core/useMediaQuery';functionMyComponent(){const
    theme =useTheme();const fullScreen
    =useMediaQuery(theme.breakpoints.down('sm'));return<DialogfullScreen={fullScreen}/>}
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>OPEN RESPONSIVE DIALOG</button>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Confirmation dialogs</heading>
  <text>
    Confirmation dialogs require users to explicitly confirm their choice before
    an option is committed. For example, users can listen to multiple ringtones
    but only make a final selection upon touching ‚ÄúOK‚Äù.Touching ‚ÄúCancel‚Äù in a
    confirmation dialog, or pressing Back, cancels the action, discards any
    changes, and closes the dialog.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <listitem disabled="true">Interruptions</listitem>
  <listitem haspopup="true">phone ringtone</listitem>
  <listitem disabled="true">Default notification ringtone Tethys</listitem>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Draggable dialog</heading>
  <text>You can create a draggable dialog by using</text>
  <link>react-draggable</link>
  <text>
    . To do so, you can pass the the imported Draggable component as the
    PaperComponent of the Dialog component. This will make the entire dialog
    draggable.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>OPEN FORM DIALOG</button>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Scrolling long content</heading>
  <text>
    When dialogs become too long for the user‚Äôs viewport or device, they scroll.
  </text>
  <statictext>‚Ä¢</statictext>
  <text>
    scroll=paper the content of the dialog scrolls within the paper element.
  </text>
  <statictext>‚Ä¢</statictext>
  <text>
    scroll=body the content of the dialog scrolls within the body element.Try
    the demo below to see what we mean:
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>SCROLL=PAPER</button>
  <button>SCROLL=BODY</button>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Limitations</heading>
  <text>Follow the</text>
  <link>Modal limitations section</link>
  <text>.</text>
  <heading level="2">Accessibility</heading>
  <text>Follow the</text>
  <link>Modal accessibility section</link>
  <text>.</text>
  <heading level="2">API</heading>
  <statictext>‚Ä¢</statictext>
  <link><Dialog /></link>
  <statictext>‚Ä¢</statictext>
  <link><DialogActions /></link>
  <statictext>‚Ä¢</statictext>
  <link><DialogContent /></link>
  <statictext>‚Ä¢</statictext>
  <link><DialogContentText /></link>
  <statictext>‚Ä¢</statictext>
  <link><DialogTitle /></link>
  <statictext>‚Ä¢</statictext>
  <link><Slide /></link>
  <link>Progress</link>
  <link>Snackbar</link>
</landmark>;

`;

exports[`firefox /components/pagination/ 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Pagination</heading>
  <text>
    The Pagination component enables the user to select a specific page from a
    range of pages.
  </text>
  <heading level="2">Basic pagination</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button disabled="true">Go to previous page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to next page</button>
  <button disabled="true">Go to previous page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to next page</button>
  <button disabled="true">Go to previous page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to next page</button>
  <button disabled="true">Go to previous page</button>
  <button disabled="true">page 1</button>
  <button disabled="true">Go to page 2</button>
  <button disabled="true">Go to page 3</button>
  <button disabled="true">Go to page 4</button>
  <button disabled="true">Go to page 5</button>
  <text>‚Ä¶</text>
  <button disabled="true">Go to page 10</button>
  <button disabled="true">Go to next page</button>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Paginationcount={10}/><Paginationcount={10}color="primary"/><Paginationcount={10}color="secondary"/><Paginationcount={10}disabled/>
  </text>
  <heading level="2">Outlined pagination</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button disabled="true">Go to previous page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to next page</button>
  <button disabled="true">Go to previous page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to next page</button>
  <button disabled="true">Go to previous page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to next page</button>
  <button disabled="true">Go to previous page</button>
  <button disabled="true">page 1</button>
  <button disabled="true">Go to page 2</button>
  <button disabled="true">Go to page 3</button>
  <button disabled="true">Go to page 4</button>
  <button disabled="true">Go to page 5</button>
  <text>‚Ä¶</text>
  <button disabled="true">Go to page 10</button>
  <button disabled="true">Go to next page</button>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Paginationcount={10}variant="outlined"/><Paginationcount={10}variant="outlined"color="primary"/><Paginationcount={10}variant="outlined"color="secondary"/><Paginationcount={10}variant="outlined"disabled/>
  </text>
  <heading level="2">Rounded pagination</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button disabled="true">Go to previous page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to next page</button>
  <button disabled="true">Go to previous page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to next page</button>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Paginationcount={10}shape="rounded"/><Paginationcount={10}variant="outlined"shape="rounded"/>
  </text>
  <heading level="2">Pagination size</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button disabled="true">Go to previous page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to next page</button>
  <button disabled="true">Go to previous page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to next page</button>
  <button disabled="true">Go to previous page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to next page</button>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Paginationcount={10}size="small"/><Paginationcount={10}/><Paginationcount={10}size="large"/>
  </text>
  <heading level="2">Buttons</heading>
  <text>
    You can optionally enable first-page and last-page buttons, or disable the
    previous-page and next-page buttons.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button disabled="true">Go to first page</button>
  <button disabled="true">Go to previous page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to next page</button>
  <button>Go to last page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Paginationcount={10}showFirstButtonshowLastButton/><Paginationcount={10}hidePrevButtonhideNextButton/>
  </text>
  <heading level="2">Pagination ranges</heading>
  <text>
    You can specify how many digits to display either side of current page with
    the siblingRange prop, and adjacent to the start and end page number with
    the boundaryRange prop.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>Go to previous page</button>
  <button>Go to page 1</button>
  <text>‚Ä¶</text>
  <button>page 6</button>
  <text>‚Ä¶</text>
  <button>Go to page 11</button>
  <button>Go to next page</button>
  <button>Go to previous page</button>
  <button>Go to page 1</button>
  <text>‚Ä¶</text>
  <button>Go to page 5</button>
  <button>page 6</button>
  <button>Go to page 7</button>
  <text>‚Ä¶</text>
  <button>Go to page 11</button>
  <button>Go to next page</button>
  <button>Go to previous page</button>
  <button>Go to page 1</button>
  <button>Go to page 2</button>
  <text>‚Ä¶</text>
  <button>page 6</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to page 11</button>
  <button>Go to next page</button>
  <button>Go to previous page</button>
  <button>Go to page 1</button>
  <button>Go to page 2</button>
  <text>‚Ä¶</text>
  <button>Go to page 5</button>
  <button>page 6</button>
  <button>Go to page 7</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to page 11</button>
  <button>Go to next page</button>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Paginationcount={11}defaultPage={6}siblingCount={0}/><Paginationcount={11}defaultPage={6}/>{/*
    Default ranges
    */}<Paginationcount={11}defaultPage={6}siblingCount={0}boundaryCount={2}/><Paginationcount={11}defaultPage={6}boundaryCount={2}/>
  </text>
  <heading level="2">Controlled pagination</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Page: 1</text>
  <button disabled="true">Go to previous page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to next page</button>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Typography>Page:{page}</Typography><Paginationcount={10}page={page}onChange={handleChange}/>
  </text>
  <heading level="2">Router integration</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button disabled="true">Go to previous page</button>
  <button>page 1</button>
  <button>Go to page 2</button>
  <button>Go to page 3</button>
  <button>Go to page 4</button>
  <button>Go to page 5</button>
  <text>‚Ä¶</text>
  <button>Go to page 10</button>
  <button>Go to next page</button>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">usePagination</heading>
  <text>
    For advanced customization use cases, we expose a usePagination() hook. It
    accepts almost the same options as the Pagination component minus all the
    props related to the rendering of JSX. The Pagination component uses this
    hook internally.import{ usePagination
    }from'@material-ui/lab/Pagination';
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button disabled="true">previous</button>
  <button>1</button>
  <button>2</button>
  <button>3</button>
  <button>4</button>
  <button>5</button>
  <text>‚Ä¶</text>
  <button>10</button>
  <button>next</button>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Table pagination</heading>
  <text>
    The Pagination component was designed to paginate a list of arbitrary items
    when infinite loading isn't used. It's preferred in contexts where
    SEO is important, for instance, a blog.For the pagination of a large set of
    tabular data, you should use the TablePagination component.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Rows per page:</text>
  <button haspopup="true">Rows per page: 10</button>
  <text>21-30 of 100</text>
  <button>Previous page</button>
  <button>Next page</button>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <TablePaginationcomponent="div"count={100}page={page}onChangePage={handleChangePage}rowsPerPage={rowsPerPage}onChangeRowsPerPage={handleChangeRowsPerPage}/>You
    can learn more about this use case in the
  </text>
  <link>table section</link>
  <text>of the documentation.</text>
  <heading level="2">Accessibility</heading>
  <heading level="3">ARIA</heading>
  <text>
    The root node has a role of "navigation" and aria-label
    "pagination navigation" by default. The page items have an
    aria-label that identifies the purpose of the item ("go to first
    page", "go to previous page", "go to page 1" etc.).
    You can override these using the getItemAriaLabel prop.
  </text>
  <heading level="3">Keyboard</heading>
  <text>
    The pagination items are in tab order, with a tabindex of "0".
  </text>
  <heading level="2">API</heading>
  <statictext>‚Ä¢</statictext>
  <link><Pagination /></link>
  <statictext>‚Ä¢</statictext>
  <link><PaginationItem /></link>
  <link>Autocomplete</link>
  <link>Rating</link>
</landmark>;

`;

exports[`firefox /components/pickers 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Date / Time pickers</heading>
  <text>
    Date pickers and Time pickers provide a simple way to select a single value
    from a pre-determined set.
  </text>
  <statictext>‚Ä¢</statictext>
  <text>
    On mobile, pickers are best suited for display in confirmation dialog.
  </text>
  <statictext>‚Ä¢</statictext>
  <text>
    For inline display, such as on a form, consider using compact controls such
    as segmented dropdown buttons.
  </text>
  <heading level="2">@material-ui/pickers</heading>
  <img>stars</img>
  <img>npm downloads</img>
  <link>@material-ui/pickers</link>
  <text>provides date picker and time picker controls.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Date picker inline</text>
  <textbox value="08/18/2014">Date picker inline</textbox>
  <button>change date</button>
  <text>Date picker dialog</text>
  <textbox value="08/18/2014">Date picker dialog</textbox>
  <button>change date</button>
  <text>Time picker</text>
  <textbox value="09:11 PM">Time picker</textbox>
  <button>change time</button>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Native pickers</heading>
  <text>‚ö†Ô∏è Native input controls support by browsers</text>
  <link>isn't perfect</link>
  <text>. Have a look at</text>
  <link>@material-ui/pickers</link>
  <text>for a richer solution.</text>
  <heading level="3">Datepickers</heading>
  <text>A native datepicker example with type="date".</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Birthday</text>
  <Date>
    Birthday
    <spinbutton value="05" valuetext="05">
      Month
    </spinbutton>
    <text>/</text>
    <spinbutton value="24" valuetext="24">
      Day
    </spinbutton>
    <text>/</text>
    <spinbutton value="2017" valuetext="2017">
      Year
    </spinbutton>
    <button>Clear</button>
  </Date>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <formclassName={classes.container}noValidate><TextFieldid="date"label="Birthday"type="date"defaultValue="2017-05-24"className={classes.textField}InputLabelProps={{
    shrink:true,}}/></form>
  </text>
  <heading level="3">Date & Time pickers</heading>
  <text>
    A native date & time picker example with
    type="datetime-local".
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Next appointment</text>
  <textbox value="2017-05-24T10:30">Next appointment</textbox>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <formclassName={classes.container}noValidate><TextFieldid="datetime-local"label="Next
    appointment"type="datetime-local"defaultValue="2017-05-24T10:30"className={classes.textField}InputLabelProps={{
    shrink:true,}}/></form>
  </text>
  <heading level="3">Time pickers</heading>
  <text>A native time picker example with type="time".</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Alarm clock</text>
  <group>
    Alarm clock
    <spinbutton value="07" valuetext="07">
      Hours
    </spinbutton>
    <text>:</text>
    <spinbutton value="30" valuetext="30">
      Minutes
    </spinbutton>
    <textbox value="AM" autocomplete="inline">
      AM/PM
    </textbox>
    <button>Clear</button>
  </group>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <formclassName={classes.container}noValidate><TextFieldid="time"label="Alarm
    clock"type="time"defaultValue="07:30"className={classes.textField}InputLabelProps={{
    shrink:true,}}inputProps={{ step:300,// 5
    min}}/></form>
  </text>
  <heading level="2">API</heading>
  <statictext>‚Ä¢</statictext>
  <link><TextField /></link>
  <link>Floating Action Button</link>
  <link>Radio</link>
</landmark>;

`;

exports[`firefox /components/radio-buttons 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Radio</heading>
  <text>Radio buttons allow the user to select one option from a set.Use</text>
  <link>radio buttons</link>
  <text>
    when the user needs to see all available options. If available options can
    be collapsed, consider using a dropdown menu because it uses less
    space.Radio buttons should have the most commonly used option selected by
    default.
  </text>
  <heading level="2">RadioGroup</heading>
  <text>
    RadioGroup is a helpful wrapper used to group Radio components that provides
    an easier API, and proper keyboard accessibility to the group.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Gender</text>
  <radio checked="true">Female</radio>
  <text>Female</text>
  <radio>Male</radio>
  <text>Male</text>
  <radio>Other</radio>
  <text>Other</text>
  <text-container disabled="true">
    <radio disabled="true">(Disabled option)</radio>
  </text-container>
  <text>(Disabled option)</text>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text-container>
    <text>
      <FormControlcomponent="fieldset"><FormLabelcomponent="legend">Gender</FormLabel><RadioGrouparia-label="gender"name="gender1"value={value}onChange={handleChange}><FormControlLabelvalue="female"control={<Radio/>}label="Female"/><FormControlLabelvalue="male"control={<Radio/>}label="Male"/><FormControlLabelvalue="other"control={<Radio/>}label="Other"/><FormControlLabelvalue="disabled"disabledcontrol={<Radio/>}label="(Disabled
      option)"/></RadioGroup></FormControl>
    </text>
  </text-container>
  <text>
    To lay out the buttons horizontally, set the row prop: <RadioGroup row
    />.
  </text>
  <heading level="2">Standalone radio buttons</heading>
  <text>
    Radio can also be used standalone, without the RadioGroup wrapper.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <radio checked="true">A</radio>
  <radio>B</radio>
  <radio>C</radio>
  <radio>D</radio>
  <radio>E</radio>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Label placement</heading>
  <text>
    You can change the placement of the label with the FormControlLabel
    component's labelPlacement prop:
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>labelPlacement</text>
  <radio checked="true">Top</radio>
  <text>Top</text>
  <radio>Start</radio>
  <text>Start</text>
  <radio>Bottom</radio>
  <text>Bottom</text>
  <radio>End</radio>
  <text>End</text>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Show error</heading>
  <text>
    In general, radio buttons should have a value selected by default. If this
    is not the case, you can display an error if no value is selected when the
    form is submitted:
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Pop quiz: Material-UI is...</text>
  <radio>The best!</radio>
  <text>The best!</text>
  <radio>The worst.</radio>
  <text>The worst.Choose wisely</text>
  <button>CHECK ANSWER</button>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text-container>
    <text>
      <formonSubmit={handleSubmit}><FormControlcomponent="fieldset"error={error}className={classes.formControl}><FormLabelcomponent="legend">Pop
      quiz: Material-UI
      is...</FormLabel><RadioGrouparia-label="quiz"name="quiz"value={value}onChange={handleRadioChange}><FormControlLabelvalue="best"control={<Radio/>}label="The
      best!"/><FormControlLabelvalue="worst"control={<Radio/>}label="The
      worst."/></RadioGroup><FormHelperText>{helperText}</FormHelperText><Buttontype="submit"variant="outlined"color="primary"className={classes.button}>
      Check Answer </Button></FormControl></form>
    </text>
  </text-container>
  <heading level="2">Customized radios</heading>
  <text>
    Here is an example of customizing the component. You can learn more about
    this in the
  </text>
  <link>overrides documentation page</link>
  <text>.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Gender</text>
  <radio checked="true">Female</radio>
  <text>Female</text>
  <radio>Male</radio>
  <text>Male</text>
  <radio>Other</radio>
  <text>Other</text>
  <text-container disabled="true">
    <radio disabled="true">(Disabled option)</radio>
  </text-container>
  <text>(Disabled option)</text>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <FormControlcomponent="fieldset"><FormLabelcomponent="legend">Gender</FormLabel><RadioGroupdefaultValue="female"aria-label="gender"name="customized-radios"><FormControlLabelvalue="female"control={<StyledRadio/>}label="Female"/><FormControlLabelvalue="male"control={<StyledRadio/>}label="Male"/><FormControlLabelvalue="other"control={<StyledRadio/>}label="Other"/><FormControlLabelvalue="disabled"disabledcontrol={<StyledRadio/>}label="(Disabled
    option)"/></RadioGroup></FormControl>
  </text>
  <heading level="2">When to use</heading>
  <statictext>‚Ä¢</statictext>
  <link>Checkboxes vs. Radio Buttons</link>
  <heading level="2">Accessibility</heading>
  <text>(WAI-ARIA:</text>
  <link>https://www.w3.org/TR/wai-aria-practices/#radiobutton</link>
  <text>)</text>
  <statictext>‚Ä¢</statictext>
  <text>
    All form controls should have labels, and this includes radio buttons,
    checkboxes, and switches. In most cases, this is done by using the
    <label> element (
  </text>
  <link>FormControlLabel</link>
  <text>).</text>
  <statictext>‚Ä¢</statictext>
  <text>
    When a label can't be used, it's necessary to add an attribute
    directly to the input component. In this case, you can apply the additional
    attribute (e.g. aria-label, aria-labelledby, title) via the inputProps
    property.<RadioButtonvalue="radioA"inputProps={{'aria-label':'Radio
    A'}}/>
  </text>
  <heading level="2">API</heading>
  <statictext>‚Ä¢</statictext>
  <link><FormControl /></link>
  <statictext>‚Ä¢</statictext>
  <link><FormControlLabel /></link>
  <statictext>‚Ä¢</statictext>
  <link><FormLabel /></link>
  <statictext>‚Ä¢</statictext>
  <link><Radio /></link>
  <statictext>‚Ä¢</statictext>
  <link><RadioGroup /></link>
  <link>Date / Time</link>
  <link>Select</link>
</landmark>;

`;

exports[`firefox /components/rating/ 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Rating</heading>
  <text>
    Ratings provide insight regarding others‚Äô opinions and experiences with a
    product. Users can also rate products they‚Äôve purchased.
  </text>
  <heading level="2">Simple ratings</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Controlled1 Star</text>
  <radio>1 Star</radio>
  <text>2 Stars</text>
  <radio checked="true">2 Stars</radio>
  <text>3 Stars</text>
  <radio>3 Stars</radio>
  <text>4 Stars</text>
  <radio>4 Stars</radio>
  <text>5 Stars</text>
  <radio>5 Stars</radio>
  <text>Read only</text>
  <img>2 Stars</img>
  <text>Disabled1 Star</text>
  <radio disabled="true">1 Star</radio>
  <text>2 Stars</text>
  <radio disabled="true" checked="true">
    2 Stars
  </radio>
  <text>3 Stars</text>
  <radio disabled="true">3 Stars</radio>
  <text>4 Stars</text>
  <radio disabled="true">4 Stars</radio>
  <text>5 Stars</text>
  <radio disabled="true">5 Stars</radio>
  <text>Pristine1 Star</text>
  <radio>1 Star</radio>
  <text>2 Stars</text>
  <radio>2 Stars</radio>
  <text>3 Stars</text>
  <radio>3 Stars</radio>
  <text>4 Stars</text>
  <radio>4 Stars</radio>
  <text>5 Stars</text>
  <radio>5 Stars</radio>
  <radio checked="true">Empty</radio>
  <text>Empty</text>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Customized ratings</heading>
  <text>
    Here are some examples of customizing the component. You can learn more
    about this in the
  </text>
  <link>overrides documentation page</link>
  <text>.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Custom empty icon0.5 Stars</text>
  <radio>0.5 Stars</radio>
  <text>1 Star</text>
  <radio>1 Star</radio>
  <text>1.5 Stars</text>
  <radio>1.5 Stars</radio>
  <text>2 Stars</text>
  <radio checked="true">2 Stars</radio>
  <text>2.5 Stars</text>
  <radio>2.5 Stars</radio>
  <text>3 Stars</text>
  <radio>3 Stars</radio>
  <text>3.5 Stars</text>
  <radio>3.5 Stars</radio>
  <text>4 Stars</text>
  <radio>4 Stars</radio>
  <text>4.5 Stars</text>
  <radio>4.5 Stars</radio>
  <text>5 Stars</text>
  <radio>5 Stars</radio>
  <text>Custom icon and color0.5 Hearts</text>
  <radio>0.5 Hearts</radio>
  <text>1 Heart</text>
  <radio>1 Heart</radio>
  <text>1.5 Hearts</text>
  <radio>1.5 Hearts</radio>
  <text>2 Hearts</text>
  <radio checked="true">2 Hearts</radio>
  <text>2.5 Hearts</text>
  <radio>2.5 Hearts</radio>
  <text>3 Hearts</text>
  <radio>3 Hearts</radio>
  <text>3.5 Hearts</text>
  <radio>3.5 Hearts</radio>
  <text>4 Hearts</text>
  <radio>4 Hearts</radio>
  <text>4.5 Hearts</text>
  <radio>4.5 Hearts</radio>
  <text>5 Hearts</text>
  <radio>5 Hearts</radio>
  <text>10 stars1 Star</text>
  <radio>1 Star</radio>
  <text>2 Stars</text>
  <radio checked="true">2 Stars</radio>
  <text>3 Stars</text>
  <radio>3 Stars</radio>
  <text>4 Stars</text>
  <radio>4 Stars</radio>
  <text>5 Stars</text>
  <radio>5 Stars</radio>
  <text>6 Stars</text>
  <radio>6 Stars</radio>
  <text>7 Stars</text>
  <radio>7 Stars</radio>
  <text>8 Stars</text>
  <radio>8 Stars</radio>
  <text>9 Stars</text>
  <radio>9 Stars</radio>
  <text>10 Stars</text>
  <radio>10 Stars</radio>
  <text>Custom icon setVery Dissatisfied</text>
  <radio>Very Dissatisfied</radio>
  <text>Dissatisfied</text>
  <radio checked="true">Dissatisfied</radio>
  <text>Neutral</text>
  <radio>Neutral</radio>
  <text>Satisfied</text>
  <radio>Satisfied</radio>
  <text>Very Satisfied</text>
  <radio>Very Satisfied</radio>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Hover feedback</heading>
  <text>
    You can display a label on hover to help users pick the correct rating
    value. The demo uses the onChangeActive prop.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>0.5 Stars</text>
  <radio>0.5 Stars</radio>
  <text>1 Star</text>
  <radio>1 Star</radio>
  <text>1.5 Stars</text>
  <radio>1.5 Stars</radio>
  <text>2 Stars</text>
  <radio checked="true">2 Stars</radio>
  <text>2.5 Stars</text>
  <radio>2.5 Stars</radio>
  <text>3 Stars</text>
  <radio>3 Stars</radio>
  <text>3.5 Stars</text>
  <radio>3.5 Stars</radio>
  <text>4 Stars</text>
  <radio>4 Stars</radio>
  <text>4.5 Stars</text>
  <radio>4.5 Stars</radio>
  <text>5 Stars</text>
  <radio>5 Stars</radio>
  <text>Poor+</text>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Ratingname="hover-feedback"value={value}precision={0.5}onChange={(event,
    newValue)=>{setValue(newValue);}}onChangeActive={(event,
    newHover)=>{setHover(newHover);}}/>{value
    !==null&&<Boxml={2}>{labels[hover !==-1? hover
    : value]}</Box>}
  </text>
  <heading level="2">Half ratings</heading>
  <text>
    The rating can display any float number with the value prop. Use the
    precision prop to define the minimum increment value change allowed.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>0.5 Stars</text>
  <radio>0.5 Stars</radio>
  <text>1 Star</text>
  <radio>1 Star</radio>
  <text>1.5 Stars</text>
  <radio>1.5 Stars</radio>
  <text>2 Stars</text>
  <radio>2 Stars</radio>
  <text>2.5 Stars</text>
  <radio checked="true">2.5 Stars</radio>
  <text>3 Stars</text>
  <radio>3 Stars</radio>
  <text>3.5 Stars</text>
  <radio>3.5 Stars</radio>
  <text>4 Stars</text>
  <radio>4 Stars</radio>
  <text>4.5 Stars</text>
  <radio>4.5 Stars</radio>
  <text>5 Stars</text>
  <radio>5 Stars</radio>
  <img>2.5 Stars</img>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Ratingname="half-rating"defaultValue={2.5}precision={0.5}/><Ratingname="half-rating-read"defaultValue={2.5}precision={0.5}readOnly/>
  </text>
  <heading level="2">Sizes</heading>
  <text>Fancy larger or smaller ratings? Use the size prop.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>1 Star</text>
  <radio>1 Star</radio>
  <text>2 Stars</text>
  <radio checked="true">2 Stars</radio>
  <text>3 Stars</text>
  <radio>3 Stars</radio>
  <text>4 Stars</text>
  <radio>4 Stars</radio>
  <text>5 Stars</text>
  <radio>5 Stars</radio>
  <text>1 Star</text>
  <radio>1 Star</radio>
  <text>2 Stars</text>
  <radio checked="true">2 Stars</radio>
  <text>3 Stars</text>
  <radio>3 Stars</radio>
  <text>4 Stars</text>
  <radio>4 Stars</radio>
  <text>5 Stars</text>
  <radio>5 Stars</radio>
  <text>1 Star</text>
  <radio>1 Star</radio>
  <text>2 Stars</text>
  <radio checked="true">2 Stars</radio>
  <text>3 Stars</text>
  <radio>3 Stars</radio>
  <text>4 Stars</text>
  <radio>4 Stars</radio>
  <text>5 Stars</text>
  <radio>5 Stars</radio>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Ratingname="size-small"defaultValue={2}size="small"/><Ratingname="size-medium"defaultValue={2}/><Ratingname="size-large"defaultValue={2}size="large"/>
  </text>
  <heading level="2">Accessibility</heading>
  <text>(WAI tutorial:</text>
  <link>
    https://www.w3.org/WAI/tutorials/forms/custom-controls/#a-star-rating
  </link>
  <text>)The accessibility of this component relies on:</text>
  <statictext>‚Ä¢</statictext>
  <text>
    A radio group is used with its fields visually hidden. It contains six radio
    buttons, one for each star and another for 0 stars, which is checked by
    default. Make sure you are providing a name prop that is unique to the
    parent form.
  </text>
  <statictext>‚Ä¢</statictext>
  <text>
    The labels for the radio buttons contain actual text (‚Äú1 Star‚Äù, ‚Äú2 Stars‚Äù,
    ‚Ä¶), make sure you provide a getLabelText prop when the page language is not
    English.
  </text>
  <heading level="2">API</heading>
  <statictext>‚Ä¢</statictext>
  <link><Rating /></link>
  <link>Pagination</link>
  <link>Skeleton</link>
</landmark>;

`;

exports[`firefox /components/selects/ 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Select</heading>
  <text>
    Select components are used for collecting user provided information from a
    list of options.
  </text>
  <heading level="2">Simple Select</heading>
  <text>
    Menus are positioned over their emitting elements such that the currently
    selected menu item appears on top of the emitting element.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Age</text>
  <button haspopup="true">Age ‚Äã</button>
  <text>Age</text>
  <button haspopup="true">Age ‚Äã</button>
  <text>Some important helper text</text>
  <button haspopup="true">Without label</button>
  <text>Without labelAge</text>
  <button haspopup="true">Age None</button>
  <text>Label + placeholderName</text>
  <button disabled="true" haspopup="true">
    Name ‚Äã
  </button>
  <text>DisabledName</text>
  <button haspopup="true">Name ‚Äã</button>
  <text>ErrorName</text>
  <button haspopup="true">Name ‚Äã</button>
  <text>Read onlyAge</text>
  <button haspopup="true">Age ‚Äã</button>
  <text>Auto width</text>
  <button haspopup="true">Without label</button>
  <text>PlaceholderAge</text>
  <button haspopup="true">Age ‚Äã</button>
  <text>RequiredAge</text>
  <button haspopup="true">Age ‚Äã</button>
  <text>Age</text>
  <button haspopup="true">Age ‚Äã</button>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Advanced features</heading>
  <text>
    The Select component is meant to be interchangeable with a native
    <select> element.If you are looking for more advanced features, like
    combobox, multiselect, autocomplete, async or creatable support, head to the
  </text>
  <link>Autocomplete component</link>
  <text>
    . It's meant to be an improved version of the "react-select"
    and "downshift" packages.
  </text>
  <heading level="2">Native Select</heading>
  <text>
    As the user experience can be improved on mobile using the native select of
    the platform, we allow such pattern.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Age</text>
  <combobox value="None" haspopup="true">
    Age
    <option selected="true">None</option>
    <option>Ten</option>
    <option>Twenty</option>
    <option>Thirty</option>
  </combobox>
  <text>Age</text>
  <combobox value="None" haspopup="true">
    Age
    <option selected="true">None</option>
    <option>Ten</option>
    <option>Twenty</option>
    <option>Thirty</option>
  </combobox>
  <text>Some important helper text</text>
  <combobox value="None" haspopup="true">
    age
    <option selected="true">None</option>
    <option>Ten</option>
    <option>Twenty</option>
    <option>Thirty</option>
  </combobox>
  <text>With visually hidden labelAge</text>
  <combobox value="None" haspopup="true">
    Age
    <option selected="true">None</option>
    <option>Ten</option>
    <option>Twenty</option>
    <option>Thirty</option>
  </combobox>
  <text>Label + placeholderName</text>
  <combobox value="Hai" disabled="true" haspopup="true">
    Name
    <option>None</option>
    <option selected="true">Hai</option>
    <option level="2">Olivier</option>
    <option level="2">Kevin</option>
  </combobox>
  <text>DisabledName</text>
  <combobox value="Hai" haspopup="true" invalid="true">
    Name
    <option selected="true">Hai</option>
    <option level="2">Olivier</option>
    <option level="2">Kevin</option>
  </combobox>
  <text>ErrorName</text>
  <combobox value="Thirty" haspopup="true">
    Name
    <option>Ten</option>
    <option>Twenty</option>
    <option selected="true">Thirty</option>
  </combobox>
  <text>Uncontrolled</text>
  <combobox value="Placeholder" haspopup="true">
    age
    <option disabled="true" selected="true">
      Placeholder
    </option>
    <option>Ten</option>
    <option>Twenty</option>
    <option>Thirty</option>
  </combobox>
  <text>PlaceholderAge</text>
  <combobox value="None" required="true" haspopup="true" invalid="true">
    Age
    <option selected="true">None</option>
    <option>Ten</option>
    <option>Twenty</option>
    <option>Thirty</option>
  </combobox>
  <text>RequiredAge</text>
  <combobox value="None" haspopup="true">
    Age
    <option selected="true">None</option>
    <option>Ten</option>
    <option>Twenty</option>
    <option>Thirty</option>
  </combobox>
  <text>Age</text>
  <combobox value="None" haspopup="true">
    Age
    <option selected="true">None</option>
    <option>Ten</option>
    <option>Twenty</option>
    <option>Thirty</option>
  </combobox>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Text Fields</heading>
  <text>
    The TextField wrapper component is a complete form control including a
    label, input and help text. You can find an example with the select mode
  </text>
  <link>in this section</link>
  <text>.</text>
  <heading level="2">Customized selects</heading>
  <text>
    Here are some examples of customizing the component. You can learn more
    about this in the
  </text>
  <link>overrides documentation page</link>
  <text>
    .The first step is to style the InputBase component. Once it's styled,
    you can either use it directly as a text field or provide it to the select
    input property to have a select field.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Age</text>
  <textbox>Age</textbox>
  <text>Age</text>
  <button haspopup="true">Age ‚Äã</button>
  <text>Age</text>
  <combobox value="None" haspopup="true">
    Age
    <option selected="true">None</option>
    <option>Ten</option>
    <option>Twenty</option>
    <option>Thirty</option>
  </combobox>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>üé® If you are looking for inspiration, you can check</text>
  <link>MUI Treasury's customization examples</link>
  <text>.</text>
  <heading level="2">Multiple Select</heading>
  <text>
    The Select component can handle multiple selections. It's enabled with
    the multiple property.Like with the single selection, you can pull out the
    new value by accessing event.target.value in the onChange callback.
    It's always an array.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Name</text>
  <button haspopup="true">Name ‚Äã</button>
  <text>Tag</text>
  <button haspopup="true">Tag ‚Äã</button>
  <text>Chip</text>
  <button haspopup="true">Chip ‚Äã</button>
  <button haspopup="true">Without label</button>
  <text>Native</text>
  <listbox multiselectable="true">
    Native
    <option>Oliver Hansen</option>
    <option>Van Henry</option>
    <option>April Tucker</option>
    <option>Ralph Hubbard</option>
    <option>Omar Alexander</option>
    <option>Carlos Abbott</option>
    <option>Miriam Wagner</option>
    <option>Bradley Wilkerson</option>
    <option>Virginia Andrews</option>
    <option>Kelly Snyder</option>
  </listbox>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Controlled Open Select</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>OPEN THE SELECT</button>
  <text>Age</text>
  <button haspopup="true">Age ‚Äã</button>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">With a Dialog</heading>
  <text>
    While it's discouraged by the Material Design specification, you can
    use a select inside a dialog.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>OPEN SELECT DIALOG</button>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Grouping</heading>
  <text>
    Display categories with the ListSubheader component or the native
    <optgroup> element.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Grouping</text>
  <combobox value="None" haspopup="true">
    Grouping
    <option selected="true">None</option>
    <option level="2">Option 1</option>
    <option level="2">Option 2</option>
    <option level="2">Option 3</option>
    <option level="2">Option 4</option>
  </combobox>
  <text>Grouping</text>
  <button haspopup="true">‚Äã</button>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Accessibility</heading>
  <text>
    To properly label your Select input you need an extra element with an id
    that contains a label. That id needs to match the labelId of the Select
    e.g.<InputLabelid="label">Age</InputLabel><SelectlabelId="label"id="select"value="20"><MenuItemvalue="10">Ten</MenuItem><MenuItemvalue="20">Twenty</MenuItem></Select>Alternatively
    a TextField with an id and label creates the proper markup and ids for
    you:<TextFieldid="select"label="Age"value="20"select><MenuItemvalue="10">Ten</MenuItem><MenuItemvalue="20">Twenty</MenuItem></TextField>For
    a
  </text>
  <link>native select</link>
  <text>
    , you should mention a label by giving the value of the id attribute of the
    select element to the InputLabel's htmlFor
    attribute:<InputLabelhtmlFor="select">Age</InputLabel><NativeSelectid="select"><optionvalue="10">Ten</option><optionvalue="20">Twenty</option></NativeSelect>
  </text>
  <heading level="2">API</heading>
  <statictext>‚Ä¢</statictext>
  <link><NativeSelect /></link>
  <statictext>‚Ä¢</statictext>
  <link><Select /></link>
  <link>Radio</link>
  <link>Slider</link>
</landmark>;

`;

exports[`firefox /components/slider 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Slider</heading>
  <text>Sliders allow users to make selections from a range of values.</text>
  <link>Sliders</link>
  <text>
    reflect a range of values along a bar, from which users may select a single
    value. They are ideal for adjusting settings such as volume, brightness, or
    applying image filters.
  </text>
  <statictext>‚Ä¢</statictext>
  <text>üì¶</text>
  <link>22 kB gzipped</link>
  <text>
    (but only +8 kB when used together with other Material-UI components).
  </text>
  <heading level="2">Continuous sliders</heading>
  <text>
    Continuous sliders allow users to select a value along a subjective range.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Volume</text>
  <slider value="30" valuetext="30" orientation="horizontal">
    Volume
  </slider>
  <text>Disabled slider</text>
  <slider value="30" valuetext="30" orientation="horizontal">
    Disabled slider
  </slider>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Discrete sliders</heading>
  <text>
    Discrete sliders can be adjusted to a specific value by referencing its
    value indicator. By order of demos:You can generate a mark for each step
    with marks={true}.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Temperature</text>
  <slider value="30¬∞C" valuetext="30¬∞C" orientation="horizontal">
    Temperature
  </slider>
  <text>Disabled</text>
  <slider value="30¬∞C" valuetext="30¬∞C" orientation="horizontal">
    Temperature
  </slider>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="3">Small steps</heading>
  <text>You can change the default step increment.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Small steps</text>
  <slider value="5e-8¬∞C" valuetext="5e-8¬∞C" orientation="horizontal">
    Small steps
  </slider>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Typographyid="discrete-slider-small-steps"gutterBottom>
    Small steps
    </Typography><SliderdefaultValue={0.00000005}getAriaValueText={valuetext}aria-labelledby="discrete-slider-small-steps"step={0.00000001}marksmin={-0.00000005}max={0.0000001}valueLabelDisplay="auto"/>
  </text>
  <heading level="3">Custom marks</heading>
  <text>
    You can have custom marks by providing a rich array to the marks prop.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Custom marks</text>
  <slider value="20¬∞C" valuetext="20¬∞C" orientation="horizontal">
    Custom marks
  </slider>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Typographyid="discrete-slider-custom"gutterBottom> Custom
    marks
    </Typography><SliderdefaultValue={20}getAriaValueText={valuetext}aria-labelledby="discrete-slider-custom"step={10}valueLabelDisplay="auto"marks={marks}/>
  </text>
  <heading level="3">Restricted values</heading>
  <text>
    You can restrict the selectable values to those provided with the marks prop
    with step={null}.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Restricted values</text>
  <slider value="20¬∞C" valuetext="20¬∞C" orientation="horizontal">
    Restricted values
  </slider>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Typographyid="discrete-slider-restrict"gutterBottom>
    Restricted values
    </Typography><SliderdefaultValue={20}valueLabelFormat={valueLabelFormat}getAriaValueText={valuetext}aria-labelledby="discrete-slider-restrict"step={null}valueLabelDisplay="auto"marks={marks}/>
  </text>
  <heading level="3">Label always visible</heading>
  <text>
    You can force the thumb label to be always visible with
    valueLabelDisplay="on".
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Always visible</text>
  <slider value="80¬∞C" valuetext="80¬∞C" orientation="horizontal">
    Always visible
  </slider>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Typographyid="discrete-slider-always"gutterBottom> Always
    visible
    </Typography><SliderdefaultValue={80}getAriaValueText={valuetext}aria-labelledby="discrete-slider-always"step={10}marks={marks}valueLabelDisplay="on"/>
  </text>
  <heading level="2">Range slider</heading>
  <text>
    The slider can be used to set the start and end of a range by supplying an
    array of values to the value prop.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Temperature range</text>
  <slider value="20¬∞C" valuetext="20¬∞C" orientation="horizontal"></slider>
  <slider value="37¬∞C" valuetext="37¬∞C" orientation="horizontal"></slider>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Typographyid="range-slider"gutterBottom> Temperature range
    </Typography><Slidervalue={value}onChange={handleChange}valueLabelDisplay="auto"aria-labelledby="range-slider"getAriaValueText={valuetext}/>
  </text>
  <heading level="2">Slider with input field</heading>
  <text>In this example an input allows a discrete value to be set.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Volume</text>
  <slider value="30" valuetext="30" orientation="horizontal">
    Volume
  </slider>
  <spinbutton value="30" valuetext="30">
    Volume
  </spinbutton>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Customized sliders</heading>
  <text>
    Here are some examples of customizing the component. You can learn more
    about this in the
  </text>
  <link>overrides documentation page</link>
  <text>.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>iOS</text>
  <slider value="60" valuetext="60" orientation="horizontal">
    ios slider
  </slider>
  <text>pretto.fr</text>
  <slider value="20" valuetext="20" orientation="horizontal">
    pretto slider
  </slider>
  <text>Tooltip value label</text>
  <slider value="20" valuetext="20" orientation="horizontal">
    custom thumb label
  </slider>
  <text>Airbnb</text>
  <slider value="20" valuetext="20" orientation="horizontal">
    Minimum price
  </slider>
  <slider value="40" valuetext="40" orientation="horizontal">
    Maximum price
  </slider>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Vertical sliders</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Temperature</text>
  <slider value="30¬∞C" valuetext="30¬∞C" orientation="vertical">
    Temperature
  </slider>
  <slider value="30¬∞C" valuetext="30¬∞C" orientation="vertical">
    Temperature
  </slider>
  <slider value="20¬∞C" valuetext="20¬∞C" orientation="vertical">
    Temperature
  </slider>
  <slider value="37¬∞C" valuetext="37¬∞C" orientation="vertical">
    Temperature
  </slider>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Track</heading>
  <text>The track shows the range available for user selection.</text>
  <heading level="3">Removed track</heading>
  <text>The track can be turned off with track={false}.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Removed track</text>
  <slider value="30¬∞C" valuetext="30¬∞C" orientation="horizontal">
    Removed track
  </slider>
  <text>Removed track range slider</text>
  <slider value="20¬∞C" valuetext="20¬∞C" orientation="horizontal">
    Removed track range slider
  </slider>
  <slider value="37¬∞C" valuetext="37¬∞C" orientation="horizontal">
    Removed track range slider
  </slider>
  <slider value="50¬∞C" valuetext="50¬∞C" orientation="horizontal">
    Removed track range slider
  </slider>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="3">Inverted track</heading>
  <text>The track can be inverted with track="inverted".</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Inverted track</text>
  <slider value="30¬∞C" valuetext="30¬∞C" orientation="horizontal">
    Inverted track
  </slider>
  <text>Inverted track range</text>
  <slider value="20¬∞C" valuetext="20¬∞C" orientation="horizontal">
    Inverted track range
  </slider>
  <slider value="37¬∞C" valuetext="37¬∞C" orientation="horizontal">
    Inverted track range
  </slider>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Non-linear scale</heading>
  <text>
    You can use the scale prop to represent the value on a different scale. For
    instance, in the following demo, the value x represents the power of 10^x.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Temperature range</text>
  <slider value="1e^0" valuetext="1e^0" orientation="horizontal">
    Temperature range
  </slider>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Typographyid="non-linear-slider"gutterBottom> Temperature
    range
    </Typography><Slidervalue={value}min={0}step={0.1}max={6}scale={(x)=>
    x
    **10}getAriaValueText={valueLabelFormat}valueLabelFormat={valueLabelFormat}onChange={handleChange}valueLabelDisplay="auto"aria-labelledby="non-linear-slider"/>
  </text>
  <heading level="2">Accessibility</heading>
  <text>(WAI-ARIA:</text>
  <link>https://www.w3.org/TR/wai-aria-practices/#slider</link>
  <text>
    )The component handles most of the work necessary to make it accessible.
    However, you need to make sure that:
  </text>
  <statictext>‚Ä¢</statictext>
  <text>
    Each thumb has a user-friendly label (aria-label, aria-labelledby or
    getAriaLabel prop).
  </text>
  <statictext>‚Ä¢</statictext>
  <text>
    Each thumb has a user-friendly text for its current value. This is not
    required if the value matches the semantics of the label. You can change the
    name with the getAriaValueText or aria-valuetext prop.
  </text>
  <heading level="2">API</heading>
  <statictext>‚Ä¢</statictext>
  <link><Slider /></link>
  <link>Select</link>
  <link>Switch</link>
</landmark>;

`;

exports[`firefox /components/switches/ 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Switch</heading>
  <text>Switches toggle the state of a single setting on or off.</text>
  <link>Switches</link>
  <text>
    are the preferred way to adjust settings on mobile. The option that the
    switch controls, as well as the state it‚Äôs in, should be made clear from the
    corresponding inline label.
  </text>
  <heading level="2">Basic switches</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">secondary checkbox</checkbox>
  <checkbox checked="true">primary checkbox</checkbox>
  <checkbox>primary checkbox</checkbox>
  <text-container disabled="true">
    <checkbox disabled="true">disabled checkbox</checkbox>
  </text-container>
  <text-container disabled="true">
    <checkbox disabled="true" checked="true">
      primary checkbox
    </checkbox>
  </text-container>
  <checkbox checked="true">checkbox with default color</checkbox>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Switch with FormControlLabel</heading>
  <text>
    Switch can be provided with a description thanks to the FormControlLabel
    component.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">Secondary</checkbox>
  <text>Secondary</text>
  <checkbox checked="true">Primary</checkbox>
  <text>Primary</text>
  <checkbox>Uncontrolled</checkbox>
  <text>Uncontrolled</text>
  <text-container disabled="true">
    <checkbox disabled="true">Disabled</checkbox>
  </text-container>
  <text>Disabled</text>
  <text-container disabled="true">
    <checkbox disabled="true" checked="true">
      Disabled
    </checkbox>
  </text-container>
  <text>Disabled</text>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Switches with FormGroup</heading>
  <text>
    FormGroup is a helpful wrapper used to group selection controls components
    that provides an easier API. However, you are encouraged you to use
  </text>
  <link>Checkboxes</link>
  <text>instead if multiple related controls are required. (See:</text>
  <link>When to use</link>
  <text>).</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Assign responsibility</text>
  <checkbox checked="true">Gilad Gray</checkbox>
  <text>Gilad Gray</text>
  <checkbox>Jason Killian</checkbox>
  <text>Jason Killian</text>
  <checkbox checked="true">Antoine Llorca</checkbox>
  <text>Antoine LlorcaBe careful</text>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Customized switches</heading>
  <text>
    Here are some examples of customizing the component. You can learn more
    about this in the
  </text>
  <link>overrides documentation page</link>
  <text>.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">Custom color</checkbox>
  <text>Custom color</text>
  <checkbox checked="true">iOS style</checkbox>
  <text>iOS styleOff</text>
  <checkbox checked="true">Off On</checkbox>
  <text>On</text>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>üé® If you are looking for inspiration, you can check</text>
  <link>MUI Treasury's customization examples</link>
  <text>.</text>
  <heading level="2">Sizes</heading>
  <text>Fancy smaller switches? Use the size property.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox>Small</checkbox>
  <text>Small</text>
  <checkbox>Normal</checkbox>
  <text>Normal</text>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <FormGroup><FormControlLabelcontrol={<Switchsize="small"checked={checked}onChange={toggleChecked}/>}label="Small"/><FormControlLabelcontrol={<Switchchecked={checked}onChange={toggleChecked}/>}label="Normal"/></FormGroup>
  </text>
  <heading level="2">Label placement</heading>
  <text>You can change the placement of the label:</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox>Top</checkbox>
  <text>Top</text>
  <checkbox>Start</checkbox>
  <text>Start</text>
  <checkbox>Bottom</checkbox>
  <text>Bottom</text>
  <checkbox>End</checkbox>
  <text>End</text>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">When to use</heading>
  <statictext>‚Ä¢</statictext>
  <link>Checkboxes vs. Switches</link>
  <heading level="2">Accessibility</heading>
  <statictext>‚Ä¢</statictext>
  <text>
    It will render an element with the checkbox role not switch role since this
    role isn't widely supported yet. Please test first if assistive
    technology of your target audience supports this role properly. Then you can
    change the role with <Switch inputProps={{ role:
    'switch' }}>
  </text>
  <statictext>‚Ä¢</statictext>
  <text>
    All form controls should have labels, and this includes radio buttons,
    checkboxes, and switches. In most cases, this is done by using the
    <label> element (
  </text>
  <link>FormControlLabel</link>
  <text>).</text>
  <statictext>‚Ä¢</statictext>
  <text>
    When a label can't be used, it's necessary to add an attribute
    directly to the input component. In this case, you can apply the additional
    attribute (e.g. aria-label, aria-labelledby, title) via the inputProps
    property.<Switchvalue="checkedA"inputProps={{'aria-label':'Switch
    A'}}/>
  </text>
  <heading level="2">API</heading>
  <statictext>‚Ä¢</statictext>
  <link><FormControl /></link>
  <statictext>‚Ä¢</statictext>
  <link><FormControlLabel /></link>
  <statictext>‚Ä¢</statictext>
  <link><FormGroup /></link>
  <statictext>‚Ä¢</statictext>
  <link><FormLabel /></link>
  <statictext>‚Ä¢</statictext>
  <link><Switch /></link>
  <link>Slider</link>
  <link>Text Field</link>
</landmark>;

`;

exports[`firefox /components/tabs/ 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Tabs</heading>
  <text>Tabs make it easy to explore and switch between different views.</text>
  <link>Tabs</link>
  <text>
    organize and allow navigation between groups of content that are related and
    at the same level of hierarchy.
  </text>
  <heading level="2">Simple Tabs</heading>
  <text>A simple example with no frills.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tab selected="true">ITEM ONE</tab>
  <tab>ITEM TWO</tab>
  <tab>ITEM THREE</tab>
  <text>Item One</text>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <AppBarposition="static"><Tabsvalue={value}onChange={handleChange}aria-label="simple
    tabs example"><Tab label="Item
    One"{...a11yProps(0)}/><Tab label="Item
    Two"{...a11yProps(1)}/><Tab label="Item
    Three"{...a11yProps(2)}/></Tabs></AppBar><TabPanelvalue={value}index={0}>
    Item One
    </TabPanel><TabPanelvalue={value}index={1}>
    Item Two
    </TabPanel><TabPanelvalue={value}index={2}>
    Item Three </TabPanel>
  </text>
  <heading level="3">Wrapped Labels</heading>
  <text>
    Long labels will automatically wrap on tabs. If the label is too long for
    the tab, it will overflow and the text will not be visible.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tab selected="true">NEW ARRIVALS IN THE LONGEST TEXT OF NONFICTION</tab>
  <tab>ITEM TWO</tab>
  <tab>ITEM THREE</tab>
  <text>Item One</text>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="3">Disabled Tab</heading>
  <text>A Tab can be disabled by setting disabled property.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tab>ACTIVE</tab>
  <tab disabled="true">DISABLED</tab>
  <tab selected="true">ACTIVE</tab>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Papersquare><Tabsvalue={value}indicatorColor="primary"textColor="primary"onChange={handleChange}aria-label="disabled
    tabs
    example"><Tablabel="Active"/><Tablabel="Disabled"disabled/><Tablabel="Active"/></Tabs></Paper>
  </text>
  <heading level="2">Fixed Tabs</heading>
  <text>
    Fixed tabs should be used with a limited number of tabs and when consistent
    placement will aid muscle memory.
  </text>
  <heading level="3">Full width</heading>
  <text>
    The variant="fullWidth" property should be used for smaller views.
    This demo also uses
  </text>
  <link>react-swipeable-views</link>
  <text>
    to animate the Tab transition, and allowing tabs to be swiped on touch
    devices.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tab selected="true">ITEM ONE</tab>
  <tab>ITEM TWO</tab>
  <tab>ITEM THREE</tab>
  <text>Item One</text>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="3">Centered</heading>
  <text>The centered property should be used for larger views.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tab selected="true">ITEM ONE</tab>
  <tab>ITEM TWO</tab>
  <tab>ITEM THREE</tab>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <PaperclassName={classes.root}><Tabsvalue={value}onChange={handleChange}indicatorColor="primary"textColor="primary"centered><Tablabel="Item
    One"/><Tablabel="Item Two"/><Tablabel="Item
    Three"/></Tabs></Paper>
  </text>
  <heading level="2">Scrollable Tabs</heading>
  <heading level="3">Automatic Scroll Buttons</heading>
  <text>
    Left and right scroll buttons will automatically be presented on desktop and
    hidden on mobile. (based on viewport width)
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <section>
    <tab selected="true">ITEM ONE</tab>
    <tab>ITEM TWO</tab>
    <tab>ITEM THREE</tab>
    <tab>ITEM FOUR</tab>
    <tab>ITEM FIVE</tab>
    <tab>ITEM SIX</tab>
    <tab>ITEM SEVEN</tab>
  </section>
  <text>Item One</text>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="3">Forced Scroll Buttons</heading>
  <text>
    Left and right scroll buttons will be presented regardless of the viewport
    width.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <section>
    <tab selected="true">ITEM ONE</tab>
    <tab>ITEM TWO</tab>
    <tab>ITEM THREE</tab>
    <tab>ITEM FOUR</tab>
    <tab>ITEM FIVE</tab>
    <tab>ITEM SIX</tab>
    <tab>ITEM SEVEN</tab>
  </section>
  <text>Item One</text>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="3">Prevent Scroll Buttons</heading>
  <text>
    Left and right scroll buttons will never be presented. All scrolling must be
    initiated through user agent scrolling mechanisms (e.g. left/right swipe,
    shift-mousewheel, etc.)
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <section>
    <tab selected="true">phone</tab>
    <tab>favorite</tab>
    <tab>person</tab>
    <tab>help</tab>
    <tab>shopping</tab>
    <tab>up</tab>
    <tab>down</tab>
  </section>
  <text>Item One</text>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Customized tabs</heading>
  <text>
    Here is an example of customizing the component. You can learn more about
    this in the
  </text>
  <link>overrides documentation page</link>
  <text>.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tab selected="true">Tab 1</tab>
  <tab>Tab 2</tab>
  <tab>Tab 3</tab>
  <tab selected="true">Workflows</tab>
  <tab>Datasets</tab>
  <tab>Connections</tab>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text-container>
    <text>
      <divclassName={classes.demo1}><AntTabsvalue={value}onChange={handleChange}aria-label="ant
      example"><AntTablabel="Tab
      1"/><AntTablabel="Tab
      2"/><AntTablabel="Tab
      3"/></AntTabs><TypographyclassName={classes.padding}/></div><divclassName={classes.demo2}><StyledTabsvalue={value}onChange={handleChange}aria-label="styled
      tabs
      example"><StyledTablabel="Workflows"/><StyledTablabel="Datasets"/><StyledTablabel="Connections"/></StyledTabs><TypographyclassName={classes.padding}/></div>
    </text>
  </text-container>
  <text>üé® If you are looking for inspiration, you can check</text>
  <link>MUI Treasury's customization examples</link>
  <text>.</text>
  <heading level="2">Vertical tabs</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <section>
    <tab selected="true">ITEM ONE</tab>
    <tab>ITEM TWO</tab>
    <tab>ITEM THREE</tab>
    <tab>ITEM FOUR</tab>
    <tab>ITEM FIVE</tab>
    <tab>ITEM SIX</tab>
    <tab>ITEM SEVEN</tab>
  </section>
  <text>Item One</text>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Nav Tabs</heading>
  <text>
    By default tabs use a button element, but you can provide your own custom
    tag or component. Here's an example of implementing tabbed navigation:
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tab selected="true">PAGE ONE</tab>
  <tab>PAGE TWO</tab>
  <tab>PAGE THREE</tab>
  <text>Page One</text>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Icon Tabs</heading>
  <text>Tab labels may be either all icons or all text.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tab selected="true">phone</tab>
  <tab>favorite</tab>
  <tab>person</tab>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <PapersquareclassName={classes.root}><Tabsvalue={value}onChange={handleChange}variant="fullWidth"indicatorColor="primary"textColor="primary"aria-label="icon
    tabs
    example"><Tabicon={<PhoneIcon/>}aria-label="phone"/><Tabicon={<FavoriteIcon/>}aria-label="favorite"/><Tabicon={<PersonPinIcon/>}aria-label="person"/></Tabs></Paper>
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tab selected="true">RECENTS</tab>
  <tab>FAVORITES</tab>
  <tab>NEARBY</tab>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <PapersquareclassName={classes.root}><Tabsvalue={value}onChange={handleChange}variant="fullWidth"indicatorColor="secondary"textColor="secondary"aria-label="icon
    label tabs
    example"><Tabicon={<PhoneIcon/>}label="RECENTS"/><Tabicon={<FavoriteIcon/>}label="FAVORITES"/><Tabicon={<PersonPinIcon/>}label="NEARBY"/></Tabs></Paper>
  </text>
  <heading level="2">Accessibility</heading>
  <text>(WAI-ARIA:</text>
  <link>https://www.w3.org/TR/wai-aria-practices/#tabpanel</link>
  <text>
    )The following steps are needed in order to provide necessary information
    for assistive technologies:
  </text>
  <statictext>1.</statictext>
  <text>Label Tabs via aria-label or aria-labelledby.</text>
  <statictext>2.</statictext>
  <text>
    Tabs need to be connected to their corresponding [role="tabpanel"]
    by setting the correct id, aria-controls and aria-labelledby.An example for
    the current implementation can be found in the demos on this page.
    We've also published
  </text>
  <link>an experimental API</link>
  <text>in @material-ui/lab that does not require extra work.</text>
  <heading level="3">Keyboard navigation</heading>
  <text>
    The components implement keyboard navigation using the "manual
    activation" behavior. If you want to switch to the "selection
    automatically follows focus" behavior you have pass
    selectionFollowsFocus to the Tabs component. The WAI-ARIA authoring
    practices have a detailed guide on
  </text>
  <link>how to decide when to make selection automatically follow focus</link>
  <text>.</text>
  <heading level="4">Demo</heading>
  <text>
    The following two demos only differ in their keyboard navigation behavior.
    Focus a tab and navigate with arrow keys to notice the difference./* Tabs
    where selection follows focus */<TabsselectionFollowsFocus/>/* Tabs
    where each tab needs to be selected manually */<Tabs/>
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Tabs where selection follows focus</text>
  <tab selected="true">ITEM ONE</tab>
  <tab>ITEM TWO</tab>
  <tab>ITEM THREE</tab>
  <text>Tabs where each tab needs to be selected manually</text>
  <tab selected="true">ITEM ONE</tab>
  <tab>ITEM TWO</tab>
  <tab>ITEM THREE</tab>
  <text>Item One</text>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Experimental API</heading>
  <text>
    @material-ui/lab offers utility components that inject props to implement
    accessible tabs following
  </text>
  <link>WAI-ARIA authoring practices</link>
  <text>.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tab selected="true">ITEM ONE</tab>
  <tab>ITEM TWO</tab>
  <tab>ITEM THREE</tab>
  <text>Item One</text>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <TabContextvalue={value}><AppBarposition="static"><TabListonChange={handleChange}aria-label="simple
    tabs example"><Tablabel="Item
    One"value="1"/><Tablabel="Item
    Two"value="2"/><Tablabel="Item
    Three"value="3"/></TabList></AppBar><TabPanelvalue="1">Item
    One</TabPanel><TabPanelvalue="2">Item
    Two</TabPanel><TabPanelvalue="3">Item
    Three</TabPanel></TabContext>
  </text>
  <heading level="2">API</heading>
  <statictext>‚Ä¢</statictext>
  <link><Tab /></link>
  <statictext>‚Ä¢</statictext>
  <link><TabScrollButton /></link>
  <statictext>‚Ä¢</statictext>
  <link><Tabs /></link>
  <link>Stepper</link>
  <link>App Bar</link>
</landmark>;

`;

exports[`firefox /components/text-fields/ 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Text Field</heading>
  <text>Text fields let users enter and edit text.</text>
  <link>Text fields</link>
  <text>
    allow users to enter text into a UI. They typically appear in forms and
    dialogs.
  </text>
  <heading level="2">TextField</heading>
  <text>
    The TextField wrapper component is a complete form control including a
    label, input and help text.It supports standard, outlined and filled
    styling.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Standard</text>
  <textbox>Standard</textbox>
  <text>Filled</text>
  <textbox>Filled</textbox>
  <text>Outlined</text>
  <textbox>Outlined</textbox>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <formclassName={classes.root}noValidateautoComplete="off"><TextFieldid="standard-basic"label="Standard"/><TextFieldid="filled-basic"label="Filled"variant="filled"/><TextFieldid="outlined-basic"label="Outlined"variant="outlined"/></form>Note:
    The standard variant of the TextField is no longer documented in the
  </text>
  <link>Material Design guidelines</link>
  <text>(</text>
  <link>here's why</link>
  <text>), but Material-UI will continue to support it.</text>
  <heading level="2">Form props</heading>
  <text>
    Standard form attributes are supported e.g. required, disabled, type, etc.
    as well as a helperText which is used to give context about a field‚Äôs input,
    such as how the input will be used.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Required</text>
  <textbox value="Hello World" required="true">
    Required
  </textbox>
  <text>Disabled</text>
  <textbox value="Hello World" disabled="true">
    Disabled
  </textbox>
  <text>Password</text>
  <textbox>Password</textbox>
  <text>Read Only</text>
  <textbox value="Hello World" readonly="true">
    Read Only
  </textbox>
  <text>Number</text>
  <spinbutton valuetext="">Number</spinbutton>
  <text>Search field</text>
  <textbox>Search field</textbox>
  <text>Helper text</text>
  <textbox value="Default Value" description="Some important text">
    Helper text
  </textbox>
  <text>Some important textRequired</text>
  <textbox value="Hello World" required="true">
    Required
  </textbox>
  <text>Disabled</text>
  <textbox value="Hello World" disabled="true">
    Disabled
  </textbox>
  <text>Password</text>
  <textbox>Password</textbox>
  <text>Read Only</text>
  <textbox value="Hello World" readonly="true">
    Read Only
  </textbox>
  <text>Number</text>
  <spinbutton valuetext="">Number</spinbutton>
  <text>Search field</text>
  <textbox>Search field</textbox>
  <text>Helper text</text>
  <textbox value="Default Value" description="Some important text">
    Helper text
  </textbox>
  <text>Some important textRequired</text>
  <textbox value="Hello World" required="true">
    Required
  </textbox>
  <text>Disabled</text>
  <textbox value="Hello World" disabled="true">
    Disabled
  </textbox>
  <text>Password</text>
  <textbox>Password</textbox>
  <text>Read Only</text>
  <textbox value="Hello World" readonly="true">
    Read Only
  </textbox>
  <text>Number</text>
  <spinbutton valuetext="">Number</spinbutton>
  <text>Search field</text>
  <textbox>Search field</textbox>
  <text>Helper text</text>
  <textbox value="Default Value" description="Some important text">
    Helper text
  </textbox>
  <text>Some important text</text>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Validation</heading>
  <text>
    The error prop toggles the error state, the helperText prop can then be used
    to provide feedback to the user about the error.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Error</text>
  <textbox value="Hello World" invalid="true">
    Error
  </textbox>
  <text>Error</text>
  <textbox value="Hello World" description="Incorrect entry." invalid="true">
    Error
  </textbox>
  <text>Incorrect entry.Error</text>
  <textbox value="Hello World" invalid="true">
    Error
  </textbox>
  <text>Error</text>
  <textbox value="Hello World" description="Incorrect entry." invalid="true">
    Error
  </textbox>
  <text>Incorrect entry.Error</text>
  <textbox value="Hello World" invalid="true">
    Error
  </textbox>
  <text>Error</text>
  <textbox value="Hello World" description="Incorrect entry." invalid="true">
    Error
  </textbox>
  <text>Incorrect entry.</text>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Multiline</heading>
  <text>The multiline prop transforms the text field into a</text>
  <link>textarea</link>
  <text>or a</text>
  <link>TextareaAutosize</link>
  <text>.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Multiline</text>
  <textbox value="Controlled" multiline="true">
    Multiline
  </textbox>
  <text>Multiline Placeholder</text>
  <textbox multiline="true">Multiline Placeholder</textbox>
  <text>Multiline</text>
  <textbox value="Default Value" multiline="true">
    Multiline
  </textbox>
  <text>Multiline</text>
  <textbox value="Controlled" multiline="true">
    Multiline
  </textbox>
  <text>Multiline Placeholder</text>
  <textbox multiline="true">Multiline Placeholder</textbox>
  <text>Multiline</text>
  <textbox value="Default Value" multiline="true">
    Multiline
  </textbox>
  <text>Multiline</text>
  <textbox value="Controlled" multiline="true">
    Multiline
  </textbox>
  <text>Multiline Placeholder</text>
  <textbox multiline="true">Multiline Placeholder</textbox>
  <text>Multiline</text>
  <textbox value="Default Value" multiline="true">
    Multiline
  </textbox>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Select</heading>
  <text>The select prop makes the text field use the</text>
  <link>Select</link>
  <text>component internally.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Select</text>
  <button haspopup="true">Select ‚Ç¨</button>
  <text>Please select your currencyNative select</text>
  <combobox value="‚Ç¨" description="Please select your currency" haspopup="true">
    Native select
    <option>$</option>
    <option selected="true">‚Ç¨</option>
    <option>‡∏ø</option>
    <option>¬•</option>
  </combobox>
  <text>Please select your currencySelect</text>
  <button haspopup="true">Select ‚Ç¨</button>
  <text>Please select your currencyNative select</text>
  <combobox value="‚Ç¨" description="Please select your currency" haspopup="true">
    Native select
    <option>$</option>
    <option selected="true">‚Ç¨</option>
    <option>‡∏ø</option>
    <option>¬•</option>
  </combobox>
  <text>Please select your currencySelect</text>
  <button haspopup="true">Select ‚Ç¨</button>
  <text>Please select your currencyNative select</text>
  <combobox value="‚Ç¨" description="Please select your currency" haspopup="true">
    Native select
    <option>$</option>
    <option selected="true">‚Ç¨</option>
    <option>‡∏ø</option>
    <option>¬•</option>
  </combobox>
  <text>Please select your currency</text>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Icons</heading>
  <text>There are multiple ways to display an icon with a text field.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>With a start adornment</text>
  <textbox>With a start adornment</textbox>
  <text>TextField</text>
  <textbox>TextField</textbox>
  <text>With a grid</text>
  <textbox>With a grid</textbox>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="3">Input Adornments</heading>
  <text>
    The main way is with an InputAdornment. This can be used to add a prefix, a
    suffix or an action to an input. For instance, you can use an icon button to
    hide or reveal the password.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>With normal TextFieldKg</text>
  <textbox>With normal TextField</textbox>
  <textbox description="Weight">weight</textbox>
  <text>KgWeightPassword</text>
  <textbox>Password</textbox>
  <button>toggle password visibility</button>
  <text>Amount$</text>
  <textbox>Amount</textbox>
  <text>With normal TextFieldKg</text>
  <textbox>With normal TextField</textbox>
  <textbox description="Weight">weight</textbox>
  <text>KgWeightPassword</text>
  <textbox>Password</textbox>
  <button>toggle password visibility</button>
  <text>Amount$</text>
  <textbox>Amount</textbox>
  <text>With normal TextFieldKg</text>
  <textbox>With normal TextField</textbox>
  <textbox description="Weight">weight</textbox>
  <text>KgWeightPassword</text>
  <textbox>Password</textbox>
  <button>toggle password visibility</button>
  <text>Amount$</text>
  <textbox>Amount</textbox>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Sizes</heading>
  <text>Fancy smaller inputs? Use the size prop.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Size</text>
  <textbox value="Small">Size</textbox>
  <text>Size</text>
  <textbox value="Normal">Size</textbox>
  <text>Size</text>
  <textbox value="Small">Size</textbox>
  <text>Size</text>
  <textbox value="Normal">Size</textbox>
  <text>Size</text>
  <textbox value="Small">Size</textbox>
  <text>Size</text>
  <textbox value="Normal">Size</textbox>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Layout</heading>
  <text>
    margin prop can be used to alter the vertical spacing of inputs. Using none
    (default) will not apply margins to the FormControl, whereas dense and
    normal will. dense and normal alter other styles to meet the
    specification.fullWidth can be used to make the input take up the full width
    of its container.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Label</text>
  <textbox description="Full width!">Label</textbox>
  <text>Full width!None</text>
  <textbox value="Default Value" description="Some important text">
    None
  </textbox>
  <text>Some important textDense</text>
  <textbox value="Default Value" description="Some important text">
    Dense
  </textbox>
  <text>Some important textNormal</text>
  <textbox value="Default Value" description="Some important text">
    Normal
  </textbox>
  <text>Some important textLabel</text>
  <textbox description="Full width!">Label</textbox>
  <text>Full width!None</text>
  <textbox value="Default Value" description="Some important text">
    None
  </textbox>
  <text>Some important textDense</text>
  <textbox value="Default Value" description="Some important text">
    Dense
  </textbox>
  <text>Some important textNormal</text>
  <textbox value="Default Value" description="Some important text">
    Normal
  </textbox>
  <text>Some important textLabel</text>
  <textbox description="Full width!">Label</textbox>
  <text>Full width!None</text>
  <textbox value="Default Value" description="Some important text">
    None
  </textbox>
  <text>Some important textDense</text>
  <textbox value="Default Value" description="Some important text">
    Dense
  </textbox>
  <text>Some important textNormal</text>
  <textbox value="Default Value" description="Some important text">
    Normal
  </textbox>
  <text>Some important text</text>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Uncontrolled vs Controlled</heading>
  <text>The component can be controlled or uncontrolled.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Name</text>
  <textbox value="Cat in the Hat">Name</textbox>
  <text>Uncontrolled</text>
  <textbox value="foo">Uncontrolled</textbox>
  <text>Name</text>
  <textbox value="Cat in the Hat">Name</textbox>
  <text>Uncontrolled</text>
  <textbox value="foo">Uncontrolled</textbox>
  <text>Name</text>
  <textbox value="Cat in the Hat">Name</textbox>
  <text>Uncontrolled</text>
  <textbox value="foo">Uncontrolled</textbox>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Components</heading>
  <text>TextField is composed of smaller components (</text>
  <link>FormControl</link>
  <text>,</text>
  <link>Input</link>
  <text>,</text>
  <link>FilledInput</link>
  <text>,</text>
  <link>InputLabel</link>
  <text>,</text>
  <link>OutlinedInput</link>
  <text>, and</text>
  <link>FormHelperText</link>
  <text>
    ) that you can leverage directly to significantly customize your form
    inputs.You might also have noticed that some native HTML input properties
    are missing from the TextField component. This is on purpose. The component
    takes care of the most used properties, then it's up to the user to use
    the underlying component shown in the following demo. Still, you can use
    inputProps (and InputProps, InputLabelProps properties) if you want to avoid
    some boilerplate.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Name</text>
  <textbox value="Composed TextField">Name</textbox>
  <text>Name</text>
  <textbox value="Composed TextField" description="Some important helper text">
    Name
  </textbox>
  <text>Some important helper textName</text>
  <textbox value="Composed TextField" disabled="true">
    Name
  </textbox>
  <text>DisabledName</text>
  <textbox value="Composed TextField" description="Error" invalid="true">
    Name
  </textbox>
  <text>ErrorName</text>
  <textbox value="Composed TextField">Name</textbox>
  <text>Name</text>
  <textbox value="Composed TextField">Name</textbox>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Inputs</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <textbox value="Hello world">description</textbox>
  <textbox>description</textbox>
  <textbox value="Disabled" disabled="true">
    description
  </textbox>
  <textbox value="Error" invalid="true">
    description
  </textbox>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text-container>
    <text>
      <formclassName={classes.root}noValidateautoComplete="off"><InputdefaultValue="Hello
      world"inputProps={{'aria-label':'description'}}/><Inputplaceholder="Placeholder"inputProps={{'aria-label':'description'}}/><InputdefaultValue="Disabled"disabledinputProps={{'aria-label':'description'}}/><InputdefaultValue="Error"errorinputProps={{'aria-label':'description'}}/></form>
    </text>
  </text-container>
  <heading level="2">Color</heading>
  <text>
    The color prop changes the highlight color of the text field when focused.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Standard secondary</text>
  <textbox>Standard secondary</textbox>
  <text>Filled secondary</text>
  <textbox>Filled secondary</textbox>
  <text>Outlined secondary</text>
  <textbox>Outlined secondary</textbox>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text-container>
    <text>
      <formclassName={classes.root}noValidateautoComplete="off"><TextFieldid="standard-secondary"label="Standard
      secondary"color="secondary"/><TextFieldid="filled-secondary"label="Filled
      secondary"variant="filled"color="secondary"/><TextFieldid="outlined-secondary"label="Outlined
      secondary"variant="outlined"color="secondary"/></form>
    </text>
  </text-container>
  <heading level="2">Customized inputs</heading>
  <text>
    Here are some examples of customizing the component. You can learn more
    about this in the
  </text>
  <link>overrides documentation page</link>
  <text>.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Custom CSS</text>
  <textbox>Custom CSS</textbox>
  <text>Custom CSS</text>
  <textbox>Custom CSS</textbox>
  <text>ThemeProvider</text>
  <textbox>ThemeProvider</textbox>
  <text>ThemeProvider</text>
  <textbox>ThemeProvider</textbox>
  <text>Bootstrap</text>
  <textbox value="react-bootstrap">Bootstrap</textbox>
  <text>Reddit</text>
  <textbox value="react-reddit">Reddit</textbox>
  <textbox value="Naked input">naked</textbox>
  <text>CSS validation style</text>
  <textbox value="Success" required="true">
    CSS validation style
  </textbox>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    Customization does not stop at CSS, you can use composition to build custom
    components and give your app a unique feel. Below is an example using the
  </text>
  <link>InputBase</link>
  <text>component, inspired by Google Maps.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>menu</button>
  <textbox>search google maps</textbox>
  <button>search</button>
  <button>directions</button>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>üé® If you are looking for inspiration, you can check</text>
  <link>MUI Treasury's customization examples</link>
  <text>.</text>
  <heading level="2">Limitations</heading>
  <heading level="3">Shrink</heading>
  <text>
    The input label "shrink" state isn't always correct. The
    input label is supposed to shrink as soon as the input is displaying
    something. In some circumstances, we can't determine the
    "shrink" state (number input, datetime input, Stripe input). You
    might notice an overlap.
  </text>
  <img>shrink</img>
  <text>
    To workaround the issue, you can force the "shrink" state of the
    label.<TextFieldInputLabelProps={{
    shrink:true}}/>or<InputLabelshrink>Count</InputLabel>
  </text>
  <heading level="3">Floating label</heading>
  <text>
    The floating label is absolutely positioned, it won't impact the layout
    of the page. You need to make sure that the input is larger than the label
    to display correctly.
  </text>
  <heading level="2">Integration with 3rd party input libraries</heading>
  <text>
    You can use third-party libraries to format an input. You have to provide a
    custom implementation of the <input> element with the inputComponent
    property.The following demo uses the
  </text>
  <link>react-text-mask</link>
  <text>and</text>
  <link>react-number-format</link>
  <text>libraries. The same concept could be applied to</text>
  <link>e.g. react-stripe-element</link>
  <text>.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>react-text-mask</text>
  <textbox value="(1‚ÄÄ‚ÄÄ) ‚ÄÄ‚ÄÄ‚ÄÄ-‚ÄÄ‚ÄÄ‚ÄÄ‚ÄÄ">react-text-mask</textbox>
  <text>react-number-format</text>
  <textbox value="$1,320">react-number-format</textbox>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    The provided input component should handle the inputRef property. The
    property should be called with a value that implements the following
    interface:interfaceInputElement{focus():void; value?:
    string;}functionMyInputComponent(props){const{ component:
    Component, inputRef,...other }= props;// implement \`InputElement\`
    interface
    React.useImperativeHandle(inputRef,()=>({focus:()=>{// logic
    to focus the rendered component from 3rd party belongs here},// hiding
    the value e.g. react-stripe-elements}));// \`Component\` will be your
    \`SomeThirdPartyComponent\` from
    belowreturn<Component{...other}/>;}//
    usage<TextFieldInputProps={{ inputComponent: MyInputComponent,
    inputProps:{ component: SomeThirdPartyComponent
    },}}/>;
  </text>
  <heading level="2">Accessibility</heading>
  <text>
    In order for the text field to be accessible, the input should be linked to
    the label and the helper text. The underlying DOM nodes should have this
    structure:<divclass="form-control"><labelfor="my-input">Email
    address</label><inputid="my-input"aria-describedby="my-helper-text"/><spanid="my-helper-text">We'll
    never share your email.</span></div>
  </text>
  <statictext>‚Ä¢</statictext>
  <text>
    If you are using the TextField component, you just have to provide a unique
    id.
  </text>
  <statictext>‚Ä¢</statictext>
  <text>
    If you are composing the
    component:<FormControl><InputLabelhtmlFor="my-input">Email
    address</InputLabel><Inputid="my-input"aria-describedby="my-helper-text"/><FormHelperTextid="my-helper-text">We'll
    never share your email.</FormHelperText></FormControl>
  </text>
  <heading level="2">Complementary projects</heading>
  <text>
    For more advanced use cases you might be able to take advantage of:
  </text>
  <statictext>‚Ä¢</statictext>
  <link>formik-material-ui</link>
  <text>Bindings for using Material-UI with</text>
  <link>formik</link>
  <text>.</text>
  <statictext>‚Ä¢</statictext>
  <link>redux-form-material-ui</link>
  <text>Bindings for using Material-UI with</text>
  <link>Redux Form</link>
  <text>.</text>
  <statictext>‚Ä¢</statictext>
  <link>mui-rff</link>
  <text>Bindings for using Material-UI with</text>
  <link>React Final Form</link>
  <text>.</text>
  <heading level="2">API</heading>
  <statictext>‚Ä¢</statictext>
  <link><FilledInput /></link>
  <statictext>‚Ä¢</statictext>
  <link><FormControl /></link>
  <statictext>‚Ä¢</statictext>
  <link><FormHelperText /></link>
  <statictext>‚Ä¢</statictext>
  <link><Input /></link>
  <statictext>‚Ä¢</statictext>
  <link><InputAdornment /></link>
  <statictext>‚Ä¢</statictext>
  <link><InputBase /></link>
  <statictext>‚Ä¢</statictext>
  <link><InputLabel /></link>
  <statictext>‚Ä¢</statictext>
  <link><OutlinedInput /></link>
  <statictext>‚Ä¢</statictext>
  <link><TextField /></link>
  <link>Switch</link>
  <link>Transfer List</link>
</landmark>;

`;

exports[`firefox /components/tooltips/ 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Tooltip</heading>
  <text>
    Tooltips display informative text when users hover over, focus on, or tap an
    element.When activated,
  </text>
  <link>Tooltips</link>
  <text>
    display a text label identifying an element, such as a description of its
    function.
  </text>
  <heading level="2">Simple Tooltips</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button description="Delete">delete</button>
  <button description="Add">add</button>
  <button description="Add">add</button>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Tooltiptitle="Delete"><IconButtonaria-label="delete"><DeleteIcon/></IconButton></Tooltip><Tooltiptitle="Add"aria-label="add"><Fabcolor="primary"className={classes.fab}><AddIcon/></Fab></Tooltip><Tooltiptitle="Add"aria-label="add"><Fabcolor="secondary"className={classes.absolute}><AddIcon/></Fab></Tooltip>
  </text>
  <heading level="2">Positioned Tooltips</heading>
  <text>
    The Tooltip has 12 placements choice. They don‚Äôt have directional arrows;
    instead, they rely on motion emanating from the source to convey direction.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button description="Add">TOP-START</button>
  <button description="Add">TOP</button>
  <button description="Add">TOP-END</button>
  <button description="Add">LEFT-START</button>
  <button description="Add">LEFT</button>
  <button description="Add">LEFT-END</button>
  <button description="Add">RIGHT-START</button>
  <button description="Add">RIGHT</button>
  <button description="Add">RIGHT-END</button>
  <button description="Add">BOTTOM-START</button>
  <button description="Add">BOTTOM</button>
  <button description="Add">BOTTOM-END</button>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Customized tooltips</heading>
  <text>
    Here are some examples of customizing the component. You can learn more
    about this in the
  </text>
  <link>overrides documentation page</link>
  <text>.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button description="Add">LIGHT</button>
  <button description="Add">BOOTSTRAP</button>
  <button>HTML</button>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Arrow Tooltips</heading>
  <text>
    You can use the arrow prop to give your tooltip an arrow indicating which
    element it refers to.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button description="Add">ARROW</button>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Tooltiptitle="Add"arrow><Button>Arrow</Button></Tooltip>
  </text>
  <heading level="2">Custom child element</heading>
  <text>
    The tooltip needs to apply DOM event listeners to its child element. If the
    child is a custom React element, you need to make sure that it spreads its
    properties to the underlying DOM element.const MyComponent =
    React.forwardRef(functionMyComponent(props, ref){// Spread the props to
    the underlying DOM
    element.return<div{...props}ref={ref}>Bin</div>});//
    ...<Tooltiptitle="Delete"><MyComponent></Tooltip>You
    can find a similar concept in the
  </text>
  <link>wrapping components</link>
  <text>guide.</text>
  <heading level="2">Triggers</heading>
  <text>You can define the types of events that cause a tooltip to show.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button description="Add">HOVER OR TOUCH</button>
  <button>FOCUS OR TOUCH</button>
  <button description="Add">HOVER</button>
  <button>CLICK</button>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Controlled Tooltips</heading>
  <text>
    You can use the open, onOpen and onClose properties to control the behavior
    of the tooltip.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button description="Add">CONTROLLED</button>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Tooltipopen={open}onClose={handleClose}onOpen={handleOpen}title="Add"><Button>Controlled</Button></Tooltip>
  </text>
  <heading level="2">Variable Width</heading>
  <text>The Tooltip wraps long text by default to make it readable.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button description="Aliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est, vel aliquam tellus. Praesent non nunc mollis, fermentum neque at, semper arcu. Nullam eget est sed sem iaculis gravida eget vitae justo.">
    DEFAULT WIDTH [300PX]
  </button>
  <button description="Aliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est, vel aliquam tellus. Praesent non nunc mollis, fermentum neque at, semper arcu. Nullam eget est sed sem iaculis gravida eget vitae justo.">
    CUSTOM WIDTH [500PX]
  </button>
  <button description="Aliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est, vel aliquam tellus. Praesent non nunc mollis, fermentum neque at, semper arcu. Nullam eget est sed sem iaculis gravida eget vitae justo.">
    NO WRAPPING
  </button>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Tooltiptitle={longText}><ButtonclassName={classes.button}>Default
    Width
    [300px]</Button></Tooltip><Tooltiptitle={longText}classes={{
    tooltip: classes.customWidth
    }}><ButtonclassName={classes.button}>Custom
    Width
    [500px]</Button></Tooltip><Tooltiptitle={longText}classes={{
    tooltip: classes.noMaxWidth
    }}><ButtonclassName={classes.button}>No
    wrapping</Button></Tooltip>
  </text>
  <heading level="2">Interactive</heading>
  <text>
    A tooltip can be interactive. It won't close when the user hovers over
    the tooltip before the leaveDelay is expired.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button description="Add">INTERACTIVE</button>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Tooltiptitle="Add"interactive><Button>Interactive</Button></Tooltip>
  </text>
  <heading level="2">Disabled Elements</heading>
  <text>
    By default disabled elements like <button> do not trigger user
    interactions so a Tooltip will not activate on normal events like hover. To
    accommodate disabled elements, add a simple wrapper element, such as a
    span.‚ö†Ô∏è In order to work with Safari, you need at least one display block or
    flex item below the tooltip wrapper.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button disabled="true">A DISABLED BUTTON</button>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Tooltiptitle="You don't have permission to do
    this"><span><Buttondisabled>A Disabled
    Button</Button></span></Tooltip>If you're not
    wrapping a Material-UI component that inherits from ButtonBase, for
    instance, a native <button> element, you should also add the CSS
    property pointer-events: none; to your element when
    disabled:<Tooltiptitle="You don't have permission to do
    this"><span><buttondisabled={disabled}style={disabled
    ?{
    pointerEvents:"none"}:{}}>{'A
    disabled button'}</button></span></Tooltip>
  </text>
  <heading level="2">Transitions</heading>
  <text>Use a different transition.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button description="Add">GROW</button>
  <button description="Add">FADE</button>
  <button description="Add">ZOOM</button>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Tooltiptitle="Add"><Button>Grow</Button></Tooltip><TooltipTransitionComponent={Fade}TransitionProps={{
    timeout:600}}title="Add"><Button>Fade</Button></Tooltip><TooltipTransitionComponent={Zoom}title="Add"><Button>Zoom</Button></Tooltip>
  </text>
  <heading level="2">Showing and hiding</heading>
  <text>
    The tooltip is normally shown immediately when the user's mouse hovers
    over the element, and hides immediately when the user's mouse leaves. A
    delay in showing or hiding the tooltip can be added through the properties
    enterDelay and leaveDelay, as shown in the Controlled Tooltips demo above.On
    mobile, the tooltip is displayed when the user longpresses the element and
    hides after a delay of 1500ms. You can disable this feature with the
    disableTouchListener property.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button description="Add">[500MS, 200MS]</button>
  <button>Show the full source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <text>
    <Tooltiptitle="Add"enterDelay={500}leaveDelay={200}><Button>[500ms,200ms]</Button></Tooltip>
  </text>
  <heading level="2">API</heading>
  <statictext>‚Ä¢</statictext>
  <link><Tooltip /></link>
  <link>Table</link>
  <link>Typography</link>
</landmark>;

`;

exports[`firefox /components/transfer-list 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Transfer List</heading>
  <text>
    A transfer list (or "shuttle") enables the user to move one or
    more list items between lists.
  </text>
  <heading level="2">Simple Transfer List</heading>
  <text>
    For completeness, this example includes buttons for "move all",
    but not every transfer list needs these.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <listitem>
    List item 1<checkbox>List item 1</checkbox>
    <text>List item 1</text>
  </listitem>
  <listitem>
    List item 2<checkbox>List item 2</checkbox>
    <text>List item 2</text>
  </listitem>
  <listitem>
    List item 3<checkbox>List item 3</checkbox>
    <text>List item 3</text>
  </listitem>
  <listitem>
    List item 4<checkbox>List item 4</checkbox>
    <text>List item 4</text>
  </listitem>
  <button>move all right</button>
  <button disabled="true">move selected right</button>
  <button disabled="true">move selected left</button>
  <button>move all left</button>
  <listitem>
    List item 5<checkbox>List item 5</checkbox>
    <text>List item 5</text>
  </listitem>
  <listitem>
    List item 6<checkbox>List item 6</checkbox>
    <text>List item 6</text>
  </listitem>
  <listitem>
    List item 7<checkbox>List item 7</checkbox>
    <text>List item 7</text>
  </listitem>
  <listitem>
    List item 8<checkbox>List item 8</checkbox>
    <text>List item 8</text>
  </listitem>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Enhanced Transfer List</heading>
  <text>
    This example exchanges the "move all" buttons for a "select
    all / select none" checkbox, and adds a counter.
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox>all items selected</checkbox>
  <text>Choices0/4 selected</text>
  <listitem>
    List item 1<checkbox>List item 1</checkbox>
    <text>List item 1</text>
  </listitem>
  <listitem>
    List item 2<checkbox>List item 2</checkbox>
    <text>List item 2</text>
  </listitem>
  <listitem>
    List item 3<checkbox>List item 3</checkbox>
    <text>List item 3</text>
  </listitem>
  <listitem>
    List item 4<checkbox>List item 4</checkbox>
    <text>List item 4</text>
  </listitem>
  <button disabled="true">move selected right</button>
  <button disabled="true">move selected left</button>
  <checkbox>all items selected</checkbox>
  <text>Chosen0/4 selected</text>
  <listitem>
    List item 5<checkbox>List item 5</checkbox>
    <text>List item 5</text>
  </listitem>
  <listitem>
    List item 6<checkbox>List item 6</checkbox>
    <text>List item 6</text>
  </listitem>
  <listitem>
    List item 7<checkbox>List item 7</checkbox>
    <text>List item 7</text>
  </listitem>
  <listitem>
    List item 8<checkbox>List item 8</checkbox>
    <text>List item 8</text>
  </listitem>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">API</heading>
  <statictext>‚Ä¢</statictext>
  <link><Checkbox /></link>
  <statictext>‚Ä¢</statictext>
  <link><List /></link>
  <statictext>‚Ä¢</statictext>
  <link><ListItem /></link>
  <statictext>‚Ä¢</statictext>
  <link><Switch /></link>
  <link>Text Field</link>
  <link>Bottom Navigation</link>
</landmark>;

`;

exports[`firefox /components/tree-view/ 1`] = `
<landmark>
  <link>EDIT THIS PAGE</link>
  <heading level="1">Tree View</heading>
  <text>
    A tree view widget presents a hierarchical list.Tree views can be used to
    represent a file system navigator displaying folders and files, an item
    representing a folder can be expanded to reveal the contents of the folder,
    which may be files, folders, or both.
  </text>
  <heading level="2">Basic tree view</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    <treeitem level="1">Applications</treeitem>
    <treeitem level="1">Documents</treeitem>
  </tree>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Multi selection</heading>
  <text>Tree views also support multi selection.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree multiselectable="true">
    <treeitem level="1">Applications</treeitem>
    <treeitem level="1">Documents</treeitem>
  </tree>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="3">Controlled tree view</heading>
  <text>The tree view also offers a controlled API.</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    <treeitem level="1">Applications</treeitem>
    <treeitem level="1">Documents</treeitem>
  </tree>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Rich object</heading>
  <text>
    While the TreeView/TreeItem component API maximizes flexibility, an extra
    step is needed to handle a rich object.Let's consider a data variable
    with the following shape, recursion can be used to handle it.const data
    ={ id:'root', name:'Parent', children:[{
    id:'1', name:'Child - 1',},// ‚Ä¶],};
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    <treeitem expanded="true" level="1">
      Parent Child - 1 Child - 3<text>Parent</text>
      <treeitem level="2">Child - 1</treeitem>
      <treeitem level="2">Child - 3</treeitem>
    </treeitem>
  </tree>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Customized tree view</heading>
  <heading level="3">Custom icons, border and animation</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    <treeitem expanded="true" level="1">
      Main Hello Subtree with children World Something something
      <text>Main</text>
      <treeitem level="2">Hello</treeitem>
      <treeitem level="2">Subtree with children</treeitem>
      <treeitem level="2">World</treeitem>
      <treeitem level="2">Something something</treeitem>
    </treeitem>
  </tree>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="3">Gmail clone</heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    <treeitem level="1">All Mail</treeitem>
    <treeitem level="1">Trash</treeitem>
    <treeitem expanded="true" level="1">
      Categories Social 90 Updates 2,294 Forums 3,566 Promotions 733
      <text>Categories</text>
      <treeitem level="2">Social 90</treeitem>
      <treeitem level="2">Updates 2,294</treeitem>
      <treeitem level="2">Forums 3,566</treeitem>
      <treeitem level="2">Promotions 733</treeitem>
    </treeitem>
    <treeitem level="1">History</treeitem>
  </tree>
  <button>Show the source</button>
  <button>Edit in CodeSandbox</button>
  <button>Copy the source</button>
  <button>Reset focus to test keyboard navigation</button>
  <button>Reset demo</button>
  <buttonmenu haspopup="true">See more</buttonmenu>
  <heading level="2">Accessibility</heading>
  <text>(WAI-ARIA:</text>
  <link>https://www.w3.org/TR/wai-aria-practices/#TreeView</link>
  <text>)The component follows the WAI-ARIA authoring practices.</text>
  <heading level="2">API</heading>
  <statictext>‚Ä¢</statictext>
  <link><TreeItem /></link>
  <statictext>‚Ä¢</statictext>
  <link><TreeView /></link>
  <link>Toggle Button</link>
  <link>Alert</link>
</landmark>;

`;
