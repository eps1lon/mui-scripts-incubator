// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`chromium / 1`] = `
<WebArea>
  Material-UI: A popular React UI framework
  <link checked="undefined" pressed="undefined">
    Skip to content
  </link>
  <banner>
    <button>
      Open main navigation
      <SVGRoot></SVGRoot>
    </button>
    <SVGRoot></SVGRoot>
    <searchbox>Search</searchbox>
    <combobox autocomplete="list" haspopup="listbox">
      Search
      <text>Search‚Ä¶</text>
    </combobox>
    <Pre></Pre>
    <combobox haspopup="menu">
      Change language
      <SVGRoot></SVGRoot>
      <text>ENGLISH</text>
      <SVGRoot></SVGRoot>
    </combobox>
    <combobox haspopup="menu">
      Toggle notifications panel
      <SVGRoot></SVGRoot>
    </combobox>
    <link checked="undefined" pressed="undefined">
      Edit website colors
      <SVGRoot></SVGRoot>
    </link>
    <link checked="undefined" pressed="undefined">
      GitHub repository
      <SVGRoot></SVGRoot>
    </link>
    <button>
      Toggle light/dark theme
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Toggle right-to-left/left-to-right
      <SVGRoot></SVGRoot>
    </button>
  </banner>
  <navigation>Main navigation</navigation>
  <main>
    <heading level="1">
      MATERIAL-UI
      <text>MATERIAL-UI</text>
    </heading>
    <paragraph>
      <text>
        React components for faster and simpler web development. Build your own
        design system, or start with Material Design.
      </text>
    </paragraph>
    <link checked="undefined" pressed="undefined">
      GET STARTED
      <text>GET STARTED</text>
    </link>
    <link checked="undefined" pressed="undefined">
      Star
    </link>
    <link checked="undefined" pressed="undefined">
      Follow
    </link>
    <link checked="undefined" pressed="undefined">
      Get Professional Support
    </link>
    <text>random sponsor</text>
    <link checked="undefined" pressed="undefined">
      a random quick word
    </link>
    <SVGRoot></SVGRoot>
    <heading level="2">
      Installation
      <text>Installation</text>
    </heading>
    <text>
      Install Material-UI's source files via npm. We take care of injecting
      the CSS needed.
    </text>
    <Pre>
      <code>
        <text>
          $ npm install @material-ui/core@next @emotion/core @emotion/styled
        </text>
      </code>
    </Pre>
    <link checked="undefined" pressed="undefined">
      or use a CDN.
    </link>
    <text>Load the default Roboto font.</text>
    <Pre>
      <code>
        <text>
          <linkrel="stylesheet"href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"/>
        </text>
      </code>
    </Pre>
    <separator orientation="horizontal"></separator>
    <link checked="undefined" pressed="undefined">
      READ INSTALLATION DOCS
      <text>READ INSTALLATION DOCS</text>
    </link>
    <SVGRoot></SVGRoot>
    <heading level="2">
      Usage
      <text>Usage</text>
    </heading>
    <text>
      Material-UI components work without any additional setup, and don't
      pollute the global scope.
    </text>
    <Pre>
      <code>
        <text>
          import*asReactfrom'react';import{Button}from'@material-ui/core';functionApp(){return<Button>Hello
          World</Button>;}
        </text>
      </code>
    </Pre>
    <separator orientation="horizontal"></separator>
    <link checked="undefined" pressed="undefined">
      EXPLORE THE DOCS
      <text>EXPLORE THE DOCS</text>
    </link>
    <heading level="2">
      Premium themes
      <text>Premium themes</text>
    </heading>
    <paragraph>
      <text>
        Take your project to the next level with premium themes from our store ‚Äì
        all built on Material-UI.
      </text>
    </paragraph>
    <link checked="undefined" pressed="undefined">
      Browse themes
      <img>Browse themes</img>
    </link>
    <link checked="undefined" pressed="undefined">
      BROWSE THEMES
      <text>BROWSE THEMES</text>
    </link>
    <separator orientation="horizontal"></separator>
    <heading level="2">
      Material-UI's sponsors
      <Anchor></Anchor>
      <text>Material-UI's sponsors</text>
    </heading>
    <paragraph>
      <text>
        The continued development and maintenance of Material-UI is made
        possible by these generous sponsors:
      </text>
    </paragraph>
    <heading level="3">
      Diamond üíé
      <Anchor></Anchor>
      <text>Diamond üíé</text>
    </heading>
    <paragraph>
      <link checked="undefined" pressed="undefined">
        octopus
        <img description="Repeatable, reliable deployments">octopus</img>
      </link>
      <link checked="undefined" pressed="undefined">
        doit-intl
        <img description="Management Platform for Google Cloud and AWS">
          doit-intl
        </img>
      </link>
    </paragraph>
    <paragraph>
      <text>1/3 slots available</text>
    </paragraph>
    <heading level="3">
      Gold üèÜ
      <Anchor></Anchor>
      <text>Gold üèÜ</text>
    </heading>
    <paragraph>
      <link checked="undefined" pressed="undefined">
        tidelift
        <img description="Enterprise-ready open source software">tidelift</img>
      </link>
      <link checked="undefined" pressed="undefined">
        bitsrc
        <img description="The fastest way to share code">bitsrc</img>
      </link>
    </paragraph>
    <paragraph>
      <link checked="undefined" pressed="undefined">
        call-em-all
        <img description="Mass Text Messaging & Automated Calling">
          call-em-all
        </img>
      </link>
      <link checked="undefined" pressed="undefined">
        bitsrc
        <img>bitsrc</img>
      </link>
    </paragraph>
    <heading level="3">
      There are more!
      <Anchor></Anchor>
      <text>There are more!</text>
    </heading>
    <paragraph>
      <text>See the full list of</text>
      <link checked="undefined" pressed="undefined">
        our sponsors
      </link>
      <text>
        , and learn how you can contribute to the future of Material-UI.
      </text>
    </paragraph>
    <separator orientation="horizontal"></separator>
    <heading level="2">
      Praise for Material-UI
      <text>Praise for Material-UI</text>
    </heading>
    <paragraph>
      <text>Here's what some of our users are saying.</text>
    </paragraph>
    <link checked="undefined" pressed="undefined">
      a random quote about Material-UI
    </link>
    <link checked="undefined" pressed="undefined">
      a random quote about Material-UI
    </link>
    <link checked="undefined" pressed="undefined">
      a random quote about Material-UI
    </link>
    <separator orientation="horizontal"></separator>
    <heading level="2">
      Who's using Material-UI?
      <text>Who's using Material-UI?</text>
    </heading>
    <paragraph>
      <text>Join these and other great organisations!</text>
    </paragraph>
    <img>NASA</img>
    <img>Walmart Labs</img>
    <img>Capgemini</img>
    <img>Uniqlo</img>
    <img>Bethesda</img>
    <img>J.P. Morgan</img>
    <img>Shutterstock</img>
    <img>Netflix</img>
    <img>Coursera</img>
    <img>Amazon</img>
    <img>Unity</img>
    <paragraph>
      <text>Are you using Material-UI?</text>
    </paragraph>
    <link checked="undefined" pressed="undefined">
      LET US KNOW!
      <text>LET US KNOW!</text>
    </link>
  </main>
  <separator orientation="horizontal"></separator>
  <contentinfo>
    <link checked="undefined" pressed="undefined">
      Material-UI
    </link>
    <heading level="2">
      Community
      <text>Community</text>
    </heading>
    <list>
      <listitem level="1">
        <link checked="undefined" pressed="undefined">
          GitHub
        </link>
      </listitem>
      <listitem level="1">
        <link checked="undefined" pressed="undefined">
          Twitter
        </link>
      </listitem>
      <listitem level="1">
        <link checked="undefined" pressed="undefined">
          StackOverflow
        </link>
      </listitem>
      <listitem level="1">
        <link checked="undefined" pressed="undefined">
          Team
        </link>
      </listitem>
    </list>
    <heading level="2">
      Resources
      <text>Resources</text>
    </heading>
    <list>
      <listitem level="1">
        <link checked="undefined" pressed="undefined">
          Support
        </link>
      </listitem>
      <listitem level="1">
        <link checked="undefined" pressed="undefined">
          Blog
        </link>
      </listitem>
      <listitem level="1">
        <link checked="undefined" pressed="undefined">
          Material Icons
        </link>
      </listitem>
    </list>
    <heading level="2">
      Company
      <text>Company</text>
    </heading>
    <list>
      <listitem level="1">
        <link checked="undefined" pressed="undefined">
          About
        </link>
      </listitem>
      <listitem level="1">
        <link checked="undefined" pressed="undefined">
          Contact Us
        </link>
      </listitem>
      <listitem level="1">
        <link checked="undefined" pressed="undefined">
          Jobs
        </link>
      </listitem>
    </list>
    <paragraph>
      <text>Currently</text>
      <link checked="undefined" pressed="undefined">
        v5.0.0-alpha.12. View versions page.
      </link>
      <text>. Released under the</text>
      <link checked="undefined" pressed="undefined">
        MIT License
      </link>
      <text>.Copyright ¬©2020Material-UI.</text>
    </paragraph>
  </contentinfo>
  <link checked="undefined" pressed="undefined">
    Material-UI
  </link>
  <link checked="undefined" pressed="undefined">
    v5.0.0-alpha.12
  </link>
  <separator orientation="horizontal"></separator>
  <text>Diamond Sponsors</text>
  <link checked="undefined" pressed="undefined">
    <img description="Repeatable, reliable deployments">octopus</img>
  </link>
  <link checked="undefined" pressed="undefined">
    <img description="Management Platform for Google Cloud and AWS">
      doit-intl
    </img>
  </link>
  <link checked="undefined" pressed="undefined">
    Diamond Sponsors
    <SVGRoot></SVGRoot>
  </link>
  <list>
    <listitem level="1">
      <button>
        Getting Started
        <SVGRoot></SVGRoot>
        <text>Getting Started</text>
      </button>
    </listitem>
    <listitem level="1">
      <button>
        Components
        <SVGRoot></SVGRoot>
        <text>Components</text>
      </button>
    </listitem>
    <listitem level="1">
      <button>
        Component API
        <SVGRoot></SVGRoot>
        <text>Component API</text>
      </button>
    </listitem>
    <listitem level="1">
      <button>
        Styles
        <SVGRoot></SVGRoot>
        <text>Styles</text>
      </button>
    </listitem>
    <listitem level="1">
      <button>
        System
        <SVGRoot></SVGRoot>
        <text>System</text>
      </button>
    </listitem>
    <listitem level="1">
      <button>
        Customization
        <SVGRoot></SVGRoot>
        <text>Customization</text>
      </button>
    </listitem>
    <listitem level="1">
      <button>
        Guides
        <SVGRoot></SVGRoot>
        <text>Guides</text>
      </button>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Premium themes
      </link>
    </listitem>
    <listitem level="1">
      <button>
        Discover More
        <SVGRoot></SVGRoot>
        <text>Discover More</text>
      </button>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Blog
      </link>
    </listitem>
  </list>
</WebArea>;

`;

exports[`chromium /api/button/ 1`] = `
<main>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text>EDIT THIS PAGE</text>
  </link>
  <heading level="1">
    Button API
    <text>Button API</text>
  </heading>
  <paragraph>
    <text>
      The API documentation of the Button React component. Learn more about the
      props and the CSS customization points.
    </text>
  </paragraph>
  <heading level="2">
    Import
    <Anchor></Anchor>
    <text>Import</text>
  </heading>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>You can learn more about the difference by</text>
    <link checked="undefined" pressed="undefined">
      reading this guide
    </link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Component name
    <Anchor></Anchor>
    <text>Component name</text>
  </heading>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>name can be used for providing</text>
    <link checked="undefined" pressed="undefined">
      default props
    </link>
    <text>or</text>
    <link checked="undefined" pressed="undefined">
      style overrides
    </link>
    <text>at the theme level.</text>
  </paragraph>
  <heading level="2">
    Props
    <Anchor></Anchor>
    <text>Props</text>
  </heading>
  <table>
    <row>
      <columnheader>
        Name
        <text>Name</text>
      </columnheader>
      <columnheader>
        Type
        <text>Type</text>
      </columnheader>
      <columnheader>
        Default
        <text>Default</text>
      </columnheader>
      <columnheader>
        Description
        <text>Description</text>
      </columnheader>
    </row>
    <row>
      <gridcell>
        children
        <text>children</text>
      </gridcell>
      <gridcell>
        node
        <text>node</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        The content of the button.
        <text>The content of the button.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        classes
        <text>classes</text>
      </gridcell>
      <gridcell>
        object
        <text>object</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        Override or extend the styles applied to the component. See CSS API
        below for more details.
        <text>Override or extend the styles applied to the component. See</text>
        <link checked="undefined" pressed="undefined">
          CSS API
        </link>
        <text>below for more details.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        color
        <text>color</text>
      </gridcell>
      <gridcell>
        'inherit' |¬†'primary' |¬†'secondary'
        <text>'inherit'</text>
        <LineBreak></LineBreak>
        <text>|¬†'primary'</text>
        <LineBreak></LineBreak>
        <text>|¬†'secondary'</text>
      </gridcell>
      <gridcell>
        'primary'
        <text>'primary'</text>
      </gridcell>
      <gridcell>
        The color of the component. It supports those theme colors that make
        sense for this component.
        <text>
          The color of the component. It supports those theme colors that make
          sense for this component.
        </text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        component
        <text>component</text>
      </gridcell>
      <gridcell>
        elementType
        <text>elementType</text>
      </gridcell>
      <gridcell>
        'button'
        <text>'button'</text>
      </gridcell>
      <gridcell>
        The component used for the root node. Either a string to use a HTML
        element or a component.
        <text>
          The component used for the root node. Either a string to use a HTML
          element or a component.
        </text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        disabled
        <text>disabled</text>
      </gridcell>
      <gridcell>
        bool
        <text>bool</text>
      </gridcell>
      <gridcell>
        false
        <text>false</text>
      </gridcell>
      <gridcell>
        If true, the button will be disabled.
        <text>If</text>
        <code>$SOME_CODE</code>
        <text>, the button will be disabled.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        disableElevation
        <text>disableElevation</text>
      </gridcell>
      <gridcell>
        bool
        <text>bool</text>
      </gridcell>
      <gridcell>
        false
        <text>false</text>
      </gridcell>
      <gridcell>
        If true, no elevation is used.
        <text>If</text>
        <code>$SOME_CODE</code>
        <text>, no elevation is used.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        disableFocusRipple
        <text>disableFocusRipple</text>
      </gridcell>
      <gridcell>
        bool
        <text>bool</text>
      </gridcell>
      <gridcell>
        false
        <text>false</text>
      </gridcell>
      <gridcell>
        If true, the keyboard focus ripple will be disabled.
        <text>If</text>
        <code>$SOME_CODE</code>
        <text>, the keyboard focus ripple will be disabled.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        disableRipple
        <text>disableRipple</text>
      </gridcell>
      <gridcell>
        bool
        <text>bool</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        If true, the ripple effect will be disabled. ‚ö†Ô∏è Without a ripple there
        is no styling for :focus-visible by default. Be sure to highlight the
        element by applying separate styles with the focusVisibleClassName.
        <text>If</text>
        <code>$SOME_CODE</code>
        <text>, the ripple effect will be disabled.</text>
        <LineBreak></LineBreak>
        <text>
          ‚ö†Ô∏è Without a ripple there is no styling for :focus-visible by default.
          Be sure to highlight the element by applying separate styles with the
        </text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        endIcon
        <text>endIcon</text>
      </gridcell>
      <gridcell>
        node
        <text>node</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        Element placed after the children.
        <text>Element placed after the children.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        fullWidth
        <text>fullWidth</text>
      </gridcell>
      <gridcell>
        bool
        <text>bool</text>
      </gridcell>
      <gridcell>
        false
        <text>false</text>
      </gridcell>
      <gridcell>
        If true, the button will take up the full width of its container.
        <text>If</text>
        <code>$SOME_CODE</code>
        <text>, the button will take up the full width of its container.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        href
        <text>href</text>
      </gridcell>
      <gridcell>
        string
        <text>string</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        The URL to link to when the button is clicked. If defined, an a element
        will be used as the root node.
        <text>
          The URL to link to when the button is clicked. If defined, an
        </text>
        <code>$SOME_CODE</code>
        <text>element will be used as the root node.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        size
        <text>size</text>
      </gridcell>
      <gridcell>
        'large' |¬†'medium' |¬†'small'
        <text>'large'</text>
        <LineBreak></LineBreak>
        <text>|¬†'medium'</text>
        <LineBreak></LineBreak>
        <text>|¬†'small'</text>
      </gridcell>
      <gridcell>
        'medium'
        <text>'medium'</text>
      </gridcell>
      <gridcell>
        The size of the button. small is equivalent to the dense button styling.
        <text>The size of the button.</text>
        <code>$SOME_CODE</code>
        <text>is equivalent to the dense button styling.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        startIcon
        <text>startIcon</text>
      </gridcell>
      <gridcell>
        node
        <text>node</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        Element placed before the children.
        <text>Element placed before the children.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        variant
        <text>variant</text>
      </gridcell>
      <gridcell>
        'contained' |¬†'outlined' |¬†'text' |¬†string
        <text>'contained'</text>
        <LineBreak></LineBreak>
        <text>|¬†'outlined'</text>
        <LineBreak></LineBreak>
        <text>|¬†'text'</text>
        <LineBreak></LineBreak>
        <text>|¬†string</text>
      </gridcell>
      <gridcell>
        'text'
        <text>'text'</text>
      </gridcell>
      <gridcell>
        The variant to use.
        <text>The variant to use.</text>
      </gridcell>
    </row>
  </table>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>is forwarded to the root element.</text>
  </paragraph>
  <paragraph>
    <text>Any other props supplied will be provided to the root element (</text>
    <link checked="undefined" pressed="undefined">
      ButtonBase
    </link>
    <text>).</text>
  </paragraph>
  <heading level="2">
    CSS
    <Anchor></Anchor>
    <text>CSS</text>
  </heading>
  <table>
    <row>
      <columnheader>
        Rule name
        <text>Rule name</text>
      </columnheader>
      <columnheader>
        Global class
        <text>Global class</text>
      </columnheader>
      <columnheader>
        Description
        <text>Description</text>
      </columnheader>
    </row>
    <row>
      <gridcell>
        root
        <text>root</text>
      </gridcell>
      <gridcell>
        .MuiButton-root
        <text>.MuiButton-root</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element.
        <text>Styles applied to the root element.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        label
        <text>label</text>
      </gridcell>
      <gridcell>
        .MuiButton-label
        <text>.MuiButton-label</text>
      </gridcell>
      <gridcell>
        Styles applied to the span element that wraps the children.
        <text>Styles applied to the span element that wraps the children.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        text
        <text>text</text>
      </gridcell>
      <gridcell>
        .MuiButton-text
        <text>.MuiButton-text</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if variant="text".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        textPrimary
        <text>textPrimary</text>
      </gridcell>
      <gridcell>
        .MuiButton-textPrimary
        <text>.MuiButton-textPrimary</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if variant="text" and
        color="primary".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        textSecondary
        <text>textSecondary</text>
      </gridcell>
      <gridcell>
        .MuiButton-textSecondary
        <text>.MuiButton-textSecondary</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if variant="text" and
        color="secondary".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        outlined
        <text>outlined</text>
      </gridcell>
      <gridcell>
        .MuiButton-outlined
        <text>.MuiButton-outlined</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if variant="outlined".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        outlinedPrimary
        <text>outlinedPrimary</text>
      </gridcell>
      <gridcell>
        .MuiButton-outlinedPrimary
        <text>.MuiButton-outlinedPrimary</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if variant="outlined" and
        color="primary".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        outlinedSecondary
        <text>outlinedSecondary</text>
      </gridcell>
      <gridcell>
        .MuiButton-outlinedSecondary
        <text>.MuiButton-outlinedSecondary</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if variant="outlined" and
        color="secondary".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        contained
        <text>contained</text>
      </gridcell>
      <gridcell>
        .MuiButton-contained
        <text>.MuiButton-contained</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if variant="contained".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        containedPrimary
        <text>containedPrimary</text>
      </gridcell>
      <gridcell>
        .MuiButton-containedPrimary
        <text>.MuiButton-containedPrimary</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if variant="contained" and
        color="primary".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        containedSecondary
        <text>containedSecondary</text>
      </gridcell>
      <gridcell>
        .MuiButton-containedSecondary
        <text>.MuiButton-containedSecondary</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if variant="contained" and
        color="secondary".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        disableElevation
        <text>disableElevation</text>
      </gridcell>
      <gridcell>
        .MuiButton-disableElevation
        <text>.MuiButton-disableElevation</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if disableElevation={true}.
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        focusVisible
        <text>focusVisible</text>
      </gridcell>
      <gridcell>
        .Mui-focusVisible
        <text>.Mui-focusVisible</text>
      </gridcell>
      <gridcell>
        Pseudo-class applied to the ButtonBase root element if the button is
        keyboard focused.
        <text>
          Pseudo-class applied to the ButtonBase root element if the button is
          keyboard focused.
        </text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        disabled
        <text>disabled</text>
      </gridcell>
      <gridcell>
        .Mui-disabled
        <text>.Mui-disabled</text>
      </gridcell>
      <gridcell>
        Pseudo-class applied to the root element if disabled={true}.
        <text>Pseudo-class applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        colorInherit
        <text>colorInherit</text>
      </gridcell>
      <gridcell>
        .MuiButton-colorInherit
        <text>.MuiButton-colorInherit</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if color="inherit".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        textSizeSmall
        <text>textSizeSmall</text>
      </gridcell>
      <gridcell>
        .MuiButton-textSizeSmall
        <text>.MuiButton-textSizeSmall</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if size="small" and
        variant="text".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        textSizeLarge
        <text>textSizeLarge</text>
      </gridcell>
      <gridcell>
        .MuiButton-textSizeLarge
        <text>.MuiButton-textSizeLarge</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if size="large" and
        variant="text".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        outlinedSizeSmall
        <text>outlinedSizeSmall</text>
      </gridcell>
      <gridcell>
        .MuiButton-outlinedSizeSmall
        <text>.MuiButton-outlinedSizeSmall</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if size="small" and
        variant="outlined".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        outlinedSizeLarge
        <text>outlinedSizeLarge</text>
      </gridcell>
      <gridcell>
        .MuiButton-outlinedSizeLarge
        <text>.MuiButton-outlinedSizeLarge</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if size="large" and
        variant="outlined".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        containedSizeSmall
        <text>containedSizeSmall</text>
      </gridcell>
      <gridcell>
        .MuiButton-containedSizeSmall
        <text>.MuiButton-containedSizeSmall</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if size="small" and
        variant="contained".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        containedSizeLarge
        <text>containedSizeLarge</text>
      </gridcell>
      <gridcell>
        .MuiButton-containedSizeLarge
        <text>.MuiButton-containedSizeLarge</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if size="large" and
        variant="contained".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        sizeSmall
        <text>sizeSmall</text>
      </gridcell>
      <gridcell>
        .MuiButton-sizeSmall
        <text>.MuiButton-sizeSmall</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if size="small".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        sizeLarge
        <text>sizeLarge</text>
      </gridcell>
      <gridcell>
        .MuiButton-sizeLarge
        <text>.MuiButton-sizeLarge</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if size="large".
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        fullWidth
        <text>fullWidth</text>
      </gridcell>
      <gridcell>
        .MuiButton-fullWidth
        <text>.MuiButton-fullWidth</text>
      </gridcell>
      <gridcell>
        Styles applied to the root element if fullWidth={true}.
        <text>Styles applied to the root element if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        startIcon
        <text>startIcon</text>
      </gridcell>
      <gridcell>
        .MuiButton-startIcon
        <text>.MuiButton-startIcon</text>
      </gridcell>
      <gridcell>
        Styles applied to the startIcon element if supplied.
        <text>Styles applied to the startIcon element if supplied.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        endIcon
        <text>endIcon</text>
      </gridcell>
      <gridcell>
        .MuiButton-endIcon
        <text>.MuiButton-endIcon</text>
      </gridcell>
      <gridcell>
        Styles applied to the endIcon element if supplied.
        <text>Styles applied to the endIcon element if supplied.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        iconSizeSmall
        <text>iconSizeSmall</text>
      </gridcell>
      <gridcell>
        .MuiButton-iconSizeSmall
        <text>.MuiButton-iconSizeSmall</text>
      </gridcell>
      <gridcell>
        Styles applied to the icon element if supplied and
        size="small".
        <text>Styles applied to the icon element if supplied and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        iconSizeMedium
        <text>iconSizeMedium</text>
      </gridcell>
      <gridcell>
        .MuiButton-iconSizeMedium
        <text>.MuiButton-iconSizeMedium</text>
      </gridcell>
      <gridcell>
        Styles applied to the icon element if supplied and
        size="medium".
        <text>Styles applied to the icon element if supplied and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        iconSizeLarge
        <text>iconSizeLarge</text>
      </gridcell>
      <gridcell>
        .MuiButton-iconSizeLarge
        <text>.MuiButton-iconSizeLarge</text>
      </gridcell>
      <gridcell>
        Styles applied to the icon element if supplied and
        size="large".
        <text>Styles applied to the icon element if supplied and</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
  </table>
  <paragraph>
    <text>
      You can override the style of the component thanks to one of these
      customization points:
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>With a rule name of the</text>
      <link checked="undefined" pressed="undefined">
        classes object prop
        <code>$SOME_CODE</code>
      </link>
      <text>.</text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>With a</text>
      <link checked="undefined" pressed="undefined">
        global class name
      </link>
      <text>.</text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>With a theme and an</text>
      <link checked="undefined" pressed="undefined">
        overrides property
        <code>$SOME_CODE</code>
      </link>
      <text>.</text>
    </listitem>
  </list>
  <paragraph>
    <text>If that's not sufficient, you can check the</text>
    <link checked="undefined" pressed="undefined">
      implementation of the component
    </link>
    <text>for more detail.</text>
  </paragraph>
  <heading level="2">
    Inheritance
    <Anchor></Anchor>
    <text>Inheritance</text>
  </heading>
  <paragraph>
    <text>The props of the</text>
    <link checked="undefined" pressed="undefined">
      ButtonBase
    </link>
    <text>
      component are also available. You can take advantage of this behavior to
    </text>
    <link checked="undefined" pressed="undefined">
      target nested components
    </link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Demos
    <Anchor></Anchor>
    <text>Demos</text>
  </heading>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        Button Group
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        Buttons
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link checked="undefined" pressed="undefined">
      Breadcrumbs
      <SVGRoot></SVGRoot>
      <text>Breadcrumbs</text>
    </link>
    <link checked="undefined" pressed="undefined">
      ButtonBase
      <text>ButtonBase</text>
      <SVGRoot></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /api/select/ 1`] = `
<main>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text>EDIT THIS PAGE</text>
  </link>
  <heading level="1">
    Select API
    <text>Select API</text>
  </heading>
  <paragraph>
    <text>
      The API documentation of the Select React component. Learn more about the
      props and the CSS customization points.
    </text>
  </paragraph>
  <heading level="2">
    Import
    <Anchor></Anchor>
    <text>Import</text>
  </heading>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>You can learn more about the difference by</text>
    <link checked="undefined" pressed="undefined">
      reading this guide
    </link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Component name
    <Anchor></Anchor>
    <text>Component name</text>
  </heading>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>name can be used for providing</text>
    <link checked="undefined" pressed="undefined">
      default props
    </link>
    <text>or</text>
    <link checked="undefined" pressed="undefined">
      style overrides
    </link>
    <text>at the theme level.</text>
  </paragraph>
  <heading level="2">
    Props
    <Anchor></Anchor>
    <text>Props</text>
  </heading>
  <table>
    <row>
      <columnheader>
        Name
        <text>Name</text>
      </columnheader>
      <columnheader>
        Type
        <text>Type</text>
      </columnheader>
      <columnheader>
        Default
        <text>Default</text>
      </columnheader>
      <columnheader>
        Description
        <text>Description</text>
      </columnheader>
    </row>
    <row>
      <gridcell>
        autoWidth
        <text>autoWidth</text>
      </gridcell>
      <gridcell>
        bool
        <text>bool</text>
      </gridcell>
      <gridcell>
        false
        <text>false</text>
      </gridcell>
      <gridcell>
        If true, the width of the popover will automatically be set according to
        the items inside the menu, otherwise it will be at least the width of
        the select input.
        <text>If</text>
        <code>$SOME_CODE</code>
        <text>
          , the width of the popover will automatically be set according to the
          items inside the menu, otherwise it will be at least the width of the
          select input.
        </text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        children
        <text>children</text>
      </gridcell>
      <gridcell>
        node
        <text>node</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        The option elements to populate the select with. Can be some MenuItem
        when native is false and option when native is true. ‚ö†Ô∏èThe MenuItem
        elements must be direct descendants when native is false.
        <text>
          The option elements to populate the select with. Can be some
        </text>
        <code>$SOME_CODE</code>
        <text>when</text>
        <code>$SOME_CODE</code>
        <text>is false and</text>
        <code>$SOME_CODE</code>
        <text>when</text>
        <code>$SOME_CODE</code>
        <text>is true.</text>
        <LineBreak></LineBreak>
        <text>‚ö†Ô∏èThe</text>
        <code>$SOME_CODE</code>
        <text>elementsmustbe direct descendants when</text>
        <code>$SOME_CODE</code>
        <text>is false.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        classes
        <text>classes</text>
      </gridcell>
      <gridcell>
        object
        <text>object</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        Override or extend the styles applied to the component. See CSS API
        below for more details.
        <text>Override or extend the styles applied to the component. See</text>
        <link checked="undefined" pressed="undefined">
          CSS API
        </link>
        <text>below for more details.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        defaultValue
        <text>defaultValue</text>
      </gridcell>
      <gridcell>
        any
        <text>any</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        The default element value. Use when the component is not controlled.
        <text>
          The default element value. Use when the component is not controlled.
        </text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        displayEmpty
        <text>displayEmpty</text>
      </gridcell>
      <gridcell>
        bool
        <text>bool</text>
      </gridcell>
      <gridcell>
        false
        <text>false</text>
      </gridcell>
      <gridcell>
        If true, a value is displayed even if no items are selected. In order to
        display a meaningful value, a function can be passed to the renderValue
        prop which returns the value to be displayed when no items are selected.
        ‚ö†Ô∏è When using this prop, make sure the label doesn't overlap with
        the empty displayed value. The label should either be hidden or forced
        to a shrunk state.
        <text>If</text>
        <code>$SOME_CODE</code>
        <text>, a value is displayed even if no items are selected.</text>
        <LineBreak></LineBreak>
        <text>
          In order to display a meaningful value, a function can be passed to
          the
        </text>
        <code>$SOME_CODE</code>
        <text>
          prop which returns the value to be displayed when no items are
          selected.
        </text>
        <LineBreak></LineBreak>
        <text>
          ‚ö†Ô∏è When using this prop, make sure the label doesn't overlap with
          the empty displayed value. The label should either be hidden or forced
          to a shrunk state.
        </text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        IconComponent
        <text>IconComponent</text>
      </gridcell>
      <gridcell>
        elementType
        <text>elementType</text>
      </gridcell>
      <gridcell>
        ArrowDropDownIcon
        <text>ArrowDropDownIcon</text>
      </gridcell>
      <gridcell>
        The icon that displays the arrow.
        <text>The icon that displays the arrow.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        id
        <text>id</text>
      </gridcell>
      <gridcell>
        string
        <text>string</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        The id of the wrapper element or the select element when native.
        <text>The</text>
        <code>$SOME_CODE</code>
        <text>of the wrapper element or the</text>
        <code>$SOME_CODE</code>
        <text>element when</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        input
        <text>input</text>
      </gridcell>
      <gridcell>
        element
        <text>element</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        An Input element; does not have to be a material-ui specific Input.
        <text>An</text>
        <code>$SOME_CODE</code>
        <text>element; does not have to be a material-ui specific</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        inputProps
        <text>inputProps</text>
      </gridcell>
      <gridcell>
        object
        <text>object</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        Attributes applied to the input element. When native is true, the
        attributes are applied on the select element.
        <link checked="undefined" pressed="undefined">
          Attributes
        </link>
        <text>applied to the</text>
        <code>$SOME_CODE</code>
        <text>element. When</text>
        <code>$SOME_CODE</code>
        <text>is</text>
        <code>$SOME_CODE</code>
        <text>, the attributes are applied on the</text>
        <code>$SOME_CODE</code>
        <text>element.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        label
        <text>label</text>
      </gridcell>
      <gridcell>
        node
        <text>node</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        See OutlinedInput#label
        <text>See</text>
        <link checked="undefined" pressed="undefined">
          OutlinedInput#label
        </link>
      </gridcell>
    </row>
    <row>
      <gridcell>
        labelId
        <text>labelId</text>
      </gridcell>
      <gridcell>
        string
        <text>string</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        The ID of an element that acts as an additional label. The Select will
        be labelled by the additional label and the selected value.
        <text>
          The ID of an element that acts as an additional label. The Select will
          be labelled by the additional label and the selected value.
        </text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        labelWidth
        <text>labelWidth</text>
      </gridcell>
      <gridcell>
        number
        <text>number</text>
      </gridcell>
      <gridcell>
        0<text>0</text>
      </gridcell>
      <gridcell>
        See OutlinedInput#label
        <text>See</text>
        <link checked="undefined" pressed="undefined">
          OutlinedInput#label
        </link>
      </gridcell>
    </row>
    <row>
      <gridcell>
        MenuProps
        <text>MenuProps</text>
      </gridcell>
      <gridcell>
        object
        <text>object</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        Props applied to the Menu element.
        <text>Props applied to the</text>
        <link checked="undefined" pressed="undefined">
          Menu
          <code>$SOME_CODE</code>
        </link>
        <text>element.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        multiple
        <text>multiple</text>
      </gridcell>
      <gridcell>
        bool
        <text>bool</text>
      </gridcell>
      <gridcell>
        false
        <text>false</text>
      </gridcell>
      <gridcell>
        If true, value must be an array and the menu will support multiple
        selections.
        <text>If</text>
        <code>$SOME_CODE</code>
        <text>,</text>
        <code>$SOME_CODE</code>
        <text>
          must be an array and the menu will support multiple selections.
        </text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        native
        <text>native</text>
      </gridcell>
      <gridcell>
        bool
        <text>bool</text>
      </gridcell>
      <gridcell>
        false
        <text>false</text>
      </gridcell>
      <gridcell>
        If true, the component will be using a native select element.
        <text>If</text>
        <code>$SOME_CODE</code>
        <text>, the component will be using a native</text>
        <code>$SOME_CODE</code>
        <text>element.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        onChange
        <text>onChange</text>
      </gridcell>
      <gridcell>
        func
        <text>func</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        Callback fired when a menu item is selected. Signature: function(event:
        object, child?: object) => void event: The event source of the
        callback. You can pull out the new value by accessing event.target.value
        (any). child: The react element that was selected when native is false
        (default).
        <text>Callback fired when a menu item is selected.</text>
        <LineBreak></LineBreak>
        <LineBreak></LineBreak>
        <text>Signature:</text>
        <LineBreak></LineBreak>
        <code>$SOME_CODE</code>
        <LineBreak></LineBreak>
        <text>
          event:The event source of the callback. You can pull out the new value
          by accessing
        </text>
        <code>$SOME_CODE</code>
        <text>(any).</text>
        <LineBreak></LineBreak>
        <text>child:The react element that was selected when</text>
        <code>$SOME_CODE</code>
        <text>is</text>
        <code>$SOME_CODE</code>
        <text>(default).</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        onClose
        <text>onClose</text>
      </gridcell>
      <gridcell>
        func
        <text>func</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        Callback fired when the component requests to be closed. Use in
        controlled mode (see open). Signature: function(event: object) =>
        void event: The event source of the callback.
        <text>
          Callback fired when the component requests to be closed. Use in
          controlled mode (see open).
        </text>
        <LineBreak></LineBreak>
        <LineBreak></LineBreak>
        <text>Signature:</text>
        <LineBreak></LineBreak>
        <code>$SOME_CODE</code>
        <LineBreak></LineBreak>
        <text>event:The event source of the callback.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        onOpen
        <text>onOpen</text>
      </gridcell>
      <gridcell>
        func
        <text>func</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        Callback fired when the component requests to be opened. Use in
        controlled mode (see open). Signature: function(event: object) =>
        void event: The event source of the callback.
        <text>
          Callback fired when the component requests to be opened. Use in
          controlled mode (see open).
        </text>
        <LineBreak></LineBreak>
        <LineBreak></LineBreak>
        <text>Signature:</text>
        <LineBreak></LineBreak>
        <code>$SOME_CODE</code>
        <LineBreak></LineBreak>
        <text>event:The event source of the callback.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        open
        <text>open</text>
      </gridcell>
      <gridcell>
        bool
        <text>bool</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        Control select open state. You can only use it when the native prop is
        false (default).
        <text>Control</text>
        <code>$SOME_CODE</code>
        <text>open state. You can only use it when the</text>
        <code>$SOME_CODE</code>
        <text>prop is</text>
        <code>$SOME_CODE</code>
        <text>(default).</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        renderValue
        <text>renderValue</text>
      </gridcell>
      <gridcell>
        func
        <text>func</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        Render the selected value. You can only use it when the native prop is
        false (default). Signature: function(value: any) => ReactNode value:
        The value provided to the component.
        <text>Render the selected value. You can only use it when the</text>
        <code>$SOME_CODE</code>
        <text>prop is</text>
        <code>$SOME_CODE</code>
        <text>(default).</text>
        <LineBreak></LineBreak>
        <LineBreak></LineBreak>
        <text>Signature:</text>
        <LineBreak></LineBreak>
        <code>$SOME_CODE</code>
        <LineBreak></LineBreak>
        <text>value:The</text>
        <code>$SOME_CODE</code>
        <text>provided to the component.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        SelectDisplayProps
        <text>SelectDisplayProps</text>
      </gridcell>
      <gridcell>
        object
        <text>object</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        Props applied to the clickable div element.
        <text>Props applied to the clickable div element.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        value
        <text>value</text>
      </gridcell>
      <gridcell>
        any
        <text>any</text>
      </gridcell>
      <gridcell></gridcell>
      <gridcell>
        The input value. Providing an empty string will select no options. This
        prop is required when the native prop is false (default). Set to an
        empty string '' if you don't want any of the available
        options to be selected. If the value is an object it must have reference
        equality with the option in order to be selected. If the value is not an
        object, the string representation must match with the string
        representation of the option in order to be selected.
        <text>
          The input value. Providing an empty string will select no options.
          This prop is required when the
        </text>
        <code>$SOME_CODE</code>
        <text>prop is</text>
        <code>$SOME_CODE</code>
        <text>(default). Set to an empty string</text>
        <code>$SOME_CODE</code>
        <text>
          if you don't want any of the available options to be selected.
        </text>
        <LineBreak></LineBreak>
        <text>
          If the value is an object it must have reference equality with the
          option in order to be selected. If the value is not an object, the
          string representation must match with the string representation of the
          option in order to be selected.
        </text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        variant
        <text>variant</text>
      </gridcell>
      <gridcell>
        'filled' |¬†'outlined' |¬†'standard'
        <text>'filled'</text>
        <LineBreak></LineBreak>
        <text>|¬†'outlined'</text>
        <LineBreak></LineBreak>
        <text>|¬†'standard'</text>
      </gridcell>
      <gridcell>
        'standard'
        <text>'standard'</text>
      </gridcell>
      <gridcell>
        The variant to use.
        <text>The variant to use.</text>
      </gridcell>
    </row>
  </table>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>is forwarded to the root element.</text>
  </paragraph>
  <paragraph>
    <text>Any other props supplied will be provided to the root element (</text>
    <link checked="undefined" pressed="undefined">
      Input
    </link>
    <text>).</text>
  </paragraph>
  <heading level="2">
    CSS
    <Anchor></Anchor>
    <text>CSS</text>
  </heading>
  <table>
    <row>
      <columnheader>
        Rule name
        <text>Rule name</text>
      </columnheader>
      <columnheader>
        Global class
        <text>Global class</text>
      </columnheader>
      <columnheader>
        Description
        <text>Description</text>
      </columnheader>
    </row>
    <row>
      <gridcell>
        root
        <text>root</text>
      </gridcell>
      <gridcell>
        .MuiSelect-root
        <text>.MuiSelect-root</text>
      </gridcell>
      <gridcell>
        Styles applied to the select component root class.
        <text>Styles applied to the select component</text>
        <code>$SOME_CODE</code>
        <text>class.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        select
        <text>select</text>
      </gridcell>
      <gridcell>
        .MuiSelect-select
        <text>.MuiSelect-select</text>
      </gridcell>
      <gridcell>
        Styles applied to the select component select class.
        <text>Styles applied to the select component</text>
        <code>$SOME_CODE</code>
        <text>class.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        filled
        <text>filled</text>
      </gridcell>
      <gridcell>
        .MuiSelect-filled
        <text>.MuiSelect-filled</text>
      </gridcell>
      <gridcell>
        Styles applied to the select component if variant="filled".
        <text>Styles applied to the select component if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        outlined
        <text>outlined</text>
      </gridcell>
      <gridcell>
        .MuiSelect-outlined
        <text>.MuiSelect-outlined</text>
      </gridcell>
      <gridcell>
        Styles applied to the select component if variant="outlined".
        <text>Styles applied to the select component if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        selectMenu
        <text>selectMenu</text>
      </gridcell>
      <gridcell>
        .MuiSelect-selectMenu
        <text>.MuiSelect-selectMenu</text>
      </gridcell>
      <gridcell>
        Styles applied to the select component selectMenu class.
        <text>Styles applied to the select component</text>
        <code>$SOME_CODE</code>
        <text>class.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        disabled
        <text>disabled</text>
      </gridcell>
      <gridcell>
        .Mui-disabled
        <text>.Mui-disabled</text>
      </gridcell>
      <gridcell>
        Pseudo-class applied to the select component disabled class.
        <text>Pseudo-class applied to the select component</text>
        <code>$SOME_CODE</code>
        <text>class.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        icon
        <text>icon</text>
      </gridcell>
      <gridcell>
        .MuiSelect-icon
        <text>.MuiSelect-icon</text>
      </gridcell>
      <gridcell>
        Styles applied to the icon component.
        <text>Styles applied to the icon component.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        iconOpen
        <text>iconOpen</text>
      </gridcell>
      <gridcell>
        .MuiSelect-iconOpen
        <text>.MuiSelect-iconOpen</text>
      </gridcell>
      <gridcell>
        Styles applied to the icon component if the popup is open.
        <text>Styles applied to the icon component if the popup is open.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        iconFilled
        <text>iconFilled</text>
      </gridcell>
      <gridcell>
        .MuiSelect-iconFilled
        <text>.MuiSelect-iconFilled</text>
      </gridcell>
      <gridcell>
        Styles applied to the icon component if variant="filled".
        <text>Styles applied to the icon component if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        iconOutlined
        <text>iconOutlined</text>
      </gridcell>
      <gridcell>
        .MuiSelect-iconOutlined
        <text>.MuiSelect-iconOutlined</text>
      </gridcell>
      <gridcell>
        Styles applied to the icon component if variant="outlined".
        <text>Styles applied to the icon component if</text>
        <code>$SOME_CODE</code>
        <text>.</text>
      </gridcell>
    </row>
    <row>
      <gridcell>
        nativeInput
        <text>nativeInput</text>
      </gridcell>
      <gridcell>
        .MuiSelect-nativeInput
        <text>.MuiSelect-nativeInput</text>
      </gridcell>
      <gridcell>
        Styles applied to the underlying native input component.
        <text>Styles applied to the underlying native input component.</text>
      </gridcell>
    </row>
  </table>
  <paragraph>
    <text>
      You can override the style of the component thanks to one of these
      customization points:
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>With a rule name of the</text>
      <link checked="undefined" pressed="undefined">
        classes object prop
        <code>$SOME_CODE</code>
      </link>
      <text>.</text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>With a</text>
      <link checked="undefined" pressed="undefined">
        global class name
      </link>
      <text>.</text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>With a theme and an</text>
      <link checked="undefined" pressed="undefined">
        overrides property
        <code>$SOME_CODE</code>
      </link>
      <text>.</text>
    </listitem>
  </list>
  <paragraph>
    <text>If that's not sufficient, you can check the</text>
    <link checked="undefined" pressed="undefined">
      implementation of the component
    </link>
    <text>for more detail.</text>
  </paragraph>
  <heading level="2">
    Inheritance
    <Anchor></Anchor>
    <text>Inheritance</text>
  </heading>
  <paragraph>
    <text>The props of the</text>
    <link checked="undefined" pressed="undefined">
      Input
    </link>
    <text>
      component are also available. You can take advantage of this behavior to
    </text>
    <link checked="undefined" pressed="undefined">
      target nested components
    </link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Demos
    <Anchor></Anchor>
    <text>Demos</text>
  </heading>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        Selects
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link checked="undefined" pressed="undefined">
      ScopedCssBaseline
      <SVGRoot></SVGRoot>
      <text>ScopedCssBaseline</text>
    </link>
    <link checked="undefined" pressed="undefined">
      Skeleton
      <text>Skeleton</text>
      <SVGRoot></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/breadcrumbs 1`] = `
<main>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text>EDIT THIS PAGE</text>
  </link>
  <heading level="1">
    Breadcrumbs
    <text>Breadcrumbs</text>
  </heading>
  <paragraph>
    <text>
      Breadcrumbs allow users to make selections from a range of values.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot></SVGRoot>
        <text>Feedback</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
        <SVGRoot></SVGRoot>
        <text>WAI-ARIA</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
        <SVGRoot></SVGRoot>
        <text>Bundle size</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot></SVGRoot>
        <text>Sketch</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot></SVGRoot>
        <text>Figma</text>
      </link>
    </listitem>
  </list>
  <heading level="2">
    Basic breadcrumbs
    <Anchor></Anchor>
    <text>Basic breadcrumbs</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    breadcrumb
    <list>
      <listitem level="1">
        <link checked="undefined" pressed="undefined">
          Material-UI
        </link>
      </listitem>
      <listitem level="1">
        <text>/</text>
      </listitem>
      <listitem level="1">
        <link checked="undefined" pressed="undefined">
          Core
        </link>
      </listitem>
      <listitem level="1">
        <text>/</text>
      </listitem>
      <listitem level="1">
        <paragraph>
          <text>Breadcrumb</text>
        </paragraph>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Active last breadcrumb
    <Anchor></Anchor>
    <text>Active last breadcrumb</text>
  </heading>
  <paragraph>
    <text>Keep the last breadcrumb interactive.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    breadcrumb
    <list>
      <listitem level="1">
        <link checked="undefined" pressed="undefined">
          Material-UI
        </link>
      </listitem>
      <listitem level="1">
        <text>/</text>
      </listitem>
      <listitem level="1">
        <link checked="undefined" pressed="undefined">
          Core
        </link>
      </listitem>
      <listitem level="1">
        <text>/</text>
      </listitem>
      <listitem level="1">
        <link checked="undefined" pressed="undefined">
          Breadcrumb
        </link>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Custom separator
    <Anchor></Anchor>
    <text>Custom separator</text>
  </heading>
  <paragraph>
    <text>
      In the following examples, we are using two string separators, and an SVG
      icon.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    breadcrumb
    <list>
      <listitem level="1">
        <link checked="undefined" pressed="undefined">
          Material-UI
        </link>
      </listitem>
      <listitem level="1">
        <text>‚Ä∫</text>
      </listitem>
      <listitem level="1">
        <link checked="undefined" pressed="undefined">
          Core
        </link>
      </listitem>
      <listitem level="1">
        <text>‚Ä∫</text>
      </listitem>
      <listitem level="1">
        <paragraph>
          <text>Breadcrumb</text>
        </paragraph>
      </listitem>
    </list>
  </navigation>
  <navigation>
    breadcrumb
    <list>
      <listitem level="1">
        <link checked="undefined" pressed="undefined">
          Material-UI
        </link>
      </listitem>
      <listitem level="1">
        <text>-</text>
      </listitem>
      <listitem level="1">
        <link checked="undefined" pressed="undefined">
          Core
        </link>
      </listitem>
      <listitem level="1">
        <text>-</text>
      </listitem>
      <listitem level="1">
        <paragraph>
          <text>Breadcrumb</text>
        </paragraph>
      </listitem>
    </list>
  </navigation>
  <navigation>
    breadcrumb
    <list>
      <listitem level="1">
        <link checked="undefined" pressed="undefined">
          Material-UI
        </link>
      </listitem>
      <listitem level="1">
        <SVGRoot></SVGRoot>
      </listitem>
      <listitem level="1">
        <link checked="undefined" pressed="undefined">
          Core
        </link>
      </listitem>
      <listitem level="1">
        <SVGRoot></SVGRoot>
      </listitem>
      <listitem level="1">
        <paragraph>
          <text>Breadcrumb</text>
        </paragraph>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Breadcrumbs with icons
    <Anchor></Anchor>
    <text>Breadcrumbs with icons</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    breadcrumb
    <list>
      <listitem level="1">
        <link checked="undefined" pressed="undefined">
          Material-UI
          <SVGRoot></SVGRoot>
        </link>
      </listitem>
      <listitem level="1">
        <text>/</text>
      </listitem>
      <listitem level="1">
        <link checked="undefined" pressed="undefined">
          Core
          <SVGRoot></SVGRoot>
        </link>
      </listitem>
      <listitem level="1">
        <text>/</text>
      </listitem>
      <listitem level="1">
        <paragraph>
          <SVGRoot></SVGRoot>
          <text>Breadcrumb</text>
        </paragraph>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Collapsed breadcrumbs
    <Anchor></Anchor>
    <text>Collapsed breadcrumbs</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    breadcrumb
    <list>
      <listitem level="1">
        <link checked="undefined" pressed="undefined">
          Home
        </link>
      </listitem>
      <listitem level="1">
        <text>/</text>
      </listitem>
      <listitem level="1">
        <button>
          Show path
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
      <listitem level="1">
        <text>/</text>
      </listitem>
      <listitem level="1">
        <paragraph>
          <text>Belts</text>
        </paragraph>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Customized breadcrumbs
    <Anchor></Anchor>
    <text>Customized breadcrumbs</text>
  </heading>
  <paragraph>
    <text>
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    breadcrumb
    <list>
      <listitem level="1">
        <link checked="undefined" pressed="undefined">
          Home
          <SVGRoot></SVGRoot>
          <text>Home</text>
        </link>
      </listitem>
      <listitem level="1">
        <text>/</text>
      </listitem>
      <listitem level="1">
        <link checked="undefined" pressed="undefined">
          Catalog
          <text>Catalog</text>
        </link>
      </listitem>
      <listitem level="1">
        <text>/</text>
      </listitem>
      <listitem level="1">
        <button>
          Accessories
          <text>Accessories</text>
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Integration with react-router
    <Anchor></Anchor>
    <text>Integration with react-router</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    breadcrumb
    <list>
      <listitem level="1">
        <link checked="undefined" pressed="undefined">
          Home
        </link>
      </listitem>
      <listitem level="1">
        <text>/</text>
      </listitem>
      <listitem level="1">
        <paragraph>
          <text>Inbox</text>
        </paragraph>
      </listitem>
    </list>
  </navigation>
  <navigation>
    mailbox folders
    <list>
      <listitem level="1">
        <button>
          Inbox
          <text>Inbox</text>
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
      <listitem level="1">
        <list>
          <listitem level="2">
            <button>
              Important
              <text>Important</text>
            </button>
          </listitem>
        </list>
      </listitem>
      <listitem level="1">
        <button>
          Trash
          <text>Trash</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Spam
          <text>Spam</text>
        </button>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Accessibility
    <Anchor></Anchor>
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(WAI-ARIA:</text>
    <link checked="undefined" pressed="undefined">
      https://www.w3.org/TR/wai-aria-practices/#breadcrumb
    </link>
    <text>)</text>
  </paragraph>
  <paragraph>
    <text>Be sure to add a</text>
    <code>$SOME_CODE</code>
    <text>description on the</text>
    <code>$SOME_CODE</code>
    <text>component.</text>
  </paragraph>
  <paragraph>
    <text>The accessibility of this component relies on:</text>
  </paragraph>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>The set of links is structured using an ordered list (</text>
      <code>$SOME_CODE</code>
      <text>element).</text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>
        To prevent screen reader announcement of the visual separators between
        links, they are hidden with
      </text>
      <code>$SOME_CODE</code>
      <text>.</text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>A nav element labeled with</text>
      <code>$SOME_CODE</code>
      <text>
        identifies the structure as a breadcrumb trail and makes it a navigation
        landmark so that it is easy to locate.
      </text>
    </listitem>
  </list>
  <heading level="2">
    API
    <Anchor></Anchor>
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Breadcrumbs />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Link />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Typography />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link checked="undefined" pressed="undefined">
      Bottom Navigation
      <SVGRoot></SVGRoot>
      <text>Bottom Navigation</text>
    </link>
    <link checked="undefined" pressed="undefined">
      Drawer
      <text>Drawer</text>
      <SVGRoot></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/button-group/ 1`] = `
<main>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text>EDIT THIS PAGE</text>
  </link>
  <heading level="1">
    Button group
    <text>Button group</text>
  </heading>
  <paragraph>
    <text>The ButtonGroup component can be used to group related buttons.</text>
  </paragraph>
  <list>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot></SVGRoot>
        <text>Feedback</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
        <SVGRoot></SVGRoot>
        <text>Bundle size</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot></SVGRoot>
        <text>Sketch</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot></SVGRoot>
        <text>Figma</text>
      </link>
    </listitem>
  </list>
  <heading level="2">
    Basic button group
    <Anchor></Anchor>
    <text>Basic button group</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    outlined primary button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <group>
    contained primary button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <group>
    text primary button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Sizes and colors
    <Anchor></Anchor>
    <text>Sizes and colors</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    small outlined button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <group>
    outlined secondary button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <group>
    large outlined primary button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Vertical group
    <Anchor></Anchor>
    <text>Vertical group</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    vertical outlined primary button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <group>
    vertical contained primary button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <group>
    vertical contained primary button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Split button
    <Anchor></Anchor>
    <text>Split button</text>
  </heading>
  <paragraph>
    <code>$SOME_CODE</code>
    <text>
      can also be used to create a split button. The dropdown can change the
      button action (as in this example), or be used to immediately trigger a
      related action.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    split button
    <button>
      SQUASH AND MERGE
      <text>SQUASH AND MERGE</text>
    </button>
    <combobox haspopup="menu">
      select merge strategy
      <SVGRoot></SVGRoot>
    </combobox>
  </group>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Disabled elevation
    <Anchor></Anchor>
    <text>Disabled elevation</text>
  </heading>
  <paragraph>
    <text>You can remove the elevation with the</text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
  </group>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    API
    <Anchor></Anchor>
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Button />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <ButtonGroup />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link checked="undefined" pressed="undefined">
      Button
      <SVGRoot></SVGRoot>
      <text>Button</text>
    </link>
    <link checked="undefined" pressed="undefined">
      Checkbox
      <text>Checkbox</text>
      <SVGRoot></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/buttons/ 1`] = `
<main>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text>EDIT THIS PAGE</text>
  </link>
  <heading level="1">
    Button
    <text>Button</text>
  </heading>
  <paragraph>
    <text>
      Buttons allow users to take actions, and make choices, with a single tap.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Buttons communicate actions that users can take. They are typically placed
      throughout your UI, in places like:
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>Dialogs</text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>Modal windows</text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>Forms</text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>Cards</text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>Toolbars</text>
    </listitem>
  </list>
  <list>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot></SVGRoot>
        <text>Feedback</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
        <SVGRoot></SVGRoot>
        <text>WAI-ARIA</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
        <SVGRoot></SVGRoot>
        <text>Bundle size</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Material Design
        <SVGRoot></SVGRoot>
        <text>Material Design</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot></SVGRoot>
        <text>Sketch</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot></SVGRoot>
        <text>Figma</text>
      </link>
    </listitem>
  </list>
  <heading level="2">
    Contained Buttons
    <Anchor></Anchor>
    <text>Contained Buttons</text>
  </heading>
  <paragraph>
    <link checked="undefined" pressed="undefined">
      Contained buttons
    </link>
    <text>
      are high-emphasis, distinguished by their use of elevation and fill. They
      contain actions that are primary to your app.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    PRIMARY
    <text>PRIMARY</text>
  </button>
  <button>
    SECONDARY
    <text>SECONDARY</text>
  </button>
  <button disabled="true">
    DISABLED
    <text>DISABLED</text>
  </button>
  <link checked="undefined" pressed="undefined">
    LINK
    <text>LINK</text>
  </link>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>You can remove the elevation with the</text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    DISABLE ELEVATION
    <text>DISABLE ELEVATION</text>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Text Buttons
    <Anchor></Anchor>
    <text>Text Buttons</text>
  </heading>
  <paragraph>
    <link checked="undefined" pressed="undefined">
      Text buttons
    </link>
    <text>
      are typically used for less-pronounced actions, including those located:
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>In dialogs</text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>In cards</text>
    </listitem>
  </list>
  <paragraph>
    <text>
      In cards, text buttons help maintain an emphasis on card content.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    PRIMARY
    <text>PRIMARY</text>
  </button>
  <button>
    SECONDARY
    <text>SECONDARY</text>
  </button>
  <button disabled="true">
    DISABLED
    <text>DISABLED</text>
  </button>
  <link checked="undefined" pressed="undefined">
    LINK
    <text>LINK</text>
  </link>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Outlined Buttons
    <Anchor></Anchor>
    <text>Outlined Buttons</text>
  </heading>
  <paragraph>
    <link checked="undefined" pressed="undefined">
      Outlined buttons
    </link>
    <text>
      are medium-emphasis buttons. They contain actions that are important, but
      aren‚Äôt the primary action in an app.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Outlined buttons are also a lower emphasis alternative to contained
      buttons, or a higher emphasis alternative to text buttons.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    PRIMARY
    <text>PRIMARY</text>
  </button>
  <button>
    SECONDARY
    <text>SECONDARY</text>
  </button>
  <button disabled="true">
    DISABLED
    <text>DISABLED</text>
  </button>
  <link checked="undefined" pressed="undefined">
    LINK
    <text>LINK</text>
  </link>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Handling clicks
    <Anchor></Anchor>
    <text>Handling clicks</text>
  </heading>
  <paragraph>
    <text>All components accept an</text>
    <code>$SOME_CODE</code>
    <text>handler that is applied to the root DOM element.</text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>Note that the documentation</text>
    <link checked="undefined" pressed="undefined">
      avoids
    </link>
    <text>
      mentioning native props (there are a lot) in the API section of the
      components.
    </text>
  </paragraph>
  <heading level="2">
    Upload button
    <Anchor></Anchor>
    <text>Upload button</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <button>
      UPLOAD
      <text>UPLOAD</text>
    </button>
  </Label>
  <Label>
    <button>
      upload picture
      <SVGRoot></SVGRoot>
    </button>
  </Label>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Sizes
    <Anchor></Anchor>
    <text>Sizes</text>
  </heading>
  <paragraph>
    <text>For larger or smaller buttons use the</text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    SMALL
    <text>SMALL</text>
  </button>
  <button>
    MEDIUM
    <text>MEDIUM</text>
  </button>
  <button>
    LARGE
    <text>LARGE</text>
  </button>
  <button>
    SMALL
    <text>SMALL</text>
  </button>
  <button>
    MEDIUM
    <text>MEDIUM</text>
  </button>
  <button>
    LARGE
    <text>LARGE</text>
  </button>
  <button>
    SMALL
    <text>SMALL</text>
  </button>
  <button>
    MEDIUM
    <text>MEDIUM</text>
  </button>
  <button>
    LARGE
    <text>LARGE</text>
  </button>
  <button>
    delete
    <SVGRoot></SVGRoot>
  </button>
  <button>
    delete
    <SVGRoot></SVGRoot>
  </button>
  <button>
    delete
    <SVGRoot></SVGRoot>
  </button>
  <button>
    delete
    <SVGRoot></SVGRoot>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Buttons with icons and label
    <Anchor></Anchor>
    <text>Buttons with icons and label</text>
  </heading>
  <paragraph>
    <text>
      Sometimes you might want to have icons for certain button to enhance the
      UX of the application as we recognize logos more easily than plain text.
      For example, if you have a delete button you can label it with a dustbin
      icon.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    DELETE
    <SVGRoot></SVGRoot>
    <text>DELETE</text>
  </button>
  <button>
    SEND
    <text>SENDsend</text>
  </button>
  <button>
    UPLOAD
    <SVGRoot></SVGRoot>
    <text>UPLOAD</text>
  </button>
  <button disabled="true">
    TALK
    <SVGRoot></SVGRoot>
    <text>TALK</text>
  </button>
  <button>
    SAVE
    <SVGRoot></SVGRoot>
    <text>SAVE</text>
  </button>
  <button>
    SAVE
    <SVGRoot></SVGRoot>
    <text>SAVE</text>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Icon Buttons
    <Anchor></Anchor>
    <text>Icon Buttons</text>
  </heading>
  <paragraph>
    <text>Icon buttons are commonly found in app bars and toolbars.</text>
  </paragraph>
  <paragraph>
    <text>
      Icons are also appropriate for toggle buttons that allow a single choice
      to be selected or deselected, such as adding or removing a star to an
      item.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    delete
    <SVGRoot></SVGRoot>
  </button>
  <button disabled="true">
    delete
    <SVGRoot></SVGRoot>
  </button>
  <button>
    add an alarm
    <SVGRoot></SVGRoot>
  </button>
  <button>
    add to shopping cart
    <SVGRoot></SVGRoot>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Customized buttons
    <Anchor></Anchor>
    <text>Customized buttons</text>
  </heading>
  <paragraph>
    <text>
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    CUSTOM CSS
    <text>CUSTOM CSS</text>
  </button>
  <button>
    THEME PROVIDER
    <text>THEME PROVIDER</text>
  </button>
  <button>
    Bootstrap
    <text>Bootstrap</text>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <paragraph>
    <text>üé® If you are looking for inspiration, you can check</text>
    <link checked="undefined" pressed="undefined">
      MUI Treasury's customization examples
    </link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Loading buttons
    <Anchor></Anchor>
    <text>Loading buttons</text>
  </heading>
  <paragraph>
    <text>
      The loading buttons can show pending state and disable interactions.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button disabled="true">
    <progressbar valuetext="">
      <SVGRoot></SVGRoot>
    </progressbar>
    <text>SUBMIT</text>
  </button>
  <button disabled="true">
    <text>LOADING...FETCH DATA</text>
  </button>
  <button disabled="true">
    SAVE
    <SVGRoot></SVGRoot>
    <progressbar valuetext="">
      <SVGRoot></SVGRoot>
    </progressbar>
    <text>SAVE</text>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>
      Toggle the switch to see the transition between the different states.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <checkbox checked="false">Pending</checkbox>
  </Label>
  <button>
    SUBMIT
    <text>SUBMIT</text>
  </button>
  <button>
    FETCH DATA
    <text>FETCH DATA</text>
  </button>
  <button>
    SEND
    <text>SEND</text>
    <SVGRoot></SVGRoot>
  </button>
  <button>
    SAVE
    <SVGRoot></SVGRoot>
    <text>SAVE</text>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Complex Buttons
    <Anchor></Anchor>
    <text>Complex Buttons</text>
  </heading>
  <paragraph>
    <text>
      The Text Buttons, Contained Buttons, Floating Action Buttons and Icon
      Buttons are built on top of the same component: the
    </text>
    <code>$SOME_CODE</code>
    <text>
      . You can take advantage of this lower level component to build custom
      interactions.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Breakfast
    <text>Breakfast</text>
  </button>
  <button>
    Burgers
    <text>Burgers</text>
  </button>
  <button>
    Camera
    <text>Camera</text>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Third-party routing library
    <Anchor></Anchor>
    <text>Third-party routing library</text>
  </heading>
  <paragraph>
    <text>
      One common use case is to use the button to trigger navigation to a new
      page. The
    </text>
    <code>$SOME_CODE</code>
    <text>component provides the</text>
    <code>$SOME_CODE</code>
    <text>
      prop to handle this use case. However for certain focus polyfills
    </text>
    <code>$SOME_CODE</code>
    <text>
      requires the DOM node of the provided component. This is achieved by
      attaching a ref to the component and expecting that the component forwards
      this ref to the underlying DOM node. Given that many of the interactive
      components rely on
    </text>
    <code>$SOME_CODE</code>
    <text>, you should be able to take advantage of it everywhere.</text>
  </paragraph>
  <paragraph>
    <text>Here is an</text>
    <link checked="undefined" pressed="undefined">
      integration example with react-router
    </link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Limitations
    <Anchor></Anchor>
    <text>Limitations</text>
  </heading>
  <heading level="3">
    Cursor not-allowed
    <Anchor></Anchor>
    <text>Cursor not-allowed</text>
  </heading>
  <paragraph>
    <text>The ButtonBase component sets</text>
    <code>$SOME_CODE</code>
    <text>
      on disabled buttons, which prevents the appearance of a disabled cursor.
    </text>
  </paragraph>
  <paragraph>
    <text>If you wish to use</text>
    <code>$SOME_CODE</code>
    <text>, you have two options:</text>
  </paragraph>
  <list>
    <listitem level="1">
      <ListMarker>
        1.
        <text>1.</text>
      </ListMarker>
      <text>
        CSS only. You can remove the pointer events style on the disabled state
        of the
      </text>
      <code>$SOME_CODE</code>
      <text>element:</text>
    </listitem>
  </list>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>However:</text>
  </paragraph>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>You should add</text>
      <code>$SOME_CODE</code>
      <text>back when you need to display</text>
      <link checked="undefined" pressed="undefined">
        tooltips on disabled elements
      </link>
      <text>.</text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>
        The cursor won't change if you render something other than a button
        element, for instance, a link
      </text>
      <code>$SOME_CODE</code>
      <text>element.</text>
    </listitem>
  </list>
  <list>
    <listitem level="1">
      <ListMarker>
        2.
        <text>2.</text>
      </ListMarker>
      <text>DOM change. You can wrap the button:</text>
    </listitem>
  </list>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>
      This has the advantage of supporting any element, for instance, a link
    </text>
    <code>$SOME_CODE</code>
    <text>element.</text>
  </paragraph>
  <heading level="2">
    API
    <Anchor></Anchor>
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Button />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <ButtonBase />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <IconButton />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <LoadingButton />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link checked="undefined" pressed="undefined">
      Autocomplete
      <SVGRoot></SVGRoot>
      <text>Autocomplete</text>
    </link>
    <link checked="undefined" pressed="undefined">
      Button Group
      <text>Button Group</text>
      <SVGRoot></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/checkboxes/ 1`] = `
<main>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text>EDIT THIS PAGE</text>
  </link>
  <heading level="1">
    Checkbox
    <text>Checkbox</text>
  </heading>
  <paragraph>
    <text>
      Checkboxes allow the user to select one or more items from a set.
    </text>
  </paragraph>
  <paragraph>
    <text>Checkboxes can be used to turn an option on or off.</text>
  </paragraph>
  <paragraph>
    <text>
      If you have multiple options appearing in a list, you can preserve space
      by using checkboxes instead of on/off switches. If you have a single
      option, avoid using a checkbox and use an on/off switch instead.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot></SVGRoot>
        <text>Feedback</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
        <SVGRoot></SVGRoot>
        <text>WAI-ARIA</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
        <SVGRoot></SVGRoot>
        <text>Bundle size</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Material Design
        <SVGRoot></SVGRoot>
        <text>Material Design</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot></SVGRoot>
        <text>Sketch</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot></SVGRoot>
        <text>Figma</text>
      </link>
    </listitem>
  </list>
  <heading level="2">
    Basic checkboxes
    <Anchor></Anchor>
    <text>Basic checkboxes</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">primary checkbox</checkbox>
  <SVGRoot></SVGRoot>
  <checkbox checked="true">secondary checkbox</checkbox>
  <SVGRoot></SVGRoot>
  <checkbox checked="false">uncontrolled-checkbox</checkbox>
  <SVGRoot></SVGRoot>
  <checkbox disabled="true" checked="false">
    disabled checkbox
  </checkbox>
  <SVGRoot></SVGRoot>
  <checkbox disabled="true" checked="true">
    disabled checked checkbox
  </checkbox>
  <SVGRoot></SVGRoot>
  <checkbox checked="true">indeterminate checkbox</checkbox>
  <SVGRoot></SVGRoot>
  <checkbox checked="true">checkbox with default color</checkbox>
  <SVGRoot></SVGRoot>
  <checkbox checked="true">checkbox with small size</checkbox>
  <SVGRoot></SVGRoot>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Indeterminate
    <Anchor></Anchor>
    <text>Indeterminate</text>
  </heading>
  <paragraph>
    <text>
      A checkbox input can only have two states in a form: checked or unchecked.
      It either submits its value or doesn't. Visually, there are actually
      three states a checkbox can be in: checked, unchecked, or indeterminate.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <checkbox checked="false">Parent</checkbox>
    <SVGRoot></SVGRoot>
  </Label>
  <Label>
    <checkbox checked="true">Child 1</checkbox>
    <SVGRoot></SVGRoot>
  </Label>
  <Label>
    <checkbox checked="false">Child 2</checkbox>
    <SVGRoot></SVGRoot>
  </Label>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Label
    <Anchor></Anchor>
    <text>Label</text>
  </heading>
  <paragraph>
    <code>$SOME_CODE</code>
    <text>can be provided with a label thanks to the</text>
    <code>$SOME_CODE</code>
    <text>component.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <checkbox checked="true">Secondary</checkbox>
    <SVGRoot></SVGRoot>
  </Label>
  <Label>
    <checkbox checked="true">Primary</checkbox>
    <SVGRoot></SVGRoot>
  </Label>
  <Label>
    <checkbox checked="false">Uncontrolled</checkbox>
    <SVGRoot></SVGRoot>
  </Label>
  <Label>
    <checkbox disabled="true" checked="false">
      Disabled
    </checkbox>
    <SVGRoot></SVGRoot>
  </Label>
  <Label>
    <checkbox disabled="true" checked="true">
      Disabled
    </checkbox>
    <SVGRoot></SVGRoot>
  </Label>
  <Label>
    <checkbox checked="true">Indeterminate</checkbox>
    <SVGRoot></SVGRoot>
  </Label>
  <Label>
    <checkbox checked="true">Custom color</checkbox>
    <SVGRoot></SVGRoot>
  </Label>
  <Label>
    <checkbox checked="false">Custom icon</checkbox>
    <SVGRoot></SVGRoot>
  </Label>
  <Label>
    <checkbox checked="false">Custom size</checkbox>
    <SVGRoot></SVGRoot>
  </Label>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    FormGroup
    <Anchor></Anchor>
    <text>FormGroup</text>
  </heading>
  <paragraph>
    <code>$SOME_CODE</code>
    <text>
      is a helpful wrapper used to group selection controls components that
      provides an easier API.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    Assign responsibility
    <Legend>
      <text>Assign responsibility</text>
    </Legend>
    <Label>
      <checkbox checked="true">Gilad Gray</checkbox>
      <SVGRoot></SVGRoot>
    </Label>
    <Label>
      <checkbox checked="false">Jason Killian</checkbox>
      <SVGRoot></SVGRoot>
    </Label>
    <Label>
      <checkbox checked="false">Antoine Llorca</checkbox>
      <SVGRoot></SVGRoot>
    </Label>
    <paragraph>
      <text>Be careful</text>
    </paragraph>
  </group>
  <group>
    Pick two
    <Legend>
      <text>Pick two‚Äâ*</text>
    </Legend>
    <Label>
      <checkbox checked="true">Gilad Gray</checkbox>
      <SVGRoot></SVGRoot>
    </Label>
    <Label>
      <checkbox checked="false">Jason Killian</checkbox>
      <SVGRoot></SVGRoot>
    </Label>
    <Label>
      <checkbox checked="false">Antoine Llorca</checkbox>
      <SVGRoot></SVGRoot>
    </Label>
    <paragraph>
      <text>You can display an error</text>
    </paragraph>
  </group>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Label placement
    <Anchor></Anchor>
    <text>Label placement</text>
  </heading>
  <paragraph>
    <text>You can change the placement of the label:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    Label Placement
    <Legend>
      <text>Label Placement</text>
    </Legend>
    <Label>
      <checkbox checked="false">Top</checkbox>
      <SVGRoot></SVGRoot>
    </Label>
    <Label>
      <checkbox checked="false">Start</checkbox>
      <SVGRoot></SVGRoot>
    </Label>
    <Label>
      <checkbox checked="false">Bottom</checkbox>
      <SVGRoot></SVGRoot>
    </Label>
    <Label>
      <checkbox checked="false">End</checkbox>
      <SVGRoot></SVGRoot>
    </Label>
  </group>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Customized checkbox
    <Anchor></Anchor>
    <text>Customized checkbox</text>
  </heading>
  <paragraph>
    <text>
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="false">decorative checkbox</checkbox>
  <checkbox checked="true">decorative checkbox</checkbox>
  <checkbox disabled="true" checked="false">
    decorative checkbox
  </checkbox>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <paragraph>
    <text>üé® If you are looking for inspiration, you can check</text>
    <link checked="undefined" pressed="undefined">
      MUI Treasury's customization examples
    </link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    When to use
    <Anchor></Anchor>
    <text>When to use</text>
  </heading>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        Checkboxes vs. Radio Buttons
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        Checkboxes vs. Switches
      </link>
    </listitem>
  </list>
  <heading level="2">
    Accessibility
    <Anchor></Anchor>
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(WAI-ARIA:</text>
    <link checked="undefined" pressed="undefined">
      https://www.w3.org/TR/wai-aria-practices/#checkbox
    </link>
    <text>)</text>
  </paragraph>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>
        All form controls should have labels, and this includes radio buttons,
        checkboxes, and switches. In most cases, this is done by using the
      </text>
      <code>$SOME_CODE</code>
      <text>element (</text>
      <link checked="undefined" pressed="undefined">
        FormControlLabel
      </link>
      <text>).</text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>
        When a label can't be used, it's necessary to add an attribute
        directly to the input component. In this case, you can apply the
        additional attribute (e.g.
      </text>
      <code>$SOME_CODE</code>
      <text>,</text>
      <code>$SOME_CODE</code>
      <text>,</text>
      <code>$SOME_CODE</code>
      <text>) via the</text>
      <code>$SOME_CODE</code>
      <text>prop.</text>
    </listitem>
  </list>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    API
    <Anchor></Anchor>
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Checkbox />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <FormControl />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <FormControlLabel />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <FormGroup />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <FormLabel />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link checked="undefined" pressed="undefined">
      Button Group
      <SVGRoot></SVGRoot>
      <text>Button Group</text>
    </link>
    <link checked="undefined" pressed="undefined">
      Floating Action Button
      <text>Floating Action Button</text>
      <SVGRoot></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/dialogs/ 1`] = `
<main>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text>EDIT THIS PAGE</text>
  </link>
  <heading level="1">
    Dialog
    <text>Dialog</text>
  </heading>
  <paragraph>
    <text>
      Dialogs inform users about a task and can contain critical information,
      require decisions, or involve multiple tasks.
    </text>
  </paragraph>
  <paragraph>
    <text>A Dialog is a type of</text>
    <link checked="undefined" pressed="undefined">
      modal
    </link>
    <text>
      window that appears in front of app content to provide critical
      information or ask for a decision. Dialogs disable all app functionality
      when they appear, and remain on screen until confirmed, dismissed, or a
      required action has been taken.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Dialogs are purposefully interruptive, so they should be used sparingly.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot></SVGRoot>
        <text>Feedback</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
        <SVGRoot></SVGRoot>
        <text>WAI-ARIA</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
        <SVGRoot></SVGRoot>
        <text>Bundle size</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Material Design
        <SVGRoot></SVGRoot>
        <text>Material Design</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot></SVGRoot>
        <text>Sketch</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot></SVGRoot>
        <text>Figma</text>
      </link>
    </listitem>
  </list>
  <heading level="2">
    Basic dialog
    <Anchor></Anchor>
    <text>Basic dialog</text>
  </heading>
  <paragraph>
    <text>
      Simple dialogs can provide additional details or actions about a list
      item. For example, they can display avatars, icons, clarifying subtext, or
      orthogonal actions (such as adding an account).
    </text>
  </paragraph>
  <paragraph>
    <text>Touch mechanics:</text>
  </paragraph>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>
        Choosing an option immediately commits the option and closes the menu
      </text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>
        Touching outside of the dialog, or pressing Back, cancels the action and
        closes the dialog
      </text>
    </listitem>
  </list>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <heading level="6">
    Selected: user02@gmail.com
    <text>Selected:user02@gmail.com</text>
  </heading>
  <LineBreak></LineBreak>
  <button>
    OPEN SIMPLE DIALOG
    <text>OPEN SIMPLE DIALOG</text>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Alerts
    <Anchor></Anchor>
    <text>Alerts</text>
  </heading>
  <paragraph>
    <text>
      Alerts are urgent interruptions, requiring acknowledgement, that inform
      the user about a situation.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Most alerts don't need titles. They summarize a decision in a
      sentence or two by either:
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>
        Asking a question (e.g. "Delete this conversation?")
      </text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>Making a statement related to the action buttons</text>
    </listitem>
  </list>
  <paragraph>
    <text>
      Use title bar alerts only for high-risk situations, such as the potential
      loss of connectivity. Users should be able to understand the choices based
      on the title and button text alone.
    </text>
  </paragraph>
  <paragraph>
    <text>If a title is required:</text>
  </paragraph>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>
        Use a clear question or statement with an explanation in the content
        area, such as "Erase USB storage?".
      </text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>
        Avoid apologies, ambiguity, or questions, such as ‚ÄúWarning!‚Äù or ‚ÄúAre you
        sure?‚Äù
      </text>
    </listitem>
  </list>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN ALERT DIALOG
    <text>OPEN ALERT DIALOG</text>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Transitions
    <Anchor></Anchor>
    <text>Transitions</text>
  </heading>
  <paragraph>
    <text>You can also swap out the transition, the next example uses</text>
    <code>$SOME_CODE</code>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    SLIDE IN ALERT DIALOG
    <text>SLIDE IN ALERT DIALOG</text>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Form dialogs
    <Anchor></Anchor>
    <text>Form dialogs</text>
  </heading>
  <paragraph>
    <text>
      Form dialogs allow users to fill out form fields within a dialog. For
      example, if your site prompts for potential subscribers to fill in their
      email address, they can fill out the email field and touch
      'Submit'.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN FORM DIALOG
    <text>OPEN FORM DIALOG</text>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Customized dialogs
    <Anchor></Anchor>
    <text>Customized dialogs</text>
  </heading>
  <paragraph>
    <text>
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>The dialog has a close button added to aide usability.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN DIALOG
    <text>OPEN DIALOG</text>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Full-screen dialogs
    <Anchor></Anchor>
    <text>Full-screen dialogs</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN FULL-SCREEN DIALOG
    <text>OPEN FULL-SCREEN DIALOG</text>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Optional sizes
    <Anchor></Anchor>
    <text>Optional sizes</text>
  </heading>
  <paragraph>
    <text>You can set a dialog maximum width by using the</text>
    <code>$SOME_CODE</code>
    <text>enumerable in combination with the</text>
    <code>$SOME_CODE</code>
    <text>boolean. When the</text>
    <code>$SOME_CODE</code>
    <text>prop is true, the dialog will adapt based on the</text>
    <code>$SOME_CODE</code>
    <text>value.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN MAX-WIDTH DIALOG
    <text>OPEN MAX-WIDTH DIALOG</text>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Responsive full-screen
    <Anchor></Anchor>
    <text>Responsive full-screen</text>
  </heading>
  <paragraph>
    <text>You may make a dialog responsively full screen using</text>
    <link checked="undefined" pressed="undefined">
      useMediaQuery
      <code>$SOME_CODE</code>
    </link>
    <text>.</text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN RESPONSIVE DIALOG
    <text>OPEN RESPONSIVE DIALOG</text>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Confirmation dialogs
    <Anchor></Anchor>
    <text>Confirmation dialogs</text>
  </heading>
  <paragraph>
    <text>
      Confirmation dialogs require users to explicitly confirm their choice
      before an option is committed. For example, users can listen to multiple
      ringtones but only make a final selection upon touching ‚ÄúOK‚Äù.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Touching ‚ÄúCancel‚Äù in a confirmation dialog, or pressing Back, cancels the
      action, discards any changes, and closes the dialog.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    <button disabled="true">
      Interruptions
      <text>Interruptions</text>
    </button>
    <combobox haspopup="menu">
      phone ringtone
      <text>Phone ringtone</text>
      <paragraph>
        <text>Dione</text>
      </paragraph>
    </combobox>
    <button disabled="true">
      Default notification ringtone Tethys
      <text>Default notification ringtone</text>
      <paragraph>
        <text>Tethys</text>
      </paragraph>
    </button>
  </group>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Draggable dialog
    <Anchor></Anchor>
    <text>Draggable dialog</text>
  </heading>
  <paragraph>
    <text>You can create a draggable dialog by using</text>
    <link checked="undefined" pressed="undefined">
      react-draggable
    </link>
    <text>. To do so, you can pass the imported</text>
    <code>$SOME_CODE</code>
    <text>component as the</text>
    <code>$SOME_CODE</code>
    <text>of the</text>
    <code>$SOME_CODE</code>
    <text>component. This will make the entire dialog draggable.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN DRAGGABLE DIALOG
    <text>OPEN DRAGGABLE DIALOG</text>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Scrolling long content
    <Anchor></Anchor>
    <text>Scrolling long content</text>
  </heading>
  <paragraph>
    <text>
      When dialogs become too long for the user‚Äôs viewport or device, they
      scroll.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <code>$SOME_CODE</code>
      <text>the content of the dialog scrolls within the paper element.</text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <code>$SOME_CODE</code>
      <text>the content of the dialog scrolls within the body element.</text>
    </listitem>
  </list>
  <paragraph>
    <text>Try the demo below to see what we mean:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    SCROLL=PAPER
    <text>SCROLL=PAPER</text>
  </button>
  <button>
    SCROLL=BODY
    <text>SCROLL=BODY</text>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Limitations
    <Anchor></Anchor>
    <text>Limitations</text>
  </heading>
  <paragraph>
    <text>Follow the</text>
    <link checked="undefined" pressed="undefined">
      Modal limitations section
    </link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Accessibility
    <Anchor></Anchor>
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>Follow the</text>
    <link checked="undefined" pressed="undefined">
      Modal accessibility section
    </link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    API
    <Anchor></Anchor>
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Dialog />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <DialogActions />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <DialogContent />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <DialogContentText />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <DialogTitle />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Slide />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link checked="undefined" pressed="undefined">
      Backdrop
      <SVGRoot></SVGRoot>
      <text>Backdrop</text>
    </link>
    <link checked="undefined" pressed="undefined">
      Progress
      <text>Progress</text>
      <SVGRoot></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/pagination/ 1`] = `
<main>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text>EDIT THIS PAGE</text>
  </link>
  <heading level="1">
    Pagination
    <text>Pagination</text>
  </heading>
  <paragraph>
    <text>
      The Pagination component enables the user to select a specific page from a
      range of pages.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot></SVGRoot>
        <text>Feedback</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
        <SVGRoot></SVGRoot>
        <text>Bundle size</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot></SVGRoot>
        <text>Sketch</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot></SVGRoot>
        <text>Figma</text>
      </link>
    </listitem>
  </list>
  <heading level="2">
    Basic pagination
    <Anchor></Anchor>
    <text>Basic pagination</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">
          Go to previous page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to next page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">
          Go to previous page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to next page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">
          Go to previous page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to next page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">
          Go to previous page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
      <listitem level="1">
        <button disabled="true">
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button disabled="true">
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button disabled="true">
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button disabled="true">
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button disabled="true">
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button disabled="true">
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button disabled="true">
          Go to next page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Outlined pagination
    <Anchor></Anchor>
    <text>Outlined pagination</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">
          Go to previous page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to next page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">
          Go to previous page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to next page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">
          Go to previous page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to next page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">
          Go to previous page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
      <listitem level="1">
        <button disabled="true">
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button disabled="true">
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button disabled="true">
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button disabled="true">
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button disabled="true">
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button disabled="true">
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button disabled="true">
          Go to next page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Rounded pagination
    <Anchor></Anchor>
    <text>Rounded pagination</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">
          Go to previous page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to next page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">
          Go to previous page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to next page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Pagination size
    <Anchor></Anchor>
    <text>Pagination size</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">
          Go to previous page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to next page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">
          Go to previous page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to next page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">
          Go to previous page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to next page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Buttons
    <Anchor></Anchor>
    <text>Buttons</text>
  </heading>
  <paragraph>
    <text>
      You can optionally enable first-page and last-page buttons, or disable the
      previous-page and next-page buttons.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">
          Go to first page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
      <listitem level="1">
        <button disabled="true">
          Go to previous page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to next page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to last page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Pagination ranges
    <Anchor></Anchor>
    <text>Pagination ranges</text>
  </heading>
  <paragraph>
    <text>
      You can specify how many digits to display either side of current page
      with the
    </text>
    <code>$SOME_CODE</code>
    <text>prop, and adjacent to the start and end page number with the</text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button>
          Go to previous page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          page 6<text>6</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 11
          <text>11</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to next page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button>
          Go to previous page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          page 6<text>6</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 7<text>7</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 11
          <text>11</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to next page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button>
          Go to previous page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          page 6<text>6</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 11
          <text>11</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to next page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button>
          Go to previous page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          page 6<text>6</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 7<text>7</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 11
          <text>11</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to next page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Controlled pagination
    <Anchor></Anchor>
    <text>Controlled pagination</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Page:1</text>
  </paragraph>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">
          Go to previous page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to next page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Router integration
    <Anchor></Anchor>
    <text>Router integration</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    pagination navigation
    <list>
      <listitem level="1">
        <button disabled="true">
          Go to previous page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          Go to next page
          <SVGRoot></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    usePagination
    <Anchor></Anchor>
    <code>$SOME_CODE</code>
  </heading>
  <paragraph>
    <text>For advanced customization use cases, we expose a</text>
    <code>$SOME_CODE</code>
    <text>
      hook. It accepts almost the same options as the Pagination component minus
      all the props related to the rendering of JSX. The Pagination component
      uses this hook internally.
    </text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation>
    <list>
      <listitem level="1">
        <button disabled="true">
          previous
          <text>previous</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          1<text>1</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          2<text>2</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          3<text>3</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          4<text>4</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          5<text>5</text>
        </button>
      </listitem>
      <listitem level="1">
        <text>‚Ä¶</text>
      </listitem>
      <listitem level="1">
        <button>
          10
          <text>10</text>
        </button>
      </listitem>
      <listitem level="1">
        <button>
          next
          <text>next</text>
        </button>
      </listitem>
    </list>
  </navigation>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Table pagination
    <Anchor></Anchor>
    <text>Table pagination</text>
  </heading>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>
      component was designed to paginate a list of arbitrary items when infinite
      loading isn't used. It's preferred in contexts where SEO is
      important, for instance, a blog.
    </text>
  </paragraph>
  <paragraph>
    <text>
      For the pagination of a large set of tabular data, you should use the
    </text>
    <code>$SOME_CODE</code>
    <text>component.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Rows per page:</text>
  </paragraph>
  <combobox haspopup="listbox">Rows per page: 10</combobox>
  <textbox value="10"></textbox>
  <SVGRoot></SVGRoot>
  <paragraph>
    <text>21-30 of 100</text>
  </paragraph>
  <button description="Go to previous page">
    Go to previous page
    <SVGRoot></SVGRoot>
  </button>
  <button description="Go to next page">
    Go to next page
    <SVGRoot></SVGRoot>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <blockquote>
    <paragraph>
      <text>‚ö†Ô∏è Note that the</text>
      <code>$SOME_CODE</code>
      <text>
        page prop starts at 1 to match the requirement of including the value in
        the URL, while the
      </text>
      <code>$SOME_CODE</code>
      <text>
        page prop stats at 0 to match the requirement of zero-based JavaScript
        arrays that comes with rendering a lot of tabular data.
      </text>
    </paragraph>
  </blockquote>
  <paragraph>
    <text>You can learn more about this use case in the</text>
    <link checked="undefined" pressed="undefined">
      table section
    </link>
    <text>of the documentation.</text>
  </paragraph>
  <heading level="2">
    Accessibility
    <Anchor></Anchor>
    <text>Accessibility</text>
  </heading>
  <heading level="3">
    ARIA
    <Anchor></Anchor>
    <text>ARIA</text>
  </heading>
  <paragraph>
    <text>
      The root node has a role of "navigation" and aria-label
      "pagination navigation" by default. The page items have an
      aria-label that identifies the purpose of the item ("go to first
      page", "go to previous page", "go to page 1"
      etc.). You can override these using the
    </text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <heading level="3">
    Keyboard
    <Anchor></Anchor>
    <text>Keyboard</text>
  </heading>
  <paragraph>
    <text>
      The pagination items are in tab order, with a tabindex of "0".
    </text>
  </paragraph>
  <heading level="2">
    API
    <Anchor></Anchor>
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Pagination />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <PaginationItem />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link checked="undefined" pressed="undefined">
      Menu
      <SVGRoot></SVGRoot>
      <text>Menu</text>
    </link>
    <link checked="undefined" pressed="undefined">
      Speed Dial
      <text>Speed Dial</text>
      <SVGRoot></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/pickers 1`] = `
<main>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text>EDIT THIS PAGE</text>
  </link>
  <heading level="1">
    Date / Time pickers
    <text>Date / Time pickers</text>
  </heading>
  <paragraph>
    <text>
      Date pickers and Time pickers provide a simple way to select a single
      value from a pre-determined set.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>
        On mobile, pickers are best suited for display in confirmation dialog.
      </text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>
        For inline display, such as on a form, consider using compact controls
        such as segmented dropdown buttons.
      </text>
    </listitem>
  </list>
  <list>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot></SVGRoot>
        <text>Feedback</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
        <SVGRoot></SVGRoot>
        <text>WAI-ARIA</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
        <SVGRoot></SVGRoot>
        <text>Bundle size</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Material Design
        <SVGRoot></SVGRoot>
        <text>Material Design</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot></SVGRoot>
        <text>Sketch</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot></SVGRoot>
        <text>Figma</text>
      </link>
    </listitem>
  </list>
  <heading level="2">
    @material-ui/pickers
    <Anchor></Anchor>
    <text>@material-ui/pickers</text>
  </heading>
  <paragraph>
    <img>stars</img>
    <text></text>
    <img>npm downloads</img>
  </paragraph>
  <paragraph>
    <link checked="undefined" pressed="undefined">
      @material-ui/pickers
    </link>
    <text>provides date picker and time picker controls.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Date picker desktop</text>
  </Label>
  <text>¬†</text>
  <textbox description="mm/dd/yyyy" value="08/18/2014">
    Date picker desktop
    <text>08/18/2014</text>
  </textbox>
  <button>
    change date
    <SVGRoot></SVGRoot>
  </button>
  <paragraph>
    <text>mm/dd/yyyy</text>
  </paragraph>
  <Label>
    <text>Date picker mobile</text>
  </Label>
  <text>¬†</text>
  <textbox readonly="true" value="08/18/2014">
    Choose date, selected date is Aug 18, 2014
    <text>08/18/2014</text>
  </textbox>
  <Label>
    <text>Time picker</text>
  </Label>
  <text>¬†</text>
  <textbox readonly="true" value="09:11 PM">
    Choose time, selected time is 9:11 PM
    <text>09:11 PM</text>
  </textbox>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Native pickers
    <Anchor></Anchor>
    <text>Native pickers</text>
  </heading>
  <paragraph>
    <text>‚ö†Ô∏è Native input controls support by browsers</text>
    <link checked="undefined" pressed="undefined">
      isn't perfect
    </link>
    <text>. Have a look at</text>
    <link checked="undefined" pressed="undefined">
      @material-ui/pickers
    </link>
    <text>for a richer solution.</text>
  </paragraph>
  <heading level="3">
    Datepickers
    <Anchor></Anchor>
    <text>Datepickers</text>
  </heading>
  <paragraph>
    <text>A native datepicker example with</text>
    <code>$SOME_CODE</code>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <Label>
      <text>Birthday</text>
    </Label>
    <text>¬†</text>
    <Date value="2017-05-24">
      Birthday
      <spinbutton valuetext="05" valuemax="12" valuemin="1" value="5">
        Month
        <text>05</text>
      </spinbutton>
      <text>/</text>
      <spinbutton valuetext="24" valuemax="31" valuemin="1" value="24">
        Day
        <text>24</text>
      </spinbutton>
      <text>/</text>
      <spinbutton valuetext="2017" valuemax="275760" valuemin="1" value="2017">
        Year
        <text>2017</text>
      </spinbutton>
    </Date>
  </form>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="3">
    Date & Time pickers
    <Anchor></Anchor>
    <text>Date & Time pickers</text>
  </heading>
  <paragraph>
    <text>A native date & time picker example with</text>
    <code>$SOME_CODE</code>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <Label>
      <text>Next appointment</text>
    </Label>
    <text>¬†</text>
    <DateTime value="2017-05-24T10:30">
      Next appointment
      <spinbutton valuetext="05" valuemax="12" valuemin="1" value="5">
        Month
        <text>05</text>
      </spinbutton>
      <text>/</text>
      <spinbutton valuetext="24" valuemax="31" valuemin="1" value="24">
        Day
        <text>24</text>
      </spinbutton>
      <text>/</text>
      <spinbutton valuetext="2017" valuemax="275760" valuemin="1" value="2017">
        Year
        <text>2017</text>
      </spinbutton>
      <text>,</text>
      <spinbutton valuetext="10" valuemax="12" valuemin="1" value="10">
        Hours
        <text>10</text>
      </spinbutton>
      <text>:</text>
      <spinbutton valuetext="30" valuemax="59" valuemin="0" value="30">
        Minutes
        <text>30</text>
      </spinbutton>
      <text></text>
      <spinbutton valuetext="AM" valuemax="2" valuemin="1" value="1">
        AM/PM
        <text>AM</text>
      </spinbutton>
    </DateTime>
  </form>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="3">
    Time pickers
    <Anchor></Anchor>
    <text>Time pickers</text>
  </heading>
  <paragraph>
    <text>A native time picker example with</text>
    <code>$SOME_CODE</code>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <Label>
      <text>Alarm clock</text>
    </Label>
    <text>¬†</text>
    <InputTime value="07:30">
      Alarm clock
      <spinbutton valuetext="07" valuemax="12" valuemin="1" value="7">
        Hours
        <text>07</text>
      </spinbutton>
      <text>:</text>
      <spinbutton valuetext="30" valuemax="59" valuemin="0" value="30">
        Minutes
        <text>30</text>
      </spinbutton>
      <text></text>
      <spinbutton valuetext="AM" valuemax="2" valuemin="1" value="1">
        AM/PM
        <text>AM</text>
      </spinbutton>
    </InputTime>
  </form>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    API
    <Anchor></Anchor>
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <TextField />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link checked="undefined" pressed="undefined">
      Floating Action Button
      <SVGRoot></SVGRoot>
      <text>Floating Action Button</text>
    </link>
    <link checked="undefined" pressed="undefined">
      Radio
      <text>Radio</text>
      <SVGRoot></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/radio-buttons 1`] = `
<main>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text>EDIT THIS PAGE</text>
  </link>
  <heading level="1">
    Radio
    <text>Radio</text>
  </heading>
  <paragraph>
    <text>Radio buttons allow the user to select one option from a set.</text>
  </paragraph>
  <paragraph>
    <text>
      Use radio buttons when the user needs to see all available options. If
      available options can be collapsed, consider using a dropdown menu because
      it uses less space.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Radio buttons should have the most commonly used option selected by
      default.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot></SVGRoot>
        <text>Feedback</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
        <SVGRoot></SVGRoot>
        <text>WAI-ARIA</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
        <SVGRoot></SVGRoot>
        <text>Bundle size</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Material Design
        <SVGRoot></SVGRoot>
        <text>Material Design</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot></SVGRoot>
        <text>Sketch</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot></SVGRoot>
        <text>Figma</text>
      </link>
    </listitem>
  </list>
  <heading level="2">
    RadioGroup
    <Anchor></Anchor>
    <text>RadioGroup</text>
  </heading>
  <paragraph>
    <code>$SOME_CODE</code>
    <text>is a helpful wrapper used to group</text>
    <code>$SOME_CODE</code>
    <text>
      components that provides an easier API, and proper keyboard accessibility
      to the group.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    Gender
    <Legend>
      <text>Gender</text>
    </Legend>
    <radiogroup>
      gender
      <Label>
        <radio checked="true">Female</radio>
        <SVGRoot></SVGRoot>
        <SVGRoot></SVGRoot>
      </Label>
      <Label>
        <radio checked="false">Male</radio>
        <SVGRoot></SVGRoot>
        <SVGRoot></SVGRoot>
      </Label>
      <Label>
        <radio checked="false">Other</radio>
        <SVGRoot></SVGRoot>
        <SVGRoot></SVGRoot>
      </Label>
      <Label>
        <radio disabled="true" checked="false">
          (Disabled option)
        </radio>
        <SVGRoot></SVGRoot>
        <SVGRoot></SVGRoot>
      </Label>
    </radiogroup>
  </group>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <paragraph>
    <text>To lay out the buttons horizontally, set the</text>
    <code>$SOME_CODE</code>
    <text>prop:</text>
    <code>$SOME_CODE</code>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Standalone radio buttons
    <Anchor></Anchor>
    <text>Standalone radio buttons</text>
  </heading>
  <paragraph>
    <code>$SOME_CODE</code>
    <text>can also be used standalone, without the RadioGroup wrapper.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <radio checked="true">A</radio>
  <SVGRoot></SVGRoot>
  <SVGRoot></SVGRoot>
  <radio checked="false">B</radio>
  <SVGRoot></SVGRoot>
  <SVGRoot></SVGRoot>
  <radio checked="false">C</radio>
  <SVGRoot></SVGRoot>
  <SVGRoot></SVGRoot>
  <radio checked="false">D</radio>
  <SVGRoot></SVGRoot>
  <SVGRoot></SVGRoot>
  <radio checked="false">E</radio>
  <SVGRoot></SVGRoot>
  <SVGRoot></SVGRoot>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Label placement
    <Anchor></Anchor>
    <text>Label placement</text>
  </heading>
  <paragraph>
    <text>You can change the placement of the label with the</text>
    <code>$SOME_CODE</code>
    <text>component's</text>
    <code>$SOME_CODE</code>
    <text>prop:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    labelPlacement
    <Legend>
      <text>labelPlacement</text>
    </Legend>
    <radiogroup>
      position
      <Label>
        <radio checked="true">Top</radio>
        <SVGRoot></SVGRoot>
        <SVGRoot></SVGRoot>
      </Label>
      <Label>
        <radio checked="false">Start</radio>
        <SVGRoot></SVGRoot>
        <SVGRoot></SVGRoot>
      </Label>
      <Label>
        <radio checked="false">Bottom</radio>
        <SVGRoot></SVGRoot>
        <SVGRoot></SVGRoot>
      </Label>
      <Label>
        <radio checked="false">End</radio>
        <SVGRoot></SVGRoot>
        <SVGRoot></SVGRoot>
      </Label>
    </radiogroup>
  </group>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Show error
    <Anchor></Anchor>
    <text>Show error</text>
  </heading>
  <paragraph>
    <text>
      In general, radio buttons should have a value selected by default. If this
      is not the case, you can display an error if no value is selected when the
      form is submitted:
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <group>
      Pop quiz: Material-UI is...
      <Legend>
        <text>Pop quiz: Material-UI is...</text>
      </Legend>
      <radiogroup>
        quiz
        <Label>
          <radio checked="false">The best!</radio>
          <SVGRoot></SVGRoot>
          <SVGRoot></SVGRoot>
        </Label>
        <Label>
          <radio checked="false">The worst.</radio>
          <SVGRoot></SVGRoot>
          <SVGRoot></SVGRoot>
        </Label>
      </radiogroup>
      <paragraph>
        <text>Choose wisely</text>
      </paragraph>
      <button>
        CHECK ANSWER
        <text>CHECK ANSWER</text>
      </button>
    </group>
  </form>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Customized radios
    <Anchor></Anchor>
    <text>Customized radios</text>
  </heading>
  <paragraph>
    <text>
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    Gender
    <Legend>
      <text>Gender</text>
    </Legend>
    <radiogroup>
      gender
      <Label>
        <radio checked="true">Female</radio>
      </Label>
      <Label>
        <radio checked="false">Male</radio>
      </Label>
      <Label>
        <radio checked="false">Other</radio>
      </Label>
      <Label>
        <radio disabled="true" checked="false">
          (Disabled option)
        </radio>
      </Label>
    </radiogroup>
  </group>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    useRadioGroup
    <Anchor></Anchor>
    <code>$SOME_CODE</code>
  </heading>
  <paragraph>
    <text>For advanced customization use cases, a</text>
    <code>$SOME_CODE</code>
    <text>
      hook is exposed. It returns the context value of the parent radio group.
      The Radio component uses this hook internally.
    </text>
  </paragraph>
  <heading level="3">
    API
    <Anchor></Anchor>
    <text>API</text>
  </heading>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="4">
    Returns
    <text>Returns</text>
  </heading>
  <paragraph>
    <code>$SOME_CODE</code>
    <text>(Object):</text>
  </paragraph>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <code>$SOME_CODE</code>
      <text>
        (String[optional]): The name used to reference the value of the control.
      </text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <code>$SOME_CODE</code>
      <text>
        (Void[optional]): Callback fired when a radio button is selected.
      </text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <code>$SOME_CODE</code>
      <text>(Any[optional]): Value of the selected radio button.</text>
    </listitem>
  </list>
  <heading level="4">
    Example
    <text>Example</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <radiogroup>
    <Label>
      <radio checked="true">First</radio>
      <SVGRoot></SVGRoot>
      <SVGRoot></SVGRoot>
    </Label>
    <Label>
      <radio checked="false">Second</radio>
      <SVGRoot></SVGRoot>
      <SVGRoot></SVGRoot>
    </Label>
  </radiogroup>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    When to use
    <Anchor></Anchor>
    <text>When to use</text>
  </heading>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        Checkboxes vs. Radio Buttons
      </link>
    </listitem>
  </list>
  <heading level="2">
    Accessibility
    <Anchor></Anchor>
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(WAI-ARIA:</text>
    <link checked="undefined" pressed="undefined">
      https://www.w3.org/TR/wai-aria-practices/#radiobutton
    </link>
    <text>)</text>
  </paragraph>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>
        All form controls should have labels, and this includes radio buttons,
        checkboxes, and switches. In most cases, this is done by using the
      </text>
      <code>$SOME_CODE</code>
      <text>element (</text>
      <link checked="undefined" pressed="undefined">
        FormControlLabel
      </link>
      <text>).</text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>
        When a label can't be used, it's necessary to add an attribute
        directly to the input component. In this case, you can apply the
        additional attribute (e.g.
      </text>
      <code>$SOME_CODE</code>
      <text>,</text>
      <code>$SOME_CODE</code>
      <text>,</text>
      <code>$SOME_CODE</code>
      <text>) via the</text>
      <code>$SOME_CODE</code>
      <text>property.</text>
    </listitem>
  </list>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    API
    <Anchor></Anchor>
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <FormControl />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <FormControlLabel />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <FormLabel />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Radio />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <RadioGroup />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link checked="undefined" pressed="undefined">
      Date / Time
      <SVGRoot></SVGRoot>
      <text>Date / Time</text>
    </link>
    <link checked="undefined" pressed="undefined">
      Rating
      <text>Rating</text>
      <SVGRoot></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/rating/ 1`] = `
<main>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text>EDIT THIS PAGE</text>
  </link>
  <heading level="1">
    Rating
    <text>Rating</text>
  </heading>
  <paragraph>
    <text>
      Ratings provide insight regarding others‚Äô opinions and experiences, and
      can allow the user to submit a rating of their own.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot></SVGRoot>
        <text>Feedback</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
        <SVGRoot></SVGRoot>
        <text>WAI-ARIA</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
        <SVGRoot></SVGRoot>
        <text>Bundle size</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot></SVGRoot>
        <text>Sketch</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot></SVGRoot>
        <text>Figma</text>
      </link>
    </listitem>
  </list>
  <heading level="2">
    Basic rating
    <Anchor></Anchor>
    <text>Basic rating</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Legend>
    <text>Controlled</text>
  </Legend>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">1 Star</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="true">2 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">3 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">4 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">5 Stars</radio>
  <Legend>
    <text>Read only</text>
  </Legend>
  <img>2 Stars</img>
  <Legend>
    <text>Disabled</text>
  </Legend>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio disabled="true" checked="false">
    1 Star
  </radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio disabled="true" checked="true">
    2 Stars
  </radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio disabled="true" checked="false">
    3 Stars
  </radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio disabled="true" checked="false">
    4 Stars
  </radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio disabled="true" checked="false">
    5 Stars
  </radio>
  <Legend>
    <text>No rating given</text>
  </Legend>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">1 Star</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">2 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">3 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">4 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">5 Stars</radio>
  <Label>
    <radio checked="true">Empty</radio>
  </Label>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Rating precision
    <Anchor></Anchor>
    <text>Rating precision</text>
  </heading>
  <paragraph>
    <text>The rating can display any float number with the</text>
    <code>$SOME_CODE</code>
    <text>prop. Use the</text>
    <code>$SOME_CODE</code>
    <text>prop to define the minimum increment value change allowed.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">0.5 Stars</radio>
  <SVGRoot></SVGRoot>
  <radio checked="false">1 Star</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">1.5 Stars</radio>
  <SVGRoot></SVGRoot>
  <radio checked="false">2 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="true">2.5 Stars</radio>
  <SVGRoot></SVGRoot>
  <radio checked="false">3 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">3.5 Stars</radio>
  <SVGRoot></SVGRoot>
  <radio checked="false">4 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">4.5 Stars</radio>
  <SVGRoot></SVGRoot>
  <radio checked="false">5 Stars</radio>
  <img>2.5 Stars</img>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Hover feedback
    <Anchor></Anchor>
    <text>Hover feedback</text>
  </heading>
  <paragraph>
    <text>
      You can display a label on hover to help the user pick the correct rating
      value. The demo uses the
    </text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">0.5 Stars</radio>
  <SVGRoot></SVGRoot>
  <radio checked="false">1 Star</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">1.5 Stars</radio>
  <SVGRoot></SVGRoot>
  <radio checked="true">2 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">2.5 Stars</radio>
  <SVGRoot></SVGRoot>
  <radio checked="false">3 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">3.5 Stars</radio>
  <SVGRoot></SVGRoot>
  <radio checked="false">4 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">4.5 Stars</radio>
  <SVGRoot></SVGRoot>
  <radio checked="false">5 Stars</radio>
  <text>Poor+</text>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Sizes
    <Anchor></Anchor>
    <text>Sizes</text>
  </heading>
  <paragraph>
    <text>For larger or smaller ratings use the</text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">1 Star</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="true">2 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">3 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">4 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">5 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">1 Star</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="true">2 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">3 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">4 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">5 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">1 Star</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="true">2 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">3 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">4 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">5 Stars</radio>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Customized rating
    <Anchor></Anchor>
    <text>Customized rating</text>
  </heading>
  <paragraph>
    <text>
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Legend>
    <text>Custom icon and color</text>
  </Legend>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">0.5 Hearts</radio>
  <SVGRoot></SVGRoot>
  <radio checked="false">1 Heart</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">1.5 Hearts</radio>
  <SVGRoot></SVGRoot>
  <radio checked="true">2 Hearts</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">2.5 Hearts</radio>
  <SVGRoot></SVGRoot>
  <radio checked="false">3 Hearts</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">3.5 Hearts</radio>
  <SVGRoot></SVGRoot>
  <radio checked="false">4 Hearts</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">4.5 Hearts</radio>
  <SVGRoot></SVGRoot>
  <radio checked="false">5 Hearts</radio>
  <Legend>
    <text>10 stars</text>
  </Legend>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">1 Star</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="true">2 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">3 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">4 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">5 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">6 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">7 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">8 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">9 Stars</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">10 Stars</radio>
  <Legend>
    <text>Custom icon set</text>
  </Legend>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">Very Dissatisfied</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="true">Dissatisfied</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">Neutral</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">Satisfied</radio>
  <Label>
    <SVGRoot></SVGRoot>
  </Label>
  <radio checked="false">Very Satisfied</radio>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Accessibility
    <Anchor></Anchor>
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(</text>
    <link checked="undefined" pressed="undefined">
      WAI tutorial
    </link>
    <text>)</text>
  </paragraph>
  <paragraph>
    <text>The accessibility of this component relies on:</text>
  </paragraph>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>
        A radio group with its fields visually hidden. It contains six radio
        buttons, one for each star, and another for 0 stars that is checked by
        default. Be sure to provide a value for the
      </text>
      <code>$SOME_CODE</code>
      <text>prop that is unique to the parent form.</text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>
        Labels for the radio buttons containing actual text (‚Äú1 Star‚Äù, ‚Äú2
        Stars‚Äù, ‚Ä¶). Be sure to provide a suitable function to the
      </text>
      <code>$SOME_CODE</code>
      <text>
        prop when the page is in a language other than English. You can use the
      </text>
      <link checked="undefined" pressed="undefined">
        included locales
      </link>
      <text>, or provide your own.</text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>
        A visually distinct appearance for the rating icons. By default, the
        rating component uses both a difference of color and shape (filled and
        empty icons)to indicate the value. In the event that you are using color
        as the only means to indicate the value, the information should also be
        also displayed as text, as in this demo. This is important to match
      </text>
      <link checked="undefined" pressed="undefined">
        success Criterion 1.4.1
      </link>
      <text>of WCAG2.1.</text>
    </listitem>
  </list>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <img>3.5 Stars</img>
  <text>Good</text>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="3">
    ARIA
    <Anchor></Anchor>
    <text>ARIA</text>
  </heading>
  <paragraph>
    <text>
      The read only rating has a role of "img", and an aria-label that
      describes the displayed rating.
    </text>
  </paragraph>
  <heading level="3">
    Keyboard
    <Anchor></Anchor>
    <text>Keyboard</text>
  </heading>
  <paragraph>
    <text>
      Because the rating component uses radio buttons, keyboard interaction
      follows the native browser behavior. Tab will focus the current rating,
      and cursor keys control the selected rating.
    </text>
  </paragraph>
  <paragraph>
    <text>The read only rating is not focusable.</text>
  </paragraph>
  <heading level="2">
    API
    <Anchor></Anchor>
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Rating />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link checked="undefined" pressed="undefined">
      Radio
      <SVGRoot></SVGRoot>
      <text>Radio</text>
    </link>
    <link checked="undefined" pressed="undefined">
      Select
      <text>Select</text>
      <SVGRoot></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/selects/ 1`] = `
<main>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text>EDIT THIS PAGE</text>
  </link>
  <heading level="1">
    Select
    <text>Select</text>
  </heading>
  <paragraph>
    <text>
      Select components are used for collecting user provided information from a
      list of options.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot></SVGRoot>
        <text>Feedback</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
        <SVGRoot></SVGRoot>
        <text>Bundle size</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot></SVGRoot>
        <text>Sketch</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot></SVGRoot>
        <text>Figma</text>
      </link>
    </listitem>
  </list>
  <heading level="2">
    Basic select
    <Anchor></Anchor>
    <text>Basic select</text>
  </heading>
  <paragraph>
    <text>
      Menus are positioned over their emitting elements such that the currently
      selected menu item appears on top of the emitting element.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Age</text>
  </Label>
  <text>¬†</text>
  <combobox haspopup="listbox">
    Age ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox></textbox>
  <SVGRoot></SVGRoot>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Advanced features
    <Anchor></Anchor>
    <text>Advanced features</text>
  </heading>
  <paragraph>
    <text>
      The Select component is meant to be interchangeable with a native
    </text>
    <code>$SOME_CODE</code>
    <text>element.</text>
  </paragraph>
  <paragraph>
    <text>
      If you are looking for more advanced features, like combobox, multiselect,
      autocomplete, async or creatable support, head to the
    </text>
    <link checked="undefined" pressed="undefined">
      Autocomplete component
      <code>$SOME_CODE</code>
    </link>
    <text>
      . It's meant to be an improved version of the
      "react-select" and "downshift" packages.
    </text>
  </paragraph>
  <heading level="2">
    Props
    <Anchor></Anchor>
    <text>Props</text>
  </heading>
  <heading level="3">
    Filled and outlined variants
    <Anchor></Anchor>
    <text>Filled and outlined variants</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Age</text>
  </Label>
  <combobox haspopup="listbox">
    Age ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox></textbox>
  <SVGRoot></SVGRoot>
  <group>
    <Legend>
      <text>Age</text>
    </Legend>
  </group>
  <Label>
    <text>Age</text>
  </Label>
  <text>¬†</text>
  <combobox haspopup="listbox">
    Age ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox></textbox>
  <SVGRoot></SVGRoot>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3">
    Labels and helper text
    <Anchor></Anchor>
    <text>Labels and helper text</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Age</text>
  </Label>
  <text>¬†</text>
  <combobox haspopup="listbox">
    Age ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox></textbox>
  <SVGRoot></SVGRoot>
  <paragraph>
    <text>With label + helper text</text>
  </paragraph>
  <text>¬†</text>
  <combobox haspopup="listbox">
    Without label
    <text>None</text>
  </combobox>
  <textbox></textbox>
  <SVGRoot></SVGRoot>
  <paragraph>
    <text>Without label</text>
  </paragraph>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3">
    Auto width
    <Anchor></Anchor>
    <text>Auto width</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Age</text>
  </Label>
  <text>¬†</text>
  <combobox haspopup="listbox">
    Age ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox></textbox>
  <SVGRoot></SVGRoot>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3">
    Other props
    <Anchor></Anchor>
    <text>Other props</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Name</text>
  </Label>
  <text>¬†</text>
  <combobox disabled="true" haspopup="listbox">
    Name ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox></textbox>
  <SVGRoot></SVGRoot>
  <paragraph>
    <text>Disabled</text>
  </paragraph>
  <Label>
    <text>Name</text>
  </Label>
  <text>¬†</text>
  <combobox haspopup="listbox">
    Name ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox></textbox>
  <SVGRoot></SVGRoot>
  <paragraph>
    <text>Error</text>
  </paragraph>
  <Label>
    <text>Name</text>
  </Label>
  <text>¬†</text>
  <combobox haspopup="listbox">
    Name ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox></textbox>
  <SVGRoot></SVGRoot>
  <paragraph>
    <text>Read only</text>
  </paragraph>
  <Label>
    <text>Age‚Äâ*</text>
  </Label>
  <text>¬†</text>
  <combobox haspopup="listbox">
    Age ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox required="true" invalid="true"></textbox>
  <SVGRoot></SVGRoot>
  <paragraph>
    <text>Required</text>
  </paragraph>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Native select
    <Anchor></Anchor>
    <text>Native select</text>
  </heading>
  <paragraph>
    <text>
      As the user experience can be improved on mobile using the native select
      of the platform, we allow such pattern.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Age</text>
  </Label>
  <text>¬†</text>
  <combobox value="Thirty">
    Age
    <MenuListPopup>
      <menuitem>Ten</menuitem>
      <menuitem>Twenty</menuitem>
      <menuitem selected="true">Thirty</menuitem>
    </MenuListPopup>
  </combobox>
  <SVGRoot></SVGRoot>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    TextField
    <Anchor></Anchor>
    <text>TextField</text>
  </heading>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>
      wrapper component is a complete form control including a label, input and
      help text. You can find an example with the select mode
    </text>
    <link checked="undefined" pressed="undefined">
      in this section
    </link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Customized selects
    <Anchor></Anchor>
    <text>Customized selects</text>
  </heading>
  <paragraph>
    <text>
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>The first step is to style the</text>
    <code>$SOME_CODE</code>
    <text>
      component. Once it's styled, you can either use it directly as a text
      field or provide it to the select
    </text>
    <code>$SOME_CODE</code>
    <text>prop to have a</text>
    <code>$SOME_CODE</code>
    <text>field.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Age</text>
  </Label>
  <textbox>Age</textbox>
  <Label>
    <text>Age</text>
  </Label>
  <combobox haspopup="listbox">
    Age ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox></textbox>
  <SVGRoot></SVGRoot>
  <Label>
    <text>Age</text>
  </Label>
  <combobox value="None">
    Age
    <MenuListPopup>
      <menuitem selected="true"></menuitem>
      <menuitem>Ten</menuitem>
      <menuitem>Twenty</menuitem>
      <menuitem>Thirty</menuitem>
    </MenuListPopup>
  </combobox>
  <SVGRoot></SVGRoot>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <paragraph>
    <text>üé® If you are looking for inspiration, you can check</text>
    <link checked="undefined" pressed="undefined">
      MUI Treasury's customization examples
    </link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Multiple select
    <Anchor></Anchor>
    <text>Multiple select</text>
  </heading>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>
      component can handle multiple selections. It's enabled with the
    </text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <paragraph>
    <text>
      Like with the single selection, you can pull out the new value by
      accessing
    </text>
    <code>$SOME_CODE</code>
    <text>in the</text>
    <code>$SOME_CODE</code>
    <text>callback. It's always an array.</text>
  </paragraph>
  <heading level="3">
    Default
    <Anchor></Anchor>
    <text>Default</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Name</text>
  </Label>
  <text>¬†</text>
  <combobox haspopup="listbox">
    Name ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox></textbox>
  <SVGRoot></SVGRoot>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3">
    Checkmarks
    <Anchor></Anchor>
    <text>Checkmarks</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Tag</text>
  </Label>
  <text>¬†</text>
  <combobox haspopup="listbox">
    Tag ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox></textbox>
  <SVGRoot></SVGRoot>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3">
    Chip
    <Anchor></Anchor>
    <text>Chip</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Chip</text>
  </Label>
  <text>¬†</text>
  <combobox haspopup="listbox">
    Chip ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox></textbox>
  <SVGRoot></SVGRoot>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3">
    Placeholder
    <Anchor></Anchor>
    <text>Placeholder</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>¬†</text>
  <combobox haspopup="listbox">
    Without label
    <text>Placeholder</text>
  </combobox>
  <textbox></textbox>
  <SVGRoot></SVGRoot>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3">
    Native
    <Anchor></Anchor>
    <text>Native</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Native</text>
  </Label>
  <text>¬†</text>
  <listbox multiselectable="true">
    Native
    <option>Oliver Hansen</option>
    <option>Van Henry</option>
    <option>April Tucker</option>
    <option>Ralph Hubbard</option>
    <option>Omar Alexander</option>
    <option>Carlos Abbott</option>
    <option>Miriam Wagner</option>
    <option>Bradley Wilkerson</option>
    <option>Virginia Andrews</option>
    <option>Kelly Snyder</option>
  </listbox>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Controlled open select
    <Anchor></Anchor>
    <text>Controlled open select</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN THE SELECT
    <text>OPEN THE SELECT</text>
  </button>
  <Label>
    <text>Age</text>
  </Label>
  <text>¬†</text>
  <combobox haspopup="listbox">
    Age ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox></textbox>
  <SVGRoot></SVGRoot>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    With a dialog
    <Anchor></Anchor>
    <text>With a dialog</text>
  </heading>
  <paragraph>
    <text>
      While it's discouraged by the Material Design specification, you can
      use a select inside a dialog.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN SELECT DIALOG
    <text>OPEN SELECT DIALOG</text>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Grouping
    <Anchor></Anchor>
    <text>Grouping</text>
  </heading>
  <paragraph>
    <text>Display categories with the</text>
    <code>$SOME_CODE</code>
    <text>component or the native</text>
    <code>$SOME_CODE</code>
    <text>element.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Grouping</text>
  </Label>
  <text>¬†</text>
  <combobox value="None">
    Grouping
    <MenuListPopup>
      <menuitem selected="true"></menuitem>
      <menuitem>Option 1</menuitem>
      <menuitem>Option 2</menuitem>
      <menuitem>Option 3</menuitem>
      <menuitem>Option 4</menuitem>
    </MenuListPopup>
  </combobox>
  <SVGRoot></SVGRoot>
  <Label>
    <text>Grouping</text>
  </Label>
  <text>¬†</text>
  <combobox haspopup="listbox">
    ‚Äã<text>‚Äã</text>
  </combobox>
  <textbox></textbox>
  <SVGRoot></SVGRoot>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Accessibility
    <Anchor></Anchor>
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>To properly label your</text>
    <code>$SOME_CODE</code>
    <text>input you need an extra element with an</text>
    <code>$SOME_CODE</code>
    <text>that contains a label. That</text>
    <code>$SOME_CODE</code>
    <text>needs to match the</text>
    <code>$SOME_CODE</code>
    <text>of the</text>
    <code>$SOME_CODE</code>
    <text>e.g.</text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>Alternatively a</text>
    <code>$SOME_CODE</code>
    <text>with an</text>
    <code>$SOME_CODE</code>
    <text>and</text>
    <code>$SOME_CODE</code>
    <text>creates the proper markup and ids for you:</text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>For a</text>
    <link checked="undefined" pressed="undefined">
      native select
    </link>
    <text>, you should mention a label by giving the value of the</text>
    <code>$SOME_CODE</code>
    <text>attribute of the select element to the</text>
    <code>$SOME_CODE</code>
    <text>'s</text>
    <code>$SOME_CODE</code>
    <text>attribute:</text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    API
    <Anchor></Anchor>
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <NativeSelect />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Select />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link checked="undefined" pressed="undefined">
      Rating
      <SVGRoot></SVGRoot>
      <text>Rating</text>
    </link>
    <link checked="undefined" pressed="undefined">
      Slider
      <text>Slider</text>
      <SVGRoot></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/slider 1`] = `
<main>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text>EDIT THIS PAGE</text>
  </link>
  <heading level="1">
    Slider
    <text>Slider</text>
  </heading>
  <paragraph>
    <text>Sliders allow users to make selections from a range of values.</text>
  </paragraph>
  <paragraph>
    <text>
      Sliders reflect a range of values along a bar, from which users may select
      a single value. They are ideal for adjusting settings such as volume,
      brightness, or applying image filters.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>üì¶</text>
      <link checked="undefined" pressed="undefined">
        22 kB gzipped
      </link>
      <text>
        (but only +8 kB when used together with other Material-UI components).
      </text>
    </listitem>
  </list>
  <list>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot></SVGRoot>
        <text>Feedback</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
        <SVGRoot></SVGRoot>
        <text>WAI-ARIA</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
        <SVGRoot></SVGRoot>
        <text>Bundle size</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Material Design
        <SVGRoot></SVGRoot>
        <text>Material Design</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot></SVGRoot>
        <text>Sketch</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot></SVGRoot>
        <text>Figma</text>
      </link>
    </listitem>
  </list>
  <heading level="2">
    Continuous sliders
    <Anchor></Anchor>
    <text>Continuous sliders</text>
  </heading>
  <paragraph>
    <text>
      Continuous sliders allow users to select a value along a subjective range.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Volume</text>
  </paragraph>
  <SVGRoot></SVGRoot>
  <slider
    valuetext=""
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="30"
  >
    Volume
  </slider>
  <SVGRoot></SVGRoot>
  <paragraph>
    <text>Disabled slider</text>
  </paragraph>
  <slider
    valuetext=""
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="30"
  >
    Disabled slider
  </slider>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Discrete sliders
    <Anchor></Anchor>
    <text>Discrete sliders</text>
  </heading>
  <paragraph>
    <text>
      Discrete sliders can be adjusted to a specific value by referencing its
      value indicator. By order of demos:
    </text>
  </paragraph>
  <paragraph>
    <text>You can generate a mark for each step with</text>
    <code>$SOME_CODE</code>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Temperature</text>
  </paragraph>
  <slider
    valuetext="30¬∞C"
    valuemax="110"
    valuemin="10"
    orientation="horizontal"
    value="30"
  >
    Temperature
    <text>30</text>
  </slider>
  <paragraph>
    <text>Disabled</text>
  </paragraph>
  <slider
    valuetext="30¬∞C"
    valuemax="110"
    valuemin="10"
    orientation="horizontal"
    value="30"
  >
    Disabled
    <text>30</text>
  </slider>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3">
    Small steps
    <Anchor></Anchor>
    <text>Small steps</text>
  </heading>
  <paragraph>
    <text>You can change the default step increment.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Small steps</text>
  </paragraph>
  <slider
    valuetext="5e-8¬∞C"
    valuemax="1.0000000116860974e-7"
    valuemin="-5.000000058430487e-8"
    orientation="horizontal"
    value="5.000000058430487e-8"
  >
    Small steps
    <text>5e-8</text>
  </slider>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="3">
    Custom marks
    <Anchor></Anchor>
    <text>Custom marks</text>
  </heading>
  <paragraph>
    <text>You can have custom marks by providing a rich array to the</text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Custom marks</text>
  </paragraph>
  <text>0¬∞C20¬∞C37¬∞C100¬∞C</text>
  <slider
    valuetext="20¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="20"
  >
    Custom marks
    <text>20</text>
  </slider>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="3">
    Restricted values
    <Anchor></Anchor>
    <text>Restricted values</text>
  </heading>
  <paragraph>
    <text>
      You can restrict the selectable values to those provided with the
    </text>
    <code>$SOME_CODE</code>
    <text>prop with</text>
    <code>$SOME_CODE</code>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Restricted values</text>
  </paragraph>
  <text>0¬∞C20¬∞C37¬∞C100¬∞C</text>
  <slider
    valuetext="20¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="20"
  >
    Restricted values
    <text>2</text>
  </slider>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="3">
    Label always visible
    <Anchor></Anchor>
    <text>Label always visible</text>
  </heading>
  <paragraph>
    <text>You can force the thumb label to be always visible with</text>
    <code>$SOME_CODE</code>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Always visible</text>
  </paragraph>
  <text>0¬∞C20¬∞C37¬∞C100¬∞C</text>
  <slider
    valuetext="80¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="80"
  >
    Always visible
    <text>80</text>
  </slider>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Range slider
    <Anchor></Anchor>
    <text>Range slider</text>
  </heading>
  <paragraph>
    <text>
      The slider can be used to set the start and end of a range by supplying an
      array of values to the
    </text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Temperature range</text>
  </paragraph>
  <slider
    valuetext="20¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="20"
  >
    Temperature range
    <text>20</text>
  </slider>
  <slider
    valuetext="37¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="37"
  >
    Temperature range
    <text>37</text>
  </slider>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Slider with input field
    <Anchor></Anchor>
    <text>Slider with input field</text>
  </heading>
  <paragraph>
    <text>In this example an input allows a discrete value to be set.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Volume</text>
  </paragraph>
  <SVGRoot></SVGRoot>
  <slider
    valuetext=""
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="30"
  >
    Volume
  </slider>
  <text>¬†</text>
  <spinbutton valuetext="" valuemax="100" valuemin="0" value="30">
    Volume
    <text>30</text>
  </spinbutton>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Customized sliders
    <Anchor></Anchor>
    <text>Customized sliders</text>
  </heading>
  <paragraph>
    <text>
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>iOS</text>
  </paragraph>
  <slider
    valuetext=""
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="60"
  >
    ios slider
    <text>60</text>
  </slider>
  <paragraph>
    <text>pretto.fr</text>
  </paragraph>
  <slider
    valuetext=""
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="20"
  >
    pretto slider
    <text>20</text>
  </slider>
  <paragraph>
    <text>Tooltip value label</text>
  </paragraph>
  <slider
    valuetext=""
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="20"
  >
    custom thumb label
  </slider>
  <paragraph>
    <text>Airbnb</text>
  </paragraph>
  <slider
    valuetext=""
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="20"
  >
    Minimum price
  </slider>
  <slider
    valuetext=""
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="40"
  >
    Maximum price
  </slider>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Vertical sliders
    <Anchor></Anchor>
    <text>Vertical sliders</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Temperature</text>
  </paragraph>
  <slider
    valuetext="30¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="vertical"
    value="30"
  >
    Temperature
  </slider>
  <slider
    valuetext="30¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="vertical"
    value="30"
  >
    Temperature
  </slider>
  <text>0¬∞C20¬∞C37¬∞C100¬∞C</text>
  <slider
    valuetext="20¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="vertical"
    value="20"
  >
    Temperature
  </slider>
  <slider
    valuetext="37¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="vertical"
    value="37"
  >
    Temperature
  </slider>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Track
    <Anchor></Anchor>
    <text>Track</text>
  </heading>
  <paragraph>
    <text>The track shows the range available for user selection.</text>
  </paragraph>
  <heading level="3">
    Removed track
    <Anchor></Anchor>
    <text>Removed track</text>
  </heading>
  <paragraph>
    <text>The track can be turned off with</text>
    <code>$SOME_CODE</code>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Removed track</text>
  </paragraph>
  <text>0¬∞C20¬∞C37¬∞C100¬∞C</text>
  <slider
    valuetext="30¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="30"
  >
    Removed track
  </slider>
  <paragraph>
    <text>Removed track range slider</text>
  </paragraph>
  <text>0¬∞C20¬∞C37¬∞C100¬∞C</text>
  <slider
    valuetext="20¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="20"
  >
    Removed track range slider
  </slider>
  <slider
    valuetext="37¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="37"
  >
    Removed track range slider
  </slider>
  <slider
    valuetext="50¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="50"
  >
    Removed track range slider
  </slider>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3">
    Inverted track
    <Anchor></Anchor>
    <text>Inverted track</text>
  </heading>
  <paragraph>
    <text>The track can be inverted with</text>
    <code>$SOME_CODE</code>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Inverted track</text>
  </paragraph>
  <text>0¬∞C20¬∞C37¬∞C100¬∞C</text>
  <slider
    valuetext="30¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="30"
  >
    Inverted track
  </slider>
  <paragraph>
    <text>Inverted track range</text>
  </paragraph>
  <text>0¬∞C20¬∞C37¬∞C100¬∞C</text>
  <slider
    valuetext="20¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="20"
  >
    Inverted track range
  </slider>
  <slider
    valuetext="37¬∞C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="37"
  >
    Inverted track range
  </slider>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Non-linear scale
    <Anchor></Anchor>
    <text>Non-linear scale</text>
  </heading>
  <paragraph>
    <text>You can use the</text>
    <code>$SOME_CODE</code>
    <text>prop to represent the</text>
    <code>$SOME_CODE</code>
    <text>
      on a different scale. For instance, in the following demo, the
      valuexrepresents the power of10^x.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Temperature range</text>
  </paragraph>
  <slider
    valuetext="1e^0"
    valuemax="60466176"
    valuemin="0"
    orientation="horizontal"
    value="1"
  >
    Temperature range
    <text>1e^0</text>
  </slider>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Accessibility
    <Anchor></Anchor>
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(WAI-ARIA:</text>
    <link checked="undefined" pressed="undefined">
      https://www.w3.org/TR/wai-aria-practices/#slider
    </link>
    <text>)</text>
  </paragraph>
  <paragraph>
    <text>
      The component handles most of the work necessary to make it accessible.
      However, you need to make sure that:
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>Each thumb has a user-friendly label (</text>
      <code>$SOME_CODE</code>
      <text>,</text>
      <code>$SOME_CODE</code>
      <text>or</text>
      <code>$SOME_CODE</code>
      <text>prop).</text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>
        Each thumb has a user-friendly text for its current value. This is not
        required if the value matches the semantics of the label. You can change
        the name with the
      </text>
      <code>$SOME_CODE</code>
      <text>or</text>
      <code>$SOME_CODE</code>
      <text>prop.</text>
    </listitem>
  </list>
  <heading level="2">
    API
    <Anchor></Anchor>
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Slider />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link checked="undefined" pressed="undefined">
      Select
      <SVGRoot></SVGRoot>
      <text>Select</text>
    </link>
    <link checked="undefined" pressed="undefined">
      Switch
      <text>Switch</text>
      <SVGRoot></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/switches/ 1`] = `
<main>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text>EDIT THIS PAGE</text>
  </link>
  <heading level="1">
    Switch
    <text>Switch</text>
  </heading>
  <paragraph>
    <text>Switches toggle the state of a single setting on or off.</text>
  </paragraph>
  <paragraph>
    <text>
      Switches are the preferred way to adjust settings on mobile. The option
      that the switch controls, as well as the state it‚Äôs in, should be made
      clear from the corresponding inline label.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot></SVGRoot>
        <text>Feedback</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
        <SVGRoot></SVGRoot>
        <text>Bundle size</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Material Design
        <SVGRoot></SVGRoot>
        <text>Material Design</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot></SVGRoot>
        <text>Sketch</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot></SVGRoot>
        <text>Figma</text>
      </link>
    </listitem>
  </list>
  <heading level="2">
    Basic switches
    <Anchor></Anchor>
    <text>Basic switches</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">secondary checkbox</checkbox>
  <checkbox checked="true">primary checkbox</checkbox>
  <checkbox checked="false">primary checkbox</checkbox>
  <checkbox disabled="true" checked="false">
    disabled checkbox
  </checkbox>
  <checkbox disabled="true" checked="true">
    primary checkbox
  </checkbox>
  <checkbox checked="true">checkbox with default color</checkbox>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Switch with FormControlLabel
    <Anchor></Anchor>
    <text>Switch with FormControlLabel</text>
  </heading>
  <paragraph>
    <code>$SOME_CODE</code>
    <text>can be provided with a description thanks to the</text>
    <code>$SOME_CODE</code>
    <text>component.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <checkbox checked="true">Secondary</checkbox>
  </Label>
  <Label>
    <checkbox checked="true">Primary</checkbox>
  </Label>
  <Label>
    <checkbox checked="false">Uncontrolled</checkbox>
  </Label>
  <Label>
    <checkbox disabled="true" checked="false">
      Disabled
    </checkbox>
  </Label>
  <Label>
    <checkbox disabled="true" checked="true">
      Disabled
    </checkbox>
  </Label>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Switches with FormGroup
    <Anchor></Anchor>
    <text>Switches with FormGroup</text>
  </heading>
  <paragraph>
    <code>$SOME_CODE</code>
    <text>
      is a helpful wrapper used to group selection controls components that
      provides an easier API. However, you are encouraged to use
    </text>
    <link checked="undefined" pressed="undefined">
      Checkboxes
    </link>
    <text>instead if multiple related controls are required. (See:</text>
    <link checked="undefined" pressed="undefined">
      When to use
    </link>
    <text>).</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    Assign responsibility
    <Legend>
      <text>Assign responsibility</text>
    </Legend>
    <Label>
      <checkbox checked="true">Gilad Gray</checkbox>
    </Label>
    <Label>
      <checkbox checked="false">Jason Killian</checkbox>
    </Label>
    <Label>
      <checkbox checked="true">Antoine Llorca</checkbox>
    </Label>
    <paragraph>
      <text>Be careful</text>
    </paragraph>
  </group>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Customized switches
    <Anchor></Anchor>
    <text>Customized switches</text>
  </heading>
  <paragraph>
    <text>
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <checkbox checked="true">Custom color</checkbox>
  </Label>
  <Label>
    <checkbox checked="true">iOS style</checkbox>
  </Label>
  <Label>
    <checkbox checked="true">Off On</checkbox>
  </Label>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <paragraph>
    <text>üé® If you are looking for inspiration, you can check</text>
    <link checked="undefined" pressed="undefined">
      MUI Treasury's customization examples
    </link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Sizes
    <Anchor></Anchor>
    <text>Sizes</text>
  </heading>
  <paragraph>
    <text>Fancy smaller switches? Use the</text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <checkbox checked="false">Small</checkbox>
  </Label>
  <Label>
    <checkbox checked="false">Normal</checkbox>
  </Label>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Label placement
    <Anchor></Anchor>
    <text>Label placement</text>
  </heading>
  <paragraph>
    <text>You can change the placement of the label:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    <Label>
      <checkbox checked="false">Top</checkbox>
    </Label>
    <Label>
      <checkbox checked="false">Start</checkbox>
    </Label>
    <Label>
      <checkbox checked="false">Bottom</checkbox>
    </Label>
    <Label>
      <checkbox checked="false">End</checkbox>
    </Label>
  </group>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    When to use
    <Anchor></Anchor>
    <text>When to use</text>
  </heading>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        Checkboxes vs. Switches
      </link>
    </listitem>
  </list>
  <heading level="2">
    Accessibility
    <Anchor></Anchor>
    <text>Accessibility</text>
  </heading>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>It will render an element with the</text>
      <code>$SOME_CODE</code>
      <text>role not</text>
      <code>$SOME_CODE</code>
      <text>
        role since this role isn't widely supported yet. Please test first
        if assistive technology of your target audience supports this role
        properly. Then you can change the role with
      </text>
      <code>$SOME_CODE</code>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>
        All form controls should have labels, and this includes radio buttons,
        checkboxes, and switches. In most cases, this is done by using the
      </text>
      <code>$SOME_CODE</code>
      <text>element (</text>
      <link checked="undefined" pressed="undefined">
        FormControlLabel
      </link>
      <text>).</text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>
        When a label can't be used, it's necessary to add an attribute
        directly to the input component. In this case, you can apply the
        additional attribute (e.g.
      </text>
      <code>$SOME_CODE</code>
      <text>,</text>
      <code>$SOME_CODE</code>
      <text>,</text>
      <code>$SOME_CODE</code>
      <text>) via the</text>
      <code>$SOME_CODE</code>
      <text>prop.</text>
    </listitem>
  </list>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    API
    <Anchor></Anchor>
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <FormControl />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <FormControlLabel />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <FormGroup />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <FormLabel />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Switch />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link checked="undefined" pressed="undefined">
      Slider
      <SVGRoot></SVGRoot>
      <text>Slider</text>
    </link>
    <link checked="undefined" pressed="undefined">
      Text Field
      <text>Text Field</text>
      <SVGRoot></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/tabs/ 1`] = `
<main>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text>EDIT THIS PAGE</text>
  </link>
  <heading level="1">
    Tabs
    <text>Tabs</text>
  </heading>
  <paragraph>
    <text>
      Tabs make it easy to explore and switch between different views.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Tabs organize and allow navigation between groups of content that are
      related and at the same level of hierarchy.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot></SVGRoot>
        <text>Feedback</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
        <SVGRoot></SVGRoot>
        <text>WAI-ARIA</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
        <SVGRoot></SVGRoot>
        <text>Bundle size</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Material Design
        <SVGRoot></SVGRoot>
        <text>Material Design</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot></SVGRoot>
        <text>Sketch</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot></SVGRoot>
        <text>Figma</text>
      </link>
    </listitem>
  </list>
  <heading level="2">
    Basic tabs
    <Anchor></Anchor>
    <text>Basic tabs</text>
  </heading>
  <paragraph>
    <text>A basic example with no frills.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <HeaderAsNonLandmark>
    <tablist level="1">
      simple tabs example
      <tab selected="true">
        ITEM ONE
        <text>ITEM ONE</text>
      </tab>
      <tab>
        ITEM TWO
        <text>ITEM TWO</text>
      </tab>
      <tab>
        ITEM THREE
        <text>ITEM THREE</text>
      </tab>
    </tablist>
  </HeaderAsNonLandmark>
  <tabpanel>
    ITEM ONE
    <paragraph>
      <text>Item One</text>
    </paragraph>
  </tabpanel>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3">
    Wrapped labels
    <Anchor></Anchor>
    <text>Wrapped labels</text>
  </heading>
  <paragraph>
    <text>
      Long labels will automatically wrap on tabs. If the label is too long for
      the tab, it will overflow and the text will not be visible.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <HeaderAsNonLandmark>
    <tablist level="1">
      wrapped label tabs example
      <tab selected="true">
        NEW ARRIVALS IN THE LONGEST TEXT OF NONFICTION
        <text>NEW ARRIVALS IN THE LONGEST TEXT OF NONFICTION</text>
      </tab>
      <tab>
        ITEM TWO
        <text>ITEM TWO</text>
      </tab>
      <tab>
        ITEM THREE
        <text>ITEM THREE</text>
      </tab>
    </tablist>
  </HeaderAsNonLandmark>
  <tabpanel>
    NEW ARRIVALS IN THE LONGEST TEXT OF NONFICTION
    <paragraph>
      <text>Item One</text>
    </paragraph>
  </tabpanel>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3">
    Disabled tab
    <Anchor></Anchor>
    <text>Disabled tab</text>
  </heading>
  <paragraph>
    <text>A Tab can be disabled by setting</text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1">
    disabled tabs example
    <tab>
      ACTIVE
      <text>ACTIVE</text>
    </tab>
    <tab disabled="true">
      DISABLED
      <text>DISABLED</text>
    </tab>
    <tab selected="true">
      ACTIVE
      <text>ACTIVE</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Fixed tabs
    <Anchor></Anchor>
    <text>Fixed tabs</text>
  </heading>
  <paragraph>
    <text>
      Fixed tabs should be used with a limited number of tabs and when
      consistent placement will aid muscle memory.
    </text>
  </paragraph>
  <heading level="3">
    Full width
    <Anchor></Anchor>
    <text>Full width</text>
  </heading>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>prop should be used for smaller views. This demo also uses</text>
    <link checked="undefined" pressed="undefined">
      react-swipeable-views
    </link>
    <text>
      to animate the Tab transition, and allowing tabs to be swiped on touch
      devices.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <HeaderAsNonLandmark>
    <tablist level="1">
      full width tabs example
      <tab selected="true">
        ITEM ONE
        <text>ITEM ONE</text>
      </tab>
      <tab>
        ITEM TWO
        <text>ITEM TWO</text>
      </tab>
      <tab>
        ITEM THREE
        <text>ITEM THREE</text>
      </tab>
    </tablist>
  </HeaderAsNonLandmark>
  <tabpanel>
    ITEM ONE
    <paragraph>
      <text>Item One</text>
    </paragraph>
  </tabpanel>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3">
    Centered
    <Anchor></Anchor>
    <text>Centered</text>
  </heading>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>prop should be used for larger views.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1">
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Scrollable tabs
    <Anchor></Anchor>
    <text>Scrollable tabs</text>
  </heading>
  <heading level="3">
    Automatic scroll buttons
    <Anchor></Anchor>
    <text>Automatic scroll buttons</text>
  </heading>
  <paragraph>
    <text>
      By default, left and right scroll buttons are automatically presented on
      desktop and hidden on mobile. (based on viewport width)
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <SVGRoot></SVGRoot>
  <tablist level="1">
    scrollable auto tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
    <tab>
      ITEM FOUR
      <text>ITEM FOUR</text>
    </tab>
    <tab>
      ITEM FIVE
      <text>ITEM FIVE</text>
    </tab>
    <tab>
      ITEM SIX
      <text>ITEM SIX</text>
    </tab>
    <tab>
      ITEM SEVEN
      <text>ITEM SEVEN</text>
    </tab>
  </tablist>
  <SVGRoot></SVGRoot>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="3">
    Forced scroll buttons
    <Anchor></Anchor>
    <text>Forced scroll buttons</text>
  </heading>
  <paragraph>
    <text>
      Left and right scroll buttons be presented (reserve space) regardless of
      the viewport width with
    </text>
    <code>$SOME_CODE</code>
    <code>$SOME_CODE</code>
    <text>:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <SVGRoot></SVGRoot>
  <tablist level="1">
    scrollable force tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
    <tab>
      ITEM FOUR
      <text>ITEM FOUR</text>
    </tab>
    <tab>
      ITEM FIVE
      <text>ITEM FIVE</text>
    </tab>
    <tab>
      ITEM SIX
      <text>ITEM SIX</text>
    </tab>
    <tab>
      ITEM SEVEN
      <text>ITEM SEVEN</text>
    </tab>
  </tablist>
  <SVGRoot></SVGRoot>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>
      If you want to make sure the buttons are always visible, you should
      customize the opacity.
    </text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <SVGRoot></SVGRoot>
  <tablist level="1">
    visible arrows tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
    <tab>
      ITEM FOUR
      <text>ITEM FOUR</text>
    </tab>
    <tab>
      ITEM FIVE
      <text>ITEM FIVE</text>
    </tab>
    <tab>
      ITEM SIX
      <text>ITEM SIX</text>
    </tab>
    <tab>
      ITEM SEVEN
      <text>ITEM SEVEN</text>
    </tab>
  </tablist>
  <SVGRoot></SVGRoot>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3">
    Prevent scroll buttons
    <Anchor></Anchor>
    <text>Prevent scroll buttons</text>
  </heading>
  <paragraph>
    <text>Left and right scroll buttons are never be presented with</text>
    <code>$SOME_CODE</code>
    <text>
      . All scrolling must be initiated through user agent scrolling mechanisms
      (e.g. left/right swipe, shift-mousewheel, etc.)
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1">
    scrollable prevent tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
    <tab>
      ITEM FOUR
      <text>ITEM FOUR</text>
    </tab>
    <tab>
      ITEM FIVE
      <text>ITEM FIVE</text>
    </tab>
    <tab>
      ITEM SIX
      <text>ITEM SIX</text>
    </tab>
    <tab>
      ITEM SEVEN
      <text>ITEM SEVEN</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Customized tabs
    <Anchor></Anchor>
    <text>Customized tabs</text>
  </heading>
  <paragraph>
    <text>
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1">
    ant example
    <tab selected="true">
      Tab 1<text>Tab 1</text>
    </tab>
    <tab>
      Tab 2<text>Tab 2</text>
    </tab>
    <tab>
      Tab 3<text>Tab 3</text>
    </tab>
  </tablist>
  <paragraph></paragraph>
  <tablist level="1">
    styled tabs example
    <tab selected="true">
      Workflows
      <text>Workflows</text>
    </tab>
    <tab>
      Datasets
      <text>Datasets</text>
    </tab>
    <tab>
      Connections
      <text>Connections</text>
    </tab>
  </tablist>
  <paragraph></paragraph>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <paragraph>
    <text>üé® If you are looking for inspiration, you can check</text>
    <link checked="undefined" pressed="undefined">
      MUI Treasury's customization examples
    </link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Vertical tabs
    <Anchor></Anchor>
    <text>Vertical tabs</text>
  </heading>
  <paragraph>
    <text>
      To make vertical tabs instead of default horizontal ones, there is
    </text>
    <code>$SOME_CODE</code>
    <text>:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <SVGRoot></SVGRoot>
  <tablist level="1">
    Vertical tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
    <tab>
      ITEM FOUR
      <text>ITEM FOUR</text>
    </tab>
    <tab>
      ITEM FIVE
      <text>ITEM FIVE</text>
    </tab>
    <tab>
      ITEM SIX
      <text>ITEM SIX</text>
    </tab>
    <tab>
      ITEM SEVEN
      <text>ITEM SEVEN</text>
    </tab>
  </tablist>
  <SVGRoot></SVGRoot>
  <tabpanel>
    ITEM ONE
    <paragraph>
      <text>Item One</text>
    </paragraph>
  </tabpanel>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <paragraph>
    <text>Note that you can restore the scrollbar with</text>
    <code>$SOME_CODE</code>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Nav Tabs
    <Anchor></Anchor>
    <text>Nav Tabs</text>
  </heading>
  <paragraph>
    <text>By default tabs use a</text>
    <code>$SOME_CODE</code>
    <text>
      element, but you can provide your own custom tag or component. Here's
      an example of implementing tabbed navigation:
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <HeaderAsNonLandmark>
    <tablist level="1">
      nav tabs example
      <tab selected="true">
        PAGE ONE
        <text>PAGE ONE</text>
      </tab>
      <tab>
        PAGE TWO
        <text>PAGE TWO</text>
      </tab>
      <tab>
        PAGE THREE
        <text>PAGE THREE</text>
      </tab>
    </tablist>
  </HeaderAsNonLandmark>
  <tabpanel>
    PAGE ONE
    <paragraph>
      <text>Page One</text>
    </paragraph>
  </tabpanel>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Icon Tabs
    <Anchor></Anchor>
    <text>Icon Tabs</text>
  </heading>
  <paragraph>
    <text>Tab labels may be either all icons or all text.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1">
    icon tabs example
    <tab selected="true">
      phone
      <SVGRoot></SVGRoot>
    </tab>
    <tab>
      favorite
      <SVGRoot></SVGRoot>
    </tab>
    <tab>
      person
      <SVGRoot></SVGRoot>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1">
    icon label tabs example
    <tab selected="true">
      RECENTS
      <SVGRoot></SVGRoot>
      <text>RECENTS</text>
    </tab>
    <tab>
      FAVORITES
      <SVGRoot></SVGRoot>
      <text>FAVORITES</text>
    </tab>
    <tab>
      NEARBY
      <SVGRoot></SVGRoot>
      <text>NEARBY</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Accessibility
    <Anchor></Anchor>
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(WAI-ARIA:</text>
    <link checked="undefined" pressed="undefined">
      https://www.w3.org/TR/wai-aria-practices/#tabpanel
    </link>
    <text>)</text>
  </paragraph>
  <paragraph>
    <text>
      The following steps are needed in order to provide necessary information
      for assistive technologies:
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <ListMarker>
        1.
        <text>1.</text>
      </ListMarker>
      <text>Label</text>
      <code>$SOME_CODE</code>
      <text>via</text>
      <code>$SOME_CODE</code>
      <text>or</text>
      <code>$SOME_CODE</code>
      <text>.</text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        2.
        <text>2.</text>
      </ListMarker>
      <code>$SOME_CODE</code>
      <text>s need to be connected to their corresponding</text>
      <code>$SOME_CODE</code>
      <text>by setting the correct</text>
      <code>$SOME_CODE</code>
      <text>,</text>
      <code>$SOME_CODE</code>
      <text>and</text>
      <code>$SOME_CODE</code>
      <text>.</text>
    </listitem>
  </list>
  <paragraph>
    <text>
      An example for the current implementation can be found in the demos on
      this page. We've also published
    </text>
    <link checked="undefined" pressed="undefined">
      an experimental API
    </link>
    <text>in</text>
    <code>$SOME_CODE</code>
    <text>that does not require extra work.</text>
  </paragraph>
  <heading level="3">
    Keyboard navigation
    <Anchor></Anchor>
    <text>Keyboard navigation</text>
  </heading>
  <paragraph>
    <text>
      The components implement keyboard navigation using the "manual
      activation" behavior. If you want to switch to the "selection
      automatically follows focus" behavior you have pass
    </text>
    <code>$SOME_CODE</code>
    <text>to the</text>
    <code>$SOME_CODE</code>
    <text>
      component. The WAI-ARIA authoring practices have a detailed guide on
    </text>
    <link checked="undefined" pressed="undefined">
      how to decide when to make selection automatically follow focus
    </link>
    <text>.</text>
  </paragraph>
  <heading level="4">
    Demo
    <text>Demo</text>
  </heading>
  <paragraph>
    <text>
      The following two demos only differ in their keyboard navigation behavior.
      Focus a tab and navigate with arrow keys to notice the difference.
    </text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Tabs where selection follows focus</text>
  </paragraph>
  <HeaderAsNonLandmark>
    <tablist level="1">
      Tabs where selection follows focus
      <tab selected="true">
        ITEM ONE
        <text>ITEM ONE</text>
      </tab>
      <tab>
        ITEM TWO
        <text>ITEM TWO</text>
      </tab>
      <tab>
        ITEM THREE
        <text>ITEM THREE</text>
      </tab>
    </tablist>
  </HeaderAsNonLandmark>
  <paragraph>
    <text>Tabs where each tab needs to be selected manually</text>
  </paragraph>
  <HeaderAsNonLandmark>
    <tablist level="1">
      Tabs where each tab needs to be selected manually
      <tab selected="true">
        ITEM ONE
        <text>ITEM ONE</text>
      </tab>
      <tab>
        ITEM TWO
        <text>ITEM TWO</text>
      </tab>
      <tab>
        ITEM THREE
        <text>ITEM THREE</text>
      </tab>
    </tablist>
  </HeaderAsNonLandmark>
  <tabpanel>
    ITEM ONE
    <paragraph>
      <text>Item One</text>
    </paragraph>
  </tabpanel>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Experimental API
    <Anchor></Anchor>
    <text>Experimental API</text>
  </heading>
  <paragraph>
    <code>$SOME_CODE</code>
    <text>
      offers utility components that inject props to implement accessible tabs
      following
    </text>
    <link checked="undefined" pressed="undefined">
      WAI-ARIA authoring practices
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <HeaderAsNonLandmark>
    <tablist level="1">
      simple tabs example
      <tab selected="true">
        ITEM ONE
        <text>ITEM ONE</text>
      </tab>
      <tab>
        ITEM TWO
        <text>ITEM TWO</text>
      </tab>
      <tab>
        ITEM THREE
        <text>ITEM THREE</text>
      </tab>
    </tablist>
  </HeaderAsNonLandmark>
  <tabpanel>
    ITEM ONE
    <text>Item One</text>
  </tabpanel>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    API
    <Anchor></Anchor>
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Tab />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <TabContext />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <TabList />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <TabPanel />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <TabScrollButton />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Tabs />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link checked="undefined" pressed="undefined">
      Stepper
      <SVGRoot></SVGRoot>
      <text>Stepper</text>
    </link>
    <link checked="undefined" pressed="undefined">
      Accordion
      <text>Accordion</text>
      <SVGRoot></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/text-fields/ 1`] = `
<main>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text>EDIT THIS PAGE</text>
  </link>
  <heading level="1">
    Text Field
    <text>Text Field</text>
  </heading>
  <paragraph>
    <text>Text fields let users enter and edit text.</text>
  </paragraph>
  <paragraph>
    <text>
      Text fields allow users to enter text into a UI. They typically appear in
      forms and dialogs.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot></SVGRoot>
        <text>Feedback</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
        <SVGRoot></SVGRoot>
        <text>Bundle size</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Material Design
        <SVGRoot></SVGRoot>
        <text>Material Design</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot></SVGRoot>
        <text>Sketch</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot></SVGRoot>
        <text>Figma</text>
      </link>
    </listitem>
  </list>
  <heading level="2">
    TextField
    <Anchor></Anchor>
    <text>TextField</text>
  </heading>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>
      wrapper component is a complete form control including a label, input and
      help text.
    </text>
  </paragraph>
  <paragraph>
    <text>It supports standard, outlined and filled styling.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <Label>
      <text>Standard</text>
    </Label>
    <text>¬†</text>
    <textbox>Standard</textbox>
    <Label>
      <text>Filled</text>
    </Label>
    <text>¬†</text>
    <textbox>Filled</textbox>
    <Label>
      <text>Outlined</text>
    </Label>
    <textbox>Outlined</textbox>
    <group>
      <Legend>
        <text>Outlined</text>
      </Legend>
    </group>
  </form>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>Note:The standard variant of the</text>
    <code>$SOME_CODE</code>
    <text>is no longer documented in the</text>
    <link checked="undefined" pressed="undefined">
      Material Design guidelines
    </link>
    <text>(</text>
    <link checked="undefined" pressed="undefined">
      here's why
    </link>
    <text>), but Material-UI will continue to support it.</text>
  </paragraph>
  <heading level="2">
    Form props
    <Anchor></Anchor>
    <text>Form props</text>
  </heading>
  <paragraph>
    <text>Standard form attributes are supported e.g.</text>
    <code>$SOME_CODE</code>
    <text>,</text>
    <code>$SOME_CODE</code>
    <text>,</text>
    <code>$SOME_CODE</code>
    <text>, etc. as well as a</text>
    <code>$SOME_CODE</code>
    <text>
      which is used to give context about a field‚Äôs input, such as how the input
      will be used.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <Label>
      <text>Required‚Äâ*</text>
    </Label>
    <text>¬†</text>
    <textbox required="true" value="Hello World">
      Required
      <text>Hello World</text>
    </textbox>
    <Label>
      <text>Disabled</text>
    </Label>
    <text>¬†</text>
    <textbox disabled="true" value="Hello World">
      Disabled
      <text>Hello World</text>
    </textbox>
    <Label>
      <text>Password</text>
    </Label>
    <text>¬†</text>
    <textbox>Password</textbox>
    <Label>
      <text>Read Only</text>
    </Label>
    <text>¬†</text>
    <textbox readonly="true" value="Hello World">
      Read Only
      <text>Hello World</text>
    </textbox>
    <Label>
      <text>Number</text>
    </Label>
    <text>¬†</text>
    <spinbutton valuetext="">Number</spinbutton>
    <Label>
      <text>Search field</text>
    </Label>
    <text>¬†</text>
    <searchbox>Search field</searchbox>
    <Label>
      <text>Helper text</text>
    </Label>
    <text>¬†</text>
    <textbox description="Some important text" value="Default Value">
      Helper text
      <text>Default Value</text>
    </textbox>
    <paragraph>
      <text>Some important text</text>
    </paragraph>
    <Label>
      <text>Required‚Äâ*</text>
    </Label>
    <text>¬†</text>
    <textbox required="true" value="Hello World">
      Required
      <text>Hello World</text>
    </textbox>
    <Label>
      <text>Disabled</text>
    </Label>
    <text>¬†</text>
    <textbox disabled="true" value="Hello World">
      Disabled
      <text>Hello World</text>
    </textbox>
    <Label>
      <text>Password</text>
    </Label>
    <text>¬†</text>
    <textbox>Password</textbox>
    <Label>
      <text>Read Only</text>
    </Label>
    <text>¬†</text>
    <textbox readonly="true" value="Hello World">
      Read Only
      <text>Hello World</text>
    </textbox>
    <Label>
      <text>Number</text>
    </Label>
    <text>¬†</text>
    <spinbutton valuetext="">Number</spinbutton>
    <Label>
      <text>Search field</text>
    </Label>
    <text>¬†</text>
    <searchbox>Search field</searchbox>
    <Label>
      <text>Helper text</text>
    </Label>
    <text>¬†</text>
    <textbox description="Some important text" value="Default Value">
      Helper text
      <text>Default Value</text>
    </textbox>
    <paragraph>
      <text>Some important text</text>
    </paragraph>
    <Label>
      <text>Required‚Äâ*</text>
    </Label>
    <textbox required="true" value="Hello World">
      Required
      <text>Hello World</text>
    </textbox>
    <group>
      <Legend>
        <text>Required¬†*</text>
      </Legend>
    </group>
    <Label>
      <text>Disabled</text>
    </Label>
    <textbox disabled="true" value="Hello World">
      Disabled
      <text>Hello World</text>
    </textbox>
    <group>
      <Legend>
        <text>Disabled</text>
      </Legend>
    </group>
    <Label>
      <text>Password</text>
    </Label>
    <textbox>Password</textbox>
    <group>
      <Legend>
        <text>Password</text>
      </Legend>
    </group>
    <Label>
      <text>Read Only</text>
    </Label>
    <textbox readonly="true" value="Hello World">
      Read Only
      <text>Hello World</text>
    </textbox>
    <group>
      <Legend>
        <text>Read Only</text>
      </Legend>
    </group>
    <Label>
      <text>Number</text>
    </Label>
    <spinbutton valuetext="">Number</spinbutton>
    <group>
      <Legend>
        <text>Number</text>
      </Legend>
    </group>
    <Label>
      <text>Search field</text>
    </Label>
    <searchbox>Search field</searchbox>
    <group>
      <Legend>
        <text>Search field</text>
      </Legend>
    </group>
    <Label>
      <text>Helper text</text>
    </Label>
    <textbox description="Some important text" value="Default Value">
      Helper text
      <text>Default Value</text>
    </textbox>
    <group>
      <Legend>
        <text>Helper text</text>
      </Legend>
    </group>
    <paragraph>
      <text>Some important text</text>
    </paragraph>
  </form>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Validation
    <Anchor></Anchor>
    <text>Validation</text>
  </heading>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>prop toggles the error state, the</text>
    <code>$SOME_CODE</code>
    <text>
      prop can then be used to provide feedback to the user about the error.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <Label>
      <text>Error</text>
    </Label>
    <text>¬†</text>
    <textbox invalid="true" value="Hello World">
      Error
      <text>Hello World</text>
    </textbox>
    <Label>
      <text>Error</text>
    </Label>
    <text>¬†</text>
    <textbox description="Incorrect entry." invalid="true" value="Hello World">
      Error
      <text>Hello World</text>
    </textbox>
    <paragraph>
      <text>Incorrect entry.</text>
    </paragraph>
    <Label>
      <text>Error</text>
    </Label>
    <text>¬†</text>
    <textbox invalid="true" value="Hello World">
      Error
      <text>Hello World</text>
    </textbox>
    <Label>
      <text>Error</text>
    </Label>
    <text>¬†</text>
    <textbox description="Incorrect entry." invalid="true" value="Hello World">
      Error
      <text>Hello World</text>
    </textbox>
    <paragraph>
      <text>Incorrect entry.</text>
    </paragraph>
    <Label>
      <text>Error</text>
    </Label>
    <textbox invalid="true" value="Hello World">
      Error
      <text>Hello World</text>
    </textbox>
    <group>
      <Legend>
        <text>Error</text>
      </Legend>
    </group>
    <Label>
      <text>Error</text>
    </Label>
    <textbox description="Incorrect entry." invalid="true" value="Hello World">
      Error
      <text>Hello World</text>
    </textbox>
    <group>
      <Legend>
        <text>Error</text>
      </Legend>
    </group>
    <paragraph>
      <text>Incorrect entry.</text>
    </paragraph>
  </form>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Multiline
    <Anchor></Anchor>
    <text>Multiline</text>
  </heading>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>prop transforms the text field into a</text>
    <link checked="undefined" pressed="undefined">
      <textarea>
      <code>$SOME_CODE</code>
    </link>
    <text>element. Unless the</text>
    <code>$SOME_CODE</code>
    <text>
      prop is set, the height of the text field dynamically matches its content
      (using
    </text>
    <link checked="undefined" pressed="undefined">
      TextareaAutosize
    </link>
    <text>). You can use the</text>
    <code>$SOME_CODE</code>
    <text>and</text>
    <code>$SOME_CODE</code>
    <text>props to bound it.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <Label>
      <text>Multiline</text>
    </Label>
    <text>¬†</text>
    <textbox multiline="true" value="Controlled">
      Multiline
      <text>Controlled</text>
    </textbox>
    <textbox multiline="true" readonly="true" value="x"></textbox>
    <Label>
      <text>Multiline Placeholder</text>
    </Label>
    <text>¬†</text>
    <textbox multiline="true">
      Multiline Placeholder
      <text>Placeholder</text>
    </textbox>
    <textbox multiline="true" readonly="true" value="x"></textbox>
    <Label>
      <text>Multiline</text>
    </Label>
    <text>¬†</text>
    <textbox multiline="true" value="Default Value">
      Multiline
      <text>Default Value</text>
    </textbox>
    <Label>
      <text>Multiline</text>
    </Label>
    <text>¬†</text>
    <textbox multiline="true" value="Controlled">
      Multiline
      <text>Controlled</text>
    </textbox>
    <textbox multiline="true" readonly="true" value="x"></textbox>
    <Label>
      <text>Multiline Placeholder</text>
    </Label>
    <text>¬†</text>
    <textbox multiline="true">
      Multiline Placeholder
      <text>Placeholder</text>
    </textbox>
    <textbox multiline="true" readonly="true" value="x"></textbox>
    <Label>
      <text>Multiline</text>
    </Label>
    <text>¬†</text>
    <textbox multiline="true" value="Default Value">
      Multiline
      <text>Default Value</text>
    </textbox>
    <Label>
      <text>Multiline</text>
    </Label>
    <textbox multiline="true" value="Controlled">
      Multiline
      <text>Controlled</text>
    </textbox>
    <textbox multiline="true" readonly="true" value="x"></textbox>
    <group>
      <Legend>
        <text>Multiline</text>
      </Legend>
    </group>
    <Label>
      <text>Multiline Placeholder</text>
    </Label>
    <textbox multiline="true">
      Multiline Placeholder
      <text>Placeholder</text>
    </textbox>
    <textbox multiline="true" readonly="true" value="x"></textbox>
    <group>
      <Legend>
        <text>Multiline Placeholder</text>
      </Legend>
    </group>
    <Label>
      <text>Multiline</text>
    </Label>
    <textbox multiline="true" value="Default Value">
      Multiline
      <text>Default Value</text>
    </textbox>
    <group>
      <Legend>
        <text>Multiline</text>
      </Legend>
    </group>
  </form>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Select
    <Anchor></Anchor>
    <text>Select</text>
  </heading>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>prop makes the text field use the</text>
    <link checked="undefined" pressed="undefined">
      Select
    </link>
    <text>component internally.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <Label>
      <text>Select</text>
    </Label>
    <text>¬†</text>
    <combobox haspopup="listbox">Select ‚Ç¨</combobox>
    <textbox description="Please select your currency" value="EUR"></textbox>
    <SVGRoot></SVGRoot>
    <paragraph>
      <text>Please select your currency</text>
    </paragraph>
    <Label>
      <text>Native select</text>
    </Label>
    <text>¬†</text>
    <combobox description="Please select your currency" value="‚Ç¨">
      Native select
      <MenuListPopup>
        <menuitem>$</menuitem>
        <menuitem selected="true">‚Ç¨</menuitem>
        <menuitem>‡∏ø</menuitem>
        <menuitem>¬•</menuitem>
      </MenuListPopup>
    </combobox>
    <SVGRoot></SVGRoot>
    <paragraph>
      <text>Please select your currency</text>
    </paragraph>
    <Label>
      <text>Select</text>
    </Label>
    <text>¬†</text>
    <combobox haspopup="listbox">Select ‚Ç¨</combobox>
    <textbox description="Please select your currency" value="EUR"></textbox>
    <SVGRoot></SVGRoot>
    <paragraph>
      <text>Please select your currency</text>
    </paragraph>
    <Label>
      <text>Native select</text>
    </Label>
    <text>¬†</text>
    <combobox description="Please select your currency" value="‚Ç¨">
      Native select
      <MenuListPopup>
        <menuitem>$</menuitem>
        <menuitem selected="true">‚Ç¨</menuitem>
        <menuitem>‡∏ø</menuitem>
        <menuitem>¬•</menuitem>
      </MenuListPopup>
    </combobox>
    <SVGRoot></SVGRoot>
    <paragraph>
      <text>Please select your currency</text>
    </paragraph>
    <Label>
      <text>Select</text>
    </Label>
    <combobox haspopup="listbox">Select ‚Ç¨</combobox>
    <textbox description="Please select your currency" value="EUR"></textbox>
    <SVGRoot></SVGRoot>
    <group>
      <Legend>
        <text>Select</text>
      </Legend>
    </group>
    <paragraph>
      <text>Please select your currency</text>
    </paragraph>
    <Label>
      <text>Native select</text>
    </Label>
    <combobox description="Please select your currency" value="‚Ç¨">
      Native select
      <MenuListPopup>
        <menuitem>$</menuitem>
        <menuitem selected="true">‚Ç¨</menuitem>
        <menuitem>‡∏ø</menuitem>
        <menuitem>¬•</menuitem>
      </MenuListPopup>
    </combobox>
    <SVGRoot></SVGRoot>
    <group>
      <Legend>
        <text>Native select</text>
      </Legend>
    </group>
    <paragraph>
      <text>Please select your currency</text>
    </paragraph>
  </form>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Icons
    <Anchor></Anchor>
    <text>Icons</text>
  </heading>
  <paragraph>
    <text>There are multiple ways to display an icon with a text field.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>With a start adornment</text>
  </Label>
  <text>¬†</text>
  <SVGRoot></SVGRoot>
  <textbox>With a start adornment</textbox>
  <Label>
    <text>TextField</text>
  </Label>
  <text>¬†</text>
  <SVGRoot></SVGRoot>
  <textbox>TextField</textbox>
  <SVGRoot></SVGRoot>
  <Label>
    <text>With a grid</text>
  </Label>
  <text>¬†</text>
  <textbox>With a grid</textbox>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3">
    Input Adornments
    <Anchor></Anchor>
    <text>Input Adornments</text>
  </heading>
  <paragraph>
    <text>The main way is with an</text>
    <code>$SOME_CODE</code>
    <text>
      . This can be used to add a prefix, a suffix or an action to an input. For
      instance, you can use an icon button to hide or reveal the password.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>With normal TextField</text>
  </Label>
  <text>¬†</text>
  <paragraph>
    <text>Kg</text>
  </paragraph>
  <textbox>With normal TextField</textbox>
  <text>¬†</text>
  <textbox description="Weight">weight</textbox>
  <paragraph>
    <text>Kg</text>
  </paragraph>
  <paragraph>
    <text>Weight</text>
  </paragraph>
  <Label>
    <text>Password</text>
  </Label>
  <text>¬†</text>
  <textbox>Password</textbox>
  <button>
    toggle password visibility
    <SVGRoot></SVGRoot>
  </button>
  <Label>
    <text>Amount</text>
  </Label>
  <text>¬†</text>
  <paragraph>
    <text>$</text>
  </paragraph>
  <textbox>Amount</textbox>
  <Label>
    <text>With normal TextField</text>
  </Label>
  <text>¬†</text>
  <paragraph>
    <text>Kg</text>
  </paragraph>
  <textbox>With normal TextField</textbox>
  <text>¬†</text>
  <textbox description="Weight">weight</textbox>
  <paragraph>
    <text>Kg</text>
  </paragraph>
  <paragraph>
    <text>Weight</text>
  </paragraph>
  <Label>
    <text>Password</text>
  </Label>
  <text>¬†</text>
  <textbox>Password</textbox>
  <button>
    toggle password visibility
    <SVGRoot></SVGRoot>
  </button>
  <Label>
    <text>Amount</text>
  </Label>
  <text>¬†</text>
  <paragraph>
    <text>$</text>
  </paragraph>
  <textbox>Amount</textbox>
  <Label>
    <text>With normal TextField</text>
  </Label>
  <paragraph>
    <text>Kg</text>
  </paragraph>
  <textbox>With normal TextField</textbox>
  <group>
    <Legend>
      <text>With normal TextField</text>
    </Legend>
  </group>
  <textbox description="Weight">weight</textbox>
  <paragraph>
    <text>Kg</text>
  </paragraph>
  <group>
    ‚Äã
    <Legend>
      <text>‚Äã</text>
    </Legend>
  </group>
  <paragraph>
    <text>Weight</text>
  </paragraph>
  <Label>
    <text>Password</text>
  </Label>
  <textbox>Password</textbox>
  <button>
    toggle password visibility
    <SVGRoot></SVGRoot>
  </button>
  <group>
    ‚Äã
    <Legend>
      <text>‚Äã</text>
    </Legend>
  </group>
  <Label>
    <text>Amount</text>
  </Label>
  <paragraph>
    <text>$</text>
  </paragraph>
  <textbox>Amount</textbox>
  <group>
    ‚Äã
    <Legend>
      <text>‚Äã</text>
    </Legend>
  </group>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Sizes
    <Anchor></Anchor>
    <text>Sizes</text>
  </heading>
  <paragraph>
    <text>Fancy smaller inputs? Use the</text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <Label>
      <text>Size</text>
    </Label>
    <text>¬†</text>
    <textbox value="Small">
      Size
      <text>Small</text>
    </textbox>
    <Label>
      <text>Size</text>
    </Label>
    <text>¬†</text>
    <textbox value="Normal">
      Size
      <text>Normal</text>
    </textbox>
    <Label>
      <text>Size</text>
    </Label>
    <text>¬†</text>
    <textbox value="Small">
      Size
      <text>Small</text>
    </textbox>
    <Label>
      <text>Size</text>
    </Label>
    <text>¬†</text>
    <textbox value="Normal">
      Size
      <text>Normal</text>
    </textbox>
    <Label>
      <text>Size</text>
    </Label>
    <textbox value="Small">
      Size
      <text>Small</text>
    </textbox>
    <group>
      <Legend>
        <text>Size</text>
      </Legend>
    </group>
    <Label>
      <text>Size</text>
    </Label>
    <textbox value="Normal">
      Size
      <text>Normal</text>
    </textbox>
    <group>
      <Legend>
        <text>Size</text>
      </Legend>
    </group>
  </form>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Layout
    <Anchor></Anchor>
    <text>Layout</text>
  </heading>
  <paragraph>
    <code>$SOME_CODE</code>
    <text>prop can be used to alter the vertical spacing of inputs. Using</text>
    <code>$SOME_CODE</code>
    <text>(default) will not apply margins to the</text>
    <code>$SOME_CODE</code>
    <text>, whereas</text>
    <code>$SOME_CODE</code>
    <text>and</text>
    <code>$SOME_CODE</code>
    <text>will.</text>
    <code>$SOME_CODE</code>
    <text>and</text>
    <code>$SOME_CODE</code>
    <text>alter other styles to meet the specification.</text>
  </paragraph>
  <paragraph>
    <code>$SOME_CODE</code>
    <text>
      can be used to make the input take up the full width of its container.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Label</text>
  </Label>
  <text>¬†</text>
  <textbox description="Full width!">
    Label
    <text>Placeholder</text>
  </textbox>
  <paragraph>
    <text>Full width!</text>
  </paragraph>
  <Label>
    <text>None</text>
  </Label>
  <text>¬†</text>
  <textbox description="Some important text" value="Default Value">
    None
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <Label>
    <text>Dense</text>
  </Label>
  <text>¬†</text>
  <textbox description="Some important text" value="Default Value">
    Dense
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <Label>
    <text>Normal</text>
  </Label>
  <text>¬†</text>
  <textbox description="Some important text" value="Default Value">
    Normal
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <Label>
    <text>Label</text>
  </Label>
  <text>¬†</text>
  <textbox description="Full width!">
    Label
    <text>Placeholder</text>
  </textbox>
  <paragraph>
    <text>Full width!</text>
  </paragraph>
  <Label>
    <text>None</text>
  </Label>
  <text>¬†</text>
  <textbox description="Some important text" value="Default Value">
    None
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <Label>
    <text>Dense</text>
  </Label>
  <text>¬†</text>
  <textbox description="Some important text" value="Default Value">
    Dense
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <Label>
    <text>Normal</text>
  </Label>
  <text>¬†</text>
  <textbox description="Some important text" value="Default Value">
    Normal
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <Label>
    <text>Label</text>
  </Label>
  <textbox description="Full width!">
    Label
    <text>Placeholder</text>
  </textbox>
  <group>
    <Legend>
      <text>Label</text>
    </Legend>
  </group>
  <paragraph>
    <text>Full width!</text>
  </paragraph>
  <Label>
    <text>None</text>
  </Label>
  <textbox description="Some important text" value="Default Value">
    None
    <text>Default Value</text>
  </textbox>
  <group>
    <Legend>
      <text>None</text>
    </Legend>
  </group>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <Label>
    <text>Dense</text>
  </Label>
  <textbox description="Some important text" value="Default Value">
    Dense
    <text>Default Value</text>
  </textbox>
  <group>
    <Legend>
      <text>Dense</text>
    </Legend>
  </group>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <Label>
    <text>Normal</text>
  </Label>
  <textbox description="Some important text" value="Default Value">
    Normal
    <text>Default Value</text>
  </textbox>
  <group>
    <Legend>
      <text>Normal</text>
    </Legend>
  </group>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Uncontrolled vs Controlled
    <Anchor></Anchor>
    <text>Uncontrolled vs Controlled</text>
  </heading>
  <paragraph>
    <text>The component can be controlled or uncontrolled.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <Label>
      <text>Name</text>
    </Label>
    <text>¬†</text>
    <textbox value="Cat in the Hat">
      Name
      <text>Cat in the Hat</text>
    </textbox>
    <Label>
      <text>Uncontrolled</text>
    </Label>
    <text>¬†</text>
    <textbox value="foo">
      Uncontrolled
      <text>foo</text>
    </textbox>
    <Label>
      <text>Name</text>
    </Label>
    <text>¬†</text>
    <textbox value="Cat in the Hat">
      Name
      <text>Cat in the Hat</text>
    </textbox>
    <Label>
      <text>Uncontrolled</text>
    </Label>
    <text>¬†</text>
    <textbox value="foo">
      Uncontrolled
      <text>foo</text>
    </textbox>
    <Label>
      <text>Name</text>
    </Label>
    <textbox value="Cat in the Hat">
      Name
      <text>Cat in the Hat</text>
    </textbox>
    <group>
      <Legend>
        <text>Name</text>
      </Legend>
    </group>
    <Label>
      <text>Uncontrolled</text>
    </Label>
    <textbox value="foo">
      Uncontrolled
      <text>foo</text>
    </textbox>
    <group>
      <Legend>
        <text>Uncontrolled</text>
      </Legend>
    </group>
  </form>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Components
    <Anchor></Anchor>
    <text>Components</text>
  </heading>
  <paragraph>
    <code>$SOME_CODE</code>
    <text>is composed of smaller components (</text>
    <link checked="undefined" pressed="undefined">
      FormControl
      <code>$SOME_CODE</code>
    </link>
    <text>,</text>
    <link checked="undefined" pressed="undefined">
      Input
      <code>$SOME_CODE</code>
    </link>
    <text>,</text>
    <link checked="undefined" pressed="undefined">
      FilledInput
      <code>$SOME_CODE</code>
    </link>
    <text>,</text>
    <link checked="undefined" pressed="undefined">
      InputLabel
      <code>$SOME_CODE</code>
    </link>
    <text>,</text>
    <link checked="undefined" pressed="undefined">
      OutlinedInput
      <code>$SOME_CODE</code>
    </link>
    <text>, and</text>
    <link checked="undefined" pressed="undefined">
      FormHelperText
      <code>$SOME_CODE</code>
    </link>
    <text>
      ) that you can leverage directly to significantly customize your form
      inputs.
    </text>
  </paragraph>
  <paragraph>
    <text>
      You might also have noticed that some native HTML input properties are
      missing from the
    </text>
    <code>$SOME_CODE</code>
    <text>
      component. This is on purpose. The component takes care of the most used
      properties, then it's up to the user to use the underlying component
      shown in the following demo. Still, you can use
    </text>
    <code>$SOME_CODE</code>
    <text>(and</text>
    <code>$SOME_CODE</code>
    <text>,</text>
    <code>$SOME_CODE</code>
    <text>properties) if you want to avoid some boilerplate.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <Label>
      <text>Name</text>
    </Label>
    <text>¬†</text>
    <textbox value="Composed TextField">
      Name
      <text>Composed TextField</text>
    </textbox>
    <Label>
      <text>Name</text>
    </Label>
    <text>¬†</text>
    <textbox
      description="Some important helper text"
      value="Composed TextField"
    >
      Name
      <text>Composed TextField</text>
    </textbox>
    <paragraph>
      <text>Some important helper text</text>
    </paragraph>
    <Label>
      <text>Name</text>
    </Label>
    <text>¬†</text>
    <textbox disabled="true" value="Composed TextField">
      Name
      <text>Composed TextField</text>
    </textbox>
    <paragraph>
      <text>Disabled</text>
    </paragraph>
    <Label>
      <text>Name</text>
    </Label>
    <text>¬†</text>
    <textbox description="Error" invalid="true" value="Composed TextField">
      Name
      <text>Composed TextField</text>
    </textbox>
    <paragraph>
      <text>Error</text>
    </paragraph>
    <Label>
      <text>Name</text>
    </Label>
    <textbox value="Composed TextField">
      Name
      <text>Composed TextField</text>
    </textbox>
    <group>
      <Legend>
        <text>Name</text>
      </Legend>
    </group>
    <Label>
      <text>Name</text>
    </Label>
    <text>¬†</text>
    <textbox value="Composed TextField">
      Name
      <text>Composed TextField</text>
    </textbox>
  </form>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Inputs
    <Anchor></Anchor>
    <text>Inputs</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <text>¬†</text>
    <textbox value="Hello world">
      description
      <text>Hello world</text>
    </textbox>
    <text>¬†</text>
    <textbox>
      description
      <text>Placeholder</text>
    </textbox>
    <text>¬†</text>
    <textbox disabled="true" value="Disabled">
      description
      <text>Disabled</text>
    </textbox>
    <text>¬†</text>
    <textbox invalid="true" value="Error">
      description
      <text>Error</text>
    </textbox>
  </form>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Color
    <Anchor></Anchor>
    <text>Color</text>
  </heading>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>
      prop changes the highlight color of the text field when focused.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <Label>
      <text>Standard secondary</text>
    </Label>
    <text>¬†</text>
    <textbox>Standard secondary</textbox>
    <Label>
      <text>Filled secondary</text>
    </Label>
    <text>¬†</text>
    <textbox>Filled secondary</textbox>
    <Label>
      <text>Outlined secondary</text>
    </Label>
    <textbox>Outlined secondary</textbox>
    <group>
      <Legend>
        <text>Outlined secondary</text>
      </Legend>
    </group>
  </form>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Customized inputs
    <Anchor></Anchor>
    <text>Customized inputs</text>
  </heading>
  <paragraph>
    <text>
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <Label>
      <text>Custom CSS</text>
    </Label>
    <text>¬†</text>
    <textbox>Custom CSS</textbox>
    <Label>
      <text>Custom CSS</text>
    </Label>
    <textbox>Custom CSS</textbox>
    <group>
      <Legend>
        <text>Custom CSS</text>
      </Legend>
    </group>
    <Label>
      <text>ThemeProvider</text>
    </Label>
    <text>¬†</text>
    <textbox>ThemeProvider</textbox>
    <Label>
      <text>ThemeProvider</text>
    </Label>
    <textbox>ThemeProvider</textbox>
    <group>
      <Legend>
        <text>ThemeProvider</text>
      </Legend>
    </group>
    <Label>
      <text>Bootstrap</text>
    </Label>
    <textbox value="react-bootstrap">
      Bootstrap
      <text>react-bootstrap</text>
    </textbox>
    <Label>
      <text>Reddit</text>
    </Label>
    <textbox value="react-reddit">
      Reddit
      <text>react-reddit</text>
    </textbox>
    <textbox value="Naked input">
      naked
      <text>Naked input</text>
    </textbox>
    <Label>
      <text>CSS validation style‚Äâ*</text>
    </Label>
    <textbox required="true" value="Success">
      CSS validation style
      <text>Success</text>
    </textbox>
    <group>
      <Legend>
        <text>CSS validation style¬†*</text>
      </Legend>
    </group>
  </form>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <paragraph>
    <text>
      Customization does not stop at CSS, you can use composition to build
      custom components and give your app a unique feel. Below is an example
      using the
    </text>
    <link checked="undefined" pressed="undefined">
      InputBase
      <code>$SOME_CODE</code>
    </link>
    <text>component, inspired by Google Maps.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <button>
      menu
      <SVGRoot></SVGRoot>
    </button>
    <textbox>
      search google maps
      <text>Search Google Maps</text>
    </textbox>
    <button>
      search
      <SVGRoot></SVGRoot>
    </button>
    <separator orientation="horizontal"></separator>
    <button>
      directions
      <SVGRoot></SVGRoot>
    </button>
  </form>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <paragraph>
    <text>üé® If you are looking for inspiration, you can check</text>
    <link checked="undefined" pressed="undefined">
      MUI Treasury's customization examples
    </link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Limitations
    <Anchor></Anchor>
    <text>Limitations</text>
  </heading>
  <heading level="3">
    Shrink
    <Anchor></Anchor>
    <text>Shrink</text>
  </heading>
  <paragraph>
    <text>
      The input label "shrink" state isn't always correct. The
      input label is supposed to shrink as soon as the input is displaying
      something. In some circumstances, we can't determine the
      "shrink" state (number input, datetime input, Stripe input). You
      might notice an overlap.
    </text>
  </paragraph>
  <paragraph>
    <img>shrink</img>
  </paragraph>
  <paragraph>
    <text>
      To workaround the issue, you can force the "shrink" state of the
      label.
    </text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>or</text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="3">
    Floating label
    <Anchor></Anchor>
    <text>Floating label</text>
  </heading>
  <paragraph>
    <text>
      The floating label is absolutely positioned, it won't impact the
      layout of the page. You need to make sure that the input is larger than
      the label to display correctly.
    </text>
  </paragraph>
  <heading level="3">
    type="number"
    <Anchor></Anchor>
    <text>type="number"</text>
  </heading>
  <paragraph>
    <text>
      Inputs of type="number" have potential usability issues:
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>
        Allowing certain non-numeric characters ('e', '+',
        '-', '.') and silently discarding others
      </text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>
        The functionality of scrolling to increment/decrement the number can
        cause accidental and hard-to-notice changes
      </text>
    </listitem>
  </list>
  <paragraph>
    <text>and more - see</text>
    <link checked="undefined" pressed="undefined">
      this article
    </link>
    <text>
      by the GOV.UK Design System team for a more detailed explanation.
    </text>
  </paragraph>
  <paragraph>
    <text>
      For number validation, one viable alternative is to use the default input
      type="text" with thepatternattribute, for example:
    </text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>In the future, we might provide a</text>
    <link checked="undefined" pressed="undefined">
      number input component
    </link>
    <text>.</text>
  </paragraph>
  <heading level="3">
    Helper text
    <Anchor></Anchor>
    <text>Helper text</text>
  </heading>
  <paragraph>
    <text>
      The helper text prop affects the height of the text field. If two text
      fields are placed side by side, one with a helper text and one without,
      they will have different heights. For example:
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Name</text>
  </Label>
  <text>¬†</text>
  <textbox></textbox>
  <paragraph>
    <text>Please enter your name</text>
  </paragraph>
  <Label>
    <text>Name</text>
  </Label>
  <text>¬†</text>
  <textbox></textbox>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>This can be fixed by passing a space character to the</text>
    <code>$SOME_CODE</code>
    <text>prop:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>Name</text>
  </Label>
  <text>¬†</text>
  <textbox></textbox>
  <paragraph>
    <text>Please enter your name</text>
  </paragraph>
  <Label>
    <text>Name</text>
  </Label>
  <text>¬†</text>
  <textbox></textbox>
  <paragraph>
    <text>‚Äã</text>
  </paragraph>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Integration with 3rd party input libraries
    <Anchor></Anchor>
    <text>Integration with 3rd party input libraries</text>
  </heading>
  <paragraph>
    <text>
      You can use third-party libraries to format an input. You have to provide
      a custom implementation of the
    </text>
    <code>$SOME_CODE</code>
    <text>element with the</text>
    <code>$SOME_CODE</code>
    <text>property.</text>
  </paragraph>
  <paragraph>
    <text>The following demo uses the</text>
    <link checked="undefined" pressed="undefined">
      react-text-mask
    </link>
    <text>and</text>
    <link checked="undefined" pressed="undefined">
      react-number-format
    </link>
    <text>libraries. The same concept could be applied to</text>
    <link checked="undefined" pressed="undefined">
      e.g. react-stripe-element
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <text>react-text-mask</text>
  </Label>
  <text>¬†</text>
  <textbox value="(1‚ÄÄ‚ÄÄ) ‚ÄÄ‚ÄÄ‚ÄÄ-‚ÄÄ‚ÄÄ‚ÄÄ‚ÄÄ">
    react-text-mask
    <text>(1‚ÄÄ‚ÄÄ) ‚ÄÄ‚ÄÄ‚ÄÄ-‚ÄÄ‚ÄÄ‚ÄÄ‚ÄÄ</text>
  </textbox>
  <Label>
    <text>react-number-format</text>
  </Label>
  <text>¬†</text>
  <textbox value="$1,320">
    react-number-format
    <text>$1,320</text>
  </textbox>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <paragraph>
    <text>The provided input component should handle the</text>
    <code>$SOME_CODE</code>
    <text>
      property. The property should be called with a value that implements the
      following interface:
    </text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Accessibility
    <Anchor></Anchor>
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>
      In order for the text field to be accessible,the input should be linked to
      the label and the helper text. The underlying DOM nodes should have this
      structure:
    </text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>If you are using the</text>
      <code>$SOME_CODE</code>
      <text>component, you just have to provide a unique</text>
      <code>$SOME_CODE</code>
      <text>.</text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>If you are composing the component:</text>
    </listitem>
  </list>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Complementary projects
    <Anchor></Anchor>
    <text>Complementary projects</text>
  </heading>
  <paragraph>
    <text>
      For more advanced use cases you might be able to take advantage of:
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        react-hook-form
      </link>
      <text>: React hook for form validation.</text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        formik-material-ui
      </link>
      <text>: Bindings for using Material-UI with</text>
      <link checked="undefined" pressed="undefined">
        formik
      </link>
      <text>.</text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        redux-form-material-ui
      </link>
      <text>: Bindings for using Material-UI with</text>
      <link checked="undefined" pressed="undefined">
        Redux Form
      </link>
      <text>.</text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        mui-rff
      </link>
      <text>: Bindings for using Material-UI with</text>
      <link checked="undefined" pressed="undefined">
        React Final Form
      </link>
      <text>.</text>
    </listitem>
  </list>
  <heading level="2">
    API
    <Anchor></Anchor>
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <FilledInput />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <FormControl />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <FormHelperText />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Input />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <InputAdornment />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <InputBase />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <InputLabel />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <OutlinedInput />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <TextField />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link checked="undefined" pressed="undefined">
      Switch
      <SVGRoot></SVGRoot>
      <text>Switch</text>
    </link>
    <link checked="undefined" pressed="undefined">
      Transfer List
      <text>Transfer List</text>
      <SVGRoot></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/tooltips/ 1`] = `
<main>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text>EDIT THIS PAGE</text>
  </link>
  <heading level="1">
    Tooltip
    <text>Tooltip</text>
  </heading>
  <paragraph>
    <text>
      Tooltips display informative text when users hover over, focus on, or tap
      an element.
    </text>
  </paragraph>
  <paragraph>
    <text>
      When activated, Tooltips display a text label identifying an element, such
      as a description of its function.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot></SVGRoot>
        <text>Feedback</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
        <SVGRoot></SVGRoot>
        <text>WAI-ARIA</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
        <SVGRoot></SVGRoot>
        <text>Bundle size</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Material Design
        <SVGRoot></SVGRoot>
        <text>Material Design</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot></SVGRoot>
        <text>Sketch</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot></SVGRoot>
        <text>Figma</text>
      </link>
    </listitem>
  </list>
  <heading level="2">
    Basic tooltip
    <Anchor></Anchor>
    <text>Basic tooltip</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    delete
    <SVGRoot></SVGRoot>
  </button>
  <button>
    add
    <SVGRoot></SVGRoot>
  </button>
  <button>
    add
    <SVGRoot></SVGRoot>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Positioned Tooltips
    <Anchor></Anchor>
    <text>Positioned Tooltips</text>
  </heading>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>
      has 12placementschoice. They don‚Äôt have directional arrows; instead, they
      rely on motion emanating from the source to convey direction.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>TOP-START</text>
  </button>
  <button>
    Add
    <text>TOP</text>
  </button>
  <button>
    Add
    <text>TOP-END</text>
  </button>
  <button>
    Add
    <text>LEFT-START</text>
  </button>
  <LineBreak></LineBreak>
  <button>
    Add
    <text>LEFT</text>
  </button>
  <LineBreak></LineBreak>
  <button>
    Add
    <text>LEFT-END</text>
  </button>
  <button>
    Add
    <text>RIGHT-START</text>
  </button>
  <button>
    Add
    <text>RIGHT</text>
  </button>
  <button>
    Add
    <text>RIGHT-END</text>
  </button>
  <button>
    Add
    <text>BOTTOM-START</text>
  </button>
  <button>
    Add
    <text>BOTTOM</text>
  </button>
  <button>
    Add
    <text>BOTTOM-END</text>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Customized tooltips
    <Anchor></Anchor>
    <text>Customized tooltips</text>
  </heading>
  <paragraph>
    <text>
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>LIGHT</text>
  </button>
  <button>
    Add
    <text>BOOTSTRAP</text>
  </button>
  <button>
    HTML
    <text>HTML</text>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Arrow Tooltips
    <Anchor></Anchor>
    <text>Arrow Tooltips</text>
  </heading>
  <paragraph>
    <text>You can use the</text>
    <code>$SOME_CODE</code>
    <text>
      prop to give your tooltip an arrow indicating which element it refers to.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>ARROW</text>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Custom child element
    <Anchor></Anchor>
    <text>Custom child element</text>
  </heading>
  <paragraph>
    <text>
      The tooltip needs to apply DOM event listeners to its child element. If
      the child is a custom React element, you need to make sure that it spreads
      its props to the underlying DOM element.
    </text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>You can find a similar concept in the</text>
    <link checked="undefined" pressed="undefined">
      wrapping components
    </link>
    <text>guide.</text>
  </paragraph>
  <heading level="2">
    Triggers
    <Anchor></Anchor>
    <text>Triggers</text>
  </heading>
  <paragraph>
    <text>
      You can define the types of events that cause a tooltip to show.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>HOVER OR TOUCH</text>
  </button>
  <button>
    Add
    <text>FOCUS OR TOUCH</text>
  </button>
  <button>
    Add
    <text>HOVER</text>
  </button>
  <button>
    Add
    <text>CLICK</text>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Controlled Tooltips
    <Anchor></Anchor>
    <text>Controlled Tooltips</text>
  </heading>
  <paragraph>
    <text>You can use the</text>
    <code>$SOME_CODE</code>
    <text>,</text>
    <code>$SOME_CODE</code>
    <text>and</text>
    <code>$SOME_CODE</code>
    <text>props to control the behavior of the tooltip.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>CONTROLLED</text>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Variable Width
    <Anchor></Anchor>
    <text>Variable Width</text>
  </heading>
  <paragraph>
    <text>The</text>
    <code>$SOME_CODE</code>
    <text>wraps long text by default to make it readable.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Aliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est,
    vel aliquam tellus. Praesent non nunc mollis, fermentum neque at, semper
    arcu. Nullam eget est sed sem iaculis gravida eget vitae justo.
    <text>DEFAULT WIDTH [300PX]</text>
  </button>
  <button>
    Aliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est,
    vel aliquam tellus. Praesent non nunc mollis, fermentum neque at, semper
    arcu. Nullam eget est sed sem iaculis gravida eget vitae justo.
    <text>CUSTOM WIDTH [500PX]</text>
  </button>
  <button>
    Aliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est,
    vel aliquam tellus. Praesent non nunc mollis, fermentum neque at, semper
    arcu. Nullam eget est sed sem iaculis gravida eget vitae justo.
    <text>NO WRAPPING</text>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Interactive
    <Anchor></Anchor>
    <text>Interactive</text>
  </heading>
  <paragraph>
    <text>Tooltips are interactive by default (to pass</text>
    <link checked="undefined" pressed="undefined">
      WCAG 2.1 success criterion 1.4.13
    </link>
    <text>
      ). It won't close when the user hovers over the tooltip before the
    </text>
    <code>$SOME_CODE</code>
    <text>
      is expired. You can disable this behavior (thus failing the success
      criterion which is required to reach level AA) by passing
    </text>
    <code>$SOME_CODE</code>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>NOT INTERACTIVE</text>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Disabled Elements
    <Anchor></Anchor>
    <text>Disabled Elements</text>
  </heading>
  <paragraph>
    <text>By default disabled elements like</text>
    <code>$SOME_CODE</code>
    <text>do not trigger user interactions so a</text>
    <code>$SOME_CODE</code>
    <text>
      will not activate on normal events like hover. To accommodate disabled
      elements, add a simple wrapper element, such as a
    </text>
    <code>$SOME_CODE</code>
    <text>.</text>
  </paragraph>
  <blockquote>
    <paragraph>
      <text>
        ‚ö†Ô∏è In order to work with Safari, you need at least one display block or
        flex item below the tooltip wrapper.
      </text>
    </paragraph>
  </blockquote>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button disabled="true">
    A DISABLED BUTTON
    <text>A DISABLED BUTTON</text>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <blockquote>
    <paragraph>
      <text>
        If you're not wrapping a Material-UI component that inherits from
      </text>
      <code>$SOME_CODE</code>
      <text>, for instance, a native</text>
      <code>$SOME_CODE</code>
      <text>
        element, you should also add the CSS propertypointer-events: none;to
        your element when disabled:
      </text>
    </paragraph>
  </blockquote>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Transitions
    <Anchor></Anchor>
    <text>Transitions</text>
  </heading>
  <paragraph>
    <text>Use a different transition.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>GROW</text>
  </button>
  <button>
    Add
    <text>FADE</text>
  </button>
  <button>
    Add
    <text>ZOOM</text>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Follow cursor
    <Anchor></Anchor>
    <text>Follow cursor</text>
  </heading>
  <paragraph>
    <text>You can enable the tooltip to follow the cursor by setting</text>
    <code>$SOME_CODE</code>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Disabled Action</text>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Faked reference object
    <Anchor></Anchor>
    <text>Faked reference object</text>
  </heading>
  <paragraph>
    <text>
      In the event you need to implement a custom placement, you can use the
    </text>
    <code>$SOME_CODE</code>
    <text>prop: The value of the</text>
    <code>$SOME_CODE</code>
    <text>
      prop can be a reference to a fake DOM element. You need to create an
      object shaped like the
    </text>
    <link checked="undefined" pressed="undefined">
      ReferenceObject
      <code>$SOME_CODE</code>
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Hover</text>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Showing and hiding
    <Anchor></Anchor>
    <text>Showing and hiding</text>
  </heading>
  <paragraph>
    <text>
      The tooltip is normally shown immediately when the user's mouse
      hovers over the element, and hides immediately when the user's mouse
      leaves. A delay in showing or hiding the tooltip can be added through the
    </text>
    <code>$SOME_CODE</code>
    <text>and</text>
    <code>$SOME_CODE</code>
    <text>props, as shown in the Controlled Tooltips demo above.</text>
  </paragraph>
  <paragraph>
    <text>
      On mobile, the tooltip is displayed when the user longpresses the element
      and hides after a delay of 1500ms. You can disable this feature with the
    </text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>[500MS, 200MS]</text>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    Accessibility
    <Anchor></Anchor>
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(WAI-ARIA:</text>
    <link checked="undefined" pressed="undefined">
      https://www.w3.org/TR/wai-aria-practices/#tooltip
    </link>
    <text>)</text>
  </paragraph>
  <paragraph>
    <text>
      By default, the tooltip only labels its child element. This is notably
      different from
    </text>
    <code>$SOME_CODE</code>
    <text>
      which can either labelordescribe its child depending on whether the child
      already has a label. For example, in:
    </text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <paragraph>
    <text>the</text>
    <code>$SOME_CODE</code>
    <text>
      acts as an accessible description. If you want the tooltip to act as an
      accessible description you can pass
    </text>
    <code>$SOME_CODE</code>
    <text>. Note that you shouldn't use</text>
    <code>$SOME_CODE</code>
    <text>
      if the tooltip provides the only visual label. Otherwise, the child would
      have no accessible name and the tooltip would violate
    </text>
    <link checked="undefined" pressed="undefined">
      success criterion 2.5.3 in WCAG 2.1
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Delete
    <SVGRoot></SVGRoot>
  </button>
  <button description="Does not add if it already exists.">
    ADD
    <text>ADD</text>
  </button>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the full source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <heading level="2">
    API
    <Anchor></Anchor>
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Tooltip />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link checked="undefined" pressed="undefined">
      Table
      <SVGRoot></SVGRoot>
      <text>Table</text>
    </link>
    <link checked="undefined" pressed="undefined">
      Typography
      <text>Typography</text>
      <SVGRoot></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/transfer-list 1`] = `
<main>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text>EDIT THIS PAGE</text>
  </link>
  <heading level="1">
    Transfer List
    <text>Transfer List</text>
  </heading>
  <paragraph>
    <text>
      A transfer list (or "shuttle") enables the user to move one or
      more list items between lists.
    </text>
  </paragraph>
  <heading level="2">
    Simple Transfer List
    <Anchor></Anchor>
    <text>Simple Transfer List</text>
  </heading>
  <paragraph>
    <text>
      For completeness, this example includes buttons for "move all",
      but not every transfer list needs these.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <list>
    <listitem level="1">
      List item 1<checkbox checked="false">List item 1</checkbox>
      <SVGRoot></SVGRoot>
      <text>List item 1</text>
    </listitem>
    <listitem level="1">
      List item 2<checkbox checked="false">List item 2</checkbox>
      <SVGRoot></SVGRoot>
      <text>List item 2</text>
    </listitem>
    <listitem level="1">
      List item 3<checkbox checked="false">List item 3</checkbox>
      <SVGRoot></SVGRoot>
      <text>List item 3</text>
    </listitem>
    <listitem level="1">
      List item 4<checkbox checked="false">List item 4</checkbox>
      <SVGRoot></SVGRoot>
      <text>List item 4</text>
    </listitem>
    <listitem level="1"></listitem>
  </list>
  <button>
    move all right
    <text>‚â´</text>
  </button>
  <button disabled="true">
    move selected right
    <text>></text>
  </button>
  <button disabled="true">
    move selected left
    <text><</text>
  </button>
  <button>
    move all left
    <text>‚â™</text>
  </button>
  <list>
    <listitem level="1">
      List item 5<checkbox checked="false">List item 5</checkbox>
      <SVGRoot></SVGRoot>
      <text>List item 5</text>
    </listitem>
    <listitem level="1">
      List item 6<checkbox checked="false">List item 6</checkbox>
      <SVGRoot></SVGRoot>
      <text>List item 6</text>
    </listitem>
    <listitem level="1">
      List item 7<checkbox checked="false">List item 7</checkbox>
      <SVGRoot></SVGRoot>
      <text>List item 7</text>
    </listitem>
    <listitem level="1">
      List item 8<checkbox checked="false">List item 8</checkbox>
      <SVGRoot></SVGRoot>
      <text>List item 8</text>
    </listitem>
    <listitem level="1"></listitem>
  </list>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Enhanced Transfer List
    <Anchor></Anchor>
    <text>Enhanced Transfer List</text>
  </heading>
  <paragraph>
    <text>
      This example exchanges the "move all" buttons for a "select
      all / select none" checkbox, and adds a counter.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="false">all items selected</checkbox>
  <SVGRoot></SVGRoot>
  <text>Choices0/4 selected</text>
  <separator orientation="horizontal"></separator>
  <list>
    <listitem level="1">
      List item 1<checkbox checked="false">List item 1</checkbox>
      <SVGRoot></SVGRoot>
      <text>List item 1</text>
    </listitem>
    <listitem level="1">
      List item 2<checkbox checked="false">List item 2</checkbox>
      <SVGRoot></SVGRoot>
      <text>List item 2</text>
    </listitem>
    <listitem level="1">
      List item 3<checkbox checked="false">List item 3</checkbox>
      <SVGRoot></SVGRoot>
      <text>List item 3</text>
    </listitem>
    <listitem level="1">
      List item 4<checkbox checked="false">List item 4</checkbox>
      <SVGRoot></SVGRoot>
      <text>List item 4</text>
    </listitem>
    <listitem level="1"></listitem>
  </list>
  <button disabled="true">
    move selected right
    <text>></text>
  </button>
  <button disabled="true">
    move selected left
    <text><</text>
  </button>
  <checkbox checked="false">all items selected</checkbox>
  <SVGRoot></SVGRoot>
  <text>Chosen0/4 selected</text>
  <separator orientation="horizontal"></separator>
  <list>
    <listitem level="1">
      List item 5<checkbox checked="false">List item 5</checkbox>
      <SVGRoot></SVGRoot>
      <text>List item 5</text>
    </listitem>
    <listitem level="1">
      List item 6<checkbox checked="false">List item 6</checkbox>
      <SVGRoot></SVGRoot>
      <text>List item 6</text>
    </listitem>
    <listitem level="1">
      List item 7<checkbox checked="false">List item 7</checkbox>
      <SVGRoot></SVGRoot>
      <text>List item 7</text>
    </listitem>
    <listitem level="1">
      List item 8<checkbox checked="false">List item 8</checkbox>
      <SVGRoot></SVGRoot>
      <text>List item 8</text>
    </listitem>
    <listitem level="1"></listitem>
  </list>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    API
    <Anchor></Anchor>
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Checkbox />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <List />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <ListItem />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Switch />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link checked="undefined" pressed="undefined">
      Text Field
      <SVGRoot></SVGRoot>
      <text>Text Field</text>
    </link>
    <link checked="undefined" pressed="undefined">
      Toggle Button
      <text>Toggle Button</text>
      <SVGRoot></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/tree-view/ 1`] = `
<main>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text>EDIT THIS PAGE</text>
  </link>
  <heading level="1">
    Tree View
    <text>Tree View</text>
  </heading>
  <paragraph>
    <text>A tree view widget presents a hierarchical list.</text>
  </paragraph>
  <paragraph>
    <text>
      Tree views can be used to represent a file system navigator displaying
      folders and files, an item representing a folder can be expanded to reveal
      the contents of the folder, which may be files, folders, or both.
    </text>
  </paragraph>
  <list>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot></SVGRoot>
        <text>Feedback</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
        <SVGRoot></SVGRoot>
        <text>WAI-ARIA</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
        <SVGRoot></SVGRoot>
        <text>Bundle size</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot></SVGRoot>
        <text>Sketch</text>
      </link>
    </listitem>
    <listitem level="1">
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot></SVGRoot>
        <text>Figma</text>
      </link>
    </listitem>
  </list>
  <heading level="2">
    Basic tree view
    <Anchor></Anchor>
    <text>Basic tree view</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    file system navigator
    <treeitem level="1">
      Applications
      <SVGRoot></SVGRoot>
      <text>Applications</text>
    </treeitem>
    <treeitem level="1">
      Documents
      <SVGRoot></SVGRoot>
      <text>Documents</text>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Multi-selection
    <Anchor></Anchor>
    <text>Multi-selection</text>
  </heading>
  <paragraph>
    <text>Tree views also support multi-selection.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree multiselectable="true">
    multi-select
    <treeitem level="1">
      Applications
      <SVGRoot></SVGRoot>
      <text>Applications</text>
    </treeitem>
    <treeitem level="1">
      Documents
      <SVGRoot></SVGRoot>
      <text>Documents</text>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Controlled tree view
    <Anchor></Anchor>
    <text>Controlled tree view</text>
  </heading>
  <paragraph>
    <text>The tree view also offers a controlled API.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    EXPAND ALL
    <text>EXPAND ALL</text>
  </button>
  <button>
    SELECT ALL
    <text>SELECT ALL</text>
  </button>
  <tree multiselectable="true">
    controlled
    <treeitem level="1">
      Applications
      <SVGRoot></SVGRoot>
      <text>Applications</text>
    </treeitem>
    <treeitem level="1">
      Documents
      <SVGRoot></SVGRoot>
      <text>Documents</text>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Rich object
    <Anchor></Anchor>
    <text>Rich object</text>
  </heading>
  <paragraph>
    <text>While the</text>
    <code>$SOME_CODE</code>
    <text>/</text>
    <code>$SOME_CODE</code>
    <text>
      component API maximizes flexibility, an extra step is needed to handle a
      rich object.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Let's consider a data variable with the following shape, recursion
      can be used to handle it.
    </text>
  </paragraph>
  <Pre>
    <code>$SOME_CODE</code>
  </Pre>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    rich object
    <treeitem expanded="true" level="1">
      Parent
      <SVGRoot></SVGRoot>
      <text>Parent</text>
      <group>
        <treeitem level="2">
          Child - 1<text>Child - 1</text>
        </treeitem>
        <treeitem level="2">
          Child - 3<SVGRoot></SVGRoot>
          <text>Child - 3</text>
        </treeitem>
      </group>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    ContentComponent prop
    <Anchor></Anchor>
    <text>ContentComponent prop</text>
  </heading>
  <paragraph>
    <text>You can use the</text>
    <code>$SOME_CODE</code>
    <text>prop and the</text>
    <code>$SOME_CODE</code>
    <text>hook to further customize the behavior of the TreeItem.</text>
  </paragraph>
  <paragraph>
    <text>Such as limiting expansion to clicking the icon:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    icon expansion
    <treeitem level="1">
      Applications
      <SVGRoot></SVGRoot>
      <text>Applications</text>
    </treeitem>
    <treeitem level="1">
      Documents
      <SVGRoot></SVGRoot>
      <text>Documents</text>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <paragraph>
    <text>Or increasing the width of the state indicator:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    icon expansion
    <treeitem level="1">
      Applications
      <SVGRoot></SVGRoot>
      <text>Applications</text>
    </treeitem>
    <treeitem level="1">
      Documents
      <SVGRoot></SVGRoot>
      <text>Documents</text>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Customized tree view
    <Anchor></Anchor>
    <text>Customized tree view</text>
  </heading>
  <heading level="3">
    Custom icons, border and animation
    <Anchor></Anchor>
    <text>Custom icons, border and animation</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    customized
    <treeitem expanded="true" level="1">
      Main
      <SVGRoot></SVGRoot>
      <text>Main</text>
      <group>
        <treeitem level="2">
          Hello
          <SVGRoot></SVGRoot>
          <text>Hello</text>
        </treeitem>
        <treeitem level="2">
          Subtree with children
          <SVGRoot></SVGRoot>
          <text>Subtree with children</text>
        </treeitem>
        <treeitem level="2">
          World
          <SVGRoot></SVGRoot>
          <text>World</text>
        </treeitem>
        <treeitem level="2">
          Something something
          <SVGRoot></SVGRoot>
          <text>Something something</text>
        </treeitem>
      </group>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3">
    Gmail clone
    <Anchor></Anchor>
    <text>Gmail clone</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    gmail
    <treeitem level="1">
      All Mail
      <SVGRoot></SVGRoot>
      <paragraph>
        <text>All Mail</text>
      </paragraph>
    </treeitem>
    <treeitem level="1">
      Trash
      <SVGRoot></SVGRoot>
      <paragraph>
        <text>Trash</text>
      </paragraph>
    </treeitem>
    <treeitem expanded="true" level="1">
      Categories
      <SVGRoot></SVGRoot>
      <SVGRoot></SVGRoot>
      <paragraph>
        <text>Categories</text>
      </paragraph>
      <group>
        <treeitem level="2">
          Social 90
          <SVGRoot></SVGRoot>
          <paragraph>
            <text>Social</text>
          </paragraph>
          <text>90</text>
        </treeitem>
        <treeitem level="2">
          Updates 2,294
          <SVGRoot></SVGRoot>
          <paragraph>
            <text>Updates</text>
          </paragraph>
          <text>2,294</text>
        </treeitem>
        <treeitem level="2">
          Forums 3,566
          <SVGRoot></SVGRoot>
          <paragraph>
            <text>Forums</text>
          </paragraph>
          <text>3,566</text>
        </treeitem>
        <treeitem level="2">
          Promotions 733
          <SVGRoot></SVGRoot>
          <paragraph>
            <text>Promotions</text>
          </paragraph>
          <text>733</text>
        </treeitem>
      </group>
    </treeitem>
    <treeitem level="1">
      History
      <SVGRoot></SVGRoot>
      <paragraph>
        <text>History</text>
      </paragraph>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2">
    Disabled tree items
    <Anchor></Anchor>
    <text>Disabled tree items</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label>
    <checkbox checked="false">Focus disabled items</checkbox>
  </Label>
  <tree multiselectable="true">
    disabled items
    <treeitem level="1">
      One
      <SVGRoot></SVGRoot>
      <text>One</text>
    </treeitem>
    <treeitem disabled="true" level="1">
      Five
      <SVGRoot></SVGRoot>
      <text>Five</text>
    </treeitem>
    <treeitem level="1">
      Seven
      <SVGRoot></SVGRoot>
      <text>Seven</text>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <group>
      <button pressed="true">Show JavaScript source</button>
      <button pressed="false">Show TypeScript source</button>
    </group>
    <button>
      Show the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Edit in CodeSandbox
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Copy the source
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset focus to test keyboard navigation
      <SVGRoot></SVGRoot>
    </button>
    <button>
      Reset demo
      <SVGRoot></SVGRoot>
    </button>
    <combobox haspopup="menu">
      <SVGRoot></SVGRoot>
    </combobox>
  </toolbar>
  <paragraph>
    <text>The behavior of disabled tree items depends on the</text>
    <code>$SOME_CODE</code>
    <text>prop.</text>
  </paragraph>
  <paragraph>
    <text>If it is false:</text>
  </paragraph>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>
        Arrow keys will not focus disabled items and, the next non-disabled item
        will be focused.
      </text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>
        Typing the first character of a disabled item's label will not
        focus the item.
      </text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>
        Mouse or keyboard interaction will not expand/collapse disabled items.
      </text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>Mouse or keyboard interaction will not select disabled items.</text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>
        Shift + arrow keys will skip disabled items and, the next non-disabled
        item will be selected.
      </text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>Programmatic focus will not focus disabled items.</text>
    </listitem>
  </list>
  <paragraph>
    <text>If it is true:</text>
  </paragraph>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>Arrow keys will focus disabled items.</text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>
        Typing the first character of a disabled item's label will focus
        the item.
      </text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>
        Mouse or keyboard interaction will not expand/collapse disabled items.
      </text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>Mouse or keyboard interaction will not select disabled items.</text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>
        Shift + arrow keys will not skip disabled items but, the disabled item
        will not be selected.
      </text>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <text>Programmatic focus will focus disabled items.</text>
    </listitem>
  </list>
  <heading level="2">
    Accessibility
    <Anchor></Anchor>
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(WAI-ARIA:</text>
    <link checked="undefined" pressed="undefined">
      https://www.w3.org/TR/wai-aria-practices/#TreeView
    </link>
    <text>)</text>
  </paragraph>
  <paragraph>
    <text>The component follows the WAI-ARIA authoring practices.</text>
  </paragraph>
  <paragraph>
    <text>To have an accessible tree view you must use</text>
    <code>$SOME_CODE</code>
    <text>or</text>
    <code>$SOME_CODE</code>
    <text>
      to reference or provide a label on the TreeView, otherwise screen readers
      will announce it as "tree", making it hard to understand the
      context of a specific tree item.
    </text>
  </paragraph>
  <heading level="2">
    API
    <Anchor></Anchor>
    <text>API</text>
  </heading>
  <list>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <TreeItem />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
    <listitem level="1">
      <ListMarker>
        ‚Ä¢<text>‚Ä¢</text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <TreeView />
        <code>$SOME_CODE</code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark>
    <separator orientation="horizontal"></separator>
    <link checked="undefined" pressed="undefined">
      Trap Focus
      <SVGRoot></SVGRoot>
      <text>Trap Focus</text>
    </link>
    <link checked="undefined" pressed="undefined">
      Accordion
      <text>Accordion</text>
      <SVGRoot></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`firefox / 1`] = `
<document>
  Material-UI: A popular React UI framework
  <link checked="undefined" pressed="undefined">
    Skip to content
  </link>
  <landmark>
    <button>Open main navigation</button>
    <combobox autocomplete="list" haspopup="true">
      Search
    </combobox>
    <buttonmenu haspopup="true">
      Change language
      <text>ENGLISH</text>
    </buttonmenu>
    <buttonmenu haspopup="true">Toggle notifications panel</buttonmenu>
    <link checked="undefined" pressed="undefined">
      Edit website colors
    </link>
    <link checked="undefined" pressed="undefined">
      GitHub repository
    </link>
    <button>Toggle light/dark theme</button>
    <button>Toggle right-to-left/left-to-right</button>
  </landmark>
  <landmark>Main navigation</landmark>
  <landmark>
    <img></img>
    <heading level="1">
      MATERIAL-UI
      <text>MATERIAL-UI</text>
    </heading>
    <paragraph>
      <text>
        React components for faster and simpler web development. Build your own
        design system, or start with Material Design.
      </text>
    </paragraph>
    <link checked="undefined" pressed="undefined">
      GET STARTED
    </link>
    <link checked="undefined" pressed="undefined">
      Star
    </link>
    <link checked="undefined" pressed="undefined">
      Follow
    </link>
    <link checked="undefined" pressed="undefined">
      Get Professional Support
    </link>
    <text>random sponsor</text>
    <link checked="undefined" pressed="undefined">
      a random quick word
    </link>
    <heading level="2">
      Installation
      <text>Installation</text>
    </heading>
    <text>
      Install Material-UI's source files via npm. We take care of injecting
      the CSS needed.$ npm install @material-ui/core@next @emotion/core
      @emotion/styled
    </text>
    <link checked="undefined" pressed="undefined">
      or use a CDN.
    </link>
    <text>
      Load the default Roboto font.<link rel="stylesheet"
      href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
      />
    </text>
    <separator></separator>
    <link checked="undefined" pressed="undefined">
      READ INSTALLATION DOCS
    </link>
    <heading level="2">
      Usage
      <text>Usage</text>
    </heading>
    <text>
      Material-UI components work without any additional setup, and don't
      pollute the global scope.import * as React from 'react'; import
      { Button } from '@material-ui/core'; function App()
      { return <Button>Hello World</Button>; }
    </text>
    <separator></separator>
    <link checked="undefined" pressed="undefined">
      EXPLORE THE DOCS
    </link>
    <heading level="2">
      Premium themes
      <text>Premium themes</text>
    </heading>
    <paragraph>
      <text>
        Take your project to the next level with premium themes from our store ‚Äì
        all built on Material-UI.
      </text>
    </paragraph>
    <link checked="undefined" pressed="undefined">
      Browse themes
      <img value="https://material-ui.com/store/?utm_source=docs&utm_medium=referral&utm_campaign=home-store">
        Browse themes
      </img>
    </link>
    <link checked="undefined" pressed="undefined">
      BROWSE THEMES
    </link>
    <separator></separator>
    <heading level="2">
      Material-UI's sponsors
      <link checked="undefined" pressed="undefined"></link>
      <text>Material-UI's sponsors</text>
    </heading>
    <paragraph>
      <text>
        The continued development and maintenance of Material-UI is made
        possible by these generous sponsors:
      </text>
    </paragraph>
    <heading level="3">
      Diamond üíé
      <link checked="undefined" pressed="undefined"></link>
      <text>Diamond üíé</text>
    </heading>
    <link checked="undefined" pressed="undefined">
      octopus
      <img
        description="Repeatable, reliable deployments"
        value="https://octopus.com/?utm_source=materialui&utm_medium=referral"
      >
        octopus
      </img>
    </link>
    <link checked="undefined" pressed="undefined">
      doit-intl
      <img
        description="Management Platform for Google Cloud and AWS"
        value="https://www.doit-intl.com/?utm_source=materialui&utm_medium=referral"
      >
        doit-intl
      </img>
    </link>
    <paragraph>
      <text>1/3 slots available</text>
    </paragraph>
    <heading level="3">
      Gold üèÜ
      <link checked="undefined" pressed="undefined"></link>
      <text>Gold üèÜ</text>
    </heading>
    <link checked="undefined" pressed="undefined">
      tidelift
      <img
        description="Enterprise-ready open source software"
        value="https://tidelift.com/subscription/pkg/npm-material-ui?utm_source=npm-material-ui&utm_medium=referral&utm_campaign=homepage"
      >
        tidelift
      </img>
    </link>
    <link checked="undefined" pressed="undefined">
      bitsrc
      <img description="The fastest way to share code" value="https://bit.dev/">
        bitsrc
      </img>
    </link>
    <link checked="undefined" pressed="undefined">
      call-em-all
      <img
        description="Mass Text Messaging & Automated Calling"
        value="https://www.text-em-all.com/"
      >
        call-em-all
      </img>
    </link>
    <link checked="undefined" pressed="undefined">
      bitsrc
      <img value="https://www.canadacasino.ca/">bitsrc</img>
    </link>
    <heading level="3">
      There are more!
      <link checked="undefined" pressed="undefined"></link>
      <text>There are more!</text>
    </heading>
    <paragraph>
      <text>See the full list of</text>
      <link checked="undefined" pressed="undefined">
        our sponsors
      </link>
      <text>
        , and learn how you can contribute to the future of Material-UI.
      </text>
    </paragraph>
    <separator></separator>
    <heading level="2">
      Praise for Material-UI
      <text>Praise for Material-UI</text>
    </heading>
    <paragraph>
      <text>Here's what some of our users are saying.</text>
    </paragraph>
    <link checked="undefined" pressed="undefined">
      a random quote about Material-UI
    </link>
    <link checked="undefined" pressed="undefined">
      a random quote about Material-UI
    </link>
    <link checked="undefined" pressed="undefined">
      a random quote about Material-UI
    </link>
    <separator></separator>
    <heading level="2">
      Who's using Material-UI?
      <text>Who's using Material-UI?</text>
    </heading>
    <paragraph>
      <text>Join these and other great organisations!</text>
    </paragraph>
    <img>NASA</img>
    <img>Walmart Labs</img>
    <img>Capgemini</img>
    <img>Uniqlo</img>
    <img>Bethesda</img>
    <img>J.P. Morgan</img>
    <img>Shutterstock</img>
    <img>Netflix</img>
    <img>Coursera</img>
    <img>Amazon</img>
    <img>Unity</img>
    <paragraph>
      <text>Are you using Material-UI?</text>
    </paragraph>
    <link checked="undefined" pressed="undefined">
      LET US KNOW!
    </link>
  </landmark>
  <separator></separator>
  <landmark>
    <img></img>
    <link checked="undefined" pressed="undefined">
      Material-UI
    </link>
    <heading level="2">
      Community
      <text>Community</text>
    </heading>
    <list>
      <listitem>
        GitHub
        <link checked="undefined" pressed="undefined">
          GitHub
        </link>
      </listitem>
      <listitem>
        Twitter
        <link checked="undefined" pressed="undefined">
          Twitter
        </link>
      </listitem>
      <listitem>
        StackOverflow
        <link checked="undefined" pressed="undefined">
          StackOverflow
        </link>
      </listitem>
      <listitem>
        Team
        <link checked="undefined" pressed="undefined">
          Team
        </link>
      </listitem>
    </list>
    <heading level="2">
      Resources
      <text>Resources</text>
    </heading>
    <list>
      <listitem>
        Support
        <link checked="undefined" pressed="undefined">
          Support
        </link>
      </listitem>
      <listitem>
        Blog
        <link checked="undefined" pressed="undefined">
          Blog
        </link>
      </listitem>
      <listitem>
        Material Icons
        <link checked="undefined" pressed="undefined">
          Material Icons
        </link>
      </listitem>
    </list>
    <heading level="2">
      Company
      <text>Company</text>
    </heading>
    <list>
      <listitem>
        About
        <link checked="undefined" pressed="undefined">
          About
        </link>
      </listitem>
      <listitem>
        Contact Us
        <link checked="undefined" pressed="undefined">
          Contact Us
        </link>
      </listitem>
      <listitem>
        Jobs
        <link checked="undefined" pressed="undefined">
          Jobs
        </link>
      </listitem>
    </list>
    <paragraph>
      <text>Currently</text>
      <link checked="undefined" pressed="undefined">
        v5.0.0-alpha.12. View versions page.
      </link>
      <text>. Released under the</text>
      <link checked="undefined" pressed="undefined">
        MIT License
      </link>
      <text>. Copyright ¬© 2020 Material-UI.</text>
    </paragraph>
  </landmark>
</document>;

`;

exports[`firefox /api/button/ 1`] = `
<landmark>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1">
    Button API
    <text>Button API</text>
  </heading>
  <paragraph>
    <text>
      The API documentation of the Button React component. Learn more about the
      props and the CSS customization points.
    </text>
  </paragraph>
  <heading level="2">
    Import
    <link checked="undefined" pressed="undefined"></link>
    <text>Import</text>
  </heading>
  <text>
    import Button from '@material-ui/core/Button'; // or import {
    Button } from '@material-ui/core';
  </text>
  <paragraph>
    <text>You can learn more about the difference by</text>
    <link checked="undefined" pressed="undefined">
      reading this guide
    </link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Component name
    <link checked="undefined" pressed="undefined"></link>
    <text>Component name</text>
  </heading>
  <paragraph>
    <text>The MuiButton name can be used for providing</text>
    <link checked="undefined" pressed="undefined">
      default props
    </link>
    <text>or</text>
    <link checked="undefined" pressed="undefined">
      style overrides
    </link>
    <text>at the theme level.</text>
  </paragraph>
  <heading level="2">
    Props
    <link checked="undefined" pressed="undefined"></link>
    <text>Props</text>
  </heading>
  <table>
    <row>
      <cell>
        <text>Name</text>
      </cell>
      <cell>
        <text>Type</text>
      </cell>
      <cell>
        <text>Default</text>
      </cell>
      <cell>
        <text>Description</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>children</text>
      </cell>
      <cell>
        <text>node</text>
      </cell>
      <cell></cell>
      <cell>
        <text>The content of the button.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>classes</text>
      </cell>
      <cell>
        <text>object</text>
      </cell>
      <cell></cell>
      <cell>
        <text>Override or extend the styles applied to the component. See</text>
        <link checked="undefined" pressed="undefined">
          CSS API
        </link>
        <text>below for more details.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>color</text>
      </cell>
      <cell>
        <text>'inherit'</text>
        <whitespace></whitespace>
        <text>|¬†'primary'</text>
        <whitespace></whitespace>
        <text>|¬†'secondary'</text>
      </cell>
      <cell>
        <text>'primary'</text>
      </cell>
      <cell>
        <text>
          The color of the component. It supports those theme colors that make
          sense for this component.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>component</text>
      </cell>
      <cell>
        <text>elementType</text>
      </cell>
      <cell>
        <text>'button'</text>
      </cell>
      <cell>
        <text>
          The component used for the root node. Either a string to use a HTML
          element or a component.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>disabled</text>
      </cell>
      <cell>
        <text>bool</text>
      </cell>
      <cell>
        <text>false</text>
      </cell>
      <cell>
        <text>If true, the button will be disabled.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>disableElevation</text>
      </cell>
      <cell>
        <text>bool</text>
      </cell>
      <cell>
        <text>false</text>
      </cell>
      <cell>
        <text>If true, no elevation is used.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>disableFocusRipple</text>
      </cell>
      <cell>
        <text>bool</text>
      </cell>
      <cell>
        <text>false</text>
      </cell>
      <cell>
        <text>If true, the keyboard focus ripple will be disabled.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>disableRipple</text>
      </cell>
      <cell>
        <text>bool</text>
      </cell>
      <cell></cell>
      <cell>
        <text>If true, the ripple effect will be disabled.</text>
        <whitespace></whitespace>
        <text>
          ‚ö†Ô∏è Without a ripple there is no styling for :focus-visible by default.
          Be sure to highlight the element by applying separate styles with the
          focusVisibleClassName.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>endIcon</text>
      </cell>
      <cell>
        <text>node</text>
      </cell>
      <cell></cell>
      <cell>
        <text>Element placed after the children.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>fullWidth</text>
      </cell>
      <cell>
        <text>bool</text>
      </cell>
      <cell>
        <text>false</text>
      </cell>
      <cell>
        <text>
          If true, the button will take up the full width of its container.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>href</text>
      </cell>
      <cell>
        <text>string</text>
      </cell>
      <cell></cell>
      <cell>
        <text>
          The URL to link to when the button is clicked. If defined, an a
          element will be used as the root node.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>size</text>
      </cell>
      <cell>
        <text>'large'</text>
        <whitespace></whitespace>
        <text>|¬†'medium'</text>
        <whitespace></whitespace>
        <text>|¬†'small'</text>
      </cell>
      <cell>
        <text>'medium'</text>
      </cell>
      <cell>
        <text>
          The size of the button. small is equivalent to the dense button
          styling.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>startIcon</text>
      </cell>
      <cell>
        <text>node</text>
      </cell>
      <cell></cell>
      <cell>
        <text>Element placed before the children.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>variant</text>
      </cell>
      <cell>
        <text>'contained'</text>
        <whitespace></whitespace>
        <text>|¬†'outlined'</text>
        <whitespace></whitespace>
        <text>|¬†'text'</text>
        <whitespace></whitespace>
        <text>|¬†string</text>
      </cell>
      <cell>
        <text>'text'</text>
      </cell>
      <cell>
        <text>The variant to use.</text>
      </cell>
    </row>
  </table>
  <paragraph>
    <text>The ref is forwarded to the root element.</text>
  </paragraph>
  <paragraph>
    <text>Any other props supplied will be provided to the root element (</text>
    <link checked="undefined" pressed="undefined">
      ButtonBase
    </link>
    <text>).</text>
  </paragraph>
  <heading level="2">
    CSS
    <link checked="undefined" pressed="undefined"></link>
    <text>CSS</text>
  </heading>
  <table>
    <row>
      <cell>
        <text>Rule name</text>
      </cell>
      <cell>
        <text>Global class</text>
      </cell>
      <cell>
        <text>Description</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>root</text>
      </cell>
      <cell>
        <text>.MuiButton-root</text>
      </cell>
      <cell>
        <text>Styles applied to the root element.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>label</text>
      </cell>
      <cell>
        <text>.MuiButton-label</text>
      </cell>
      <cell>
        <text>Styles applied to the span element that wraps the children.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>text</text>
      </cell>
      <cell>
        <text>.MuiButton-text</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if variant="text".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>textPrimary</text>
      </cell>
      <cell>
        <text>.MuiButton-textPrimary</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if variant="text" and
          color="primary".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>textSecondary</text>
      </cell>
      <cell>
        <text>.MuiButton-textSecondary</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if variant="text" and
          color="secondary".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>outlined</text>
      </cell>
      <cell>
        <text>.MuiButton-outlined</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if variant="outlined".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>outlinedPrimary</text>
      </cell>
      <cell>
        <text>.MuiButton-outlinedPrimary</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if variant="outlined" and
          color="primary".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>outlinedSecondary</text>
      </cell>
      <cell>
        <text>.MuiButton-outlinedSecondary</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if variant="outlined" and
          color="secondary".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>contained</text>
      </cell>
      <cell>
        <text>.MuiButton-contained</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if variant="contained".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>containedPrimary</text>
      </cell>
      <cell>
        <text>.MuiButton-containedPrimary</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if variant="contained"
          and color="primary".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>containedSecondary</text>
      </cell>
      <cell>
        <text>.MuiButton-containedSecondary</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if variant="contained"
          and color="secondary".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>disableElevation</text>
      </cell>
      <cell>
        <text>.MuiButton-disableElevation</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if
          disableElevation={true}.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>focusVisible</text>
      </cell>
      <cell>
        <text>.Mui-focusVisible</text>
      </cell>
      <cell>
        <text>
          Pseudo-class applied to the ButtonBase root element if the button is
          keyboard focused.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>disabled</text>
      </cell>
      <cell>
        <text>.Mui-disabled</text>
      </cell>
      <cell>
        <text>
          Pseudo-class applied to the root element if disabled={true}.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>colorInherit</text>
      </cell>
      <cell>
        <text>.MuiButton-colorInherit</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if color="inherit".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>textSizeSmall</text>
      </cell>
      <cell>
        <text>.MuiButton-textSizeSmall</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if size="small" and
          variant="text".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>textSizeLarge</text>
      </cell>
      <cell>
        <text>.MuiButton-textSizeLarge</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if size="large" and
          variant="text".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>outlinedSizeSmall</text>
      </cell>
      <cell>
        <text>.MuiButton-outlinedSizeSmall</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if size="small" and
          variant="outlined".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>outlinedSizeLarge</text>
      </cell>
      <cell>
        <text>.MuiButton-outlinedSizeLarge</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if size="large" and
          variant="outlined".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>containedSizeSmall</text>
      </cell>
      <cell>
        <text>.MuiButton-containedSizeSmall</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if size="small" and
          variant="contained".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>containedSizeLarge</text>
      </cell>
      <cell>
        <text>.MuiButton-containedSizeLarge</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if size="large" and
          variant="contained".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>sizeSmall</text>
      </cell>
      <cell>
        <text>.MuiButton-sizeSmall</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if size="small".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>sizeLarge</text>
      </cell>
      <cell>
        <text>.MuiButton-sizeLarge</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if size="large".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>fullWidth</text>
      </cell>
      <cell>
        <text>.MuiButton-fullWidth</text>
      </cell>
      <cell>
        <text>
          Styles applied to the root element if fullWidth={true}.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>startIcon</text>
      </cell>
      <cell>
        <text>.MuiButton-startIcon</text>
      </cell>
      <cell>
        <text>Styles applied to the startIcon element if supplied.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>endIcon</text>
      </cell>
      <cell>
        <text>.MuiButton-endIcon</text>
      </cell>
      <cell>
        <text>Styles applied to the endIcon element if supplied.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>iconSizeSmall</text>
      </cell>
      <cell>
        <text>.MuiButton-iconSizeSmall</text>
      </cell>
      <cell>
        <text>
          Styles applied to the icon element if supplied and
          size="small".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>iconSizeMedium</text>
      </cell>
      <cell>
        <text>.MuiButton-iconSizeMedium</text>
      </cell>
      <cell>
        <text>
          Styles applied to the icon element if supplied and
          size="medium".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>iconSizeLarge</text>
      </cell>
      <cell>
        <text>.MuiButton-iconSizeLarge</text>
      </cell>
      <cell>
        <text>
          Styles applied to the icon element if supplied and
          size="large".
        </text>
      </cell>
    </row>
  </table>
  <paragraph>
    <text>
      You can override the style of the component thanks to one of these
      customization points:
    </text>
  </paragraph>
  <list>
    <listitem>
      ‚Ä¢ With a rule name of the classes object prop .<statictext>‚Ä¢</statictext>
      <text>With a rule name of the</text>
      <link checked="undefined" pressed="undefined">
        classes object prop
      </link>
      <text>.</text>
    </listitem>
    <listitem>
      ‚Ä¢ With a global class name .<statictext>‚Ä¢</statictext>
      <text>With a</text>
      <link checked="undefined" pressed="undefined">
        global class name
      </link>
      <text>.</text>
    </listitem>
    <listitem>
      ‚Ä¢ With a theme and an overrides property .<statictext>‚Ä¢</statictext>
      <text>With a theme and an</text>
      <link checked="undefined" pressed="undefined">
        overrides property
      </link>
      <text>.</text>
    </listitem>
  </list>
  <paragraph>
    <text>If that's not sufficient, you can check the</text>
    <link checked="undefined" pressed="undefined">
      implementation of the component
    </link>
    <text>for more detail.</text>
  </paragraph>
  <heading level="2">
    Inheritance
    <link checked="undefined" pressed="undefined"></link>
    <text>Inheritance</text>
  </heading>
  <paragraph>
    <text>The props of the</text>
    <link checked="undefined" pressed="undefined">
      ButtonBase
    </link>
    <text>
      component are also available. You can take advantage of this behavior to
    </text>
    <link checked="undefined" pressed="undefined">
      target nested components
    </link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Demos
    <link checked="undefined" pressed="undefined"></link>
    <text>Demos</text>
  </heading>
  <list>
    <listitem>
      ‚Ä¢ Button Group
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        Button Group
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ Buttons
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        Buttons
      </link>
    </listitem>
  </list>
  <separator></separator>
  <link checked="undefined" pressed="undefined">
    Breadcrumbs
  </link>
  <link checked="undefined" pressed="undefined">
    ButtonBase
  </link>
</landmark>;

`;

exports[`firefox /api/select/ 1`] = `
<landmark>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1">
    Select API
    <text>Select API</text>
  </heading>
  <paragraph>
    <text>
      The API documentation of the Select React component. Learn more about the
      props and the CSS customization points.
    </text>
  </paragraph>
  <heading level="2">
    Import
    <link checked="undefined" pressed="undefined"></link>
    <text>Import</text>
  </heading>
  <text>
    import Select from '@material-ui/core/Select'; // or import {
    Select } from '@material-ui/core';
  </text>
  <paragraph>
    <text>You can learn more about the difference by</text>
    <link checked="undefined" pressed="undefined">
      reading this guide
    </link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Component name
    <link checked="undefined" pressed="undefined"></link>
    <text>Component name</text>
  </heading>
  <paragraph>
    <text>The MuiSelect name can be used for providing</text>
    <link checked="undefined" pressed="undefined">
      default props
    </link>
    <text>or</text>
    <link checked="undefined" pressed="undefined">
      style overrides
    </link>
    <text>at the theme level.</text>
  </paragraph>
  <heading level="2">
    Props
    <link checked="undefined" pressed="undefined"></link>
    <text>Props</text>
  </heading>
  <table>
    <row>
      <cell>
        <text>Name</text>
      </cell>
      <cell>
        <text>Type</text>
      </cell>
      <cell>
        <text>Default</text>
      </cell>
      <cell>
        <text>Description</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>autoWidth</text>
      </cell>
      <cell>
        <text>bool</text>
      </cell>
      <cell>
        <text>false</text>
      </cell>
      <cell>
        <text>
          If true, the width of the popover will automatically be set according
          to the items inside the menu, otherwise it will be at least the width
          of the select input.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>children</text>
      </cell>
      <cell>
        <text>node</text>
      </cell>
      <cell></cell>
      <cell>
        <text>
          The option elements to populate the select with. Can be some MenuItem
          when native is false and option when native is true.
        </text>
        <whitespace></whitespace>
        <text>
          ‚ö†Ô∏èThe MenuItem elements must be direct descendants when native is
          false.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>classes</text>
      </cell>
      <cell>
        <text>object</text>
      </cell>
      <cell></cell>
      <cell>
        <text>Override or extend the styles applied to the component. See</text>
        <link checked="undefined" pressed="undefined">
          CSS API
        </link>
        <text>below for more details.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>defaultValue</text>
      </cell>
      <cell>
        <text>any</text>
      </cell>
      <cell></cell>
      <cell>
        <text>
          The default element value. Use when the component is not controlled.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>displayEmpty</text>
      </cell>
      <cell>
        <text>bool</text>
      </cell>
      <cell>
        <text>false</text>
      </cell>
      <cell>
        <text>
          If true, a value is displayed even if no items are selected.
        </text>
        <whitespace></whitespace>
        <text>
          In order to display a meaningful value, a function can be passed to
          the renderValue prop which returns the value to be displayed when no
          items are selected.
        </text>
        <whitespace></whitespace>
        <text>
          ‚ö†Ô∏è When using this prop, make sure the label doesn't overlap with
          the empty displayed value. The label should either be hidden or forced
          to a shrunk state.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>IconComponent</text>
      </cell>
      <cell>
        <text>elementType</text>
      </cell>
      <cell>
        <text>ArrowDropDownIcon</text>
      </cell>
      <cell>
        <text>The icon that displays the arrow.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>id</text>
      </cell>
      <cell>
        <text>string</text>
      </cell>
      <cell></cell>
      <cell>
        <text>
          The id of the wrapper element or the select element when native.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>input</text>
      </cell>
      <cell>
        <text>element</text>
      </cell>
      <cell></cell>
      <cell>
        <text>
          An Input element; does not have to be a material-ui specific Input.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>inputProps</text>
      </cell>
      <cell>
        <text>object</text>
      </cell>
      <cell></cell>
      <cell>
        <link checked="undefined" pressed="undefined">
          Attributes
        </link>
        <text>
          applied to the input element. When native is true, the attributes are
          applied on the select element.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>label</text>
      </cell>
      <cell>
        <text>node</text>
      </cell>
      <cell></cell>
      <cell>
        <text>See</text>
        <link checked="undefined" pressed="undefined">
          OutlinedInput#label
        </link>
      </cell>
    </row>
    <row>
      <cell>
        <text>labelId</text>
      </cell>
      <cell>
        <text>string</text>
      </cell>
      <cell></cell>
      <cell>
        <text>
          The ID of an element that acts as an additional label. The Select will
          be labelled by the additional label and the selected value.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>labelWidth</text>
      </cell>
      <cell>
        <text>number</text>
      </cell>
      <cell>
        <text>0</text>
      </cell>
      <cell>
        <text>See</text>
        <link checked="undefined" pressed="undefined">
          OutlinedInput#label
        </link>
      </cell>
    </row>
    <row>
      <cell>
        <text>MenuProps</text>
      </cell>
      <cell>
        <text>object</text>
      </cell>
      <cell></cell>
      <cell>
        <text>Props applied to the</text>
        <link checked="undefined" pressed="undefined">
          Menu
        </link>
        <text>element.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>multiple</text>
      </cell>
      <cell>
        <text>bool</text>
      </cell>
      <cell>
        <text>false</text>
      </cell>
      <cell>
        <text>
          If true, value must be an array and the menu will support multiple
          selections.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>native</text>
      </cell>
      <cell>
        <text>bool</text>
      </cell>
      <cell>
        <text>false</text>
      </cell>
      <cell>
        <text>
          If true, the component will be using a native select element.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>onChange</text>
      </cell>
      <cell>
        <text>func</text>
      </cell>
      <cell></cell>
      <cell>
        <text>Callback fired when a menu item is selected.</text>
        <whitespace></whitespace>
        <whitespace></whitespace>
        <text>Signature:</text>
        <whitespace></whitespace>
        <text>function(event: object, child?: object) => void</text>
        <whitespace></whitespace>
        <text>
          event: The event source of the callback. You can pull out the new
          value by accessing event.target.value (any).
        </text>
        <whitespace></whitespace>
        <text>
          child: The react element that was selected when native is false
          (default).
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>onClose</text>
      </cell>
      <cell>
        <text>func</text>
      </cell>
      <cell></cell>
      <cell>
        <text>
          Callback fired when the component requests to be closed. Use in
          controlled mode (see open).
        </text>
        <whitespace></whitespace>
        <whitespace></whitespace>
        <text>Signature:</text>
        <whitespace></whitespace>
        <text>function(event: object) => void</text>
        <whitespace></whitespace>
        <text>event: The event source of the callback.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>onOpen</text>
      </cell>
      <cell>
        <text>func</text>
      </cell>
      <cell></cell>
      <cell>
        <text>
          Callback fired when the component requests to be opened. Use in
          controlled mode (see open).
        </text>
        <whitespace></whitespace>
        <whitespace></whitespace>
        <text>Signature:</text>
        <whitespace></whitespace>
        <text>function(event: object) => void</text>
        <whitespace></whitespace>
        <text>event: The event source of the callback.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>open</text>
      </cell>
      <cell>
        <text>bool</text>
      </cell>
      <cell></cell>
      <cell>
        <text>
          Control select open state. You can only use it when the native prop is
          false (default).
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>renderValue</text>
      </cell>
      <cell>
        <text>func</text>
      </cell>
      <cell></cell>
      <cell>
        <text>
          Render the selected value. You can only use it when the native prop is
          false (default).
        </text>
        <whitespace></whitespace>
        <whitespace></whitespace>
        <text>Signature:</text>
        <whitespace></whitespace>
        <text>function(value: any) => ReactNode</text>
        <whitespace></whitespace>
        <text>value: The value provided to the component.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>SelectDisplayProps</text>
      </cell>
      <cell>
        <text>object</text>
      </cell>
      <cell></cell>
      <cell>
        <text>Props applied to the clickable div element.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>value</text>
      </cell>
      <cell>
        <text>any</text>
      </cell>
      <cell></cell>
      <cell>
        <text>
          The input value. Providing an empty string will select no options.
          This prop is required when the native prop is false (default). Set to
          an empty string '' if you don't want any of the
          available options to be selected.
        </text>
        <whitespace></whitespace>
        <text>
          If the value is an object it must have reference equality with the
          option in order to be selected. If the value is not an object, the
          string representation must match with the string representation of the
          option in order to be selected.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>variant</text>
      </cell>
      <cell>
        <text>'filled'</text>
        <whitespace></whitespace>
        <text>|¬†'outlined'</text>
        <whitespace></whitespace>
        <text>|¬†'standard'</text>
      </cell>
      <cell>
        <text>'standard'</text>
      </cell>
      <cell>
        <text>The variant to use.</text>
      </cell>
    </row>
  </table>
  <paragraph>
    <text>The ref is forwarded to the root element.</text>
  </paragraph>
  <paragraph>
    <text>Any other props supplied will be provided to the root element (</text>
    <link checked="undefined" pressed="undefined">
      Input
    </link>
    <text>).</text>
  </paragraph>
  <heading level="2">
    CSS
    <link checked="undefined" pressed="undefined"></link>
    <text>CSS</text>
  </heading>
  <table>
    <row>
      <cell>
        <text>Rule name</text>
      </cell>
      <cell>
        <text>Global class</text>
      </cell>
      <cell>
        <text>Description</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>root</text>
      </cell>
      <cell>
        <text>.MuiSelect-root</text>
      </cell>
      <cell>
        <text>Styles applied to the select component root class.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>select</text>
      </cell>
      <cell>
        <text>.MuiSelect-select</text>
      </cell>
      <cell>
        <text>Styles applied to the select component select class.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>filled</text>
      </cell>
      <cell>
        <text>.MuiSelect-filled</text>
      </cell>
      <cell>
        <text>
          Styles applied to the select component if variant="filled".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>outlined</text>
      </cell>
      <cell>
        <text>.MuiSelect-outlined</text>
      </cell>
      <cell>
        <text>
          Styles applied to the select component if
          variant="outlined".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>selectMenu</text>
      </cell>
      <cell>
        <text>.MuiSelect-selectMenu</text>
      </cell>
      <cell>
        <text>Styles applied to the select component selectMenu class.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>disabled</text>
      </cell>
      <cell>
        <text>.Mui-disabled</text>
      </cell>
      <cell>
        <text>
          Pseudo-class applied to the select component disabled class.
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>icon</text>
      </cell>
      <cell>
        <text>.MuiSelect-icon</text>
      </cell>
      <cell>
        <text>Styles applied to the icon component.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>iconOpen</text>
      </cell>
      <cell>
        <text>.MuiSelect-iconOpen</text>
      </cell>
      <cell>
        <text>Styles applied to the icon component if the popup is open.</text>
      </cell>
    </row>
    <row>
      <cell>
        <text>iconFilled</text>
      </cell>
      <cell>
        <text>.MuiSelect-iconFilled</text>
      </cell>
      <cell>
        <text>
          Styles applied to the icon component if variant="filled".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>iconOutlined</text>
      </cell>
      <cell>
        <text>.MuiSelect-iconOutlined</text>
      </cell>
      <cell>
        <text>
          Styles applied to the icon component if variant="outlined".
        </text>
      </cell>
    </row>
    <row>
      <cell>
        <text>nativeInput</text>
      </cell>
      <cell>
        <text>.MuiSelect-nativeInput</text>
      </cell>
      <cell>
        <text>Styles applied to the underlying native input component.</text>
      </cell>
    </row>
  </table>
  <paragraph>
    <text>
      You can override the style of the component thanks to one of these
      customization points:
    </text>
  </paragraph>
  <list>
    <listitem>
      ‚Ä¢ With a rule name of the classes object prop .<statictext>‚Ä¢</statictext>
      <text>With a rule name of the</text>
      <link checked="undefined" pressed="undefined">
        classes object prop
      </link>
      <text>.</text>
    </listitem>
    <listitem>
      ‚Ä¢ With a global class name .<statictext>‚Ä¢</statictext>
      <text>With a</text>
      <link checked="undefined" pressed="undefined">
        global class name
      </link>
      <text>.</text>
    </listitem>
    <listitem>
      ‚Ä¢ With a theme and an overrides property .<statictext>‚Ä¢</statictext>
      <text>With a theme and an</text>
      <link checked="undefined" pressed="undefined">
        overrides property
      </link>
      <text>.</text>
    </listitem>
  </list>
  <paragraph>
    <text>If that's not sufficient, you can check the</text>
    <link checked="undefined" pressed="undefined">
      implementation of the component
    </link>
    <text>for more detail.</text>
  </paragraph>
  <heading level="2">
    Inheritance
    <link checked="undefined" pressed="undefined"></link>
    <text>Inheritance</text>
  </heading>
  <paragraph>
    <text>The props of the</text>
    <link checked="undefined" pressed="undefined">
      Input
    </link>
    <text>
      component are also available. You can take advantage of this behavior to
    </text>
    <link checked="undefined" pressed="undefined">
      target nested components
    </link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Demos
    <link checked="undefined" pressed="undefined"></link>
    <text>Demos</text>
  </heading>
  <list>
    <listitem>
      ‚Ä¢ Selects
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        Selects
      </link>
    </listitem>
  </list>
  <separator></separator>
  <link checked="undefined" pressed="undefined">
    ScopedCssBaseline
  </link>
  <link checked="undefined" pressed="undefined">
    Skeleton
  </link>
</landmark>;

`;

exports[`firefox /components/breadcrumbs 1`] = `
<landmark>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1">
    Breadcrumbs
    <text>Breadcrumbs</text>
  </heading>
  <paragraph>
    <text>
      Breadcrumbs allow users to make selections from a range of values.
    </text>
  </paragraph>
  <list>
    <listitem>
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem>
      WAI-ARIA
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
      </link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem>
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2">
    Basic breadcrumbs
    <link checked="undefined" pressed="undefined"></link>
    <text>Basic breadcrumbs</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    breadcrumb
    <list>
      <listitem>
        Material-UI
        <link checked="undefined" pressed="undefined">
          Material-UI
        </link>
      </listitem>
      <listitem>
        Core
        <link checked="undefined" pressed="undefined">
          Core
        </link>
      </listitem>
      <listitem>
        Breadcrumb
        <paragraph>
          <text>Breadcrumb</text>
        </paragraph>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Breadcrumbs aria-label="breadcrumb"> <Link
    color="inherit" href="/"
    onClick={handleClick}> Material-UI </Link> <Link
    color="inherit" href="/getting-started/installation/"
    onClick={handleClick} > Core </Link> <Typography
    color="textPrimary">Breadcrumb</Typography>
    </Breadcrumbs>
  </text>
  <heading level="2">
    Active last breadcrumb
    <link checked="undefined" pressed="undefined"></link>
    <text>Active last breadcrumb</text>
  </heading>
  <paragraph>
    <text>Keep the last breadcrumb interactive.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    breadcrumb
    <list>
      <listitem>
        Material-UI
        <link checked="undefined" pressed="undefined">
          Material-UI
        </link>
      </listitem>
      <listitem>
        Core
        <link checked="undefined" pressed="undefined">
          Core
        </link>
      </listitem>
      <listitem>
        Breadcrumb
        <link checked="undefined" pressed="undefined">
          Breadcrumb
        </link>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Custom separator
    <link checked="undefined" pressed="undefined"></link>
    <text>Custom separator</text>
  </heading>
  <paragraph>
    <text>
      In the following examples, we are using two string separators, and an SVG
      icon.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    breadcrumb
    <list>
      <listitem>
        Material-UI
        <link checked="undefined" pressed="undefined">
          Material-UI
        </link>
      </listitem>
      <listitem>
        Core
        <link checked="undefined" pressed="undefined">
          Core
        </link>
      </listitem>
      <listitem>
        Breadcrumb
        <paragraph>
          <text>Breadcrumb</text>
        </paragraph>
      </listitem>
    </list>
  </landmark>
  <landmark>
    breadcrumb
    <list>
      <listitem>
        Material-UI
        <link checked="undefined" pressed="undefined">
          Material-UI
        </link>
      </listitem>
      <listitem>
        Core
        <link checked="undefined" pressed="undefined">
          Core
        </link>
      </listitem>
      <listitem>
        Breadcrumb
        <paragraph>
          <text>Breadcrumb</text>
        </paragraph>
      </listitem>
    </list>
  </landmark>
  <landmark>
    breadcrumb
    <list>
      <listitem>
        Material-UI
        <link checked="undefined" pressed="undefined">
          Material-UI
        </link>
      </listitem>
      <listitem>
        Core
        <link checked="undefined" pressed="undefined">
          Core
        </link>
      </listitem>
      <listitem>
        Breadcrumb
        <paragraph>
          <text>Breadcrumb</text>
        </paragraph>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Breadcrumbs with icons
    <link checked="undefined" pressed="undefined"></link>
    <text>Breadcrumbs with icons</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    breadcrumb
    <list>
      <listitem>
        Material-UI
        <link checked="undefined" pressed="undefined">
          Material-UI
        </link>
      </listitem>
      <listitem>
        Core
        <link checked="undefined" pressed="undefined">
          Core
        </link>
      </listitem>
      <listitem>
        Breadcrumb
        <text>Breadcrumb</text>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Collapsed breadcrumbs
    <link checked="undefined" pressed="undefined"></link>
    <text>Collapsed breadcrumbs</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    breadcrumb
    <list>
      <listitem>
        Home
        <link checked="undefined" pressed="undefined">
          Home
        </link>
      </listitem>
      <listitem>
        Show path
        <button>Show path</button>
      </listitem>
      <listitem>
        Belts
        <paragraph>
          <text>Belts</text>
        </paragraph>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Breadcrumbs maxItems={2} aria-label="breadcrumb">
    <Link color="inherit" href="#"
    onClick={handleClick}> Home </Link> <Link
    color="inherit" href="#"
    onClick={handleClick}> Catalog </Link> <Link
    color="inherit" href="#"
    onClick={handleClick}> Accessories </Link> <Link
    color="inherit" href="#"
    onClick={handleClick}> New Collection </Link>
    <Typography color="textPrimary">Belts</Typography>
    </Breadcrumbs>
  </text>
  <heading level="2">
    Customized breadcrumbs
    <link checked="undefined" pressed="undefined"></link>
    <text>Customized breadcrumbs</text>
  </heading>
  <paragraph>
    <text>
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    breadcrumb
    <list>
      <listitem>
        Home
        <link checked="undefined" pressed="undefined">
          Home
        </link>
      </listitem>
      <listitem>
        Catalog
        <link checked="undefined" pressed="undefined">
          Catalog
        </link>
      </listitem>
      <listitem>
        Accessories
        <button>
          Accessories
          <text>Accessories</text>
        </button>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Integration with react-router
    <link checked="undefined" pressed="undefined"></link>
    <text>Integration with react-router</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    breadcrumb
    <list>
      <listitem>
        Home
        <link checked="undefined" pressed="undefined">
          Home
        </link>
      </listitem>
      <listitem>
        Inbox
        <paragraph>
          <text>Inbox</text>
        </paragraph>
      </listitem>
    </list>
  </landmark>
  <landmark>
    mailbox folders
    <list>
      <listitem level="1">
        Inbox
        <button>
          Inbox
          <text>Inbox</text>
        </button>
      </listitem>
      <listitem level="1">
        Important
        <list>
          <listitem level="2">
            Important
            <button>
              Important
              <text>Important</text>
            </button>
          </listitem>
        </list>
      </listitem>
      <listitem level="1">
        Trash
        <button>
          Trash
          <text>Trash</text>
        </button>
      </listitem>
      <listitem level="1">
        Spam
        <button>
          Spam
          <text>Spam</text>
        </button>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Accessibility
    <link checked="undefined" pressed="undefined"></link>
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(WAI-ARIA:</text>
    <link checked="undefined" pressed="undefined">
      https://www.w3.org/TR/wai-aria-practices/#breadcrumb
    </link>
    <text>)</text>
  </paragraph>
  <paragraph>
    <text>
      Be sure to add a aria-label description on the Breadcrumbs component.
    </text>
  </paragraph>
  <paragraph>
    <text>The accessibility of this component relies on:</text>
  </paragraph>
  <list>
    <listitem>
      ‚Ä¢ The set of links is structured using an ordered list ( <ol>
      element).
      <statictext>‚Ä¢</statictext>
      <text>
        The set of links is structured using an ordered list (<ol>
        element).
      </text>
    </listitem>
    <listitem>
      ‚Ä¢ To prevent screen reader announcement of the visual separators between
      links, they are hidden with aria-hidden .<statictext>‚Ä¢</statictext>
      <text>
        To prevent screen reader announcement of the visual separators between
        links, they are hidden with aria-hidden.
      </text>
    </listitem>
    <listitem>
      ‚Ä¢ A nav element labeled with aria-label identifies the structure as a
      breadcrumb trail and makes it a navigation landmark so that it is easy to
      locate.
      <statictext>‚Ä¢</statictext>
      <text>
        A nav element labeled with aria-label identifies the structure as a
        breadcrumb trail and makes it a navigation landmark so that it is easy
        to locate.
      </text>
    </listitem>
  </list>
  <heading level="2">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text>API</text>
  </heading>
  <list>
    <listitem>
      ‚Ä¢ <Breadcrumbs />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <Breadcrumbs />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <Link />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <Link />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <Typography />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <Typography />
      </link>
    </listitem>
  </list>
  <separator></separator>
  <link checked="undefined" pressed="undefined">
    Bottom Navigation
  </link>
  <link checked="undefined" pressed="undefined">
    Drawer
  </link>
</landmark>;

`;

exports[`firefox /components/button-group/ 1`] = `
<landmark>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1">
    Button group
    <text>Button group</text>
  </heading>
  <paragraph>
    <text>The ButtonGroup component can be used to group related buttons.</text>
  </paragraph>
  <list>
    <listitem>
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem>
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2">
    Basic button group
    <link checked="undefined" pressed="undefined"></link>
    <text>Basic button group</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    outlined primary button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <group>
    contained primary button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <group>
    text primary button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Sizes and colors
    <link checked="undefined" pressed="undefined"></link>
    <text>Sizes and colors</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    small outlined button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <group>
    outlined secondary button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <group>
    large outlined primary button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Vertical group
    <link checked="undefined" pressed="undefined"></link>
    <text>Vertical group</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    vertical outlined primary button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <group>
    vertical contained primary button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <group>
    vertical contained primary button group
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
    <button>
      THREE
      <text>THREE</text>
    </button>
  </group>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Split button
    <link checked="undefined" pressed="undefined"></link>
    <text>Split button</text>
  </heading>
  <paragraph>
    <text>
      ButtonGroup can also be used to create a split button. The dropdown can
      change the button action (as in this example), or be used to immediately
      trigger a related action.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    split button
    <button>
      SQUASH AND MERGE
      <text>SQUASH AND MERGE</text>
    </button>
    <button haspopup="true">select merge strategy</button>
  </group>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Disabled elevation
    <link checked="undefined" pressed="undefined"></link>
    <text>Disabled elevation</text>
  </heading>
  <paragraph>
    <text>You can remove the elevation with the disableElevation prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    <button>
      ONE
      <text>ONE</text>
    </button>
    <button>
      TWO
      <text>TWO</text>
    </button>
  </group>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <ButtonGroup disableElevation variant="contained"
    color="primary"> <Button>One</Button>
    <Button>Two</Button> </ButtonGroup>
  </text>
  <heading level="2">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text>API</text>
  </heading>
  <list>
    <listitem>
      ‚Ä¢ <Button />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <Button />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <ButtonGroup />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <ButtonGroup />
      </link>
    </listitem>
  </list>
  <separator></separator>
  <link checked="undefined" pressed="undefined">
    Button
  </link>
  <link checked="undefined" pressed="undefined">
    Checkbox
  </link>
</landmark>;

`;

exports[`firefox /components/buttons/ 1`] = `
<landmark>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1">
    Button
    <text>Button</text>
  </heading>
  <paragraph>
    <text>
      Buttons allow users to take actions, and make choices, with a single tap.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Buttons communicate actions that users can take. They are typically placed
      throughout your UI, in places like:
    </text>
  </paragraph>
  <list>
    <listitem>
      ‚Ä¢ Dialogs
      <statictext>‚Ä¢</statictext>
      <text>Dialogs</text>
    </listitem>
    <listitem>
      ‚Ä¢ Modal windows
      <statictext>‚Ä¢</statictext>
      <text>Modal windows</text>
    </listitem>
    <listitem>
      ‚Ä¢ Forms
      <statictext>‚Ä¢</statictext>
      <text>Forms</text>
    </listitem>
    <listitem>
      ‚Ä¢ Cards
      <statictext>‚Ä¢</statictext>
      <text>Cards</text>
    </listitem>
    <listitem>
      ‚Ä¢ Toolbars
      <statictext>‚Ä¢</statictext>
      <text>Toolbars</text>
    </listitem>
  </list>
  <list>
    <listitem>
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem>
      WAI-ARIA
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
      </link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Material Design
      <link checked="undefined" pressed="undefined">
        Material Design
      </link>
    </listitem>
    <listitem>
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem>
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2">
    Contained Buttons
    <link checked="undefined" pressed="undefined"></link>
    <text>Contained Buttons</text>
  </heading>
  <paragraph>
    <link checked="undefined" pressed="undefined">
      Contained buttons
    </link>
    <text>
      are high-emphasis, distinguished by their use of elevation and fill. They
      contain actions that are primary to your app.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    PRIMARY
    <text>PRIMARY</text>
  </button>
  <button>
    SECONDARY
    <text>SECONDARY</text>
  </button>
  <button disabled="true">
    DISABLED
    <text>DISABLED</text>
  </button>
  <link checked="undefined" pressed="undefined">
    LINK
  </link>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Button variant="contained">Primary</Button>
    <Button variant="contained" color="secondary">
    Secondary </Button> <Button variant="contained"
    disabled> Disabled </Button> <Button
    variant="contained" href="#contained-buttons"> Link
    </Button>
  </text>
  <paragraph>
    <text>You can remove the elevation with the disableElevation prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    DISABLE ELEVATION
    <text>DISABLE ELEVATION</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Button variant="contained" disableElevation> Disable
    elevation </Button>
  </text>
  <heading level="2">
    Text Buttons
    <link checked="undefined" pressed="undefined"></link>
    <text>Text Buttons</text>
  </heading>
  <paragraph>
    <link checked="undefined" pressed="undefined">
      Text buttons
    </link>
    <text>
      are typically used for less-pronounced actions, including those located:
    </text>
  </paragraph>
  <list>
    <listitem>
      ‚Ä¢ In dialogs
      <statictext>‚Ä¢</statictext>
      <text>In dialogs</text>
    </listitem>
    <listitem>
      ‚Ä¢ In cards
      <statictext>‚Ä¢</statictext>
      <text>In cards</text>
    </listitem>
  </list>
  <paragraph>
    <text>
      In cards, text buttons help maintain an emphasis on card content.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    PRIMARY
    <text>PRIMARY</text>
  </button>
  <button>
    SECONDARY
    <text>SECONDARY</text>
  </button>
  <button disabled="true">
    DISABLED
    <text>DISABLED</text>
  </button>
  <link checked="undefined" pressed="undefined">
    LINK
  </link>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Button>Primary</Button> <Button
    color="secondary">Secondary</Button> <Button
    disabled>Disabled</Button> <Button
    href="#text-buttons">Link</Button>
  </text>
  <heading level="2">
    Outlined Buttons
    <link checked="undefined" pressed="undefined"></link>
    <text>Outlined Buttons</text>
  </heading>
  <paragraph>
    <link checked="undefined" pressed="undefined">
      Outlined buttons
    </link>
    <text>
      are medium-emphasis buttons. They contain actions that are important, but
      aren‚Äôt the primary action in an app.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Outlined buttons are also a lower emphasis alternative to contained
      buttons, or a higher emphasis alternative to text buttons.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    PRIMARY
    <text>PRIMARY</text>
  </button>
  <button>
    SECONDARY
    <text>SECONDARY</text>
  </button>
  <button disabled="true">
    DISABLED
    <text>DISABLED</text>
  </button>
  <link checked="undefined" pressed="undefined">
    LINK
  </link>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Button variant="outlined">Primary</Button> <Button
    variant="outlined" color="secondary"> Secondary
    </Button> <Button variant="outlined" disabled>
    Disabled </Button> <Button variant="outlined"
    href="#outlined-buttons"> Link </Button>
  </text>
  <heading level="2">
    Handling clicks
    <link checked="undefined" pressed="undefined"></link>
    <text>Handling clicks</text>
  </heading>
  <paragraph>
    <text>
      All components accept an onClick handler that is applied to the root DOM
      element.
    </text>
  </paragraph>
  <text>
    <Button onClick={() => { alert('clicked');
    }} > Click me </Button>
  </text>
  <paragraph>
    <text>Note that the documentation</text>
    <link checked="undefined" pressed="undefined">
      avoids
    </link>
    <text>
      mentioning native props (there are a lot) in the API section of the
      components.
    </text>
  </paragraph>
  <heading level="2">
    Upload button
    <link checked="undefined" pressed="undefined"></link>
    <text>Upload button</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    UPLOAD
    <button>
      UPLOAD
      <text>UPLOAD</text>
    </button>
  </label>
  <label>
    upload picture
    <button>upload picture</button>
  </label>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Sizes
    <link checked="undefined" pressed="undefined"></link>
    <text>Sizes</text>
  </heading>
  <paragraph>
    <text>For larger or smaller buttons use the size prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    SMALL
    <text>SMALL</text>
  </button>
  <button>
    MEDIUM
    <text>MEDIUM</text>
  </button>
  <button>
    LARGE
    <text>LARGE</text>
  </button>
  <button>
    SMALL
    <text>SMALL</text>
  </button>
  <button>
    MEDIUM
    <text>MEDIUM</text>
  </button>
  <button>
    LARGE
    <text>LARGE</text>
  </button>
  <button>
    SMALL
    <text>SMALL</text>
  </button>
  <button>
    MEDIUM
    <text>MEDIUM</text>
  </button>
  <button>
    LARGE
    <text>LARGE</text>
  </button>
  <button>delete</button>
  <button>delete</button>
  <button>delete</button>
  <button>delete</button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Buttons with icons and label
    <link checked="undefined" pressed="undefined"></link>
    <text>Buttons with icons and label</text>
  </heading>
  <paragraph>
    <text>
      Sometimes you might want to have icons for certain button to enhance the
      UX of the application as we recognize logos more easily than plain text.
      For example, if you have a delete button you can label it with a dustbin
      icon.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    DELETE
    <text>DELETE</text>
  </button>
  <button>
    SEND
    <text>SEND</text>
  </button>
  <button>
    UPLOAD
    <text>UPLOAD</text>
  </button>
  <button disabled="true">
    TALK
    <text>TALK</text>
  </button>
  <button>
    SAVE
    <text>SAVE</text>
  </button>
  <button>
    SAVE
    <text>SAVE</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Icon Buttons
    <link checked="undefined" pressed="undefined"></link>
    <text>Icon Buttons</text>
  </heading>
  <paragraph>
    <text>Icon buttons are commonly found in app bars and toolbars.</text>
  </paragraph>
  <paragraph>
    <text>
      Icons are also appropriate for toggle buttons that allow a single choice
      to be selected or deselected, such as adding or removing a star to an
      item.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>delete</button>
  <button disabled="true">delete</button>
  <button>add an alarm</button>
  <button>add to shopping cart</button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <IconButton aria-label="delete"> <DeleteIcon />
    </IconButton> <IconButton aria-label="delete" disabled
    color="primary"> <DeleteIcon /> </IconButton>
    <IconButton color="secondary" aria-label="add an
    alarm"> <AlarmIcon /> </IconButton> <IconButton
    color="primary" aria-label="add to shopping cart">
    <AddShoppingCartIcon /> </IconButton>
  </text>
  <heading level="2">
    Customized buttons
    <link checked="undefined" pressed="undefined"></link>
    <text>Customized buttons</text>
  </heading>
  <paragraph>
    <text>
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    CUSTOM CSS
    <text>CUSTOM CSS</text>
  </button>
  <button>
    THEME PROVIDER
    <text>THEME PROVIDER</text>
  </button>
  <button>
    Bootstrap
    <text>Bootstrap</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <paragraph>
    <text>üé® If you are looking for inspiration, you can check</text>
    <link checked="undefined" pressed="undefined">
      MUI Treasury's customization examples
    </link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Loading buttons
    <link checked="undefined" pressed="undefined"></link>
    <text>Loading buttons</text>
  </heading>
  <paragraph>
    <text>
      The loading buttons can show pending state and disable interactions.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button disabled="true">
    50
    <progressbar valuetext="50" checked="mixed" value="50">
      <diagram></diagram>
    </progressbar>
  </button>
  <button disabled="true">
    LOADING...
    <text>LOADING...</text>
  </button>
  <button disabled="true">
    50 SAVE
    <progressbar valuetext="50" checked="mixed" value="50">
      <diagram></diagram>
    </progressbar>
    <text>SAVE</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <LoadingButton pending variant="outlined"> Submit
    </LoadingButton> <LoadingButton pending
    pendingIndicator="Loading..." variant="outlined">
    Fetch data </LoadingButton> <LoadingButton pending
    pendingPosition="start" startIcon={<SaveIcon />}
    variant="outlined" > Save </LoadingButton>
  </text>
  <paragraph>
    <text>
      Toggle the switch to see the transition between the different states.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Pending
    <checkbox>Pending</checkbox>
    <text>Pending</text>
  </label>
  <button>
    SUBMIT
    <text>SUBMIT</text>
  </button>
  <button>
    FETCH DATA
    <text>FETCH DATA</text>
  </button>
  <button>
    SEND
    <text>SEND</text>
  </button>
  <button>
    SAVE
    <text>SAVE</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Complex Buttons
    <link checked="undefined" pressed="undefined"></link>
    <text>Complex Buttons</text>
  </heading>
  <paragraph>
    <text>
      The Text Buttons, Contained Buttons, Floating Action Buttons and Icon
      Buttons are built on top of the same component: the ButtonBase. You can
      take advantage of this lower level component to build custom interactions.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Breakfast
    <text>Breakfast</text>
  </button>
  <button>
    Burgers
    <text>Burgers</text>
  </button>
  <button>
    Camera
    <text>Camera</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Third-party routing library
    <link checked="undefined" pressed="undefined"></link>
    <text>Third-party routing library</text>
  </heading>
  <paragraph>
    <text>
      One common use case is to use the button to trigger navigation to a new
      page. The ButtonBase component provides the component prop to handle this
      use case. However for certain focus polyfills ButtonBase requires the DOM
      node of the provided component. This is achieved by attaching a ref to the
      component and expecting that the component forwards this ref to the
      underlying DOM node. Given that many of the interactive components rely on
      ButtonBase, you should be able to take advantage of it everywhere.
    </text>
  </paragraph>
  <paragraph>
    <text>Here is an</text>
    <link checked="undefined" pressed="undefined">
      integration example with react-router
    </link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Limitations
    <link checked="undefined" pressed="undefined"></link>
    <text>Limitations</text>
  </heading>
  <heading level="3">
    Cursor not-allowed
    <link checked="undefined" pressed="undefined"></link>
    <text>Cursor not-allowed</text>
  </heading>
  <paragraph>
    <text>
      The ButtonBase component sets pointer-events: none; on disabled buttons,
      which prevents the appearance of a disabled cursor.
    </text>
  </paragraph>
  <paragraph>
    <text>If you wish to use not-allowed, you have two options:</text>
  </paragraph>
  <list>
    <listitem>
      1. CSS only . You can remove the pointer events style on the disabled
      state of the <button> element:
      <statictext>1.</statictext>
      <text>
        CSS only. You can remove the pointer events style on the disabled state
        of the <button> element:
      </text>
    </listitem>
  </list>
  <text>
    .MuiButtonBase-root:disabled { cursor: not-allowed; pointer-events:
    auto; }
  </text>
  <paragraph>
    <text>However:</text>
  </paragraph>
  <list>
    <listitem>
      ‚Ä¢ You should add pointer-events: none; back when you need to display
      tooltips on disabled elements .<statictext>‚Ä¢</statictext>
      <text>
        You should add pointer-events: none; back when you need to display
      </text>
      <link checked="undefined" pressed="undefined">
        tooltips on disabled elements
      </link>
      <text>.</text>
    </listitem>
    <listitem>
      ‚Ä¢ The cursor won't change if you render something other than a button
      element, for instance, a link <a> element.
      <statictext>‚Ä¢</statictext>
      <text>
        The cursor won't change if you render something other than a button
        element, for instance, a link <a> element.
      </text>
    </listitem>
  </list>
  <list>
    <listitem>
      2. DOM change . You can wrap the button:
      <statictext>2.</statictext>
      <text>DOM change. You can wrap the button:</text>
    </listitem>
  </list>
  <text>
    <span style={{ cursor: 'not-allowed' }}>
    <Button component={Link} disabled> disabled </Button>
    </span>
  </text>
  <paragraph>
    <text>
      This has the advantage of supporting any element, for instance, a link
      <a> element.
    </text>
  </paragraph>
  <heading level="2">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text>API</text>
  </heading>
  <list>
    <listitem>
      ‚Ä¢ <Button />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <Button />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <ButtonBase />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <ButtonBase />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <IconButton />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <IconButton />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <LoadingButton />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <LoadingButton />
      </link>
    </listitem>
  </list>
  <separator></separator>
  <link checked="undefined" pressed="undefined">
    Autocomplete
  </link>
  <link checked="undefined" pressed="undefined">
    Button Group
  </link>
</landmark>;

`;

exports[`firefox /components/checkboxes/ 1`] = `
<landmark>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1">
    Checkbox
    <text>Checkbox</text>
  </heading>
  <paragraph>
    <text>
      Checkboxes allow the user to select one or more items from a set.
    </text>
  </paragraph>
  <paragraph>
    <text>Checkboxes can be used to turn an option on or off.</text>
  </paragraph>
  <paragraph>
    <text>
      If you have multiple options appearing in a list, you can preserve space
      by using checkboxes instead of on/off switches. If you have a single
      option, avoid using a checkbox and use an on/off switch instead.
    </text>
  </paragraph>
  <list>
    <listitem>
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem>
      WAI-ARIA
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
      </link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Material Design
      <link checked="undefined" pressed="undefined">
        Material Design
      </link>
    </listitem>
    <listitem>
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem>
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2">
    Basic checkboxes
    <link checked="undefined" pressed="undefined"></link>
    <text>Basic checkboxes</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">primary checkbox</checkbox>
  <checkbox checked="true">secondary checkbox</checkbox>
  <checkbox>uncontrolled-checkbox</checkbox>
  <checkbox disabled="true">disabled checkbox</checkbox>
  <checkbox disabled="true" checked="true">
    disabled checked checkbox
  </checkbox>
  <checkbox checked="true">indeterminate checkbox</checkbox>
  <checkbox checked="true">checkbox with default color</checkbox>
  <checkbox checked="true">checkbox with small size</checkbox>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Indeterminate
    <link checked="undefined" pressed="undefined"></link>
    <text>Indeterminate</text>
  </heading>
  <paragraph>
    <text>
      A checkbox input can only have two states in a form: checked or unchecked.
      It either submits its value or doesn't. Visually, there are actually
      three states a checkbox can be in: checked, unchecked, or indeterminate.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Parent
    <checkbox>Parent</checkbox>
    <text>Parent</text>
  </label>
  <label>
    Child 1<checkbox checked="true">Child 1</checkbox>
    <text>Child 1</text>
  </label>
  <label>
    Child 2<checkbox>Child 2</checkbox>
    <text>Child 2</text>
  </label>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <FormControlLabel label="Parent" control={ <Checkbox
    checked={checked[0] && checked[1]}
    indeterminate={checked[0] !== checked[1]}
    onChange={handleChange1} color="primary" /> }
    /> {children}
  </text>
  <heading level="2">
    Label
    <link checked="undefined" pressed="undefined"></link>
    <text>Label</text>
  </heading>
  <paragraph>
    <text>
      Checkbox can be provided with a label thanks to the FormControlLabel
      component.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Secondary
    <checkbox checked="true">Secondary</checkbox>
    <text>Secondary</text>
  </label>
  <label>
    Primary
    <checkbox checked="true">Primary</checkbox>
    <text>Primary</text>
  </label>
  <label>
    Uncontrolled
    <checkbox>Uncontrolled</checkbox>
    <text>Uncontrolled</text>
  </label>
  <label>
    Disabled
    <checkbox disabled="true">Disabled</checkbox>
    <text>Disabled</text>
  </label>
  <label>
    Disabled
    <checkbox disabled="true" checked="true">
      Disabled
    </checkbox>
    <text>Disabled</text>
  </label>
  <label>
    Indeterminate
    <checkbox checked="true">Indeterminate</checkbox>
    <text>Indeterminate</text>
  </label>
  <label>
    Custom color
    <checkbox checked="true">Custom color</checkbox>
    <text>Custom color</text>
  </label>
  <label>
    Custom icon
    <checkbox>Custom icon</checkbox>
    <text>Custom icon</text>
  </label>
  <label>
    Custom size
    <checkbox>Custom size</checkbox>
    <text>Custom size</text>
  </label>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    FormGroup
    <link checked="undefined" pressed="undefined"></link>
    <text>FormGroup</text>
  </heading>
  <paragraph>
    <text>
      FormGroup is a helpful wrapper used to group selection controls components
      that provides an easier API.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    Assign responsibility
    <label>
      Assign responsibility
      <text>Assign responsibility</text>
    </label>
    <label>
      Gilad Gray
      <checkbox checked="true">Gilad Gray</checkbox>
      <text>Gilad Gray</text>
    </label>
    <label>
      Jason Killian
      <checkbox>Jason Killian</checkbox>
      <text>Jason Killian</text>
    </label>
    <label>
      Antoine Llorca
      <checkbox>Antoine Llorca</checkbox>
      <text>Antoine Llorca</text>
    </label>
    <paragraph>
      <text>Be careful</text>
    </paragraph>
  </group>
  <group>
    Pick two
    <label>
      Pick two
      <text>Pick two</text>
    </label>
    <label>
      Gilad Gray
      <checkbox checked="true">Gilad Gray</checkbox>
      <text>Gilad Gray</text>
    </label>
    <label>
      Jason Killian
      <checkbox>Jason Killian</checkbox>
      <text>Jason Killian</text>
    </label>
    <label>
      Antoine Llorca
      <checkbox>Antoine Llorca</checkbox>
      <text>Antoine Llorca</text>
    </label>
    <paragraph>
      <text>You can display an error</text>
    </paragraph>
  </group>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Label placement
    <link checked="undefined" pressed="undefined"></link>
    <text>Label placement</text>
  </heading>
  <paragraph>
    <text>You can change the placement of the label:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    Label Placement
    <label>
      Label Placement
      <text>Label Placement</text>
    </label>
    <label>
      Top
      <checkbox>Top</checkbox>
      <text>Top</text>
    </label>
    <label>
      Start
      <checkbox>Start</checkbox>
      <text>Start</text>
    </label>
    <label>
      Bottom
      <checkbox>Bottom</checkbox>
      <text>Bottom</text>
    </label>
    <label>
      End
      <checkbox>End</checkbox>
      <text>End</text>
    </label>
  </group>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Customized checkbox
    <link checked="undefined" pressed="undefined"></link>
    <text>Customized checkbox</text>
  </heading>
  <paragraph>
    <text>
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox>decorative checkbox</checkbox>
  <checkbox checked="true">decorative checkbox</checkbox>
  <checkbox disabled="true">decorative checkbox</checkbox>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <paragraph>
    <text>üé® If you are looking for inspiration, you can check</text>
    <link checked="undefined" pressed="undefined">
      MUI Treasury's customization examples
    </link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    When to use
    <link checked="undefined" pressed="undefined"></link>
    <text>When to use</text>
  </heading>
  <list>
    <listitem>
      ‚Ä¢ Checkboxes vs. Radio Buttons
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        Checkboxes vs. Radio Buttons
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ Checkboxes vs. Switches
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        Checkboxes vs. Switches
      </link>
    </listitem>
  </list>
  <heading level="2">
    Accessibility
    <link checked="undefined" pressed="undefined"></link>
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(WAI-ARIA:</text>
    <link checked="undefined" pressed="undefined">
      https://www.w3.org/TR/wai-aria-practices/#checkbox
    </link>
    <text>)</text>
  </paragraph>
  <list>
    <listitem>
      ‚Ä¢ All form controls should have labels, and this includes radio buttons,
      checkboxes, and switches. In most cases, this is done by using the
      <label> element ( FormControlLabel ).
      <statictext>‚Ä¢</statictext>
      <text>
        All form controls should have labels, and this includes radio buttons,
        checkboxes, and switches. In most cases, this is done by using the
        <label> element (
      </text>
      <link checked="undefined" pressed="undefined">
        FormControlLabel
      </link>
      <text>).</text>
    </listitem>
    <listitem>
      ‚Ä¢ When a label can't be used, it's necessary to add an attribute
      directly to the input component. In this case, you can apply the
      additional attribute (e.g. aria-label , aria-labelledby , title ) via the
      inputProps prop.
      <statictext>‚Ä¢</statictext>
      <text>
        When a label can't be used, it's necessary to add an attribute
        directly to the input component. In this case, you can apply the
        additional attribute (e.g. aria-label, aria-labelledby, title) via the
        inputProps prop.
      </text>
    </listitem>
  </list>
  <text>
    <Checkbox value="checkedA" inputProps={{
    'aria-label': 'Checkbox A', }} />
  </text>
  <heading level="2">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text>API</text>
  </heading>
  <list>
    <listitem>
      ‚Ä¢ <Checkbox />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <Checkbox />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <FormControl />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <FormControl />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <FormControlLabel />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <FormControlLabel />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <FormGroup />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <FormGroup />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <FormLabel />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <FormLabel />
      </link>
    </listitem>
  </list>
  <separator></separator>
  <link checked="undefined" pressed="undefined">
    Button Group
  </link>
  <link checked="undefined" pressed="undefined">
    Floating Action Button
  </link>
</landmark>;

`;

exports[`firefox /components/dialogs/ 1`] = `
<landmark>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1">
    Dialog
    <text>Dialog</text>
  </heading>
  <paragraph>
    <text>
      Dialogs inform users about a task and can contain critical information,
      require decisions, or involve multiple tasks.
    </text>
  </paragraph>
  <paragraph>
    <text>A Dialog is a type of</text>
    <link checked="undefined" pressed="undefined">
      modal
    </link>
    <text>
      window that appears in front of app content to provide critical
      information or ask for a decision. Dialogs disable all app functionality
      when they appear, and remain on screen until confirmed, dismissed, or a
      required action has been taken.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Dialogs are purposefully interruptive, so they should be used sparingly.
    </text>
  </paragraph>
  <list>
    <listitem>
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem>
      WAI-ARIA
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
      </link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Material Design
      <link checked="undefined" pressed="undefined">
        Material Design
      </link>
    </listitem>
    <listitem>
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem>
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2">
    Basic dialog
    <link checked="undefined" pressed="undefined"></link>
    <text>Basic dialog</text>
  </heading>
  <paragraph>
    <text>
      Simple dialogs can provide additional details or actions about a list
      item. For example, they can display avatars, icons, clarifying subtext, or
      orthogonal actions (such as adding an account).
    </text>
  </paragraph>
  <paragraph>
    <text>Touch mechanics:</text>
  </paragraph>
  <list>
    <listitem>
      ‚Ä¢ Choosing an option immediately commits the option and closes the menu
      <statictext>‚Ä¢</statictext>
      <text>
        Choosing an option immediately commits the option and closes the menu
      </text>
    </listitem>
    <listitem>
      ‚Ä¢ Touching outside of the dialog, or pressing Back, cancels the action and
      closes the dialog
      <statictext>‚Ä¢</statictext>
      <text>
        Touching outside of the dialog, or pressing Back, cancels the action and
        closes the dialog
      </text>
    </listitem>
  </list>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <heading level="6">
    Selected: user02@gmail.com
    <text>Selected: user02@gmail.com</text>
  </heading>
  <whitespace></whitespace>
  <button>
    OPEN SIMPLE DIALOG
    <text>OPEN SIMPLE DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Typography variant="subtitle1">Selected:
    {selectedValue}</Typography> <br /> <Button
    variant="outlined" onClick={handleClickOpen}> Open
    simple dialog </Button> <SimpleDialog
    selectedValue={selectedValue} open={open}
    onClose={handleClose} />
  </text>
  <heading level="2">
    Alerts
    <link checked="undefined" pressed="undefined"></link>
    <text>Alerts</text>
  </heading>
  <paragraph>
    <text>
      Alerts are urgent interruptions, requiring acknowledgement, that inform
      the user about a situation.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Most alerts don't need titles. They summarize a decision in a
      sentence or two by either:
    </text>
  </paragraph>
  <list>
    <listitem>
      ‚Ä¢ Asking a question (e.g. "Delete this conversation?")
      <statictext>‚Ä¢</statictext>
      <text>
        Asking a question (e.g. "Delete this conversation?")
      </text>
    </listitem>
    <listitem>
      ‚Ä¢ Making a statement related to the action buttons
      <statictext>‚Ä¢</statictext>
      <text>Making a statement related to the action buttons</text>
    </listitem>
  </list>
  <paragraph>
    <text>
      Use title bar alerts only for high-risk situations, such as the potential
      loss of connectivity. Users should be able to understand the choices based
      on the title and button text alone.
    </text>
  </paragraph>
  <paragraph>
    <text>If a title is required:</text>
  </paragraph>
  <list>
    <listitem>
      ‚Ä¢ Use a clear question or statement with an explanation in the content
      area, such as "Erase USB storage?".
      <statictext>‚Ä¢</statictext>
      <text>
        Use a clear question or statement with an explanation in the content
        area, such as "Erase USB storage?".
      </text>
    </listitem>
    <listitem>
      ‚Ä¢ Avoid apologies, ambiguity, or questions, such as ‚ÄúWarning!‚Äù or ‚ÄúAre you
      sure?‚Äù
      <statictext>‚Ä¢</statictext>
      <text>
        Avoid apologies, ambiguity, or questions, such as ‚ÄúWarning!‚Äù or ‚ÄúAre you
        sure?‚Äù
      </text>
    </listitem>
  </list>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN ALERT DIALOG
    <text>OPEN ALERT DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Transitions
    <link checked="undefined" pressed="undefined"></link>
    <text>Transitions</text>
  </heading>
  <paragraph>
    <text>
      You can also swap out the transition, the next example uses Slide.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    SLIDE IN ALERT DIALOG
    <text>SLIDE IN ALERT DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Form dialogs
    <link checked="undefined" pressed="undefined"></link>
    <text>Form dialogs</text>
  </heading>
  <paragraph>
    <text>
      Form dialogs allow users to fill out form fields within a dialog. For
      example, if your site prompts for potential subscribers to fill in their
      email address, they can fill out the email field and touch
      'Submit'.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN FORM DIALOG
    <text>OPEN FORM DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Customized dialogs
    <link checked="undefined" pressed="undefined"></link>
    <text>Customized dialogs</text>
  </heading>
  <paragraph>
    <text>
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>The dialog has a close button added to aide usability.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN DIALOG
    <text>OPEN DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Full-screen dialogs
    <link checked="undefined" pressed="undefined"></link>
    <text>Full-screen dialogs</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN FULL-SCREEN DIALOG
    <text>OPEN FULL-SCREEN DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Optional sizes
    <link checked="undefined" pressed="undefined"></link>
    <text>Optional sizes</text>
  </heading>
  <paragraph>
    <text>
      You can set a dialog maximum width by using the maxWidth enumerable in
      combination with the fullWidth boolean. When the fullWidth prop is true,
      the dialog will adapt based on the maxWidth value.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN MAX-WIDTH DIALOG
    <text>OPEN MAX-WIDTH DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Responsive full-screen
    <link checked="undefined" pressed="undefined"></link>
    <text>Responsive full-screen</text>
  </heading>
  <paragraph>
    <text>You may make a dialog responsively full screen using</text>
    <link checked="undefined" pressed="undefined">
      useMediaQuery
    </link>
    <text>.</text>
  </paragraph>
  <text>
    import useMediaQuery from '@material-ui/core/useMediaQuery';
    function MyComponent() { const theme = useTheme(); const fullScreen =
    useMediaQuery(theme.breakpoints.down('md')); return <Dialog
    fullScreen={fullScreen} />; }
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN RESPONSIVE DIALOG
    <text>OPEN RESPONSIVE DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Confirmation dialogs
    <link checked="undefined" pressed="undefined"></link>
    <text>Confirmation dialogs</text>
  </heading>
  <paragraph>
    <text>
      Confirmation dialogs require users to explicitly confirm their choice
      before an option is committed. For example, users can listen to multiple
      ringtones but only make a final selection upon touching ‚ÄúOK‚Äù.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Touching ‚ÄúCancel‚Äù in a confirmation dialog, or pressing Back, cancels the
      action, discards any changes, and closes the dialog.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    <button disabled="true">
      Interruptions
      <text>Interruptions</text>
    </button>
    <buttonmenu haspopup="true">
      phone ringtone
      <text>Phone ringtone</text>
      <paragraph>
        <text>Dione</text>
      </paragraph>
    </buttonmenu>
    <button disabled="true">
      Default notification ringtone Tethys
      <text>Default notification ringtone</text>
      <paragraph>
        <text>Tethys</text>
      </paragraph>
    </button>
  </group>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Draggable dialog
    <link checked="undefined" pressed="undefined"></link>
    <text>Draggable dialog</text>
  </heading>
  <paragraph>
    <text>You can create a draggable dialog by using</text>
    <link checked="undefined" pressed="undefined">
      react-draggable
    </link>
    <text>
      . To do so, you can pass the imported Draggable component as the
      PaperComponent of the Dialog component. This will make the entire dialog
      draggable.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN DRAGGABLE DIALOG
    <text>OPEN DRAGGABLE DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Scrolling long content
    <link checked="undefined" pressed="undefined"></link>
    <text>Scrolling long content</text>
  </heading>
  <paragraph>
    <text>
      When dialogs become too long for the user‚Äôs viewport or device, they
      scroll.
    </text>
  </paragraph>
  <list>
    <listitem>
      ‚Ä¢ scroll=paper the content of the dialog scrolls within the paper element.
      <statictext>‚Ä¢</statictext>
      <text>
        scroll=paper the content of the dialog scrolls within the paper element.
      </text>
    </listitem>
    <listitem>
      ‚Ä¢ scroll=body the content of the dialog scrolls within the body element.
      <statictext>‚Ä¢</statictext>
      <text>
        scroll=body the content of the dialog scrolls within the body element.
      </text>
    </listitem>
  </list>
  <paragraph>
    <text>Try the demo below to see what we mean:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    SCROLL=PAPER
    <text>SCROLL=PAPER</text>
  </button>
  <button>
    SCROLL=BODY
    <text>SCROLL=BODY</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Limitations
    <link checked="undefined" pressed="undefined"></link>
    <text>Limitations</text>
  </heading>
  <paragraph>
    <text>Follow the</text>
    <link checked="undefined" pressed="undefined">
      Modal limitations section
    </link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Accessibility
    <link checked="undefined" pressed="undefined"></link>
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>Follow the</text>
    <link checked="undefined" pressed="undefined">
      Modal accessibility section
    </link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text>API</text>
  </heading>
  <list>
    <listitem>
      ‚Ä¢ <Dialog />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <Dialog />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <DialogActions />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <DialogActions />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <DialogContent />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <DialogContent />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <DialogContentText />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <DialogContentText />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <DialogTitle />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <DialogTitle />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <Slide />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <Slide />
      </link>
    </listitem>
  </list>
  <separator></separator>
  <link checked="undefined" pressed="undefined">
    Backdrop
  </link>
  <link checked="undefined" pressed="undefined">
    Progress
  </link>
</landmark>;

`;

exports[`firefox /components/pagination/ 1`] = `
<landmark>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1">
    Pagination
    <text>Pagination</text>
  </heading>
  <paragraph>
    <text>
      The Pagination component enables the user to select a specific page from a
      range of pages.
    </text>
  </paragraph>
  <list>
    <listitem>
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem>
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2">
    Basic pagination
    <link checked="undefined" pressed="undefined"></link>
    <text>Basic pagination</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        ‚Ä¶<text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        ‚Ä¶<text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        ‚Ä¶<text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button disabled="true">
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button disabled="true">
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button disabled="true">
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button disabled="true">
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button disabled="true">
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        ‚Ä¶<text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button disabled="true">
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button disabled="true">Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Pagination count={10} /> <Pagination
    count={10} color="primary" /> <Pagination
    count={10} color="secondary" /> <Pagination
    count={10} disabled />
  </text>
  <heading level="2">
    Outlined pagination
    <link checked="undefined" pressed="undefined"></link>
    <text>Outlined pagination</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        ‚Ä¶<text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        ‚Ä¶<text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        ‚Ä¶<text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button disabled="true">
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button disabled="true">
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button disabled="true">
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button disabled="true">
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button disabled="true">
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        ‚Ä¶<text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button disabled="true">
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button disabled="true">Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Pagination count={10} variant="outlined" />
    <Pagination count={10} variant="outlined"
    color="primary" /> <Pagination count={10}
    variant="outlined" color="secondary" />
    <Pagination count={10} variant="outlined" disabled
    />
  </text>
  <heading level="2">
    Rounded pagination
    <link checked="undefined" pressed="undefined"></link>
    <text>Rounded pagination</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        ‚Ä¶<text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        ‚Ä¶<text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Pagination count={10} shape="rounded" />
    <Pagination count={10} variant="outlined"
    shape="rounded" />
  </text>
  <heading level="2">
    Pagination size
    <link checked="undefined" pressed="undefined"></link>
    <text>Pagination size</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        ‚Ä¶<text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        ‚Ä¶<text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        ‚Ä¶<text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Pagination count={10} size="small" />
    <Pagination count={10} /> <Pagination
    count={10} size="large" />
  </text>
  <heading level="2">
    Buttons
    <link checked="undefined" pressed="undefined"></link>
    <text>Buttons</text>
  </heading>
  <paragraph>
    <text>
      You can optionally enable first-page and last-page buttons, or disable the
      previous-page and next-page buttons.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to first page
        <button disabled="true">Go to first page</button>
      </listitem>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        ‚Ä¶<text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
      <listitem>
        Go to last page
        <button>Go to last page</button>
      </listitem>
    </list>
  </landmark>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        ‚Ä¶<text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Pagination count={10} showFirstButton showLastButton />
    <Pagination count={10} hidePrevButton hideNextButton />
  </text>
  <heading level="2">
    Pagination ranges
    <link checked="undefined" pressed="undefined"></link>
    <text>Pagination ranges</text>
  </heading>
  <paragraph>
    <text>
      You can specify how many digits to display either side of current page
      with the siblingRange prop, and adjacent to the start and end page number
      with the boundaryRange prop.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button>Go to previous page</button>
      </listitem>
      <listitem>
        Go to page 1
        <button>
          Go to page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        ‚Ä¶<text>‚Ä¶</text>
      </listitem>
      <listitem>
        page 6
        <button>
          page 6<text>6</text>
        </button>
      </listitem>
      <listitem>
        ‚Ä¶<text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 11
        <button>
          Go to page 11
          <text>11</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button>Go to previous page</button>
      </listitem>
      <listitem>
        Go to page 1
        <button>
          Go to page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        ‚Ä¶<text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        page 6
        <button>
          page 6<text>6</text>
        </button>
      </listitem>
      <listitem>
        Go to page 7
        <button>
          Go to page 7<text>7</text>
        </button>
      </listitem>
      <listitem>
        ‚Ä¶<text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 11
        <button>
          Go to page 11
          <text>11</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button>Go to previous page</button>
      </listitem>
      <listitem>
        Go to page 1
        <button>
          Go to page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        ‚Ä¶<text>‚Ä¶</text>
      </listitem>
      <listitem>
        page 6
        <button>
          page 6<text>6</text>
        </button>
      </listitem>
      <listitem>
        ‚Ä¶<text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to page 11
        <button>
          Go to page 11
          <text>11</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button>Go to previous page</button>
      </listitem>
      <listitem>
        Go to page 1
        <button>
          Go to page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        ‚Ä¶<text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        page 6
        <button>
          page 6<text>6</text>
        </button>
      </listitem>
      <listitem>
        Go to page 7
        <button>
          Go to page 7<text>7</text>
        </button>
      </listitem>
      <listitem>
        ‚Ä¶<text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to page 11
        <button>
          Go to page 11
          <text>11</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Pagination count={11} defaultPage={6}
    siblingCount={0} /> <Pagination count={11}
    defaultPage={6} /> {/* Default ranges */}
    <Pagination count={11} defaultPage={6}
    siblingCount={0} boundaryCount={2} /> <Pagination
    count={11} defaultPage={6} boundaryCount={2}
    />
  </text>
  <heading level="2">
    Controlled pagination
    <link checked="undefined" pressed="undefined"></link>
    <text>Controlled pagination</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Page: 1</text>
  </paragraph>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        ‚Ä¶<text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Typography>Page: {page}</Typography> <Pagination
    count={10} page={page} onChange={handleChange}
    />
  </text>
  <heading level="2">
    Router integration
    <link checked="undefined" pressed="undefined"></link>
    <text>Router integration</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    pagination navigation
    <list>
      <listitem>
        Go to previous page
        <button disabled="true">Go to previous page</button>
      </listitem>
      <listitem>
        page 1
        <button>
          page 1<text>1</text>
        </button>
      </listitem>
      <listitem>
        Go to page 2
        <button>
          Go to page 2<text>2</text>
        </button>
      </listitem>
      <listitem>
        Go to page 3
        <button>
          Go to page 3<text>3</text>
        </button>
      </listitem>
      <listitem>
        Go to page 4
        <button>
          Go to page 4<text>4</text>
        </button>
      </listitem>
      <listitem>
        Go to page 5
        <button>
          Go to page 5<text>5</text>
        </button>
      </listitem>
      <listitem>
        ‚Ä¶<text>‚Ä¶</text>
      </listitem>
      <listitem>
        Go to page 10
        <button>
          Go to page 10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        Go to next page
        <button>Go to next page</button>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    usePagination
    <link checked="undefined" pressed="undefined"></link>
    <text>usePagination</text>
  </heading>
  <paragraph>
    <text>
      For advanced customization use cases, we expose a usePagination() hook. It
      accepts almost the same options as the Pagination component minus all the
      props related to the rendering of JSX. The Pagination component uses this
      hook internally.
    </text>
  </paragraph>
  <text>
    import { usePagination } from
    '@material-ui/core/Pagination';
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark>
    <list>
      <listitem>
        previous
        <button disabled="true">
          previous
          <text>previous</text>
        </button>
      </listitem>
      <listitem>
        1
        <button>
          1<text>1</text>
        </button>
      </listitem>
      <listitem>
        2
        <button>
          2<text>2</text>
        </button>
      </listitem>
      <listitem>
        3
        <button>
          3<text>3</text>
        </button>
      </listitem>
      <listitem>
        4
        <button>
          4<text>4</text>
        </button>
      </listitem>
      <listitem>
        5
        <button>
          5<text>5</text>
        </button>
      </listitem>
      <listitem>
        ‚Ä¶<text>‚Ä¶</text>
      </listitem>
      <listitem>
        10
        <button>
          10
          <text>10</text>
        </button>
      </listitem>
      <listitem>
        next
        <button>
          next
          <text>next</text>
        </button>
      </listitem>
    </list>
  </landmark>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Table pagination
    <link checked="undefined" pressed="undefined"></link>
    <text>Table pagination</text>
  </heading>
  <paragraph>
    <text>
      The Pagination component was designed to paginate a list of arbitrary
      items when infinite loading isn't used. It's preferred in
      contexts where SEO is important, for instance, a blog.
    </text>
  </paragraph>
  <paragraph>
    <text>
      For the pagination of a large set of tabular data, you should use the
      TablePagination component.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Rows per page:</text>
  </paragraph>
  <button haspopup="true">
    Rows per page: 10
    <text>10</text>
  </button>
  <paragraph>
    <text>21-30 of 100</text>
  </paragraph>
  <button>Go to previous page</button>
  <button>Go to next page</button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <TablePagination component="div" count={100}
    page={page} onPageChange={handleChangePage}
    rowsPerPage={rowsPerPage}
    onRowsPerPageChange={handleChangeRowsPerPage} />
  </text>
  <blockquote>
    <paragraph>
      <text>
        ‚ö†Ô∏è Note that the Pagination page prop starts at 1 to match the
        requirement of including the value in the URL, while the TablePagination
        page prop stats at 0 to match the requirement of zero-based JavaScript
        arrays that comes with rendering a lot of tabular data.
      </text>
    </paragraph>
  </blockquote>
  <paragraph>
    <text>You can learn more about this use case in the</text>
    <link checked="undefined" pressed="undefined">
      table section
    </link>
    <text>of the documentation.</text>
  </paragraph>
  <heading level="2">
    Accessibility
    <link checked="undefined" pressed="undefined"></link>
    <text>Accessibility</text>
  </heading>
  <heading level="3">
    ARIA
    <link checked="undefined" pressed="undefined"></link>
    <text>ARIA</text>
  </heading>
  <paragraph>
    <text>
      The root node has a role of "navigation" and aria-label
      "pagination navigation" by default. The page items have an
      aria-label that identifies the purpose of the item ("go to first
      page", "go to previous page", "go to page 1"
      etc.). You can override these using the getItemAriaLabel prop.
    </text>
  </paragraph>
  <heading level="3">
    Keyboard
    <link checked="undefined" pressed="undefined"></link>
    <text>Keyboard</text>
  </heading>
  <paragraph>
    <text>
      The pagination items are in tab order, with a tabindex of "0".
    </text>
  </paragraph>
  <heading level="2">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text>API</text>
  </heading>
  <list>
    <listitem>
      ‚Ä¢ <Pagination />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <Pagination />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <PaginationItem />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <PaginationItem />
      </link>
    </listitem>
  </list>
  <separator></separator>
  <link checked="undefined" pressed="undefined">
    Menu
  </link>
  <link checked="undefined" pressed="undefined">
    Speed Dial
  </link>
</landmark>;

`;

exports[`firefox /components/pickers 1`] = `
<landmark>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1">
    Date / Time pickers
    <text>Date / Time pickers</text>
  </heading>
  <paragraph>
    <text>
      Date pickers and Time pickers provide a simple way to select a single
      value from a pre-determined set.
    </text>
  </paragraph>
  <list>
    <listitem>
      ‚Ä¢ On mobile, pickers are best suited for display in confirmation dialog.
      <statictext>‚Ä¢</statictext>
      <text>
        On mobile, pickers are best suited for display in confirmation dialog.
      </text>
    </listitem>
    <listitem>
      ‚Ä¢ For inline display, such as on a form, consider using compact controls
      such as segmented dropdown buttons.
      <statictext>‚Ä¢</statictext>
      <text>
        For inline display, such as on a form, consider using compact controls
        such as segmented dropdown buttons.
      </text>
    </listitem>
  </list>
  <list>
    <listitem>
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem>
      WAI-ARIA
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
      </link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Material Design
      <link checked="undefined" pressed="undefined">
        Material Design
      </link>
    </listitem>
    <listitem>
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem>
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2">
    @material-ui/pickers
    <link checked="undefined" pressed="undefined"></link>
    <text>@material-ui/pickers</text>
  </heading>
  <paragraph>
    <img>stars</img>
    <text></text>
    <img>npm downloads</img>
  </paragraph>
  <paragraph>
    <link checked="undefined" pressed="undefined">
      @material-ui/pickers
    </link>
    <text>provides date picker and time picker controls.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Date picker desktop
    <text>Date picker desktop</text>
  </label>
  <statictext>¬†</statictext>
  <textbox description="mm/dd/yyyy" value="08/18/2014">
    Date picker desktop
    <text>08/18/2014</text>
  </textbox>
  <button>change date</button>
  <paragraph>
    <text>mm/dd/yyyy</text>
  </paragraph>
  <label>
    Date picker mobile
    <text>Date picker mobile</text>
  </label>
  <statictext>¬†</statictext>
  <textbox readonly="true" value="08/18/2014">
    Choose date, selected date is Aug 18, 2014
    <text>08/18/2014</text>
  </textbox>
  <label>
    Time picker
    <text>Time picker</text>
  </label>
  <statictext>¬†</statictext>
  <textbox readonly="true" value="09:11 PM">
    Choose time, selected time is 9:11 PM
    <text>09:11 PM</text>
  </textbox>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Native pickers
    <link checked="undefined" pressed="undefined"></link>
    <text>Native pickers</text>
  </heading>
  <paragraph>
    <text>‚ö†Ô∏è Native input controls support by browsers</text>
    <link checked="undefined" pressed="undefined">
      isn't perfect
    </link>
    <text>. Have a look at</text>
    <link checked="undefined" pressed="undefined">
      @material-ui/pickers
    </link>
    <text>for a richer solution.</text>
  </paragraph>
  <heading level="3">
    Datepickers
    <link checked="undefined" pressed="undefined"></link>
    <text>Datepickers</text>
  </heading>
  <paragraph>
    <text>A native datepicker example with type="date".</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <label>
      Birthday
      <text>Birthday</text>
    </label>
    <statictext>¬†</statictext>
    <Date>
      Birthday
      <spinbutton valuetext="05" value="05">
        Month
        <text>05</text>
      </spinbutton>
      <text>/</text>
      <spinbutton valuetext="24" value="24">
        Day
        <text>24</text>
      </spinbutton>
      <text>/</text>
      <spinbutton valuetext="2017" value="2017">
        Year
        <text>2017</text>
      </spinbutton>
      <button>
        Clear
        <diagram></diagram>
      </button>
    </Date>
  </form>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <form className={classes.container} noValidate>
    <TextField id="date" label="Birthday"
    type="date" defaultValue="2017-05-24"
    className={classes.textField} InputLabelProps={{ shrink:
    true, }} /> </form>
  </text>
  <heading level="3">
    Date & Time pickers
    <link checked="undefined" pressed="undefined"></link>
    <text>Date & Time pickers</text>
  </heading>
  <paragraph>
    <text>
      A native date & time picker example with
      type="datetime-local".
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <label>
      Next appointment
      <text>Next appointment</text>
    </label>
    <statictext>¬†</statictext>
    <textbox value="2017-05-24T10:30">
      Next appointment
      <text>2017-05-24T10:30</text>
    </textbox>
  </form>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <form className={classes.container} noValidate>
    <TextField id="datetime-local" label="Next
    appointment" type="datetime-local"
    defaultValue="2017-05-24T10:30"
    className={classes.textField} InputLabelProps={{ shrink:
    true, }} /> </form>
  </text>
  <heading level="3">
    Time pickers
    <link checked="undefined" pressed="undefined"></link>
    <text>Time pickers</text>
  </heading>
  <paragraph>
    <text>A native time picker example with type="time".</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <label>
      Alarm clock
      <text>Alarm clock</text>
    </label>
    <statictext>¬†</statictext>
    <group>
      Alarm clock
      <spinbutton valuetext="07" value="07">
        Hours
        <text>07</text>
      </spinbutton>
      <text>:</text>
      <spinbutton valuetext="30" value="30">
        Minutes
        <text>30</text>
      </spinbutton>
      <text></text>
      <textbox autocomplete="inline" value="AM">
        AM/PM
        <text>AM</text>
      </textbox>
      <button>
        Clear
        <diagram></diagram>
      </button>
    </group>
  </form>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <form className={classes.container} noValidate>
    <TextField id="time" label="Alarm clock"
    type="time" defaultValue="07:30"
    className={classes.textField} InputLabelProps={{ shrink:
    true, }} inputProps={{ step: 300, // 5 min }}
    /> </form>
  </text>
  <heading level="2">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text>API</text>
  </heading>
  <list>
    <listitem>
      ‚Ä¢ <TextField />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <TextField />
      </link>
    </listitem>
  </list>
  <separator></separator>
  <link checked="undefined" pressed="undefined">
    Floating Action Button
  </link>
  <link checked="undefined" pressed="undefined">
    Radio
  </link>
</landmark>;

`;

exports[`firefox /components/radio-buttons 1`] = `
<landmark>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1">
    Radio
    <text>Radio</text>
  </heading>
  <paragraph>
    <text>Radio buttons allow the user to select one option from a set.</text>
  </paragraph>
  <paragraph>
    <text>
      Use radio buttons when the user needs to see all available options. If
      available options can be collapsed, consider using a dropdown menu because
      it uses less space.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Radio buttons should have the most commonly used option selected by
      default.
    </text>
  </paragraph>
  <list>
    <listitem>
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem>
      WAI-ARIA
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
      </link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Material Design
      <link checked="undefined" pressed="undefined">
        Material Design
      </link>
    </listitem>
    <listitem>
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem>
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2">
    RadioGroup
    <link checked="undefined" pressed="undefined"></link>
    <text>RadioGroup</text>
  </heading>
  <paragraph>
    <text>
      RadioGroup is a helpful wrapper used to group Radio components that
      provides an easier API, and proper keyboard accessibility to the group.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    Gender
    <label>
      Gender
      <text>Gender</text>
    </label>
    <group>
      gender
      <label>
        Female
        <radio checked="true">Female</radio>
        <text>Female</text>
      </label>
      <label>
        Male
        <radio>Male</radio>
        <text>Male</text>
      </label>
      <label>
        Other
        <radio>Other</radio>
        <text>Other</text>
      </label>
      <label>
        (Disabled option)
        <radio disabled="true">(Disabled option)</radio>
        <text>(Disabled option)</text>
      </label>
    </group>
  </group>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <paragraph>
    <text>
      To lay out the buttons horizontally, set the row prop: <RadioGroup row
      />.
    </text>
  </paragraph>
  <heading level="2">
    Standalone radio buttons
    <link checked="undefined" pressed="undefined"></link>
    <text>Standalone radio buttons</text>
  </heading>
  <paragraph>
    <text>
      Radio can also be used standalone, without the RadioGroup wrapper.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <radio checked="true">A</radio>
  <radio>B</radio>
  <radio>C</radio>
  <radio>D</radio>
  <radio>E</radio>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Label placement
    <link checked="undefined" pressed="undefined"></link>
    <text>Label placement</text>
  </heading>
  <paragraph>
    <text>
      You can change the placement of the label with the FormControlLabel
      component's labelPlacement prop:
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    labelPlacement
    <label>
      labelPlacement
      <text>labelPlacement</text>
    </label>
    <group>
      position
      <label>
        Top
        <radio checked="true">Top</radio>
        <text>Top</text>
      </label>
      <label>
        Start
        <radio>Start</radio>
        <text>Start</text>
      </label>
      <label>
        Bottom
        <radio>Bottom</radio>
        <text>Bottom</text>
      </label>
      <label>
        End
        <radio>End</radio>
        <text>End</text>
      </label>
    </group>
  </group>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Show error
    <link checked="undefined" pressed="undefined"></link>
    <text>Show error</text>
  </heading>
  <paragraph>
    <text>
      In general, radio buttons should have a value selected by default. If this
      is not the case, you can display an error if no value is selected when the
      form is submitted:
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <group>
      Pop quiz: Material-UI is...
      <label>
        Pop quiz: Material-UI is...
        <text>Pop quiz: Material-UI is...</text>
      </label>
      <group>
        quiz
        <label>
          The best!
          <radio>The best!</radio>
          <text>The best!</text>
        </label>
        <label>
          The worst.
          <radio>The worst.</radio>
          <text>The worst.</text>
        </label>
      </group>
      <paragraph>
        <text>Choose wisely</text>
      </paragraph>
      <button>
        CHECK ANSWER
        <text>CHECK ANSWER</text>
      </button>
    </group>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Customized radios
    <link checked="undefined" pressed="undefined"></link>
    <text>Customized radios</text>
  </heading>
  <paragraph>
    <text>
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    Gender
    <label>
      Gender
      <text>Gender</text>
    </label>
    <group>
      gender
      <label>
        Female
        <radio checked="true">Female</radio>
        <text>Female</text>
      </label>
      <label>
        Male
        <radio>Male</radio>
        <text>Male</text>
      </label>
      <label>
        Other
        <radio>Other</radio>
        <text>Other</text>
      </label>
      <label>
        (Disabled option)
        <radio disabled="true">(Disabled option)</radio>
        <text>(Disabled option)</text>
      </label>
    </group>
  </group>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    useRadioGroup
    <link checked="undefined" pressed="undefined"></link>
    <text>useRadioGroup</text>
  </heading>
  <paragraph>
    <text>
      For advanced customization use cases, a useRadioGroup() hook is exposed.
      It returns the context value of the parent radio group. The Radio
      component uses this hook internally.
    </text>
  </paragraph>
  <heading level="3">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text>API</text>
  </heading>
  <text>
    import { useRadioGroup } from
    '@material-ui/core/RadioGroup';
  </text>
  <heading level="4">
    Returns
    <text>Returns</text>
  </heading>
  <paragraph>
    <text>value (Object):</text>
  </paragraph>
  <list>
    <listitem>
      ‚Ä¢ value.name ( String [optional]): The name used to reference the value of
      the control.
      <statictext>‚Ä¢</statictext>
      <text>
        value.name (String [optional]): The name used to reference the value of
        the control.
      </text>
    </listitem>
    <listitem>
      ‚Ä¢ value.onChange ( Void [optional]): Callback fired when a radio button is
      selected.
      <statictext>‚Ä¢</statictext>
      <text>
        value.onChange (Void [optional]): Callback fired when a radio button is
        selected.
      </text>
    </listitem>
    <listitem>
      ‚Ä¢ value.value ( Any [optional]): Value of the selected radio button.
      <statictext>‚Ä¢</statictext>
      <text>
        value.value (Any [optional]): Value of the selected radio button.
      </text>
    </listitem>
  </list>
  <heading level="4">
    Example
    <text>Example</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    <label>
      First
      <radio checked="true">First</radio>
      <text>First</text>
    </label>
    <label>
      Second
      <radio>Second</radio>
      <text>Second</text>
    </label>
  </group>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <RadioGroup name="use-radio-group"
    defaultValue="first"> <MyFormControlLabel
    value="first" label="First" control={<Radio
    />} /> <MyFormControlLabel value="second"
    label="Second" control={<Radio />} />
    </RadioGroup>
  </text>
  <heading level="2">
    When to use
    <link checked="undefined" pressed="undefined"></link>
    <text>When to use</text>
  </heading>
  <list>
    <listitem>
      ‚Ä¢ Checkboxes vs. Radio Buttons
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        Checkboxes vs. Radio Buttons
      </link>
    </listitem>
  </list>
  <heading level="2">
    Accessibility
    <link checked="undefined" pressed="undefined"></link>
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(WAI-ARIA:</text>
    <link checked="undefined" pressed="undefined">
      https://www.w3.org/TR/wai-aria-practices/#radiobutton
    </link>
    <text>)</text>
  </paragraph>
  <list>
    <listitem>
      ‚Ä¢ All form controls should have labels, and this includes radio buttons,
      checkboxes, and switches. In most cases, this is done by using the
      <label> element ( FormControlLabel ).
      <statictext>‚Ä¢</statictext>
      <text>
        All form controls should have labels, and this includes radio buttons,
        checkboxes, and switches. In most cases, this is done by using the
        <label> element (
      </text>
      <link checked="undefined" pressed="undefined">
        FormControlLabel
      </link>
      <text>).</text>
    </listitem>
    <listitem>
      ‚Ä¢ When a label can't be used, it's necessary to add an attribute
      directly to the input component. In this case, you can apply the
      additional attribute (e.g. aria-label , aria-labelledby , title ) via the
      inputProps property.
      <statictext>‚Ä¢</statictext>
      <text>
        When a label can't be used, it's necessary to add an attribute
        directly to the input component. In this case, you can apply the
        additional attribute (e.g. aria-label, aria-labelledby, title) via the
        inputProps property.
      </text>
    </listitem>
  </list>
  <text>
    <RadioButton value="radioA" inputProps={{
    'aria-label': 'Radio A', }} />
  </text>
  <heading level="2">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text>API</text>
  </heading>
  <list>
    <listitem>
      ‚Ä¢ <FormControl />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <FormControl />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <FormControlLabel />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <FormControlLabel />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <FormLabel />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <FormLabel />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <Radio />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <Radio />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <RadioGroup />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <RadioGroup />
      </link>
    </listitem>
  </list>
  <separator></separator>
  <link checked="undefined" pressed="undefined">
    Date / Time
  </link>
  <link checked="undefined" pressed="undefined">
    Rating
  </link>
</landmark>;

`;

exports[`firefox /components/rating/ 1`] = `
<landmark>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1">
    Rating
    <text>Rating</text>
  </heading>
  <paragraph>
    <text>
      Ratings provide insight regarding others‚Äô opinions and experiences, and
      can allow the user to submit a rating of their own.
    </text>
  </paragraph>
  <list>
    <listitem>
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem>
      WAI-ARIA
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
      </link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem>
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2">
    Basic rating
    <link checked="undefined" pressed="undefined"></link>
    <text>Basic rating</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Controlled
    <text>Controlled</text>
  </label>
  <label>
    1 Star
    <text>1 Star</text>
  </label>
  <radio>1 Star</radio>
  <label>
    2 Stars
    <text>2 Stars</text>
  </label>
  <radio checked="true">2 Stars</radio>
  <label>
    3 Stars
    <text>3 Stars</text>
  </label>
  <radio>3 Stars</radio>
  <label>
    4 Stars
    <text>4 Stars</text>
  </label>
  <radio>4 Stars</radio>
  <label>
    5 Stars
    <text>5 Stars</text>
  </label>
  <radio>5 Stars</radio>
  <label>
    Read only
    <text>Read only</text>
  </label>
  <img>2 Stars</img>
  <label>
    Disabled
    <text>Disabled</text>
  </label>
  <label>
    1 Star
    <text>1 Star</text>
  </label>
  <radio disabled="true">1 Star</radio>
  <label>
    2 Stars
    <text>2 Stars</text>
  </label>
  <radio disabled="true" checked="true">
    2 Stars
  </radio>
  <label>
    3 Stars
    <text>3 Stars</text>
  </label>
  <radio disabled="true">3 Stars</radio>
  <label>
    4 Stars
    <text>4 Stars</text>
  </label>
  <radio disabled="true">4 Stars</radio>
  <label>
    5 Stars
    <text>5 Stars</text>
  </label>
  <radio disabled="true">5 Stars</radio>
  <label>
    No rating given
    <text>No rating given</text>
  </label>
  <label>
    1 Star
    <text>1 Star</text>
  </label>
  <radio>1 Star</radio>
  <label>
    2 Stars
    <text>2 Stars</text>
  </label>
  <radio>2 Stars</radio>
  <label>
    3 Stars
    <text>3 Stars</text>
  </label>
  <radio>3 Stars</radio>
  <label>
    4 Stars
    <text>4 Stars</text>
  </label>
  <radio>4 Stars</radio>
  <label>
    5 Stars
    <text>5 Stars</text>
  </label>
  <radio>5 Stars</radio>
  <label>
    Empty
    <radio checked="true">Empty</radio>
    <text>Empty</text>
  </label>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Typography component="legend">Controlled</Typography>
    <Rating name="simple-controlled" value={value}
    onChange={(event, newValue) => { setValue(newValue);
    }} /> <Typography component="legend">Read
    only</Typography> <Rating name="read-only"
    value={value} readOnly /> <Typography
    component="legend">Disabled</Typography> <Rating
    name="disabled" value={value} disabled />
    <Typography component="legend">No rating
    given</Typography> <Rating name="no-value"
    value={null} />
  </text>
  <heading level="2">
    Rating precision
    <link checked="undefined" pressed="undefined"></link>
    <text>Rating precision</text>
  </heading>
  <paragraph>
    <text>
      The rating can display any float number with the value prop. Use the
      precision prop to define the minimum increment value change allowed.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    0.5 Stars
    <text>0.5 Stars</text>
  </label>
  <radio>0.5 Stars</radio>
  <label>
    1 Star
    <text>1 Star</text>
  </label>
  <radio>1 Star</radio>
  <label>
    1.5 Stars
    <text>1.5 Stars</text>
  </label>
  <radio>1.5 Stars</radio>
  <label>
    2 Stars
    <text>2 Stars</text>
  </label>
  <radio>2 Stars</radio>
  <label>
    2.5 Stars
    <text>2.5 Stars</text>
  </label>
  <radio checked="true">2.5 Stars</radio>
  <label>
    3 Stars
    <text>3 Stars</text>
  </label>
  <radio>3 Stars</radio>
  <label>
    3.5 Stars
    <text>3.5 Stars</text>
  </label>
  <radio>3.5 Stars</radio>
  <label>
    4 Stars
    <text>4 Stars</text>
  </label>
  <radio>4 Stars</radio>
  <label>
    4.5 Stars
    <text>4.5 Stars</text>
  </label>
  <radio>4.5 Stars</radio>
  <label>
    5 Stars
    <text>5 Stars</text>
  </label>
  <radio>5 Stars</radio>
  <img>2.5 Stars</img>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Rating name="half-rating" defaultValue={2.5}
    precision={0.5} /> <Rating name="half-rating-read"
    defaultValue={2.5} precision={0.5} readOnly />
  </text>
  <heading level="2">
    Hover feedback
    <link checked="undefined" pressed="undefined"></link>
    <text>Hover feedback</text>
  </heading>
  <paragraph>
    <text>
      You can display a label on hover to help the user pick the correct rating
      value. The demo uses the onChangeActive prop.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    0.5 Stars
    <text>0.5 Stars</text>
  </label>
  <radio>0.5 Stars</radio>
  <label>
    1 Star
    <text>1 Star</text>
  </label>
  <radio>1 Star</radio>
  <label>
    1.5 Stars
    <text>1.5 Stars</text>
  </label>
  <radio>1.5 Stars</radio>
  <label>
    2 Stars
    <text>2 Stars</text>
  </label>
  <radio checked="true">2 Stars</radio>
  <label>
    2.5 Stars
    <text>2.5 Stars</text>
  </label>
  <radio>2.5 Stars</radio>
  <label>
    3 Stars
    <text>3 Stars</text>
  </label>
  <radio>3 Stars</radio>
  <label>
    3.5 Stars
    <text>3.5 Stars</text>
  </label>
  <radio>3.5 Stars</radio>
  <label>
    4 Stars
    <text>4 Stars</text>
  </label>
  <radio>4 Stars</radio>
  <label>
    4.5 Stars
    <text>4.5 Stars</text>
  </label>
  <radio>4.5 Stars</radio>
  <label>
    5 Stars
    <text>5 Stars</text>
  </label>
  <radio>5 Stars</radio>
  <text>Poor+</text>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Rating name="hover-feedback" value={value}
    precision={0.5} onChange={(event, newValue) => {
    setValue(newValue); }} onChangeActive={(event, newHover)
    => { setHover(newHover); }} emptyIcon={<StarIcon
    style={{ opacity: 0.55 }} fontSize="inherit"
    />} /> {value !== null && ( <Box
    ml={2}>{labels[hover !== -1 ? hover :
    value]}</Box> )}
  </text>
  <heading level="2">
    Sizes
    <link checked="undefined" pressed="undefined"></link>
    <text>Sizes</text>
  </heading>
  <paragraph>
    <text>For larger or smaller ratings use the size prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    1 Star
    <text>1 Star</text>
  </label>
  <radio>1 Star</radio>
  <label>
    2 Stars
    <text>2 Stars</text>
  </label>
  <radio checked="true">2 Stars</radio>
  <label>
    3 Stars
    <text>3 Stars</text>
  </label>
  <radio>3 Stars</radio>
  <label>
    4 Stars
    <text>4 Stars</text>
  </label>
  <radio>4 Stars</radio>
  <label>
    5 Stars
    <text>5 Stars</text>
  </label>
  <radio>5 Stars</radio>
  <label>
    1 Star
    <text>1 Star</text>
  </label>
  <radio>1 Star</radio>
  <label>
    2 Stars
    <text>2 Stars</text>
  </label>
  <radio checked="true">2 Stars</radio>
  <label>
    3 Stars
    <text>3 Stars</text>
  </label>
  <radio>3 Stars</radio>
  <label>
    4 Stars
    <text>4 Stars</text>
  </label>
  <radio>4 Stars</radio>
  <label>
    5 Stars
    <text>5 Stars</text>
  </label>
  <radio>5 Stars</radio>
  <label>
    1 Star
    <text>1 Star</text>
  </label>
  <radio>1 Star</radio>
  <label>
    2 Stars
    <text>2 Stars</text>
  </label>
  <radio checked="true">2 Stars</radio>
  <label>
    3 Stars
    <text>3 Stars</text>
  </label>
  <radio>3 Stars</radio>
  <label>
    4 Stars
    <text>4 Stars</text>
  </label>
  <radio>4 Stars</radio>
  <label>
    5 Stars
    <text>5 Stars</text>
  </label>
  <radio>5 Stars</radio>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Rating name="size-small" defaultValue={2}
    size="small" /> <Rating name="size-medium"
    defaultValue={2} /> <Rating name="size-large"
    defaultValue={2} size="large" />
  </text>
  <heading level="2">
    Customized rating
    <link checked="undefined" pressed="undefined"></link>
    <text>Customized rating</text>
  </heading>
  <paragraph>
    <text>
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Custom icon and color
    <text>Custom icon and color</text>
  </label>
  <label>
    0.5 Hearts
    <text>0.5 Hearts</text>
  </label>
  <radio>0.5 Hearts</radio>
  <label>
    1 Heart
    <text>1 Heart</text>
  </label>
  <radio>1 Heart</radio>
  <label>
    1.5 Hearts
    <text>1.5 Hearts</text>
  </label>
  <radio>1.5 Hearts</radio>
  <label>
    2 Hearts
    <text>2 Hearts</text>
  </label>
  <radio checked="true">2 Hearts</radio>
  <label>
    2.5 Hearts
    <text>2.5 Hearts</text>
  </label>
  <radio>2.5 Hearts</radio>
  <label>
    3 Hearts
    <text>3 Hearts</text>
  </label>
  <radio>3 Hearts</radio>
  <label>
    3.5 Hearts
    <text>3.5 Hearts</text>
  </label>
  <radio>3.5 Hearts</radio>
  <label>
    4 Hearts
    <text>4 Hearts</text>
  </label>
  <radio>4 Hearts</radio>
  <label>
    4.5 Hearts
    <text>4.5 Hearts</text>
  </label>
  <radio>4.5 Hearts</radio>
  <label>
    5 Hearts
    <text>5 Hearts</text>
  </label>
  <radio>5 Hearts</radio>
  <label>
    10 stars
    <text>10 stars</text>
  </label>
  <label>
    1 Star
    <text>1 Star</text>
  </label>
  <radio>1 Star</radio>
  <label>
    2 Stars
    <text>2 Stars</text>
  </label>
  <radio checked="true">2 Stars</radio>
  <label>
    3 Stars
    <text>3 Stars</text>
  </label>
  <radio>3 Stars</radio>
  <label>
    4 Stars
    <text>4 Stars</text>
  </label>
  <radio>4 Stars</radio>
  <label>
    5 Stars
    <text>5 Stars</text>
  </label>
  <radio>5 Stars</radio>
  <label>
    6 Stars
    <text>6 Stars</text>
  </label>
  <radio>6 Stars</radio>
  <label>
    7 Stars
    <text>7 Stars</text>
  </label>
  <radio>7 Stars</radio>
  <label>
    8 Stars
    <text>8 Stars</text>
  </label>
  <radio>8 Stars</radio>
  <label>
    9 Stars
    <text>9 Stars</text>
  </label>
  <radio>9 Stars</radio>
  <label>
    10 Stars
    <text>10 Stars</text>
  </label>
  <radio>10 Stars</radio>
  <label>
    Custom icon set
    <text>Custom icon set</text>
  </label>
  <label>
    Very Dissatisfied
    <text>Very Dissatisfied</text>
  </label>
  <radio>Very Dissatisfied</radio>
  <label>
    Dissatisfied
    <text>Dissatisfied</text>
  </label>
  <radio checked="true">Dissatisfied</radio>
  <label>
    Neutral
    <text>Neutral</text>
  </label>
  <radio>Neutral</radio>
  <label>
    Satisfied
    <text>Satisfied</text>
  </label>
  <radio>Satisfied</radio>
  <label>
    Very Satisfied
    <text>Very Satisfied</text>
  </label>
  <radio>Very Satisfied</radio>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Accessibility
    <link checked="undefined" pressed="undefined"></link>
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(</text>
    <link checked="undefined" pressed="undefined">
      WAI tutorial
    </link>
    <text>)</text>
  </paragraph>
  <paragraph>
    <text>The accessibility of this component relies on:</text>
  </paragraph>
  <list>
    <listitem>
      ‚Ä¢ A radio group with its fields visually hidden. It contains six radio
      buttons, one for each star, and another for 0 stars that is checked by
      default. Be sure to provide a value for the name prop that is unique to
      the parent form.
      <statictext>‚Ä¢</statictext>
      <text>
        A radio group with its fields visually hidden. It contains six radio
        buttons, one for each star, and another for 0 stars that is checked by
        default. Be sure to provide a value for the name prop that is unique to
        the parent form.
      </text>
    </listitem>
    <listitem>
      ‚Ä¢ Labels for the radio buttons containing actual text (‚Äú1 Star‚Äù, ‚Äú2
      Stars‚Äù, ‚Ä¶). Be sure to provide a suitable function to the getLabelText
      prop when the page is in a language other than English. You can use the
      included locales , or provide your own.
      <statictext>‚Ä¢</statictext>
      <text>
        Labels for the radio buttons containing actual text (‚Äú1 Star‚Äù, ‚Äú2
        Stars‚Äù, ‚Ä¶). Be sure to provide a suitable function to the getLabelText
        prop when the page is in a language other than English. You can use the
      </text>
      <link checked="undefined" pressed="undefined">
        included locales
      </link>
      <text>, or provide your own.</text>
    </listitem>
    <listitem>
      ‚Ä¢ A visually distinct appearance for the rating icons. By default, the
      rating component uses both a difference of color and shape (filled and
      empty icons)to indicate the value. In the event that you are using color
      as the only means to indicate the value, the information should also be
      also displayed as text, as in this demo. This is important to match
      success Criterion 1.4.1 of WCAG2.1.
      <statictext>‚Ä¢</statictext>
      <text>
        A visually distinct appearance for the rating icons. By default, the
        rating component uses both a difference of color and shape (filled and
        empty icons)to indicate the value. In the event that you are using color
        as the only means to indicate the value, the information should also be
        also displayed as text, as in this demo. This is important to match
      </text>
      <link checked="undefined" pressed="undefined">
        success Criterion 1.4.1
      </link>
      <text>of WCAG2.1.</text>
    </listitem>
  </list>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <img>3.5 Stars</img>
  <text>Good</text>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Rating name="text-feedback" value={value} readOnly
    precision={0.5} emptyIcon={<StarIcon style={{
    opacity: 0.55 }} fontSize="inherit" />} />
    <Box ml={2}>{labels[value]}</Box>
  </text>
  <heading level="3">
    ARIA
    <link checked="undefined" pressed="undefined"></link>
    <text>ARIA</text>
  </heading>
  <paragraph>
    <text>
      The read only rating has a role of "img", and an aria-label that
      describes the displayed rating.
    </text>
  </paragraph>
  <heading level="3">
    Keyboard
    <link checked="undefined" pressed="undefined"></link>
    <text>Keyboard</text>
  </heading>
  <paragraph>
    <text>
      Because the rating component uses radio buttons, keyboard interaction
      follows the native browser behavior. Tab will focus the current rating,
      and cursor keys control the selected rating.
    </text>
  </paragraph>
  <paragraph>
    <text>The read only rating is not focusable.</text>
  </paragraph>
  <heading level="2">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text>API</text>
  </heading>
  <list>
    <listitem>
      ‚Ä¢ <Rating />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <Rating />
      </link>
    </listitem>
  </list>
  <separator></separator>
  <link checked="undefined" pressed="undefined">
    Radio
  </link>
  <link checked="undefined" pressed="undefined">
    Select
  </link>
</landmark>;

`;

exports[`firefox /components/selects/ 1`] = `
<landmark>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1">
    Select
    <text>Select</text>
  </heading>
  <paragraph>
    <text>
      Select components are used for collecting user provided information from a
      list of options.
    </text>
  </paragraph>
  <list>
    <listitem>
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem>
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2">
    Basic select
    <link checked="undefined" pressed="undefined"></link>
    <text>Basic select</text>
  </heading>
  <paragraph>
    <text>
      Menus are positioned over their emitting elements such that the currently
      selected menu item appears on top of the emitting element.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Age
    <text>Age</text>
  </label>
  <statictext>¬†</statictext>
  <button haspopup="true">
    Age ‚Äã<text>‚Äã</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <FormControl fullWidth> <InputLabel
    id="demo-simple-select-label">Age</InputLabel> <Select
    labelId="demo-simple-select-label"
    id="demo-simple-select" value={age}
    onChange={handleChange} > <MenuItem
    value={10}>Ten</MenuItem> <MenuItem
    value={20}>Twenty</MenuItem> <MenuItem
    value={30}>Thirty</MenuItem> </Select>
    </FormControl>
  </text>
  <heading level="2">
    Advanced features
    <link checked="undefined" pressed="undefined"></link>
    <text>Advanced features</text>
  </heading>
  <paragraph>
    <text>
      The Select component is meant to be interchangeable with a native
      <select> element.
    </text>
  </paragraph>
  <paragraph>
    <text>
      If you are looking for more advanced features, like combobox, multiselect,
      autocomplete, async or creatable support, head to the
    </text>
    <link checked="undefined" pressed="undefined">
      Autocomplete component
    </link>
    <text>
      . It's meant to be an improved version of the
      "react-select" and "downshift" packages.
    </text>
  </paragraph>
  <heading level="2">
    Props
    <link checked="undefined" pressed="undefined"></link>
    <text>Props</text>
  </heading>
  <heading level="3">
    Filled and outlined variants
    <link checked="undefined" pressed="undefined"></link>
    <text>Filled and outlined variants</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Age
    <text>Age</text>
  </label>
  <button haspopup="true">
    Age ‚Äã<text>‚Äã</text>
  </button>
  <label>
    Age
    <text>Age</text>
  </label>
  <statictext>¬†</statictext>
  <button haspopup="true">
    Age ‚Äã<text>‚Äã</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="3">
    Labels and helper text
    <link checked="undefined" pressed="undefined"></link>
    <text>Labels and helper text</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Age
    <text>Age</text>
  </label>
  <statictext>¬†</statictext>
  <button haspopup="true">
    Age ‚Äã<text>‚Äã</text>
  </button>
  <paragraph>
    <text>With label + helper text</text>
  </paragraph>
  <statictext>¬†</statictext>
  <button haspopup="true">
    Without label
    <text>None</text>
  </button>
  <paragraph>
    <text>Without label</text>
  </paragraph>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="3">
    Auto width
    <link checked="undefined" pressed="undefined"></link>
    <text>Auto width</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Age
    <text>Age</text>
  </label>
  <statictext>¬†</statictext>
  <button haspopup="true">
    Age ‚Äã<text>‚Äã</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="3">
    Other props
    <link checked="undefined" pressed="undefined"></link>
    <text>Other props</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Name
    <text>Name</text>
  </label>
  <statictext>¬†</statictext>
  <button disabled="true" haspopup="true">
    Name ‚Äã<text>‚Äã</text>
  </button>
  <paragraph>
    <text>Disabled</text>
  </paragraph>
  <label>
    Name
    <text>Name</text>
  </label>
  <statictext>¬†</statictext>
  <button haspopup="true">
    Name ‚Äã<text>‚Äã</text>
  </button>
  <paragraph>
    <text>Error</text>
  </paragraph>
  <label>
    Name
    <text>Name</text>
  </label>
  <statictext>¬†</statictext>
  <button haspopup="true">
    Name ‚Äã<text>‚Äã</text>
  </button>
  <paragraph>
    <text>Read only</text>
  </paragraph>
  <label>
    Age
    <text>Age</text>
  </label>
  <statictext>¬†</statictext>
  <button haspopup="true">
    Age ‚Äã<text>‚Äã</text>
  </button>
  <paragraph>
    <text>Required</text>
  </paragraph>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Native select
    <link checked="undefined" pressed="undefined"></link>
    <text>Native select</text>
  </heading>
  <paragraph>
    <text>
      As the user experience can be improved on mobile using the native select
      of the platform, we allow such pattern.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Age
    <text>Age</text>
  </label>
  <statictext>¬†</statictext>
  <combobox haspopup="true" value="Thirty">
    Age
    <MenuListPopup>
      <menuitem>
        Ten
        <text>Ten</text>
      </menuitem>
      <menuitem>
        Twenty
        <text>Twenty</text>
      </menuitem>
      <menuitem selected="true">
        Thirty
        <text>Thirty</text>
      </menuitem>
    </MenuListPopup>
  </combobox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <FormControl fullWidth> <InputLabel
    htmlFor="uncontrolled-native">Age</InputLabel>
    <NativeSelect defaultValue={30} inputProps={{ name:
    'age', id: 'uncontrolled-native', }} >
    <option value={10}>Ten</option> <option
    value={20}>Twenty</option> <option
    value={30}>Thirty</option> </NativeSelect>
    </FormControl>
  </text>
  <heading level="2">
    TextField
    <link checked="undefined" pressed="undefined"></link>
    <text>TextField</text>
  </heading>
  <paragraph>
    <text>
      The TextField wrapper component is a complete form control including a
      label, input and help text. You can find an example with the select mode
    </text>
    <link checked="undefined" pressed="undefined">
      in this section
    </link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Customized selects
    <link checked="undefined" pressed="undefined"></link>
    <text>Customized selects</text>
  </heading>
  <paragraph>
    <text>
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>
      The first step is to style the InputBase component. Once it's styled,
      you can either use it directly as a text field or provide it to the select
      input prop to have a select field.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Age
    <text>Age</text>
  </label>
  <textbox>Age</textbox>
  <label>
    Age
    <text>Age</text>
  </label>
  <button haspopup="true">
    Age ‚Äã<text>‚Äã</text>
  </button>
  <label>
    Age
    <text>Age</text>
  </label>
  <combobox haspopup="true" value="None">
    Age
    <MenuListPopup>
      <menuitem selected="true">None</menuitem>
      <menuitem>
        Ten
        <text>Ten</text>
      </menuitem>
      <menuitem>
        Twenty
        <text>Twenty</text>
      </menuitem>
      <menuitem>
        Thirty
        <text>Thirty</text>
      </menuitem>
    </MenuListPopup>
  </combobox>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <paragraph>
    <text>üé® If you are looking for inspiration, you can check</text>
    <link checked="undefined" pressed="undefined">
      MUI Treasury's customization examples
    </link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Multiple select
    <link checked="undefined" pressed="undefined"></link>
    <text>Multiple select</text>
  </heading>
  <paragraph>
    <text>
      The Select component can handle multiple selections. It's enabled
      with the multiple prop.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Like with the single selection, you can pull out the new value by
      accessing event.target.value in the onChange callback. It's always an
      array.
    </text>
  </paragraph>
  <heading level="3">
    Default
    <link checked="undefined" pressed="undefined"></link>
    <text>Default</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Name
    <text>Name</text>
  </label>
  <statictext>¬†</statictext>
  <button haspopup="true">
    Name ‚Äã<text>‚Äã</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="3">
    Checkmarks
    <link checked="undefined" pressed="undefined"></link>
    <text>Checkmarks</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Tag
    <text>Tag</text>
  </label>
  <statictext>¬†</statictext>
  <button haspopup="true">
    Tag ‚Äã<text>‚Äã</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="3">
    Chip
    <link checked="undefined" pressed="undefined"></link>
    <text>Chip</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Chip
    <text>Chip</text>
  </label>
  <statictext>¬†</statictext>
  <button haspopup="true">
    Chip ‚Äã<text>‚Äã</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="3">
    Placeholder
    <link checked="undefined" pressed="undefined"></link>
    <text>Placeholder</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <statictext>¬†</statictext>
  <button haspopup="true">
    Without label
    <text>Placeholder</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="3">
    Native
    <link checked="undefined" pressed="undefined"></link>
    <text>Native</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Native
    <text>Native</text>
  </label>
  <statictext>¬†</statictext>
  <listbox multiselectable="true">
    Native
    <option>
      Oliver Hansen
      <text>Oliver Hansen</text>
    </option>
    <option>
      Van Henry
      <text>Van Henry</text>
    </option>
    <option>
      April Tucker
      <text>April Tucker</text>
    </option>
    <option>
      Ralph Hubbard
      <text>Ralph Hubbard</text>
    </option>
    <option>
      Omar Alexander
      <text>Omar Alexander</text>
    </option>
    <option>
      Carlos Abbott
      <text>Carlos Abbott</text>
    </option>
    <option>
      Miriam Wagner
      <text>Miriam Wagner</text>
    </option>
    <option>
      Bradley Wilkerson
      <text>Bradley Wilkerson</text>
    </option>
    <option>
      Virginia Andrews
      <text>Virginia Andrews</text>
    </option>
    <option>
      Kelly Snyder
      <text>Kelly Snyder</text>
    </option>
  </listbox>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Controlled open select
    <link checked="undefined" pressed="undefined"></link>
    <text>Controlled open select</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN THE SELECT
    <text>OPEN THE SELECT</text>
  </button>
  <label>
    Age
    <text>Age</text>
  </label>
  <statictext>¬†</statictext>
  <button haspopup="true">
    Age ‚Äã<text>‚Äã</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    With a dialog
    <link checked="undefined" pressed="undefined"></link>
    <text>With a dialog</text>
  </heading>
  <paragraph>
    <text>
      While it's discouraged by the Material Design specification, you can
      use a select inside a dialog.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    OPEN SELECT DIALOG
    <text>OPEN SELECT DIALOG</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Grouping
    <link checked="undefined" pressed="undefined"></link>
    <text>Grouping</text>
  </heading>
  <paragraph>
    <text>
      Display categories with the ListSubheader component or the native
      <optgroup> element.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Grouping
    <text>Grouping</text>
  </label>
  <statictext>¬†</statictext>
  <combobox haspopup="true" value="None">
    Grouping
    <MenuListPopup>
      <menuitem selected="true">None</menuitem>
      <group>
        Category 1<statictext>Category 1</statictext>
        <menuitem level="2">
          Option 1<text>Option 1</text>
        </menuitem>
        <menuitem level="2">
          Option 2<text>Option 2</text>
        </menuitem>
      </group>
      <group>
        Category 2<statictext>Category 2</statictext>
        <menuitem level="2">
          Option 3<text>Option 3</text>
        </menuitem>
        <menuitem level="2">
          Option 4<text>Option 4</text>
        </menuitem>
      </group>
    </MenuListPopup>
  </combobox>
  <label>
    Grouping
    <text>Grouping</text>
  </label>
  <statictext>¬†</statictext>
  <button haspopup="true">
    ‚Äã<text>‚Äã</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Accessibility
    <link checked="undefined" pressed="undefined"></link>
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>
      To properly label your Select input you need an extra element with an id
      that contains a label. That id needs to match the labelId of the Select
      e.g.
    </text>
  </paragraph>
  <text>
    <InputLabel id="label">Age</InputLabel> <Select
    labelId="label" id="select" value="20">
    <MenuItem value="10">Ten</MenuItem> <MenuItem
    value="20">Twenty</MenuItem> </Select>
  </text>
  <paragraph>
    <text>
      Alternatively a TextField with an id and label creates the proper markup
      and ids for you:
    </text>
  </paragraph>
  <text>
    <TextField id="select" label="Age"
    value="20" select> <MenuItem
    value="10">Ten</MenuItem> <MenuItem
    value="20">Twenty</MenuItem> </TextField>
  </text>
  <paragraph>
    <text>For a</text>
    <link checked="undefined" pressed="undefined">
      native select
    </link>
    <text>
      , you should mention a label by giving the value of the id attribute of
      the select element to the InputLabel's htmlFor attribute:
    </text>
  </paragraph>
  <text>
    <InputLabel htmlFor="select">Age</InputLabel>
    <NativeSelect id="select"> <option
    value="10">Ten</option> <option
    value="20">Twenty</option> </NativeSelect>
  </text>
  <heading level="2">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text>API</text>
  </heading>
  <list>
    <listitem>
      ‚Ä¢ <NativeSelect />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <NativeSelect />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <Select />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <Select />
      </link>
    </listitem>
  </list>
  <separator></separator>
  <link checked="undefined" pressed="undefined">
    Rating
  </link>
  <link checked="undefined" pressed="undefined">
    Slider
  </link>
</landmark>;

`;

exports[`firefox /components/slider 1`] = `
<landmark>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1">
    Slider
    <text>Slider</text>
  </heading>
  <paragraph>
    <text>Sliders allow users to make selections from a range of values.</text>
  </paragraph>
  <paragraph>
    <text>
      Sliders reflect a range of values along a bar, from which users may select
      a single value. They are ideal for adjusting settings such as volume,
      brightness, or applying image filters.
    </text>
  </paragraph>
  <list>
    <listitem>
      ‚Ä¢ üì¶ 22 kB gzipped (but only +8 kB when used together with other
      Material-UI components).
      <statictext>‚Ä¢</statictext>
      <text>üì¶</text>
      <link checked="undefined" pressed="undefined">
        22 kB gzipped
      </link>
      <text>
        (but only +8 kB when used together with other Material-UI components).
      </text>
    </listitem>
  </list>
  <list>
    <listitem>
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem>
      WAI-ARIA
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
      </link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Material Design
      <link checked="undefined" pressed="undefined">
        Material Design
      </link>
    </listitem>
    <listitem>
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem>
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2">
    Continuous sliders
    <link checked="undefined" pressed="undefined"></link>
    <text>Continuous sliders</text>
  </heading>
  <paragraph>
    <text>
      Continuous sliders allow users to select a value along a subjective range.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Volume</text>
  </paragraph>
  <slider valuetext="30" orientation="horizontal" value="30">
    Volume
  </slider>
  <paragraph>
    <text>Disabled slider</text>
  </paragraph>
  <slider valuetext="30" orientation="horizontal" value="30">
    Disabled slider
  </slider>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Discrete sliders
    <link checked="undefined" pressed="undefined"></link>
    <text>Discrete sliders</text>
  </heading>
  <paragraph>
    <text>
      Discrete sliders can be adjusted to a specific value by referencing its
      value indicator. By order of demos:
    </text>
  </paragraph>
  <paragraph>
    <text>
      You can generate a mark for each step with marks={true}.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Temperature</text>
  </paragraph>
  <slider valuetext="30¬∞C" orientation="horizontal" value="30¬∞C">
    Temperature
    <text>30</text>
  </slider>
  <paragraph>
    <text>Disabled</text>
  </paragraph>
  <slider valuetext="30¬∞C" orientation="horizontal" value="30¬∞C">
    Disabled
    <text>30</text>
  </slider>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="3">
    Small steps
    <link checked="undefined" pressed="undefined"></link>
    <text>Small steps</text>
  </heading>
  <paragraph>
    <text>You can change the default step increment.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Small steps</text>
  </paragraph>
  <slider valuetext="5e-8¬∞C" orientation="horizontal" value="5e-8¬∞C">
    Small steps
    <text>5e-8</text>
  </slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Typography id="discrete-slider-small-steps" gutterBottom>
    Small steps </Typography> <Slider
    defaultValue={0.00000005} getAriaValueText={valuetext}
    aria-labelledby="discrete-slider-small-steps"
    step={0.00000001} marks min={-0.00000005}
    max={0.0000001} valueLabelDisplay="auto" />
  </text>
  <heading level="3">
    Custom marks
    <link checked="undefined" pressed="undefined"></link>
    <text>Custom marks</text>
  </heading>
  <paragraph>
    <text>
      You can have custom marks by providing a rich array to the marks prop.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Custom marks</text>
  </paragraph>
  <slider valuetext="20¬∞C" orientation="horizontal" value="20¬∞C">
    Custom marks
    <text>20</text>
  </slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Typography id="discrete-slider-custom" gutterBottom> Custom
    marks </Typography> <Slider defaultValue={20}
    getAriaValueText={valuetext}
    aria-labelledby="discrete-slider-custom" step={10}
    valueLabelDisplay="auto" marks={marks} />
  </text>
  <heading level="3">
    Restricted values
    <link checked="undefined" pressed="undefined"></link>
    <text>Restricted values</text>
  </heading>
  <paragraph>
    <text>
      You can restrict the selectable values to those provided with the marks
      prop with step={null}.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Restricted values</text>
  </paragraph>
  <slider valuetext="20¬∞C" orientation="horizontal" value="20¬∞C">
    Restricted values
    <text>2</text>
  </slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Typography id="discrete-slider-restrict" gutterBottom>
    Restricted values </Typography> <Slider defaultValue={20}
    valueLabelFormat={valueLabelFormat}
    getAriaValueText={valuetext}
    aria-labelledby="discrete-slider-restrict" step={null}
    valueLabelDisplay="auto" marks={marks} />
  </text>
  <heading level="3">
    Label always visible
    <link checked="undefined" pressed="undefined"></link>
    <text>Label always visible</text>
  </heading>
  <paragraph>
    <text>
      You can force the thumb label to be always visible with
      valueLabelDisplay="on".
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Always visible</text>
  </paragraph>
  <slider valuetext="80¬∞C" orientation="horizontal" value="80¬∞C">
    Always visible
    <text>80</text>
  </slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Typography id="discrete-slider-always" gutterBottom> Always
    visible </Typography> <Slider defaultValue={80}
    getAriaValueText={valuetext}
    aria-labelledby="discrete-slider-always" step={10}
    marks={marks} valueLabelDisplay="on" />
  </text>
  <heading level="2">
    Range slider
    <link checked="undefined" pressed="undefined"></link>
    <text>Range slider</text>
  </heading>
  <paragraph>
    <text>
      The slider can be used to set the start and end of a range by supplying an
      array of values to the value prop.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Temperature range</text>
  </paragraph>
  <slider valuetext="20¬∞C" orientation="horizontal" value="20¬∞C">
    Temperature range
    <text>20</text>
  </slider>
  <slider valuetext="37¬∞C" orientation="horizontal" value="37¬∞C">
    Temperature range
    <text>37</text>
  </slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Typography id="range-slider-demo" gutterBottom> Temperature
    range </Typography> <Slider value={value}
    onChange={handleChange} valueLabelDisplay="auto"
    aria-labelledby="range-slider-demo"
    getAriaValueText={valuetext} />
  </text>
  <heading level="2">
    Slider with input field
    <link checked="undefined" pressed="undefined"></link>
    <text>Slider with input field</text>
  </heading>
  <paragraph>
    <text>In this example an input allows a discrete value to be set.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Volume</text>
  </paragraph>
  <slider valuetext="30" orientation="horizontal" value="30">
    Volume
  </slider>
  <statictext>¬†</statictext>
  <spinbutton valuetext="30" value="30">
    Volume
    <text>30</text>
  </spinbutton>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Customized sliders
    <link checked="undefined" pressed="undefined"></link>
    <text>Customized sliders</text>
  </heading>
  <paragraph>
    <text>
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>iOS</text>
  </paragraph>
  <slider valuetext="60" orientation="horizontal" value="60">
    ios slider
    <text>60</text>
  </slider>
  <paragraph>
    <text>pretto.fr</text>
  </paragraph>
  <slider valuetext="20" orientation="horizontal" value="20">
    pretto slider
    <text>20</text>
  </slider>
  <paragraph>
    <text>Tooltip value label</text>
  </paragraph>
  <slider valuetext="20" orientation="horizontal" value="20">
    custom thumb label
  </slider>
  <paragraph>
    <text>Airbnb</text>
  </paragraph>
  <slider valuetext="20" orientation="horizontal" value="20">
    Minimum price
  </slider>
  <slider valuetext="40" orientation="horizontal" value="40">
    Maximum price
  </slider>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Vertical sliders
    <link checked="undefined" pressed="undefined"></link>
    <text>Vertical sliders</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Temperature</text>
  </paragraph>
  <slider valuetext="30¬∞C" orientation="vertical" value="30¬∞C">
    Temperature
  </slider>
  <slider valuetext="30¬∞C" orientation="vertical" value="30¬∞C">
    Temperature
  </slider>
  <slider valuetext="20¬∞C" orientation="vertical" value="20¬∞C">
    Temperature
  </slider>
  <slider valuetext="37¬∞C" orientation="vertical" value="37¬∞C">
    Temperature
  </slider>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Track
    <link checked="undefined" pressed="undefined"></link>
    <text>Track</text>
  </heading>
  <paragraph>
    <text>The track shows the range available for user selection.</text>
  </paragraph>
  <heading level="3">
    Removed track
    <link checked="undefined" pressed="undefined"></link>
    <text>Removed track</text>
  </heading>
  <paragraph>
    <text>The track can be turned off with track={false}.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Removed track</text>
  </paragraph>
  <slider valuetext="30¬∞C" orientation="horizontal" value="30¬∞C">
    Removed track
  </slider>
  <paragraph>
    <text>Removed track range slider</text>
  </paragraph>
  <slider valuetext="20¬∞C" orientation="horizontal" value="20¬∞C">
    Removed track range slider
  </slider>
  <slider valuetext="37¬∞C" orientation="horizontal" value="37¬∞C">
    Removed track range slider
  </slider>
  <slider valuetext="50¬∞C" orientation="horizontal" value="50¬∞C">
    Removed track range slider
  </slider>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="3">
    Inverted track
    <link checked="undefined" pressed="undefined"></link>
    <text>Inverted track</text>
  </heading>
  <paragraph>
    <text>The track can be inverted with track="inverted".</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Inverted track</text>
  </paragraph>
  <slider valuetext="30¬∞C" orientation="horizontal" value="30¬∞C">
    Inverted track
  </slider>
  <paragraph>
    <text>Inverted track range</text>
  </paragraph>
  <slider valuetext="20¬∞C" orientation="horizontal" value="20¬∞C">
    Inverted track range
  </slider>
  <slider valuetext="37¬∞C" orientation="horizontal" value="37¬∞C">
    Inverted track range
  </slider>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Non-linear scale
    <link checked="undefined" pressed="undefined"></link>
    <text>Non-linear scale</text>
  </heading>
  <paragraph>
    <text>
      You can use the scale prop to represent the value on a different scale.
      For instance, in the following demo, the value x represents the power of
      10^x.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Temperature range</text>
  </paragraph>
  <slider valuetext="1e^0" orientation="horizontal" value="1e^0">
    Temperature range
    <text>1e^0</text>
  </slider>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Typography id="non-linear-slider" gutterBottom> Temperature
    range </Typography> <Slider value={value}
    min={0} step={0.1} max={6} scale={(x)
    => x ** 10} getAriaValueText={valueLabelFormat}
    valueLabelFormat={valueLabelFormat}
    onChange={handleChange} valueLabelDisplay="auto"
    aria-labelledby="non-linear-slider" />
  </text>
  <heading level="2">
    Accessibility
    <link checked="undefined" pressed="undefined"></link>
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(WAI-ARIA:</text>
    <link checked="undefined" pressed="undefined">
      https://www.w3.org/TR/wai-aria-practices/#slider
    </link>
    <text>)</text>
  </paragraph>
  <paragraph>
    <text>
      The component handles most of the work necessary to make it accessible.
      However, you need to make sure that:
    </text>
  </paragraph>
  <list>
    <listitem>
      ‚Ä¢ Each thumb has a user-friendly label ( aria-label , aria-labelledby or
      getAriaLabel prop).
      <statictext>‚Ä¢</statictext>
      <text>
        Each thumb has a user-friendly label (aria-label, aria-labelledby or
        getAriaLabel prop).
      </text>
    </listitem>
    <listitem>
      ‚Ä¢ Each thumb has a user-friendly text for its current value. This is not
      required if the value matches the semantics of the label. You can change
      the name with the getAriaValueText or aria-valuetext prop.
      <statictext>‚Ä¢</statictext>
      <text>
        Each thumb has a user-friendly text for its current value. This is not
        required if the value matches the semantics of the label. You can change
        the name with the getAriaValueText or aria-valuetext prop.
      </text>
    </listitem>
  </list>
  <heading level="2">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text>API</text>
  </heading>
  <list>
    <listitem>
      ‚Ä¢ <Slider />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <Slider />
      </link>
    </listitem>
  </list>
  <separator></separator>
  <link checked="undefined" pressed="undefined">
    Select
  </link>
  <link checked="undefined" pressed="undefined">
    Switch
  </link>
</landmark>;

`;

exports[`firefox /components/switches/ 1`] = `
<landmark>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1">
    Switch
    <text>Switch</text>
  </heading>
  <paragraph>
    <text>Switches toggle the state of a single setting on or off.</text>
  </paragraph>
  <paragraph>
    <text>
      Switches are the preferred way to adjust settings on mobile. The option
      that the switch controls, as well as the state it‚Äôs in, should be made
      clear from the corresponding inline label.
    </text>
  </paragraph>
  <list>
    <listitem>
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Material Design
      <link checked="undefined" pressed="undefined">
        Material Design
      </link>
    </listitem>
    <listitem>
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem>
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2">
    Basic switches
    <link checked="undefined" pressed="undefined"></link>
    <text>Basic switches</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true">secondary checkbox</checkbox>
  <checkbox checked="true">primary checkbox</checkbox>
  <checkbox>primary checkbox</checkbox>
  <checkbox disabled="true">disabled checkbox</checkbox>
  <checkbox disabled="true" checked="true">
    primary checkbox
  </checkbox>
  <checkbox checked="true">checkbox with default color</checkbox>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Switch with FormControlLabel
    <link checked="undefined" pressed="undefined"></link>
    <text>Switch with FormControlLabel</text>
  </heading>
  <paragraph>
    <text>
      Switch can be provided with a description thanks to the FormControlLabel
      component.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Secondary
    <checkbox checked="true">Secondary</checkbox>
    <text>Secondary</text>
  </label>
  <label>
    Primary
    <checkbox checked="true">Primary</checkbox>
    <text>Primary</text>
  </label>
  <label>
    Uncontrolled
    <checkbox>Uncontrolled</checkbox>
    <text>Uncontrolled</text>
  </label>
  <label>
    Disabled
    <checkbox disabled="true">Disabled</checkbox>
    <text>Disabled</text>
  </label>
  <label>
    Disabled
    <checkbox disabled="true" checked="true">
      Disabled
    </checkbox>
    <text>Disabled</text>
  </label>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Switches with FormGroup
    <link checked="undefined" pressed="undefined"></link>
    <text>Switches with FormGroup</text>
  </heading>
  <paragraph>
    <text>
      FormGroup is a helpful wrapper used to group selection controls components
      that provides an easier API. However, you are encouraged to use
    </text>
    <link checked="undefined" pressed="undefined">
      Checkboxes
    </link>
    <text>instead if multiple related controls are required. (See:</text>
    <link checked="undefined" pressed="undefined">
      When to use
    </link>
    <text>).</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    Assign responsibility
    <label>
      Assign responsibility
      <text>Assign responsibility</text>
    </label>
    <label>
      Gilad Gray
      <checkbox checked="true">Gilad Gray</checkbox>
      <text>Gilad Gray</text>
    </label>
    <label>
      Jason Killian
      <checkbox>Jason Killian</checkbox>
      <text>Jason Killian</text>
    </label>
    <label>
      Antoine Llorca
      <checkbox checked="true">Antoine Llorca</checkbox>
      <text>Antoine Llorca</text>
    </label>
    <paragraph>
      <text>Be careful</text>
    </paragraph>
  </group>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Customized switches
    <link checked="undefined" pressed="undefined"></link>
    <text>Customized switches</text>
  </heading>
  <paragraph>
    <text>
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Custom color
    <checkbox checked="true">Custom color</checkbox>
    <text>Custom color</text>
  </label>
  <label>
    iOS style
    <checkbox checked="true">iOS style</checkbox>
    <text>iOS style</text>
  </label>
  <label>
    Off On
    <text>Off</text>
    <checkbox checked="true">Off On</checkbox>
    <text>On</text>
  </label>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <paragraph>
    <text>üé® If you are looking for inspiration, you can check</text>
    <link checked="undefined" pressed="undefined">
      MUI Treasury's customization examples
    </link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Sizes
    <link checked="undefined" pressed="undefined"></link>
    <text>Sizes</text>
  </heading>
  <paragraph>
    <text>Fancy smaller switches? Use the size prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Small
    <checkbox>Small</checkbox>
    <text>Small</text>
  </label>
  <label>
    Normal
    <checkbox>Normal</checkbox>
    <text>Normal</text>
  </label>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <FormGroup> <FormControlLabel control={ <Switch
    size="small" checked={checked}
    onChange={toggleChecked} /> } label="Small"
    /> <FormControlLabel control={<Switch
    checked={checked} onChange={toggleChecked} />}
    label="Normal" /> </FormGroup>
  </text>
  <heading level="2">
    Label placement
    <link checked="undefined" pressed="undefined"></link>
    <text>Label placement</text>
  </heading>
  <paragraph>
    <text>You can change the placement of the label:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group>
    <label>
      Top
      <checkbox>Top</checkbox>
      <text>Top</text>
    </label>
    <label>
      Start
      <checkbox>Start</checkbox>
      <text>Start</text>
    </label>
    <label>
      Bottom
      <checkbox>Bottom</checkbox>
      <text>Bottom</text>
    </label>
    <label>
      End
      <checkbox>End</checkbox>
      <text>End</text>
    </label>
  </group>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    When to use
    <link checked="undefined" pressed="undefined"></link>
    <text>When to use</text>
  </heading>
  <list>
    <listitem>
      ‚Ä¢ Checkboxes vs. Switches
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        Checkboxes vs. Switches
      </link>
    </listitem>
  </list>
  <heading level="2">
    Accessibility
    <link checked="undefined" pressed="undefined"></link>
    <text>Accessibility</text>
  </heading>
  <list>
    <listitem>
      ‚Ä¢ It will render an element with the checkbox role not switch role since
      this role isn't widely supported yet. Please test first if assistive
      technology of your target audience supports this role properly. Then you
      can change the role with <Switch inputProps={{ role:
      'switch' }}>
      <statictext>‚Ä¢</statictext>
      <text>
        It will render an element with the checkbox role not switch role since
        this role isn't widely supported yet. Please test first if
        assistive technology of your target audience supports this role
        properly. Then you can change the role with <Switch
        inputProps={{ role: 'switch' }}>
      </text>
    </listitem>
    <listitem>
      ‚Ä¢ All form controls should have labels, and this includes radio buttons,
      checkboxes, and switches. In most cases, this is done by using the
      <label> element ( FormControlLabel ).
      <statictext>‚Ä¢</statictext>
      <text>
        All form controls should have labels, and this includes radio buttons,
        checkboxes, and switches. In most cases, this is done by using the
        <label> element (
      </text>
      <link checked="undefined" pressed="undefined">
        FormControlLabel
      </link>
      <text>).</text>
    </listitem>
    <listitem>
      ‚Ä¢ When a label can't be used, it's necessary to add an attribute
      directly to the input component. In this case, you can apply the
      additional attribute (e.g. aria-label , aria-labelledby , title ) via the
      inputProps prop.
      <statictext>‚Ä¢</statictext>
      <text>
        When a label can't be used, it's necessary to add an attribute
        directly to the input component. In this case, you can apply the
        additional attribute (e.g. aria-label, aria-labelledby, title) via the
        inputProps prop.
      </text>
    </listitem>
  </list>
  <text>
    <Switch value="checkedA" inputProps={{
    'aria-label': 'Switch A' }} />
  </text>
  <heading level="2">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text>API</text>
  </heading>
  <list>
    <listitem>
      ‚Ä¢ <FormControl />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <FormControl />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <FormControlLabel />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <FormControlLabel />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <FormGroup />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <FormGroup />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <FormLabel />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <FormLabel />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <Switch />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <Switch />
      </link>
    </listitem>
  </list>
  <separator></separator>
  <link checked="undefined" pressed="undefined">
    Slider
  </link>
  <link checked="undefined" pressed="undefined">
    Text Field
  </link>
</landmark>;

`;

exports[`firefox /components/tabs/ 1`] = `
<landmark>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1">
    Tabs
    <text>Tabs</text>
  </heading>
  <paragraph>
    <text>
      Tabs make it easy to explore and switch between different views.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Tabs organize and allow navigation between groups of content that are
      related and at the same level of hierarchy.
    </text>
  </paragraph>
  <list>
    <listitem>
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem>
      WAI-ARIA
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
      </link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Material Design
      <link checked="undefined" pressed="undefined">
        Material Design
      </link>
    </listitem>
    <listitem>
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem>
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2">
    Basic tabs
    <link checked="undefined" pressed="undefined"></link>
    <text>Basic tabs</text>
  </heading>
  <paragraph>
    <text>A basic example with no frills.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    simple tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
  </tablist>
  <tabpanel>
    ITEM ONE
    <paragraph>
      <text>Item One</text>
    </paragraph>
  </tabpanel>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="3">
    Wrapped labels
    <link checked="undefined" pressed="undefined"></link>
    <text>Wrapped labels</text>
  </heading>
  <paragraph>
    <text>
      Long labels will automatically wrap on tabs. If the label is too long for
      the tab, it will overflow and the text will not be visible.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    wrapped label tabs example
    <tab selected="true">
      NEW ARRIVALS IN THE LONGEST TEXT OF NONFICTION
      <text>NEW ARRIVALS IN THE LONGEST TEXT OF NONFICTION</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
  </tablist>
  <tabpanel>
    NEW ARRIVALS IN THE LONGEST TEXT OF NONFICTION
    <paragraph>
      <text>Item One</text>
    </paragraph>
  </tabpanel>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="3">
    Disabled tab
    <link checked="undefined" pressed="undefined"></link>
    <text>Disabled tab</text>
  </heading>
  <paragraph>
    <text>A Tab can be disabled by setting disabled prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    disabled tabs example
    <tab>
      ACTIVE
      <text>ACTIVE</text>
    </tab>
    <tab disabled="true">
      DISABLED
      <text>DISABLED</text>
    </tab>
    <tab selected="true">
      ACTIVE
      <text>ACTIVE</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Paper square> <Tabs value={value}
    indicatorColor="primary" textColor="primary"
    onChange={handleChange} aria-label="disabled tabs
    example" > <Tab label="Active" /> <Tab
    label="Disabled" disabled /> <Tab label="Active"
    /> </Tabs> </Paper>
  </text>
  <heading level="2">
    Fixed tabs
    <link checked="undefined" pressed="undefined"></link>
    <text>Fixed tabs</text>
  </heading>
  <paragraph>
    <text>
      Fixed tabs should be used with a limited number of tabs and when
      consistent placement will aid muscle memory.
    </text>
  </paragraph>
  <heading level="3">
    Full width
    <link checked="undefined" pressed="undefined"></link>
    <text>Full width</text>
  </heading>
  <paragraph>
    <text>
      The variant="fullWidth" prop should be used for smaller views.
      This demo also uses
    </text>
    <link checked="undefined" pressed="undefined">
      react-swipeable-views
    </link>
    <text>
      to animate the Tab transition, and allowing tabs to be swiped on touch
      devices.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    full width tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
  </tablist>
  <tabpanel>
    ITEM ONE
    <paragraph>
      <text>Item One</text>
    </paragraph>
  </tabpanel>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="3">
    Centered
    <link checked="undefined" pressed="undefined"></link>
    <text>Centered</text>
  </heading>
  <paragraph>
    <text>The centered prop should be used for larger views.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Paper className={classes.root}> <Tabs
    value={value} onChange={handleChange}
    indicatorColor="primary" textColor="primary" centered
    > <Tab label="Item One" /> <Tab label="Item
    Two" /> <Tab label="Item Three" /> </Tabs>
    </Paper>
  </text>
  <heading level="2">
    Scrollable tabs
    <link checked="undefined" pressed="undefined"></link>
    <text>Scrollable tabs</text>
  </heading>
  <heading level="3">
    Automatic scroll buttons
    <link checked="undefined" pressed="undefined"></link>
    <text>Automatic scroll buttons</text>
  </heading>
  <paragraph>
    <text>
      By default, left and right scroll buttons are automatically presented on
      desktop and hidden on mobile. (based on viewport width)
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    scrollable auto tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
    <tab>
      ITEM FOUR
      <text>ITEM FOUR</text>
    </tab>
    <tab>
      ITEM FIVE
      <text>ITEM FIVE</text>
    </tab>
    <tab>
      ITEM SIX
      <text>ITEM SIX</text>
    </tab>
    <tab>
      ITEM SEVEN
      <text>ITEM SEVEN</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Tabs value={value} onChange={handleChange}
    variant="scrollable" scrollButtons="auto"
    aria-label="scrollable auto tabs example" > <Tab
    label="Item One" /> <Tab label="Item Two" />
    <Tab label="Item Three" /> <Tab label="Item
    Four" /> <Tab label="Item Five" /> <Tab
    label="Item Six" /> <Tab label="Item Seven" />
    </Tabs>
  </text>
  <heading level="3">
    Forced scroll buttons
    <link checked="undefined" pressed="undefined"></link>
    <text>Forced scroll buttons</text>
  </heading>
  <paragraph>
    <text>
      Left and right scroll buttons be presented (reserve space) regardless of
      the viewport width with scrollButtons={true}
      allowScrollButtonsMobile:
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    scrollable force tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
    <tab>
      ITEM FOUR
      <text>ITEM FOUR</text>
    </tab>
    <tab>
      ITEM FIVE
      <text>ITEM FIVE</text>
    </tab>
    <tab>
      ITEM SIX
      <text>ITEM SIX</text>
    </tab>
    <tab>
      ITEM SEVEN
      <text>ITEM SEVEN</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Tabs value={value} onChange={handleChange}
    variant="scrollable" scrollButtons allowScrollButtonsMobile
    aria-label="scrollable force tabs example" > <Tab
    label="Item One" /> <Tab label="Item Two" />
    <Tab label="Item Three" /> <Tab label="Item
    Four" /> <Tab label="Item Five" /> <Tab
    label="Item Six" /> <Tab label="Item Seven" />
    </Tabs>
  </text>
  <paragraph>
    <text>
      If you want to make sure the buttons are always visible, you should
      customize the opacity.
    </text>
  </paragraph>
  <text>.MuiTabs-scrollButtons.Mui-disabled { opacity: 0.3; }</text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    visible arrows tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
    <tab>
      ITEM FOUR
      <text>ITEM FOUR</text>
    </tab>
    <tab>
      ITEM FIVE
      <text>ITEM FIVE</text>
    </tab>
    <tab>
      ITEM SIX
      <text>ITEM SIX</text>
    </tab>
    <tab>
      ITEM SEVEN
      <text>ITEM SEVEN</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="3">
    Prevent scroll buttons
    <link checked="undefined" pressed="undefined"></link>
    <text>Prevent scroll buttons</text>
  </heading>
  <paragraph>
    <text>
      Left and right scroll buttons are never be presented with
      scrollButtons={false}. All scrolling must be initiated through
      user agent scrolling mechanisms (e.g. left/right swipe, shift-mousewheel,
      etc.)
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    scrollable prevent tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
    <tab>
      ITEM FOUR
      <text>ITEM FOUR</text>
    </tab>
    <tab>
      ITEM FIVE
      <text>ITEM FIVE</text>
    </tab>
    <tab>
      ITEM SIX
      <text>ITEM SIX</text>
    </tab>
    <tab>
      ITEM SEVEN
      <text>ITEM SEVEN</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Tabs value={value} onChange={handleChange}
    variant="scrollable" scrollButtons={false}
    aria-label="scrollable prevent tabs example" > <Tab
    label="Item One" /> <Tab label="Item Two" />
    <Tab label="Item Three" /> <Tab label="Item
    Four" /> <Tab label="Item Five" /> <Tab
    label="Item Six" /> <Tab label="Item Seven" />
    </Tabs>
  </text>
  <heading level="2">
    Customized tabs
    <link checked="undefined" pressed="undefined"></link>
    <text>Customized tabs</text>
  </heading>
  <paragraph>
    <text>
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    ant example
    <tab selected="true">
      Tab 1<text>Tab 1</text>
    </tab>
    <tab>
      Tab 2<text>Tab 2</text>
    </tab>
    <tab>
      Tab 3<text>Tab 3</text>
    </tab>
  </tablist>
  <paragraph></paragraph>
  <tablist>
    styled tabs example
    <tab selected="true">
      Workflows
      <text>Workflows</text>
    </tab>
    <tab>
      Datasets
      <text>Datasets</text>
    </tab>
    <tab>
      Connections
      <text>Connections</text>
    </tab>
  </tablist>
  <paragraph></paragraph>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <paragraph>
    <text>üé® If you are looking for inspiration, you can check</text>
    <link checked="undefined" pressed="undefined">
      MUI Treasury's customization examples
    </link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Vertical tabs
    <link checked="undefined" pressed="undefined"></link>
    <text>Vertical tabs</text>
  </heading>
  <paragraph>
    <text>
      To make vertical tabs instead of default horizontal ones, there is
      orientation="vertical":
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist orientation="vertical">
    Vertical tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
    <tab>
      ITEM FOUR
      <text>ITEM FOUR</text>
    </tab>
    <tab>
      ITEM FIVE
      <text>ITEM FIVE</text>
    </tab>
    <tab>
      ITEM SIX
      <text>ITEM SIX</text>
    </tab>
    <tab>
      ITEM SEVEN
      <text>ITEM SEVEN</text>
    </tab>
  </tablist>
  <tabpanel>
    ITEM ONE
    <paragraph>
      <text>Item One</text>
    </paragraph>
  </tabpanel>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <paragraph>
    <text>Note that you can restore the scrollbar with visibleScrollbar.</text>
  </paragraph>
  <heading level="2">
    Nav Tabs
    <link checked="undefined" pressed="undefined"></link>
    <text>Nav Tabs</text>
  </heading>
  <paragraph>
    <text>
      By default tabs use a button element, but you can provide your own custom
      tag or component. Here's an example of implementing tabbed
      navigation:
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    nav tabs example
    <tab selected="true">
      PAGE ONE
      <text>PAGE ONE</text>
    </tab>
    <tab>
      PAGE TWO
      <text>PAGE TWO</text>
    </tab>
    <tab>
      PAGE THREE
      <text>PAGE THREE</text>
    </tab>
  </tablist>
  <tabpanel>
    PAGE ONE
    <paragraph>
      <text>Page One</text>
    </paragraph>
  </tabpanel>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Icon Tabs
    <link checked="undefined" pressed="undefined"></link>
    <text>Icon Tabs</text>
  </heading>
  <paragraph>
    <text>Tab labels may be either all icons or all text.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    icon tabs example
    <tab selected="true">phone</tab>
    <tab>favorite</tab>
    <tab>person</tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Paper square className={classes.root}> <Tabs
    value={value} onChange={handleChange}
    variant="fullWidth" indicatorColor="primary"
    textColor="primary" aria-label="icon tabs example" >
    <Tab icon={<PhoneIcon />} aria-label="phone"
    /> <Tab icon={<FavoriteIcon />}
    aria-label="favorite" /> <Tab icon={<PersonPinIcon
    />} aria-label="person" /> </Tabs> </Paper>
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    icon label tabs example
    <tab selected="true">
      RECENTS
      <text>RECENTS</text>
    </tab>
    <tab>
      FAVORITES
      <text>FAVORITES</text>
    </tab>
    <tab>
      NEARBY
      <text>NEARBY</text>
    </tab>
  </tablist>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Paper square className={classes.root}> <Tabs
    value={value} onChange={handleChange}
    variant="fullWidth" indicatorColor="secondary"
    textColor="secondary" aria-label="icon label tabs
    example" > <Tab icon={<PhoneIcon />}
    label="RECENTS" /> <Tab icon={<FavoriteIcon
    />} label="FAVORITES" /> <Tab
    icon={<PersonPinIcon />} label="NEARBY" />
    </Tabs> </Paper>
  </text>
  <heading level="2">
    Accessibility
    <link checked="undefined" pressed="undefined"></link>
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(WAI-ARIA:</text>
    <link checked="undefined" pressed="undefined">
      https://www.w3.org/TR/wai-aria-practices/#tabpanel
    </link>
    <text>)</text>
  </paragraph>
  <paragraph>
    <text>
      The following steps are needed in order to provide necessary information
      for assistive technologies:
    </text>
  </paragraph>
  <list>
    <listitem>
      1. Label Tabs via aria-label or aria-labelledby .
      <statictext>1.</statictext>
      <text>Label Tabs via aria-label or aria-labelledby.</text>
    </listitem>
    <listitem>
      2. Tab s need to be connected to their corresponding
      [role="tabpanel"] by setting the correct id , aria-controls and
      aria-labelledby .<statictext>2.</statictext>
      <text>
        Tabs need to be connected to their corresponding
        [role="tabpanel"] by setting the correct id, aria-controls and
        aria-labelledby.
      </text>
    </listitem>
  </list>
  <paragraph>
    <text>
      An example for the current implementation can be found in the demos on
      this page. We've also published
    </text>
    <link checked="undefined" pressed="undefined">
      an experimental API
    </link>
    <text>in @material-ui/lab that does not require extra work.</text>
  </paragraph>
  <heading level="3">
    Keyboard navigation
    <link checked="undefined" pressed="undefined"></link>
    <text>Keyboard navigation</text>
  </heading>
  <paragraph>
    <text>
      The components implement keyboard navigation using the "manual
      activation" behavior. If you want to switch to the "selection
      automatically follows focus" behavior you have pass
      selectionFollowsFocus to the Tabs component. The WAI-ARIA authoring
      practices have a detailed guide on
    </text>
    <link checked="undefined" pressed="undefined">
      how to decide when to make selection automatically follow focus
    </link>
    <text>.</text>
  </paragraph>
  <heading level="4">
    Demo
    <text>Demo</text>
  </heading>
  <paragraph>
    <text>
      The following two demos only differ in their keyboard navigation behavior.
      Focus a tab and navigate with arrow keys to notice the difference.
    </text>
  </paragraph>
  <text>
    /* Tabs where selection follows focus */ <Tabs selectionFollowsFocus
    /> /* Tabs where each tab needs to be selected manually */ <Tabs />
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph>
    <text>Tabs where selection follows focus</text>
  </paragraph>
  <tablist>
    Tabs where selection follows focus
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
  </tablist>
  <paragraph>
    <text>Tabs where each tab needs to be selected manually</text>
  </paragraph>
  <tablist>
    Tabs where each tab needs to be selected manually
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
  </tablist>
  <tabpanel>
    ITEM ONE
    <paragraph>
      <text>Item One</text>
    </paragraph>
  </tabpanel>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Experimental API
    <link checked="undefined" pressed="undefined"></link>
    <text>Experimental API</text>
  </heading>
  <paragraph>
    <text>
      @material-ui/lab offers utility components that inject props to implement
      accessible tabs following
    </text>
    <link checked="undefined" pressed="undefined">
      WAI-ARIA authoring practices
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist>
    simple tabs example
    <tab selected="true">
      ITEM ONE
      <text>ITEM ONE</text>
    </tab>
    <tab>
      ITEM TWO
      <text>ITEM TWO</text>
    </tab>
    <tab>
      ITEM THREE
      <text>ITEM THREE</text>
    </tab>
  </tablist>
  <tabpanel>
    ITEM ONE
    <text>Item One</text>
  </tabpanel>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <TabContext value={value}> <AppBar
    position="static"> <TabList
    onChange={handleChange} aria-label="simple tabs
    example"> <Tab label="Item One" value="1"
    /> <Tab label="Item Two" value="2" /> <Tab
    label="Item Three" value="3" /> </TabList>
    </AppBar> <TabPanel value="1">Item
    One</TabPanel> <TabPanel value="2">Item
    Two</TabPanel> <TabPanel value="3">Item
    Three</TabPanel> </TabContext>
  </text>
  <heading level="2">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text>API</text>
  </heading>
  <list>
    <listitem>
      ‚Ä¢ <Tab />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <Tab />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <TabContext />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <TabContext />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <TabList />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <TabList />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <TabPanel />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <TabPanel />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <TabScrollButton />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <TabScrollButton />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <Tabs />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <Tabs />
      </link>
    </listitem>
  </list>
  <separator></separator>
  <link checked="undefined" pressed="undefined">
    Stepper
  </link>
  <link checked="undefined" pressed="undefined">
    Accordion
  </link>
</landmark>;

`;

exports[`firefox /components/text-fields/ 1`] = `
<landmark>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1">
    Text Field
    <text>Text Field</text>
  </heading>
  <paragraph>
    <text>Text fields let users enter and edit text.</text>
  </paragraph>
  <paragraph>
    <text>
      Text fields allow users to enter text into a UI. They typically appear in
      forms and dialogs.
    </text>
  </paragraph>
  <list>
    <listitem>
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Material Design
      <link checked="undefined" pressed="undefined">
        Material Design
      </link>
    </listitem>
    <listitem>
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem>
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2">
    TextField
    <link checked="undefined" pressed="undefined"></link>
    <text>TextField</text>
  </heading>
  <paragraph>
    <text>
      The TextField wrapper component is a complete form control including a
      label, input and help text.
    </text>
  </paragraph>
  <paragraph>
    <text>It supports standard, outlined and filled styling.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <label>
      Standard
      <text>Standard</text>
    </label>
    <statictext>¬†</statictext>
    <textbox>Standard</textbox>
    <label>
      Filled
      <text>Filled</text>
    </label>
    <statictext>¬†</statictext>
    <textbox>Filled</textbox>
    <label>
      Outlined
      <text>Outlined</text>
    </label>
    <textbox>Outlined</textbox>
  </form>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <form className={classes.root} noValidate
    autoComplete="off"> <TextField id="standard-basic"
    label="Standard" /> <TextField id="filled-basic"
    label="Filled" variant="filled" /> <TextField
    id="outlined-basic" label="Outlined"
    variant="outlined" /> </form>
  </text>
  <paragraph>
    <text>
      Note: The standard variant of the TextField is no longer documented in the
    </text>
    <link checked="undefined" pressed="undefined">
      Material Design guidelines
    </link>
    <text>(</text>
    <link checked="undefined" pressed="undefined">
      here's why
    </link>
    <text>), but Material-UI will continue to support it.</text>
  </paragraph>
  <heading level="2">
    Form props
    <link checked="undefined" pressed="undefined"></link>
    <text>Form props</text>
  </heading>
  <paragraph>
    <text>
      Standard form attributes are supported e.g. required, disabled, type, etc.
      as well as a helperText which is used to give context about a field‚Äôs
      input, such as how the input will be used.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <label>
      Required
      <text>Required</text>
    </label>
    <statictext>¬†</statictext>
    <textbox required="true" value="Hello World">
      Required
      <text>Hello World</text>
    </textbox>
    <label>
      Disabled
      <text>Disabled</text>
    </label>
    <statictext>¬†</statictext>
    <textbox disabled="true" value="Hello World">
      Disabled
      <text>Hello World</text>
    </textbox>
    <label>
      Password
      <text>Password</text>
    </label>
    <statictext>¬†</statictext>
    <textbox>Password</textbox>
    <label>
      Read Only
      <text>Read Only</text>
    </label>
    <statictext>¬†</statictext>
    <textbox readonly="true" value="Hello World">
      Read Only
      <text>Hello World</text>
    </textbox>
    <label>
      Number
      <text>Number</text>
    </label>
    <statictext>¬†</statictext>
    <spinbutton valuetext="">Number</spinbutton>
    <label>
      Search field
      <text>Search field</text>
    </label>
    <statictext>¬†</statictext>
    <textbox>Search field</textbox>
    <label>
      Helper text
      <text>Helper text</text>
    </label>
    <statictext>¬†</statictext>
    <textbox description="Some important text" value="Default Value">
      Helper text
      <text>Default Value</text>
    </textbox>
    <paragraph>
      <text>Some important text</text>
    </paragraph>
    <label>
      Required
      <text>Required</text>
    </label>
    <statictext>¬†</statictext>
    <textbox required="true" value="Hello World">
      Required
      <text>Hello World</text>
    </textbox>
    <label>
      Disabled
      <text>Disabled</text>
    </label>
    <statictext>¬†</statictext>
    <textbox disabled="true" value="Hello World">
      Disabled
      <text>Hello World</text>
    </textbox>
    <label>
      Password
      <text>Password</text>
    </label>
    <statictext>¬†</statictext>
    <textbox>Password</textbox>
    <label>
      Read Only
      <text>Read Only</text>
    </label>
    <statictext>¬†</statictext>
    <textbox readonly="true" value="Hello World">
      Read Only
      <text>Hello World</text>
    </textbox>
    <label>
      Number
      <text>Number</text>
    </label>
    <statictext>¬†</statictext>
    <spinbutton valuetext="">Number</spinbutton>
    <label>
      Search field
      <text>Search field</text>
    </label>
    <statictext>¬†</statictext>
    <textbox>Search field</textbox>
    <label>
      Helper text
      <text>Helper text</text>
    </label>
    <statictext>¬†</statictext>
    <textbox description="Some important text" value="Default Value">
      Helper text
      <text>Default Value</text>
    </textbox>
    <paragraph>
      <text>Some important text</text>
    </paragraph>
    <label>
      Required
      <text>Required</text>
    </label>
    <textbox required="true" value="Hello World">
      Required
      <text>Hello World</text>
    </textbox>
    <label>
      Disabled
      <text>Disabled</text>
    </label>
    <textbox disabled="true" value="Hello World">
      Disabled
      <text>Hello World</text>
    </textbox>
    <label>
      Password
      <text>Password</text>
    </label>
    <textbox>Password</textbox>
    <label>
      Read Only
      <text>Read Only</text>
    </label>
    <textbox readonly="true" value="Hello World">
      Read Only
      <text>Hello World</text>
    </textbox>
    <label>
      Number
      <text>Number</text>
    </label>
    <spinbutton valuetext="">Number</spinbutton>
    <label>
      Search field
      <text>Search field</text>
    </label>
    <textbox>Search field</textbox>
    <label>
      Helper text
      <text>Helper text</text>
    </label>
    <textbox description="Some important text" value="Default Value">
      Helper text
      <text>Default Value</text>
    </textbox>
    <paragraph>
      <text>Some important text</text>
    </paragraph>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Validation
    <link checked="undefined" pressed="undefined"></link>
    <text>Validation</text>
  </heading>
  <paragraph>
    <text>
      The error prop toggles the error state, the helperText prop can then be
      used to provide feedback to the user about the error.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <label>
      Error
      <text>Error</text>
    </label>
    <statictext>¬†</statictext>
    <textbox invalid="true" value="Hello World">
      Error
      <text>Hello World</text>
    </textbox>
    <label>
      Error
      <text>Error</text>
    </label>
    <statictext>¬†</statictext>
    <textbox description="Incorrect entry." invalid="true" value="Hello World">
      Error
      <text>Hello World</text>
    </textbox>
    <paragraph>
      <text>Incorrect entry.</text>
    </paragraph>
    <label>
      Error
      <text>Error</text>
    </label>
    <statictext>¬†</statictext>
    <textbox invalid="true" value="Hello World">
      Error
      <text>Hello World</text>
    </textbox>
    <label>
      Error
      <text>Error</text>
    </label>
    <statictext>¬†</statictext>
    <textbox description="Incorrect entry." invalid="true" value="Hello World">
      Error
      <text>Hello World</text>
    </textbox>
    <paragraph>
      <text>Incorrect entry.</text>
    </paragraph>
    <label>
      Error
      <text>Error</text>
    </label>
    <textbox invalid="true" value="Hello World">
      Error
      <text>Hello World</text>
    </textbox>
    <label>
      Error
      <text>Error</text>
    </label>
    <textbox description="Incorrect entry." invalid="true" value="Hello World">
      Error
      <text>Hello World</text>
    </textbox>
    <paragraph>
      <text>Incorrect entry.</text>
    </paragraph>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Multiline
    <link checked="undefined" pressed="undefined"></link>
    <text>Multiline</text>
  </heading>
  <paragraph>
    <text>The multiline prop transforms the text field into a</text>
    <link checked="undefined" pressed="undefined">
      <textarea>
    </link>
    <text>
      element. Unless the rows prop is set, the height of the text field
      dynamically matches its content (using
    </text>
    <link checked="undefined" pressed="undefined">
      TextareaAutosize
    </link>
    <text>). You can use the rowsMin and rowsMax props to bound it.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <label>
      Multiline
      <text>Multiline</text>
    </label>
    <statictext>¬†</statictext>
    <textbox multiline="true" value="Controlled">
      Multiline
      <text>Controlled</text>
    </textbox>
    <label>
      Multiline Placeholder
      <text>Multiline Placeholder</text>
    </label>
    <statictext>¬†</statictext>
    <textbox multiline="true">Multiline Placeholder</textbox>
    <label>
      Multiline
      <text>Multiline</text>
    </label>
    <statictext>¬†</statictext>
    <textbox multiline="true" value="Default Value">
      Multiline
      <text>Default Value</text>
    </textbox>
    <label>
      Multiline
      <text>Multiline</text>
    </label>
    <statictext>¬†</statictext>
    <textbox multiline="true" value="Controlled">
      Multiline
      <text>Controlled</text>
    </textbox>
    <label>
      Multiline Placeholder
      <text>Multiline Placeholder</text>
    </label>
    <statictext>¬†</statictext>
    <textbox multiline="true">Multiline Placeholder</textbox>
    <label>
      Multiline
      <text>Multiline</text>
    </label>
    <statictext>¬†</statictext>
    <textbox multiline="true" value="Default Value">
      Multiline
      <text>Default Value</text>
    </textbox>
    <label>
      Multiline
      <text>Multiline</text>
    </label>
    <textbox multiline="true" value="Controlled">
      Multiline
      <text>Controlled</text>
    </textbox>
    <label>
      Multiline Placeholder
      <text>Multiline Placeholder</text>
    </label>
    <textbox multiline="true">Multiline Placeholder</textbox>
    <label>
      Multiline
      <text>Multiline</text>
    </label>
    <textbox multiline="true" value="Default Value">
      Multiline
      <text>Default Value</text>
    </textbox>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Select
    <link checked="undefined" pressed="undefined"></link>
    <text>Select</text>
  </heading>
  <paragraph>
    <text>The select prop makes the text field use the</text>
    <link checked="undefined" pressed="undefined">
      Select
    </link>
    <text>component internally.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <label>
      Select
      <text>Select</text>
    </label>
    <statictext>¬†</statictext>
    <button haspopup="true">
      Select ‚Ç¨<text>‚Ç¨</text>
    </button>
    <paragraph>
      <text>Please select your currency</text>
    </paragraph>
    <label>
      Native select
      <text>Native select</text>
    </label>
    <statictext>¬†</statictext>
    <combobox
      description="Please select your currency"
      haspopup="true"
      value="‚Ç¨"
    >
      Native select
      <MenuListPopup>
        <menuitem>
          $<text>$</text>
        </menuitem>
        <menuitem selected="true">
          ‚Ç¨<text>‚Ç¨</text>
        </menuitem>
        <menuitem>
          ‡∏ø<text>‡∏ø</text>
        </menuitem>
        <menuitem>
          ¬•<text>¬•</text>
        </menuitem>
      </MenuListPopup>
    </combobox>
    <paragraph>
      <text>Please select your currency</text>
    </paragraph>
    <label>
      Select
      <text>Select</text>
    </label>
    <statictext>¬†</statictext>
    <button haspopup="true">
      Select ‚Ç¨<text>‚Ç¨</text>
    </button>
    <paragraph>
      <text>Please select your currency</text>
    </paragraph>
    <label>
      Native select
      <text>Native select</text>
    </label>
    <statictext>¬†</statictext>
    <combobox
      description="Please select your currency"
      haspopup="true"
      value="‚Ç¨"
    >
      Native select
      <MenuListPopup>
        <menuitem>
          $<text>$</text>
        </menuitem>
        <menuitem selected="true">
          ‚Ç¨<text>‚Ç¨</text>
        </menuitem>
        <menuitem>
          ‡∏ø<text>‡∏ø</text>
        </menuitem>
        <menuitem>
          ¬•<text>¬•</text>
        </menuitem>
      </MenuListPopup>
    </combobox>
    <paragraph>
      <text>Please select your currency</text>
    </paragraph>
    <label>
      Select
      <text>Select</text>
    </label>
    <button haspopup="true">
      Select ‚Ç¨<text>‚Ç¨</text>
    </button>
    <paragraph>
      <text>Please select your currency</text>
    </paragraph>
    <label>
      Native select
      <text>Native select</text>
    </label>
    <combobox
      description="Please select your currency"
      haspopup="true"
      value="‚Ç¨"
    >
      Native select
      <MenuListPopup>
        <menuitem>
          $<text>$</text>
        </menuitem>
        <menuitem selected="true">
          ‚Ç¨<text>‚Ç¨</text>
        </menuitem>
        <menuitem>
          ‡∏ø<text>‡∏ø</text>
        </menuitem>
        <menuitem>
          ¬•<text>¬•</text>
        </menuitem>
      </MenuListPopup>
    </combobox>
    <paragraph>
      <text>Please select your currency</text>
    </paragraph>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Icons
    <link checked="undefined" pressed="undefined"></link>
    <text>Icons</text>
  </heading>
  <paragraph>
    <text>There are multiple ways to display an icon with a text field.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    With a start adornment
    <text>With a start adornment</text>
  </label>
  <statictext>¬†</statictext>
  <textbox>With a start adornment</textbox>
  <label>
    TextField
    <text>TextField</text>
  </label>
  <statictext>¬†</statictext>
  <textbox>TextField</textbox>
  <label>
    With a grid
    <text>With a grid</text>
  </label>
  <statictext>¬†</statictext>
  <textbox>With a grid</textbox>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="3">
    Input Adornments
    <link checked="undefined" pressed="undefined"></link>
    <text>Input Adornments</text>
  </heading>
  <paragraph>
    <text>
      The main way is with an InputAdornment. This can be used to add a prefix,
      a suffix or an action to an input. For instance, you can use an icon
      button to hide or reveal the password.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    With normal TextField
    <text>With normal TextField</text>
  </label>
  <statictext>¬†</statictext>
  <paragraph>
    <text>Kg</text>
  </paragraph>
  <textbox>With normal TextField</textbox>
  <statictext>¬†</statictext>
  <textbox description="Weight">weight</textbox>
  <paragraph>
    <text>Kg</text>
  </paragraph>
  <paragraph>
    <text>Weight</text>
  </paragraph>
  <label>
    Password
    <text>Password</text>
  </label>
  <statictext>¬†</statictext>
  <textbox>Password</textbox>
  <button>toggle password visibility</button>
  <label>
    Amount
    <text>Amount</text>
  </label>
  <statictext>¬†</statictext>
  <paragraph>
    <text>$</text>
  </paragraph>
  <textbox>Amount</textbox>
  <label>
    With normal TextField
    <text>With normal TextField</text>
  </label>
  <statictext>¬†</statictext>
  <paragraph>
    <text>Kg</text>
  </paragraph>
  <textbox>With normal TextField</textbox>
  <statictext>¬†</statictext>
  <textbox description="Weight">weight</textbox>
  <paragraph>
    <text>Kg</text>
  </paragraph>
  <paragraph>
    <text>Weight</text>
  </paragraph>
  <label>
    Password
    <text>Password</text>
  </label>
  <statictext>¬†</statictext>
  <textbox>Password</textbox>
  <button>toggle password visibility</button>
  <label>
    Amount
    <text>Amount</text>
  </label>
  <statictext>¬†</statictext>
  <paragraph>
    <text>$</text>
  </paragraph>
  <textbox>Amount</textbox>
  <label>
    With normal TextField
    <text>With normal TextField</text>
  </label>
  <paragraph>
    <text>Kg</text>
  </paragraph>
  <textbox>With normal TextField</textbox>
  <textbox description="Weight">weight</textbox>
  <paragraph>
    <text>Kg</text>
  </paragraph>
  <paragraph>
    <text>Weight</text>
  </paragraph>
  <label>
    Password
    <text>Password</text>
  </label>
  <textbox>Password</textbox>
  <button>toggle password visibility</button>
  <label>
    Amount
    <text>Amount</text>
  </label>
  <paragraph>
    <text>$</text>
  </paragraph>
  <textbox>Amount</textbox>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Sizes
    <link checked="undefined" pressed="undefined"></link>
    <text>Sizes</text>
  </heading>
  <paragraph>
    <text>Fancy smaller inputs? Use the size prop.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <label>
      Size
      <text>Size</text>
    </label>
    <statictext>¬†</statictext>
    <textbox value="Small">
      Size
      <text>Small</text>
    </textbox>
    <label>
      Size
      <text>Size</text>
    </label>
    <statictext>¬†</statictext>
    <textbox value="Normal">
      Size
      <text>Normal</text>
    </textbox>
    <label>
      Size
      <text>Size</text>
    </label>
    <statictext>¬†</statictext>
    <textbox value="Small">
      Size
      <text>Small</text>
    </textbox>
    <label>
      Size
      <text>Size</text>
    </label>
    <statictext>¬†</statictext>
    <textbox value="Normal">
      Size
      <text>Normal</text>
    </textbox>
    <label>
      Size
      <text>Size</text>
    </label>
    <textbox value="Small">
      Size
      <text>Small</text>
    </textbox>
    <label>
      Size
      <text>Size</text>
    </label>
    <textbox value="Normal">
      Size
      <text>Normal</text>
    </textbox>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Layout
    <link checked="undefined" pressed="undefined"></link>
    <text>Layout</text>
  </heading>
  <paragraph>
    <text>
      margin prop can be used to alter the vertical spacing of inputs. Using
      none (default) will not apply margins to the FormControl, whereas dense
      and normal will. dense and normal alter other styles to meet the
      specification.
    </text>
  </paragraph>
  <paragraph>
    <text>
      fullWidth can be used to make the input take up the full width of its
      container.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Label
    <text>Label</text>
  </label>
  <statictext>¬†</statictext>
  <textbox description="Full width!">Label</textbox>
  <paragraph>
    <text>Full width!</text>
  </paragraph>
  <label>
    None
    <text>None</text>
  </label>
  <statictext>¬†</statictext>
  <textbox description="Some important text" value="Default Value">
    None
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <label>
    Dense
    <text>Dense</text>
  </label>
  <statictext>¬†</statictext>
  <textbox description="Some important text" value="Default Value">
    Dense
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <label>
    Normal
    <text>Normal</text>
  </label>
  <statictext>¬†</statictext>
  <textbox description="Some important text" value="Default Value">
    Normal
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <label>
    Label
    <text>Label</text>
  </label>
  <statictext>¬†</statictext>
  <textbox description="Full width!">Label</textbox>
  <paragraph>
    <text>Full width!</text>
  </paragraph>
  <label>
    None
    <text>None</text>
  </label>
  <statictext>¬†</statictext>
  <textbox description="Some important text" value="Default Value">
    None
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <label>
    Dense
    <text>Dense</text>
  </label>
  <statictext>¬†</statictext>
  <textbox description="Some important text" value="Default Value">
    Dense
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <label>
    Normal
    <text>Normal</text>
  </label>
  <statictext>¬†</statictext>
  <textbox description="Some important text" value="Default Value">
    Normal
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <label>
    Label
    <text>Label</text>
  </label>
  <textbox description="Full width!">Label</textbox>
  <paragraph>
    <text>Full width!</text>
  </paragraph>
  <label>
    None
    <text>None</text>
  </label>
  <textbox description="Some important text" value="Default Value">
    None
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <label>
    Dense
    <text>Dense</text>
  </label>
  <textbox description="Some important text" value="Default Value">
    Dense
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <label>
    Normal
    <text>Normal</text>
  </label>
  <textbox description="Some important text" value="Default Value">
    Normal
    <text>Default Value</text>
  </textbox>
  <paragraph>
    <text>Some important text</text>
  </paragraph>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Uncontrolled vs Controlled
    <link checked="undefined" pressed="undefined"></link>
    <text>Uncontrolled vs Controlled</text>
  </heading>
  <paragraph>
    <text>The component can be controlled or uncontrolled.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <label>
      Name
      <text>Name</text>
    </label>
    <statictext>¬†</statictext>
    <textbox value="Cat in the Hat">
      Name
      <text>Cat in the Hat</text>
    </textbox>
    <label>
      Uncontrolled
      <text>Uncontrolled</text>
    </label>
    <statictext>¬†</statictext>
    <textbox value="foo">
      Uncontrolled
      <text>foo</text>
    </textbox>
    <label>
      Name
      <text>Name</text>
    </label>
    <statictext>¬†</statictext>
    <textbox value="Cat in the Hat">
      Name
      <text>Cat in the Hat</text>
    </textbox>
    <label>
      Uncontrolled
      <text>Uncontrolled</text>
    </label>
    <statictext>¬†</statictext>
    <textbox value="foo">
      Uncontrolled
      <text>foo</text>
    </textbox>
    <label>
      Name
      <text>Name</text>
    </label>
    <textbox value="Cat in the Hat">
      Name
      <text>Cat in the Hat</text>
    </textbox>
    <label>
      Uncontrolled
      <text>Uncontrolled</text>
    </label>
    <textbox value="foo">
      Uncontrolled
      <text>foo</text>
    </textbox>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Components
    <link checked="undefined" pressed="undefined"></link>
    <text>Components</text>
  </heading>
  <paragraph>
    <text>TextField is composed of smaller components (</text>
    <link checked="undefined" pressed="undefined">
      FormControl
    </link>
    <text>,</text>
    <link checked="undefined" pressed="undefined">
      Input
    </link>
    <text>,</text>
    <link checked="undefined" pressed="undefined">
      FilledInput
    </link>
    <text>,</text>
    <link checked="undefined" pressed="undefined">
      InputLabel
    </link>
    <text>,</text>
    <link checked="undefined" pressed="undefined">
      OutlinedInput
    </link>
    <text>, and</text>
    <link checked="undefined" pressed="undefined">
      FormHelperText
    </link>
    <text>
      ) that you can leverage directly to significantly customize your form
      inputs.
    </text>
  </paragraph>
  <paragraph>
    <text>
      You might also have noticed that some native HTML input properties are
      missing from the TextField component. This is on purpose. The component
      takes care of the most used properties, then it's up to the user to
      use the underlying component shown in the following demo. Still, you can
      use inputProps (and InputProps, InputLabelProps properties) if you want to
      avoid some boilerplate.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <label>
      Name
      <text>Name</text>
    </label>
    <statictext>¬†</statictext>
    <textbox value="Composed TextField">
      Name
      <text>Composed TextField</text>
    </textbox>
    <label>
      Name
      <text>Name</text>
    </label>
    <statictext>¬†</statictext>
    <textbox
      description="Some important helper text"
      value="Composed TextField"
    >
      Name
      <text>Composed TextField</text>
    </textbox>
    <paragraph>
      <text>Some important helper text</text>
    </paragraph>
    <label>
      Name
      <text>Name</text>
    </label>
    <statictext>¬†</statictext>
    <textbox disabled="true" value="Composed TextField">
      Name
      <text>Composed TextField</text>
    </textbox>
    <paragraph>
      <text>Disabled</text>
    </paragraph>
    <label>
      Name
      <text>Name</text>
    </label>
    <statictext>¬†</statictext>
    <textbox description="Error" invalid="true" value="Composed TextField">
      Name
      <text>Composed TextField</text>
    </textbox>
    <paragraph>
      <text>Error</text>
    </paragraph>
    <label>
      Name
      <text>Name</text>
    </label>
    <textbox value="Composed TextField">
      Name
      <text>Composed TextField</text>
    </textbox>
    <label>
      Name
      <text>Name</text>
    </label>
    <statictext>¬†</statictext>
    <textbox value="Composed TextField">
      Name
      <text>Composed TextField</text>
    </textbox>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Inputs
    <link checked="undefined" pressed="undefined"></link>
    <text>Inputs</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <statictext>¬†</statictext>
    <textbox value="Hello world">
      description
      <text>Hello world</text>
    </textbox>
    <statictext>¬†</statictext>
    <textbox>description</textbox>
    <statictext>¬†</statictext>
    <textbox disabled="true" value="Disabled">
      description
      <text>Disabled</text>
    </textbox>
    <statictext>¬†</statictext>
    <textbox invalid="true" value="Error">
      description
      <text>Error</text>
    </textbox>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Color
    <link checked="undefined" pressed="undefined"></link>
    <text>Color</text>
  </heading>
  <paragraph>
    <text>
      The color prop changes the highlight color of the text field when focused.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <label>
      Standard secondary
      <text>Standard secondary</text>
    </label>
    <statictext>¬†</statictext>
    <textbox>Standard secondary</textbox>
    <label>
      Filled secondary
      <text>Filled secondary</text>
    </label>
    <statictext>¬†</statictext>
    <textbox>Filled secondary</textbox>
    <label>
      Outlined secondary
      <text>Outlined secondary</text>
    </label>
    <textbox>Outlined secondary</textbox>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Customized inputs
    <link checked="undefined" pressed="undefined"></link>
    <text>Customized inputs</text>
  </heading>
  <paragraph>
    <text>
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <label>
      Custom CSS
      <text>Custom CSS</text>
    </label>
    <statictext>¬†</statictext>
    <textbox>Custom CSS</textbox>
    <label>
      Custom CSS
      <text>Custom CSS</text>
    </label>
    <textbox>Custom CSS</textbox>
    <label>
      ThemeProvider
      <text>ThemeProvider</text>
    </label>
    <statictext>¬†</statictext>
    <textbox>ThemeProvider</textbox>
    <label>
      ThemeProvider
      <text>ThemeProvider</text>
    </label>
    <textbox>ThemeProvider</textbox>
    <label>
      Bootstrap
      <text>Bootstrap</text>
    </label>
    <textbox value="react-bootstrap">
      Bootstrap
      <text>react-bootstrap</text>
    </textbox>
    <label>
      Reddit
      <text>Reddit</text>
    </label>
    <textbox value="react-reddit">
      Reddit
      <text>react-reddit</text>
    </textbox>
    <textbox value="Naked input">
      naked
      <text>Naked input</text>
    </textbox>
    <label>
      CSS validation style
      <text>CSS validation style</text>
    </label>
    <textbox required="true" value="Success">
      CSS validation style
      <text>Success</text>
    </textbox>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <paragraph>
    <text>
      Customization does not stop at CSS, you can use composition to build
      custom components and give your app a unique feel. Below is an example
      using the
    </text>
    <link checked="undefined" pressed="undefined">
      InputBase
    </link>
    <text>component, inspired by Google Maps.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form>
    <button>menu</button>
    <textbox>search google maps</textbox>
    <button>search</button>
    <separator></separator>
    <button>directions</button>
  </form>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <paragraph>
    <text>üé® If you are looking for inspiration, you can check</text>
    <link checked="undefined" pressed="undefined">
      MUI Treasury's customization examples
    </link>
    <text>.</text>
  </paragraph>
  <heading level="2">
    Limitations
    <link checked="undefined" pressed="undefined"></link>
    <text>Limitations</text>
  </heading>
  <heading level="3">
    Shrink
    <link checked="undefined" pressed="undefined"></link>
    <text>Shrink</text>
  </heading>
  <paragraph>
    <text>
      The input label "shrink" state isn't always correct. The
      input label is supposed to shrink as soon as the input is displaying
      something. In some circumstances, we can't determine the
      "shrink" state (number input, datetime input, Stripe input). You
      might notice an overlap.
    </text>
  </paragraph>
  <paragraph>
    <img>shrink</img>
  </paragraph>
  <paragraph>
    <text>
      To workaround the issue, you can force the "shrink" state of the
      label.
    </text>
  </paragraph>
  <text>
    <TextField InputLabelProps={{ shrink: true }} />
  </text>
  <paragraph>
    <text>or</text>
  </paragraph>
  <text><InputLabel shrink>Count</InputLabel></text>
  <heading level="3">
    Floating label
    <link checked="undefined" pressed="undefined"></link>
    <text>Floating label</text>
  </heading>
  <paragraph>
    <text>
      The floating label is absolutely positioned, it won't impact the
      layout of the page. You need to make sure that the input is larger than
      the label to display correctly.
    </text>
  </paragraph>
  <heading level="3">
    type="number"
    <link checked="undefined" pressed="undefined"></link>
    <text>type="number"</text>
  </heading>
  <paragraph>
    <text>
      Inputs of type="number" have potential usability issues:
    </text>
  </paragraph>
  <list>
    <listitem>
      ‚Ä¢ Allowing certain non-numeric characters ('e', '+',
      '-', '.') and silently discarding others
      <statictext>‚Ä¢</statictext>
      <text>
        Allowing certain non-numeric characters ('e', '+',
        '-', '.') and silently discarding others
      </text>
    </listitem>
    <listitem>
      ‚Ä¢ The functionality of scrolling to increment/decrement the number can
      cause accidental and hard-to-notice changes
      <statictext>‚Ä¢</statictext>
      <text>
        The functionality of scrolling to increment/decrement the number can
        cause accidental and hard-to-notice changes
      </text>
    </listitem>
  </list>
  <paragraph>
    <text>and more - see</text>
    <link checked="undefined" pressed="undefined">
      this article
    </link>
    <text>
      by the GOV.UK Design System team for a more detailed explanation.
    </text>
  </paragraph>
  <paragraph>
    <text>
      For number validation, one viable alternative is to use the default input
      type="text" with the pattern attribute, for example:
    </text>
  </paragraph>
  <text>
    <TextField inputProps={{ inputMode: 'numeric',
    pattern: '[0-9]*' }} />
  </text>
  <paragraph>
    <text>In the future, we might provide a</text>
    <link checked="undefined" pressed="undefined">
      number input component
    </link>
    <text>.</text>
  </paragraph>
  <heading level="3">
    Helper text
    <link checked="undefined" pressed="undefined"></link>
    <text>Helper text</text>
  </heading>
  <paragraph>
    <text>
      The helper text prop affects the height of the text field. If two text
      fields are placed side by side, one with a helper text and one without,
      they will have different heights. For example:
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Name
    <text>Name</text>
  </label>
  <statictext>¬†</statictext>
  <textbox></textbox>
  <paragraph>
    <text>Please enter your name</text>
  </paragraph>
  <label>
    Name
    <text>Name</text>
  </label>
  <statictext>¬†</statictext>
  <textbox></textbox>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <TextField helperText="Please enter your name"
    label="Name" /> <TextField label="Name" />
  </text>
  <paragraph>
    <text>
      This can be fixed by passing a space character to the helperText prop:
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Name
    <text>Name</text>
  </label>
  <statictext>¬†</statictext>
  <textbox></textbox>
  <paragraph>
    <text>Please enter your name</text>
  </paragraph>
  <label>
    Name
    <text>Name</text>
  </label>
  <statictext>¬†</statictext>
  <textbox></textbox>
  <paragraph>
    <text>‚Äã</text>
  </paragraph>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <TextField helperText="Please enter your name"
    label="Name" /> <TextField helperText=" "
    label="Name" />
  </text>
  <heading level="2">
    Integration with 3rd party input libraries
    <link checked="undefined" pressed="undefined"></link>
    <text>Integration with 3rd party input libraries</text>
  </heading>
  <paragraph>
    <text>
      You can use third-party libraries to format an input. You have to provide
      a custom implementation of the <input> element with the
      inputComponent property.
    </text>
  </paragraph>
  <paragraph>
    <text>The following demo uses the</text>
    <link checked="undefined" pressed="undefined">
      react-text-mask
    </link>
    <text>and</text>
    <link checked="undefined" pressed="undefined">
      react-number-format
    </link>
    <text>libraries. The same concept could be applied to</text>
    <link checked="undefined" pressed="undefined">
      e.g. react-stripe-element
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    react-text-mask
    <text>react-text-mask</text>
  </label>
  <statictext>¬†</statictext>
  <textbox value="(1‚ÄÄ‚ÄÄ) ‚ÄÄ‚ÄÄ‚ÄÄ-‚ÄÄ‚ÄÄ‚ÄÄ‚ÄÄ">
    react-text-mask
    <text>(1‚ÄÄ‚ÄÄ) ‚ÄÄ‚ÄÄ‚ÄÄ-‚ÄÄ‚ÄÄ‚ÄÄ‚ÄÄ</text>
  </textbox>
  <label>
    react-number-format
    <text>react-number-format</text>
  </label>
  <statictext>¬†</statictext>
  <textbox value="$1,320">
    react-number-format
    <text>$1,320</text>
  </textbox>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <paragraph>
    <text>
      The provided input component should handle the inputRef property. The
      property should be called with a value that implements the following
      interface:
    </text>
  </paragraph>
  <text>
    interface InputElement { focus(): void; value?: string; }function
    MyInputComponent(props) { const { component: Component, inputRef,
    ...other } = props; // implement \`InputElement\` interface
    React.useImperativeHandle(inputRef, () => ({ focus: () => {
    // logic to focus the rendered component from 3rd party belongs here },
    // hiding the value e.g. react-stripe-elements })); // \`Component\` will
    be your \`SomeThirdPartyComponent\` from below return <Component
    {...other} />; } // usage <TextField
    InputProps={{ inputComponent: MyInputComponent, inputProps: {
    component: SomeThirdPartyComponent, }, }} />;
  </text>
  <heading level="2">
    Accessibility
    <link checked="undefined" pressed="undefined"></link>
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>
      In order for the text field to be accessible, the input should be linked
      to the label and the helper text. The underlying DOM nodes should have
      this structure:
    </text>
  </paragraph>
  <text>
    <div class="form-control"> <label
    for="my-input">Email address</label> <input
    id="my-input" aria-describedby="my-helper-text" />
    <span id="my-helper-text">We'll never share your
    email.</span> </div>
  </text>
  <list>
    <listitem>
      ‚Ä¢ If you are using the TextField component, you just have to provide a
      unique id .<statictext>‚Ä¢</statictext>
      <text>
        If you are using the TextField component, you just have to provide a
        unique id.
      </text>
    </listitem>
    <listitem>
      ‚Ä¢ If you are composing the component:
      <statictext>‚Ä¢</statictext>
      <text>If you are composing the component:</text>
    </listitem>
  </list>
  <text>
    <FormControl> <InputLabel htmlFor="my-input">Email
    address</InputLabel> <Input id="my-input"
    aria-describedby="my-helper-text" /> <FormHelperText
    id="my-helper-text"> We'll never share your email.
    </FormHelperText> </FormControl>
  </text>
  <heading level="2">
    Complementary projects
    <link checked="undefined" pressed="undefined"></link>
    <text>Complementary projects</text>
  </heading>
  <paragraph>
    <text>
      For more advanced use cases you might be able to take advantage of:
    </text>
  </paragraph>
  <list>
    <listitem>
      ‚Ä¢ react-hook-form : React hook for form validation.
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        react-hook-form
      </link>
      <text>: React hook for form validation.</text>
    </listitem>
    <listitem>
      ‚Ä¢ formik-material-ui : Bindings for using Material-UI with formik .
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        formik-material-ui
      </link>
      <text>: Bindings for using Material-UI with</text>
      <link checked="undefined" pressed="undefined">
        formik
      </link>
      <text>.</text>
    </listitem>
    <listitem>
      ‚Ä¢ redux-form-material-ui : Bindings for using Material-UI with Redux Form
      .<statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        redux-form-material-ui
      </link>
      <text>: Bindings for using Material-UI with</text>
      <link checked="undefined" pressed="undefined">
        Redux Form
      </link>
      <text>.</text>
    </listitem>
    <listitem>
      ‚Ä¢ mui-rff : Bindings for using Material-UI with React Final Form .
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        mui-rff
      </link>
      <text>: Bindings for using Material-UI with</text>
      <link checked="undefined" pressed="undefined">
        React Final Form
      </link>
      <text>.</text>
    </listitem>
  </list>
  <heading level="2">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text>API</text>
  </heading>
  <list>
    <listitem>
      ‚Ä¢ <FilledInput />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <FilledInput />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <FormControl />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <FormControl />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <FormHelperText />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <FormHelperText />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <Input />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <Input />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <InputAdornment />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <InputAdornment />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <InputBase />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <InputBase />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <InputLabel />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <InputLabel />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <OutlinedInput />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <OutlinedInput />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <TextField />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <TextField />
      </link>
    </listitem>
  </list>
  <separator></separator>
  <link checked="undefined" pressed="undefined">
    Switch
  </link>
  <link checked="undefined" pressed="undefined">
    Transfer List
  </link>
</landmark>;

`;

exports[`firefox /components/tooltips/ 1`] = `
<landmark>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1">
    Tooltip
    <text>Tooltip</text>
  </heading>
  <paragraph>
    <text>
      Tooltips display informative text when users hover over, focus on, or tap
      an element.
    </text>
  </paragraph>
  <paragraph>
    <text>
      When activated, Tooltips display a text label identifying an element, such
      as a description of its function.
    </text>
  </paragraph>
  <list>
    <listitem>
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem>
      WAI-ARIA
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
      </link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Material Design
      <link checked="undefined" pressed="undefined">
        Material Design
      </link>
    </listitem>
    <listitem>
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem>
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2">
    Basic tooltip
    <link checked="undefined" pressed="undefined"></link>
    <text>Basic tooltip</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>delete</button>
  <button>add</button>
  <button>add</button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Tooltip title="Delete"> <IconButton
    aria-label="delete"> <DeleteIcon /> </IconButton>
    </Tooltip> <Tooltip title="Add"
    aria-label="add"> <Fab color="primary"
    className={classes.fab}> <AddIcon /> </Fab>
    </Tooltip> <Tooltip title="Add"
    aria-label="add"> <Fab color="secondary"
    className={classes.absolute}> <AddIcon /> </Fab>
    </Tooltip>
  </text>
  <heading level="2">
    Positioned Tooltips
    <link checked="undefined" pressed="undefined"></link>
    <text>Positioned Tooltips</text>
  </heading>
  <paragraph>
    <text>
      The Tooltip has 12 placements choice. They don‚Äôt have directional arrows;
      instead, they rely on motion emanating from the source to convey
      direction.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>TOP-START</text>
  </button>
  <button>
    Add
    <text>TOP</text>
  </button>
  <button>
    Add
    <text>TOP-END</text>
  </button>
  <button>
    Add
    <text>LEFT-START</text>
  </button>
  <whitespace></whitespace>
  <button>
    Add
    <text>LEFT</text>
  </button>
  <whitespace></whitespace>
  <button>
    Add
    <text>LEFT-END</text>
  </button>
  <button>
    Add
    <text>RIGHT-START</text>
  </button>
  <button>
    Add
    <text>RIGHT</text>
  </button>
  <button>
    Add
    <text>RIGHT-END</text>
  </button>
  <button>
    Add
    <text>BOTTOM-START</text>
  </button>
  <button>
    Add
    <text>BOTTOM</text>
  </button>
  <button>
    Add
    <text>BOTTOM-END</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Customized tooltips
    <link checked="undefined" pressed="undefined"></link>
    <text>Customized tooltips</text>
  </heading>
  <paragraph>
    <text>
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>LIGHT</text>
  </button>
  <button>
    Add
    <text>BOOTSTRAP</text>
  </button>
  <button>
    HTML
    <text>HTML</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Arrow Tooltips
    <link checked="undefined" pressed="undefined"></link>
    <text>Arrow Tooltips</text>
  </heading>
  <paragraph>
    <text>
      You can use the arrow prop to give your tooltip an arrow indicating which
      element it refers to.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>ARROW</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Tooltip title="Add" arrow>
    <Button>Arrow</Button> </Tooltip>
  </text>
  <heading level="2">
    Custom child element
    <link checked="undefined" pressed="undefined"></link>
    <text>Custom child element</text>
  </heading>
  <paragraph>
    <text>
      The tooltip needs to apply DOM event listeners to its child element. If
      the child is a custom React element, you need to make sure that it spreads
      its props to the underlying DOM element.
    </text>
  </paragraph>
  <text>
    const MyComponent = React.forwardRef(function MyComponent(props, ref) {
    // Spread the props to the underlying DOM element. return <div
    {...props} ref={ref}>Bin</div> }); // ...
    <Tooltip title="Delete"> <MyComponent>
    </Tooltip>
  </text>
  <paragraph>
    <text>You can find a similar concept in the</text>
    <link checked="undefined" pressed="undefined">
      wrapping components
    </link>
    <text>guide.</text>
  </paragraph>
  <heading level="2">
    Triggers
    <link checked="undefined" pressed="undefined"></link>
    <text>Triggers</text>
  </heading>
  <paragraph>
    <text>
      You can define the types of events that cause a tooltip to show.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>HOVER OR TOUCH</text>
  </button>
  <button>
    Add
    <text>FOCUS OR TOUCH</text>
  </button>
  <button>
    Add
    <text>HOVER</text>
  </button>
  <button>
    Add
    <text>CLICK</text>
  </button>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Controlled Tooltips
    <link checked="undefined" pressed="undefined"></link>
    <text>Controlled Tooltips</text>
  </heading>
  <paragraph>
    <text>
      You can use the open, onOpen and onClose props to control the behavior of
      the tooltip.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>CONTROLLED</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Tooltip open={open} onClose={handleClose}
    onOpen={handleOpen} title="Add">
    <Button>Controlled</Button> </Tooltip>
  </text>
  <heading level="2">
    Variable Width
    <link checked="undefined" pressed="undefined"></link>
    <text>Variable Width</text>
  </heading>
  <paragraph>
    <text>The Tooltip wraps long text by default to make it readable.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Aliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est,
    vel aliquam tellus. Praesent non nunc mollis, fermentum neque at, semper
    arcu. Nullam eget est sed sem iaculis gravida eget vitae justo.
    <text>DEFAULT WIDTH [300PX]</text>
  </button>
  <button>
    Aliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est,
    vel aliquam tellus. Praesent non nunc mollis, fermentum neque at, semper
    arcu. Nullam eget est sed sem iaculis gravida eget vitae justo.
    <text>CUSTOM WIDTH [500PX]</text>
  </button>
  <button>
    Aliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est,
    vel aliquam tellus. Praesent non nunc mollis, fermentum neque at, semper
    arcu. Nullam eget est sed sem iaculis gravida eget vitae justo.
    <text>NO WRAPPING</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Tooltip title={longText}> <Button
    className={classes.button}>Default Width [300px]</Button>
    </Tooltip> <Tooltip title={longText} classes={{
    tooltip: classes.customWidth }}> <Button
    className={classes.button}>Custom Width [500px]</Button>
    </Tooltip> <Tooltip title={longText} classes={{
    tooltip: classes.noMaxWidth }}> <Button
    className={classes.button}>No wrapping</Button>
    </Tooltip>
  </text>
  <heading level="2">
    Interactive
    <link checked="undefined" pressed="undefined"></link>
    <text>Interactive</text>
  </heading>
  <paragraph>
    <text>Tooltips are interactive by default (to pass</text>
    <link checked="undefined" pressed="undefined">
      WCAG 2.1 success criterion 1.4.13
    </link>
    <text>
      ). It won't close when the user hovers over the tooltip before the
      leaveDelay is expired. You can disable this behavior (thus failing the
      success criterion which is required to reach level AA) by passing
      disableInteractive.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>NOT INTERACTIVE</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Tooltip title="Add" disableInteractive> <Button>Not
    interactive</Button> </Tooltip>
  </text>
  <heading level="2">
    Disabled Elements
    <link checked="undefined" pressed="undefined"></link>
    <text>Disabled Elements</text>
  </heading>
  <paragraph>
    <text>
      By default disabled elements like <button> do not trigger user
      interactions so a Tooltip will not activate on normal events like hover.
      To accommodate disabled elements, add a simple wrapper element, such as a
      span.
    </text>
  </paragraph>
  <blockquote>
    <paragraph>
      <text>
        ‚ö†Ô∏è In order to work with Safari, you need at least one display block or
        flex item below the tooltip wrapper.
      </text>
    </paragraph>
  </blockquote>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button disabled="true">
    A DISABLED BUTTON
    <text>A DISABLED BUTTON</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Tooltip title="You don't have permission to do this">
    <span> <Button disabled>A Disabled Button</Button>
    </span> </Tooltip>
  </text>
  <blockquote>
    <paragraph>
      <text>
        If you're not wrapping a Material-UI component that inherits from
        ButtonBase, for instance, a native <button> element, you should
        also add the CSS property pointer-events: none; to your element when
        disabled:
      </text>
    </paragraph>
  </blockquote>
  <text>
    <Tooltip title="You don't have permission to do this">
    <span> <button disabled={disabled} style={disabled ?
    { pointerEvents: 'none' } : {}} > A
    disabled button </button> </span> </Tooltip>
  </text>
  <heading level="2">
    Transitions
    <link checked="undefined" pressed="undefined"></link>
    <text>Transitions</text>
  </heading>
  <paragraph>
    <text>Use a different transition.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>GROW</text>
  </button>
  <button>
    Add
    <text>FADE</text>
  </button>
  <button>
    Add
    <text>ZOOM</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Tooltip title="Add"> <Button>Grow</Button>
    </Tooltip> <Tooltip TransitionComponent={Fade}
    TransitionProps={{ timeout: 600 }} title="Add"
    > <Button>Fade</Button> </Tooltip> <Tooltip
    TransitionComponent={Zoom} title="Add">
    <Button>Zoom</Button> </Tooltip>
  </text>
  <heading level="2">
    Follow cursor
    <link checked="undefined" pressed="undefined"></link>
    <text>Follow cursor</text>
  </heading>
  <paragraph>
    <text>
      You can enable the tooltip to follow the cursor by setting
      followCursor={true}.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Disabled Action</text>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Tooltip title="You don't have permission to do this"
    followCursor> <Box bgcolor="text.disabled"
    color="background.paper" p={2}> Disabled Action
    </Box> </Tooltip>
  </text>
  <heading level="2">
    Faked reference object
    <link checked="undefined" pressed="undefined"></link>
    <text>Faked reference object</text>
  </heading>
  <paragraph>
    <text>
      In the event you need to implement a custom placement, you can use the
      anchorEl prop: The value of the anchorEl prop can be a reference to a fake
      DOM element. You need to create an object shaped like the
    </text>
    <link checked="undefined" pressed="undefined">
      ReferenceObject
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text>Hover</text>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Showing and hiding
    <link checked="undefined" pressed="undefined"></link>
    <text>Showing and hiding</text>
  </heading>
  <paragraph>
    <text>
      The tooltip is normally shown immediately when the user's mouse
      hovers over the element, and hides immediately when the user's mouse
      leaves. A delay in showing or hiding the tooltip can be added through the
      enterDelay and leaveDelay props, as shown in the Controlled Tooltips demo
      above.
    </text>
  </paragraph>
  <paragraph>
    <text>
      On mobile, the tooltip is displayed when the user longpresses the element
      and hides after a delay of 1500ms. You can disable this feature with the
      disableTouchListener prop.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    Add
    <text>[500MS, 200MS]</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Tooltip title="Add" enterDelay={500}
    leaveDelay={200}> <Button>[500ms, 200ms]</Button>
    </Tooltip>
  </text>
  <heading level="2">
    Accessibility
    <link checked="undefined" pressed="undefined"></link>
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(WAI-ARIA:</text>
    <link checked="undefined" pressed="undefined">
      https://www.w3.org/TR/wai-aria-practices/#tooltip
    </link>
    <text>)</text>
  </paragraph>
  <paragraph>
    <text>
      By default, the tooltip only labels its child element. This is notably
      different from title which can either label or describe its child
      depending on whether the child already has a label. For example, in:
    </text>
  </paragraph>
  <text>
    <button title="some more information">A
    button</button>
  </text>
  <paragraph>
    <text>
      the title acts as an accessible description. If you want the tooltip to
      act as an accessible description you can pass describeChild. Note that you
      shouldn't use describeChild if the tooltip provides the only visual
      label. Otherwise, the child would have no accessible name and the tooltip
      would violate
    </text>
    <link checked="undefined" pressed="undefined">
      success criterion 2.5.3 in WCAG 2.1
    </link>
    <text>.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>Delete</button>
  <button description="Does not add if it already exists.">
    ADD
    <text>ADD</text>
  </button>
  <toolbar>
    demo source
    <button>Show the full source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <text>
    <Tooltip title="Delete"> <IconButton> <DeleteIcon
    /> </IconButton> </Tooltip> <Tooltip describeChild
    title="Does not add if it already exists.">
    <Button>Add</Button> </Tooltip>
  </text>
  <heading level="2">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text>API</text>
  </heading>
  <list>
    <listitem>
      ‚Ä¢ <Tooltip />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <Tooltip />
      </link>
    </listitem>
  </list>
  <separator></separator>
  <link checked="undefined" pressed="undefined">
    Table
  </link>
  <link checked="undefined" pressed="undefined">
    Typography
  </link>
</landmark>;

`;

exports[`firefox /components/transfer-list 1`] = `
<landmark>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1">
    Transfer List
    <text>Transfer List</text>
  </heading>
  <paragraph>
    <text>
      A transfer list (or "shuttle") enables the user to move one or
      more list items between lists.
    </text>
  </paragraph>
  <heading level="2">
    Simple Transfer List
    <link checked="undefined" pressed="undefined"></link>
    <text>Simple Transfer List</text>
  </heading>
  <paragraph>
    <text>
      For completeness, this example includes buttons for "move all",
      but not every transfer list needs these.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <list>
    <listitem>
      List item 1<checkbox>List item 1</checkbox>
      <text>List item 1</text>
    </listitem>
    <listitem>
      List item 2<checkbox>List item 2</checkbox>
      <text>List item 2</text>
    </listitem>
    <listitem>
      List item 3<checkbox>List item 3</checkbox>
      <text>List item 3</text>
    </listitem>
    <listitem>
      List item 4<checkbox>List item 4</checkbox>
      <text>List item 4</text>
    </listitem>
    <listitem></listitem>
  </list>
  <button>
    move all right
    <text>‚â´</text>
  </button>
  <button disabled="true">
    move selected right
    <text>></text>
  </button>
  <button disabled="true">
    move selected left
    <text><</text>
  </button>
  <button>
    move all left
    <text>‚â™</text>
  </button>
  <list>
    <listitem>
      List item 5<checkbox>List item 5</checkbox>
      <text>List item 5</text>
    </listitem>
    <listitem>
      List item 6<checkbox>List item 6</checkbox>
      <text>List item 6</text>
    </listitem>
    <listitem>
      List item 7<checkbox>List item 7</checkbox>
      <text>List item 7</text>
    </listitem>
    <listitem>
      List item 8<checkbox>List item 8</checkbox>
      <text>List item 8</text>
    </listitem>
    <listitem></listitem>
  </list>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Enhanced Transfer List
    <link checked="undefined" pressed="undefined"></link>
    <text>Enhanced Transfer List</text>
  </heading>
  <paragraph>
    <text>
      This example exchanges the "move all" buttons for a "select
      all / select none" checkbox, and adds a counter.
    </text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox>all items selected</checkbox>
  <text>Choices0/4 selected</text>
  <separator></separator>
  <list>
    <listitem>
      List item 1<checkbox>List item 1</checkbox>
      <text>List item 1</text>
    </listitem>
    <listitem>
      List item 2<checkbox>List item 2</checkbox>
      <text>List item 2</text>
    </listitem>
    <listitem>
      List item 3<checkbox>List item 3</checkbox>
      <text>List item 3</text>
    </listitem>
    <listitem>
      List item 4<checkbox>List item 4</checkbox>
      <text>List item 4</text>
    </listitem>
    <listitem></listitem>
  </list>
  <button disabled="true">
    move selected right
    <text>></text>
  </button>
  <button disabled="true">
    move selected left
    <text><</text>
  </button>
  <checkbox>all items selected</checkbox>
  <text>Chosen0/4 selected</text>
  <separator></separator>
  <list>
    <listitem>
      List item 5<checkbox>List item 5</checkbox>
      <text>List item 5</text>
    </listitem>
    <listitem>
      List item 6<checkbox>List item 6</checkbox>
      <text>List item 6</text>
    </listitem>
    <listitem>
      List item 7<checkbox>List item 7</checkbox>
      <text>List item 7</text>
    </listitem>
    <listitem>
      List item 8<checkbox>List item 8</checkbox>
      <text>List item 8</text>
    </listitem>
    <listitem></listitem>
  </list>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text>API</text>
  </heading>
  <list>
    <listitem>
      ‚Ä¢ <Checkbox />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <Checkbox />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <List />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <List />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <ListItem />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <ListItem />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <Switch />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <Switch />
      </link>
    </listitem>
  </list>
  <separator></separator>
  <link checked="undefined" pressed="undefined">
    Text Field
  </link>
  <link checked="undefined" pressed="undefined">
    Toggle Button
  </link>
</landmark>;

`;

exports[`firefox /components/tree-view/ 1`] = `
<landmark>
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1">
    Tree View
    <text>Tree View</text>
  </heading>
  <paragraph>
    <text>A tree view widget presents a hierarchical list.</text>
  </paragraph>
  <paragraph>
    <text>
      Tree views can be used to represent a file system navigator displaying
      folders and files, an item representing a folder can be expanded to reveal
      the contents of the folder, which may be files, folders, or both.
    </text>
  </paragraph>
  <list>
    <listitem>
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem>
      WAI-ARIA
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
      </link>
    </listitem>
    <listitem>
      Scroll down to 'Exports Analysis' for a more detailed report.
      <link checked="undefined" pressed="undefined">
        Scroll down to 'Exports Analysis' for a more detailed report.
      </link>
    </listitem>
    <listitem>
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem>
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2">
    Basic tree view
    <link checked="undefined" pressed="undefined"></link>
    <text>Basic tree view</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    file system navigator
    <treeitem level="1">
      Applications
      <text>Applications</text>
    </treeitem>
    <treeitem level="1">
      Documents
      <text>Documents</text>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Multi-selection
    <link checked="undefined" pressed="undefined"></link>
    <text>Multi-selection</text>
  </heading>
  <paragraph>
    <text>Tree views also support multi-selection.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree multiselectable="true">
    multi-select
    <treeitem level="1">
      Applications
      <text>Applications</text>
    </treeitem>
    <treeitem level="1">
      Documents
      <text>Documents</text>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Controlled tree view
    <link checked="undefined" pressed="undefined"></link>
    <text>Controlled tree view</text>
  </heading>
  <paragraph>
    <text>The tree view also offers a controlled API.</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button>
    EXPAND ALL
    <text>EXPAND ALL</text>
  </button>
  <button>
    SELECT ALL
    <text>SELECT ALL</text>
  </button>
  <tree multiselectable="true">
    controlled
    <treeitem level="1">
      Applications
      <text>Applications</text>
    </treeitem>
    <treeitem level="1">
      Documents
      <text>Documents</text>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Rich object
    <link checked="undefined" pressed="undefined"></link>
    <text>Rich object</text>
  </heading>
  <paragraph>
    <text>
      While the TreeView/TreeItem component API maximizes flexibility, an extra
      step is needed to handle a rich object.
    </text>
  </paragraph>
  <paragraph>
    <text>
      Let's consider a data variable with the following shape, recursion
      can be used to handle it.
    </text>
  </paragraph>
  <text>
    const data = { id: 'root', name: 'Parent',
    children: [ { id: '1', name: 'Child - 1', },
    // ‚Ä¶ ], };
  </text>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    rich object
    <treeitem expanded="true" level="1">
      Parent
      <text>Parent</text>
      <group>
        <treeitem level="2">
          Child - 1<text>Child - 1</text>
        </treeitem>
        <treeitem level="2">
          Child - 3<text>Child - 3</text>
        </treeitem>
      </group>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    ContentComponent prop
    <link checked="undefined" pressed="undefined"></link>
    <text>ContentComponent prop</text>
  </heading>
  <paragraph>
    <text>
      You can use the ContentComponent prop and the useTreeItem hook to further
      customize the behavior of the TreeItem.
    </text>
  </paragraph>
  <paragraph>
    <text>Such as limiting expansion to clicking the icon:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    icon expansion
    <treeitem level="1">
      Applications
      <text>Applications</text>
    </treeitem>
    <treeitem level="1">
      Documents
      <text>Documents</text>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <paragraph>
    <text>Or increasing the width of the state indicator:</text>
  </paragraph>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    icon expansion
    <treeitem level="1">
      Applications
      <text>Applications</text>
    </treeitem>
    <treeitem level="1">
      Documents
      <text>Documents</text>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Customized tree view
    <link checked="undefined" pressed="undefined"></link>
    <text>Customized tree view</text>
  </heading>
  <heading level="3">
    Custom icons, border and animation
    <link checked="undefined" pressed="undefined"></link>
    <text>Custom icons, border and animation</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    customized
    <treeitem expanded="true" level="1">
      Main
      <text>Main</text>
      <group>
        <treeitem level="2">
          Hello
          <text>Hello</text>
        </treeitem>
        <treeitem level="2">
          Subtree with children
          <text>Subtree with children</text>
        </treeitem>
        <treeitem level="2">
          World
          <text>World</text>
        </treeitem>
        <treeitem level="2">
          Something something
          <text>Something something</text>
        </treeitem>
      </group>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="3">
    Gmail clone
    <link checked="undefined" pressed="undefined"></link>
    <text>Gmail clone</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree>
    gmail
    <treeitem level="1">
      All Mail
      <paragraph>
        <text>All Mail</text>
      </paragraph>
    </treeitem>
    <treeitem level="1">
      Trash
      <paragraph>
        <text>Trash</text>
      </paragraph>
    </treeitem>
    <treeitem expanded="true" level="1">
      Categories
      <paragraph>
        <text>Categories</text>
      </paragraph>
      <group>
        <treeitem level="2">
          Social 90
          <paragraph>
            <text>Social</text>
          </paragraph>
          <text>90</text>
        </treeitem>
        <treeitem level="2">
          Updates 2,294
          <paragraph>
            <text>Updates</text>
          </paragraph>
          <text>2,294</text>
        </treeitem>
        <treeitem level="2">
          Forums 3,566
          <paragraph>
            <text>Forums</text>
          </paragraph>
          <text>3,566</text>
        </treeitem>
        <treeitem level="2">
          Promotions 733
          <paragraph>
            <text>Promotions</text>
          </paragraph>
          <text>733</text>
        </treeitem>
      </group>
    </treeitem>
    <treeitem level="1">
      History
      <paragraph>
        <text>History</text>
      </paragraph>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <heading level="2">
    Disabled tree items
    <link checked="undefined" pressed="undefined"></link>
    <text>Disabled tree items</text>
  </heading>
  <button>
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label>
    Focus disabled items
    <checkbox>Focus disabled items</checkbox>
    <text>Focus disabled items</text>
  </label>
  <tree multiselectable="true">
    disabled items
    <treeitem level="1">
      One
      <text>One</text>
    </treeitem>
    <treeitem disabled="true" level="1">
      Five
      <text>Five</text>
    </treeitem>
    <treeitem level="1">
      Seven
      <text>Seven</text>
    </treeitem>
  </tree>
  <toolbar>
    demo source
    <button>Show the source</button>
    <button>Edit in CodeSandbox</button>
    <button>Copy the source</button>
    <button>Reset focus to test keyboard navigation</button>
    <button>Reset demo</button>
    <buttonmenu haspopup="true"></buttonmenu>
  </toolbar>
  <paragraph>
    <text>
      The behavior of disabled tree items depends on the disabledItemsFocusable
      prop.
    </text>
  </paragraph>
  <paragraph>
    <text>If it is false:</text>
  </paragraph>
  <list>
    <listitem>
      ‚Ä¢ Arrow keys will not focus disabled items and, the next non-disabled item
      will be focused.
      <statictext>‚Ä¢</statictext>
      <text>
        Arrow keys will not focus disabled items and, the next non-disabled item
        will be focused.
      </text>
    </listitem>
    <listitem>
      ‚Ä¢ Typing the first character of a disabled item's label will not
      focus the item.
      <statictext>‚Ä¢</statictext>
      <text>
        Typing the first character of a disabled item's label will not
        focus the item.
      </text>
    </listitem>
    <listitem>
      ‚Ä¢ Mouse or keyboard interaction will not expand/collapse disabled items.
      <statictext>‚Ä¢</statictext>
      <text>
        Mouse or keyboard interaction will not expand/collapse disabled items.
      </text>
    </listitem>
    <listitem>
      ‚Ä¢ Mouse or keyboard interaction will not select disabled items.
      <statictext>‚Ä¢</statictext>
      <text>Mouse or keyboard interaction will not select disabled items.</text>
    </listitem>
    <listitem>
      ‚Ä¢ Shift + arrow keys will skip disabled items and, the next non-disabled
      item will be selected.
      <statictext>‚Ä¢</statictext>
      <text>
        Shift + arrow keys will skip disabled items and, the next non-disabled
        item will be selected.
      </text>
    </listitem>
    <listitem>
      ‚Ä¢ Programmatic focus will not focus disabled items.
      <statictext>‚Ä¢</statictext>
      <text>Programmatic focus will not focus disabled items.</text>
    </listitem>
  </list>
  <paragraph>
    <text>If it is true:</text>
  </paragraph>
  <list>
    <listitem>
      ‚Ä¢ Arrow keys will focus disabled items.
      <statictext>‚Ä¢</statictext>
      <text>Arrow keys will focus disabled items.</text>
    </listitem>
    <listitem>
      ‚Ä¢ Typing the first character of a disabled item's label will focus
      the item.
      <statictext>‚Ä¢</statictext>
      <text>
        Typing the first character of a disabled item's label will focus
        the item.
      </text>
    </listitem>
    <listitem>
      ‚Ä¢ Mouse or keyboard interaction will not expand/collapse disabled items.
      <statictext>‚Ä¢</statictext>
      <text>
        Mouse or keyboard interaction will not expand/collapse disabled items.
      </text>
    </listitem>
    <listitem>
      ‚Ä¢ Mouse or keyboard interaction will not select disabled items.
      <statictext>‚Ä¢</statictext>
      <text>Mouse or keyboard interaction will not select disabled items.</text>
    </listitem>
    <listitem>
      ‚Ä¢ Shift + arrow keys will not skip disabled items but, the disabled item
      will not be selected.
      <statictext>‚Ä¢</statictext>
      <text>
        Shift + arrow keys will not skip disabled items but, the disabled item
        will not be selected.
      </text>
    </listitem>
    <listitem>
      ‚Ä¢ Programmatic focus will focus disabled items.
      <statictext>‚Ä¢</statictext>
      <text>Programmatic focus will focus disabled items.</text>
    </listitem>
  </list>
  <heading level="2">
    Accessibility
    <link checked="undefined" pressed="undefined"></link>
    <text>Accessibility</text>
  </heading>
  <paragraph>
    <text>(WAI-ARIA:</text>
    <link checked="undefined" pressed="undefined">
      https://www.w3.org/TR/wai-aria-practices/#TreeView
    </link>
    <text>)</text>
  </paragraph>
  <paragraph>
    <text>The component follows the WAI-ARIA authoring practices.</text>
  </paragraph>
  <paragraph>
    <text>
      To have an accessible tree view you must use aria-labelledby or aria-label
      to reference or provide a label on the TreeView, otherwise screen readers
      will announce it as "tree", making it hard to understand the
      context of a specific tree item.
    </text>
  </paragraph>
  <heading level="2">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text>API</text>
  </heading>
  <list>
    <listitem>
      ‚Ä¢ <TreeItem />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <TreeItem />
      </link>
    </listitem>
    <listitem>
      ‚Ä¢ <TreeView />
      <statictext>‚Ä¢</statictext>
      <link checked="undefined" pressed="undefined">
        <TreeView />
      </link>
    </listitem>
  </list>
  <separator></separator>
  <link checked="undefined" pressed="undefined">
    Trap Focus
  </link>
  <link checked="undefined" pressed="undefined">
    Accordion
  </link>
</landmark>;

`;
