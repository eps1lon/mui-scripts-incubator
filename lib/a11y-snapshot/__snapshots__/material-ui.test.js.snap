// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`chromium / 1`] = `
<WebArea value="undefined" checked="undefined" pressed="undefined">
  Material-UI: A popular React UI framework
  <link checked="undefined" pressed="undefined">
    Skip to content
  </link>
  <banner value="undefined" checked="undefined" pressed="undefined">
    <button value="undefined" checked="undefined" pressed="undefined">
      Open main navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
    <searchbox value="undefined" checked="undefined" pressed="undefined">
      Search
    </searchbox>
    <combobox
      autocomplete="list"
      haspopup="listbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Search
      <text value="undefined" checked="undefined" pressed="undefined">
        Search…
      </text>
    </combobox>
    <Pre value="undefined" checked="undefined" pressed="undefined"></Pre>
    <combobox
      description="Change language"
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Change language
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        ENGLISH
      </text>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
    <combobox
      description="Toggle notifications panel"
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Toggle notifications panel
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
    <link
      description="Edit website colors"
      checked="undefined"
      pressed="undefined"
    >
      Edit website colors
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </link>
    <link
      description="GitHub repository"
      checked="undefined"
      pressed="undefined"
    >
      GitHub repository
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </link>
    <button
      description="Toggle light/dark theme"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Toggle light/dark theme
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Toggle right-to-left/left-to-right"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Toggle right-to-left/left-to-right
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
  </banner>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    Main navigation
  </navigation>
  <main value="undefined" checked="undefined" pressed="undefined">
    <heading
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      MATERIAL-UI
      <text value="undefined" checked="undefined" pressed="undefined">
        MATERIAL-UI
      </text>
    </heading>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        React components for faster and simpler web development. Build your own
        design system, or start with Material Design.
      </text>
    </paragraph>
    <link checked="undefined" pressed="undefined">
      GET STARTED
      <text value="undefined" checked="undefined" pressed="undefined">
        GET STARTED
      </text>
    </link>
    <link checked="undefined" pressed="undefined">
      Star
    </link>
    <link checked="undefined" pressed="undefined">
      Follow
    </link>
    <link checked="undefined" pressed="undefined">
      Get Professional Support
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      random sponsor
    </text>
    <link checked="undefined" pressed="undefined">
      a random quick word
    </link>
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
    <heading
      level="2"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Installation
      <text value="undefined" checked="undefined" pressed="undefined">
        Installation
      </text>
    </heading>
    <text value="undefined" checked="undefined" pressed="undefined">
      Install Material-UI's source files via npm. We take care of injecting
      the CSS needed.
    </text>
    <Pre value="undefined" checked="undefined" pressed="undefined">
      <code value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          $ npm install @material-ui/core@next
        </text>
      </code>
    </Pre>
    <link checked="undefined" pressed="undefined">
      or use a CDN.
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Load the default Roboto font.
    </text>
    <Pre value="undefined" checked="undefined" pressed="undefined">
      <code value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          <linkrel="stylesheet"href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"/>
        </text>
      </code>
    </Pre>
    <separator
      orientation="horizontal"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <link checked="undefined" pressed="undefined">
      READ INSTALLATION DOCS
      <text value="undefined" checked="undefined" pressed="undefined">
        READ INSTALLATION DOCS
      </text>
    </link>
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
    <heading
      level="2"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Usage
      <text value="undefined" checked="undefined" pressed="undefined">
        Usage
      </text>
    </heading>
    <text value="undefined" checked="undefined" pressed="undefined">
      Material-UI components work without any additional setup, and don't
      pollute the global scope.
    </text>
    <Pre value="undefined" checked="undefined" pressed="undefined">
      <code value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          import*asReactfrom'react';import{Button}from'@material-ui/core';functionApp(){return<Button>Hello
          World</Button>;}
        </text>
      </code>
    </Pre>
    <separator
      orientation="horizontal"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <link checked="undefined" pressed="undefined">
      EXPLORE THE DOCS
      <text value="undefined" checked="undefined" pressed="undefined">
        EXPLORE THE DOCS
      </text>
    </link>
    <heading
      level="2"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Premium themes
      <text value="undefined" checked="undefined" pressed="undefined">
        Premium themes
      </text>
    </heading>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Take your project to the next level with premium themes from our store –
        all built on Material-UI.
      </text>
    </paragraph>
    <link checked="undefined" pressed="undefined">
      Browse themes
      <img value="undefined" checked="undefined" pressed="undefined">
        Browse themes
      </img>
    </link>
    <link checked="undefined" pressed="undefined">
      BROWSE THEMES
      <text value="undefined" checked="undefined" pressed="undefined">
        BROWSE THEMES
      </text>
    </link>
    <separator
      orientation="horizontal"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <heading
      level="2"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Material-UI's sponsors
      <Anchor
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></Anchor>
      <text value="undefined" checked="undefined" pressed="undefined">
        Material-UI's sponsors
      </text>
    </heading>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        The continued development and maintenance of Material-UI is made
        possible by these generous sponsors:
      </text>
    </paragraph>
    <heading
      level="3"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Diamond 💎
      <Anchor
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></Anchor>
      <text value="undefined" checked="undefined" pressed="undefined">
        Diamond 💎
      </text>
    </heading>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <link checked="undefined" pressed="undefined">
        octopus
        <img
          description="Repeatable, reliable deployments"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          octopus
        </img>
      </link>
      <link checked="undefined" pressed="undefined">
        doit-intl
        <img
          description="Management Platform for Google Cloud and AWS"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          doit-intl
        </img>
      </link>
    </paragraph>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        1/3 slots available
      </text>
    </paragraph>
    <heading
      level="3"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Gold 🏆
      <Anchor
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></Anchor>
      <text value="undefined" checked="undefined" pressed="undefined">
        Gold 🏆
      </text>
    </heading>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <link checked="undefined" pressed="undefined">
        tidelift
        <img
          description="Enterprise-ready open source software"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          tidelift
        </img>
      </link>
      <link checked="undefined" pressed="undefined">
        bitsrc
        <img
          description="The fastest way to share code"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          bitsrc
        </img>
      </link>
    </paragraph>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <link checked="undefined" pressed="undefined">
        call-em-all
        <img
          description="Mass Text Messaging & Automated Calling"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          call-em-all
        </img>
      </link>
      <link checked="undefined" pressed="undefined">
        bitsrc
        <img value="undefined" checked="undefined" pressed="undefined">
          bitsrc
        </img>
      </link>
    </paragraph>
    <heading
      level="3"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      There are more!
      <Anchor
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></Anchor>
      <text value="undefined" checked="undefined" pressed="undefined">
        There are more!
      </text>
    </heading>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        See the full list of
      </text>
      <link checked="undefined" pressed="undefined">
        our sponsors
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        , and learn how you can contribute to the future of Material-UI.
      </text>
    </paragraph>
    <separator
      orientation="horizontal"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <heading
      level="2"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Praise for Material-UI
      <text value="undefined" checked="undefined" pressed="undefined">
        Praise for Material-UI
      </text>
    </heading>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Here's what some of our users are saying.
      </text>
    </paragraph>
    <link checked="undefined" pressed="undefined">
      a random quote about Material-UI
    </link>
    <link checked="undefined" pressed="undefined">
      a random quote about Material-UI
    </link>
    <link checked="undefined" pressed="undefined">
      a random quote about Material-UI
    </link>
    <separator
      orientation="horizontal"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <heading
      level="2"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Who's using Material-UI?
      <text value="undefined" checked="undefined" pressed="undefined">
        Who's using Material-UI?
      </text>
    </heading>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Join these and other great organisations!
      </text>
    </paragraph>
    <img value="undefined" checked="undefined" pressed="undefined">
      NASA
    </img>
    <img value="undefined" checked="undefined" pressed="undefined">
      Walmart Labs
    </img>
    <img value="undefined" checked="undefined" pressed="undefined">
      Capgemini
    </img>
    <img value="undefined" checked="undefined" pressed="undefined">
      Uniqlo
    </img>
    <img value="undefined" checked="undefined" pressed="undefined">
      Bethesda
    </img>
    <img value="undefined" checked="undefined" pressed="undefined">
      J.P. Morgan
    </img>
    <img value="undefined" checked="undefined" pressed="undefined">
      Shutterstock
    </img>
    <img value="undefined" checked="undefined" pressed="undefined">
      Netflix
    </img>
    <img value="undefined" checked="undefined" pressed="undefined">
      Coursera
    </img>
    <img value="undefined" checked="undefined" pressed="undefined">
      Amazon
    </img>
    <img value="undefined" checked="undefined" pressed="undefined">
      Unity
    </img>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Are you using Material-UI?
      </text>
    </paragraph>
    <link checked="undefined" pressed="undefined">
      LET US KNOW!
      <text value="undefined" checked="undefined" pressed="undefined">
        LET US KNOW!
      </text>
    </link>
  </main>
  <separator
    orientation="horizontal"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></separator>
  <contentinfo value="undefined" checked="undefined" pressed="undefined">
    <link checked="undefined" pressed="undefined">
      Material-UI
    </link>
    <heading
      level="2"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Community
      <text value="undefined" checked="undefined" pressed="undefined">
        Community
      </text>
    </heading>
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <link checked="undefined" pressed="undefined">
          GitHub
        </link>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <link checked="undefined" pressed="undefined">
          Twitter
        </link>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <link checked="undefined" pressed="undefined">
          StackOverflow
        </link>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <link checked="undefined" pressed="undefined">
          Team
        </link>
      </listitem>
    </list>
    <heading
      level="2"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Resources
      <text value="undefined" checked="undefined" pressed="undefined">
        Resources
      </text>
    </heading>
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <link checked="undefined" pressed="undefined">
          Support
        </link>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <link checked="undefined" pressed="undefined">
          Blog
        </link>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <link checked="undefined" pressed="undefined">
          Material Icons
        </link>
      </listitem>
    </list>
    <heading
      level="2"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Company
      <text value="undefined" checked="undefined" pressed="undefined">
        Company
      </text>
    </heading>
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <link checked="undefined" pressed="undefined">
          About
        </link>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <link checked="undefined" pressed="undefined">
          Contact Us
        </link>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <link checked="undefined" pressed="undefined">
          Jobs
        </link>
      </listitem>
    </list>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Currently
      </text>
      <link checked="undefined" pressed="undefined">
        v5.0.0-alpha.11. View versions page.
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        . Released under the
      </text>
      <link checked="undefined" pressed="undefined">
        MIT License
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        .Copyright ©2020Material-UI.
      </text>
    </paragraph>
  </contentinfo>
  <link checked="undefined" pressed="undefined">
    Material-UI
  </link>
  <link checked="undefined" pressed="undefined">
    v5.0.0-alpha.11
  </link>
  <separator
    orientation="horizontal"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></separator>
  <text value="undefined" checked="undefined" pressed="undefined">
    Diamond Sponsors
  </text>
  <link checked="undefined" pressed="undefined">
    <img
      description="Repeatable, reliable deployments"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      octopus
    </img>
  </link>
  <link checked="undefined" pressed="undefined">
    <img
      description="Management Platform for Google Cloud and AWS"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      doit-intl
    </img>
  </link>
  <link checked="undefined" pressed="undefined">
    Diamond Sponsors
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </link>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <button value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Getting Started
        </text>
      </button>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <button value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Components
        </text>
      </button>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <button value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Component API
        </text>
      </button>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <button value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles
        </text>
      </button>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <button value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          System
        </text>
      </button>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <button value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Customization
        </text>
      </button>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <button value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Guides
        </text>
      </button>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Premium themes
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <button value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Discover More
        </text>
      </button>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Versions
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Blog
        </text>
      </link>
    </listitem>
  </list>
</WebArea>;

`;

exports[`chromium /api/button/ 1`] = `
<main value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text value="undefined" checked="undefined" pressed="undefined">
      EDIT THIS PAGE
    </text>
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Button API
    <text value="undefined" checked="undefined" pressed="undefined">
      Button API
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The API documentation of the Button React component. Learn more about the
      props and the CSS customization points.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Import
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Import
    </text>
  </heading>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can learn more about the difference by
    </text>
    <link checked="undefined" pressed="undefined">
      reading this guide
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Component name
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Component name
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      name can be used for providing
    </text>
    <link checked="undefined" pressed="undefined">
      default props
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      or
    </text>
    <link checked="undefined" pressed="undefined">
      style overrides
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      at the theme level.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Props
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Props
    </text>
  </heading>
  <table value="undefined" checked="undefined" pressed="undefined">
    <row value="undefined" checked="undefined" pressed="undefined">
      <columnheader value="undefined" checked="undefined" pressed="undefined">
        Name
        <text value="undefined" checked="undefined" pressed="undefined">
          Name
        </text>
      </columnheader>
      <columnheader value="undefined" checked="undefined" pressed="undefined">
        Type
        <text value="undefined" checked="undefined" pressed="undefined">
          Type
        </text>
      </columnheader>
      <columnheader value="undefined" checked="undefined" pressed="undefined">
        Default
        <text value="undefined" checked="undefined" pressed="undefined">
          Default
        </text>
      </columnheader>
      <columnheader value="undefined" checked="undefined" pressed="undefined">
        Description
        <text value="undefined" checked="undefined" pressed="undefined">
          Description
        </text>
      </columnheader>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        children
        <text value="undefined" checked="undefined" pressed="undefined">
          children
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        node
        <text value="undefined" checked="undefined" pressed="undefined">
          node
        </text>
      </gridcell>
      <gridcell
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        The content of the button.
        <text value="undefined" checked="undefined" pressed="undefined">
          The content of the button.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        classes
        <text value="undefined" checked="undefined" pressed="undefined">
          classes
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        object
        <text value="undefined" checked="undefined" pressed="undefined">
          object
        </text>
      </gridcell>
      <gridcell
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Override or extend the styles applied to the component. See CSS API
        below for more details.
        <text value="undefined" checked="undefined" pressed="undefined">
          Override or extend the styles applied to the component. See
        </text>
        <link checked="undefined" pressed="undefined">
          CSS API
        </link>
        <text value="undefined" checked="undefined" pressed="undefined">
          below for more details.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        color
        <text value="undefined" checked="undefined" pressed="undefined">
          color
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        'inherit' | 'primary' | 'secondary'
        <text value="undefined" checked="undefined" pressed="undefined">
          'inherit'
        </text>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <text value="undefined" checked="undefined" pressed="undefined">
          | 'primary'
        </text>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <text value="undefined" checked="undefined" pressed="undefined">
          | 'secondary'
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        'primary'
        <text value="undefined" checked="undefined" pressed="undefined">
          'primary'
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        The color of the component. It supports those theme colors that make
        sense for this component.
        <text value="undefined" checked="undefined" pressed="undefined">
          The color of the component. It supports those theme colors that make
          sense for this component.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        component
        <text value="undefined" checked="undefined" pressed="undefined">
          component
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        elementType
        <text value="undefined" checked="undefined" pressed="undefined">
          elementType
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        'button'
        <text value="undefined" checked="undefined" pressed="undefined">
          'button'
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        The component used for the root node. Either a string to use a HTML
        element or a component.
        <text value="undefined" checked="undefined" pressed="undefined">
          The component used for the root node. Either a string to use a HTML
          element or a component.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        disabled
        <text value="undefined" checked="undefined" pressed="undefined">
          disabled
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        bool
        <text value="undefined" checked="undefined" pressed="undefined">
          bool
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        false
        <text value="undefined" checked="undefined" pressed="undefined">
          false
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        If true, the button will be disabled.
        <text value="undefined" checked="undefined" pressed="undefined">
          If
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          , the button will be disabled.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        disableElevation
        <text value="undefined" checked="undefined" pressed="undefined">
          disableElevation
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        bool
        <text value="undefined" checked="undefined" pressed="undefined">
          bool
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        false
        <text value="undefined" checked="undefined" pressed="undefined">
          false
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        If true, no elevation is used.
        <text value="undefined" checked="undefined" pressed="undefined">
          If
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          , no elevation is used.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        disableFocusRipple
        <text value="undefined" checked="undefined" pressed="undefined">
          disableFocusRipple
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        bool
        <text value="undefined" checked="undefined" pressed="undefined">
          bool
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        false
        <text value="undefined" checked="undefined" pressed="undefined">
          false
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        If true, the keyboard focus ripple will be disabled.
        <text value="undefined" checked="undefined" pressed="undefined">
          If
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          , the keyboard focus ripple will be disabled.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        disableRipple
        <text value="undefined" checked="undefined" pressed="undefined">
          disableRipple
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        bool
        <text value="undefined" checked="undefined" pressed="undefined">
          bool
        </text>
      </gridcell>
      <gridcell
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        If true, the ripple effect will be disabled. ⚠️ Without a ripple there
        is no styling for :focus-visible by default. Be sure to highlight the
        element by applying separate styles with the focusVisibleClassName.
        <text value="undefined" checked="undefined" pressed="undefined">
          If
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          , the ripple effect will be disabled.
        </text>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <text value="undefined" checked="undefined" pressed="undefined">
          ⚠️ Without a ripple there is no styling for :focus-visible by default.
          Be sure to highlight the element by applying separate styles with the
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        endIcon
        <text value="undefined" checked="undefined" pressed="undefined">
          endIcon
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        node
        <text value="undefined" checked="undefined" pressed="undefined">
          node
        </text>
      </gridcell>
      <gridcell
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Element placed after the children.
        <text value="undefined" checked="undefined" pressed="undefined">
          Element placed after the children.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        fullWidth
        <text value="undefined" checked="undefined" pressed="undefined">
          fullWidth
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        bool
        <text value="undefined" checked="undefined" pressed="undefined">
          bool
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        false
        <text value="undefined" checked="undefined" pressed="undefined">
          false
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        If true, the button will take up the full width of its container.
        <text value="undefined" checked="undefined" pressed="undefined">
          If
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          , the button will take up the full width of its container.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        href
        <text value="undefined" checked="undefined" pressed="undefined">
          href
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        string
        <text value="undefined" checked="undefined" pressed="undefined">
          string
        </text>
      </gridcell>
      <gridcell
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        The URL to link to when the button is clicked. If defined, an a element
        will be used as the root node.
        <text value="undefined" checked="undefined" pressed="undefined">
          The URL to link to when the button is clicked. If defined, an
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          element will be used as the root node.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        size
        <text value="undefined" checked="undefined" pressed="undefined">
          size
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        'large' | 'medium' | 'small'
        <text value="undefined" checked="undefined" pressed="undefined">
          'large'
        </text>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <text value="undefined" checked="undefined" pressed="undefined">
          | 'medium'
        </text>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <text value="undefined" checked="undefined" pressed="undefined">
          | 'small'
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        'medium'
        <text value="undefined" checked="undefined" pressed="undefined">
          'medium'
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        The size of the button. small is equivalent to the dense button styling.
        <text value="undefined" checked="undefined" pressed="undefined">
          The size of the button.
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          is equivalent to the dense button styling.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        startIcon
        <text value="undefined" checked="undefined" pressed="undefined">
          startIcon
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        node
        <text value="undefined" checked="undefined" pressed="undefined">
          node
        </text>
      </gridcell>
      <gridcell
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Element placed before the children.
        <text value="undefined" checked="undefined" pressed="undefined">
          Element placed before the children.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        variant
        <text value="undefined" checked="undefined" pressed="undefined">
          variant
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        'contained' | 'outlined' | 'text' | string
        <text value="undefined" checked="undefined" pressed="undefined">
          'contained'
        </text>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <text value="undefined" checked="undefined" pressed="undefined">
          | 'outlined'
        </text>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <text value="undefined" checked="undefined" pressed="undefined">
          | 'text'
        </text>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <text value="undefined" checked="undefined" pressed="undefined">
          | string
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        'text'
        <text value="undefined" checked="undefined" pressed="undefined">
          'text'
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        The variant to use.
        <text value="undefined" checked="undefined" pressed="undefined">
          The variant to use.
        </text>
      </gridcell>
    </row>
  </table>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      is forwarded to the root element.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Any other props supplied will be provided to the root element (
    </text>
    <link checked="undefined" pressed="undefined">
      ButtonBase
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      ).
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    CSS
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      CSS
    </text>
  </heading>
  <table value="undefined" checked="undefined" pressed="undefined">
    <row value="undefined" checked="undefined" pressed="undefined">
      <columnheader value="undefined" checked="undefined" pressed="undefined">
        Rule name
        <text value="undefined" checked="undefined" pressed="undefined">
          Rule name
        </text>
      </columnheader>
      <columnheader value="undefined" checked="undefined" pressed="undefined">
        Global class
        <text value="undefined" checked="undefined" pressed="undefined">
          Global class
        </text>
      </columnheader>
      <columnheader value="undefined" checked="undefined" pressed="undefined">
        Description
        <text value="undefined" checked="undefined" pressed="undefined">
          Description
        </text>
      </columnheader>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        root
        <text value="undefined" checked="undefined" pressed="undefined">
          root
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiButton-root
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-root
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the root element.
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        label
        <text value="undefined" checked="undefined" pressed="undefined">
          label
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiButton-label
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-label
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the span element that wraps the children.
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the span element that wraps the children.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        text
        <text value="undefined" checked="undefined" pressed="undefined">
          text
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiButton-text
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-text
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the root element if variant="text".
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        textPrimary
        <text value="undefined" checked="undefined" pressed="undefined">
          textPrimary
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiButton-textPrimary
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-textPrimary
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the root element if variant="text" and
        color="primary".
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          and
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        textSecondary
        <text value="undefined" checked="undefined" pressed="undefined">
          textSecondary
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiButton-textSecondary
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-textSecondary
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the root element if variant="text" and
        color="secondary".
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          and
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        outlined
        <text value="undefined" checked="undefined" pressed="undefined">
          outlined
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiButton-outlined
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-outlined
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the root element if variant="outlined".
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        outlinedPrimary
        <text value="undefined" checked="undefined" pressed="undefined">
          outlinedPrimary
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiButton-outlinedPrimary
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-outlinedPrimary
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the root element if variant="outlined" and
        color="primary".
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          and
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        outlinedSecondary
        <text value="undefined" checked="undefined" pressed="undefined">
          outlinedSecondary
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiButton-outlinedSecondary
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-outlinedSecondary
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the root element if variant="outlined" and
        color="secondary".
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          and
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        contained
        <text value="undefined" checked="undefined" pressed="undefined">
          contained
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiButton-contained
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-contained
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the root element if variant="contained".
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        containedPrimary
        <text value="undefined" checked="undefined" pressed="undefined">
          containedPrimary
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiButton-containedPrimary
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-containedPrimary
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the root element if variant="contained" and
        color="primary".
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          and
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        containedSecondary
        <text value="undefined" checked="undefined" pressed="undefined">
          containedSecondary
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiButton-containedSecondary
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-containedSecondary
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the root element if variant="contained" and
        color="secondary".
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          and
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        disableElevation
        <text value="undefined" checked="undefined" pressed="undefined">
          disableElevation
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiButton-disableElevation
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-disableElevation
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the root element if disableElevation={true}.
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        focusVisible
        <text value="undefined" checked="undefined" pressed="undefined">
          focusVisible
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .Mui-focusVisible
        <text value="undefined" checked="undefined" pressed="undefined">
          .Mui-focusVisible
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Pseudo-class applied to the ButtonBase root element if the button is
        keyboard focused.
        <text value="undefined" checked="undefined" pressed="undefined">
          Pseudo-class applied to the ButtonBase root element if the button is
          keyboard focused.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        disabled
        <text value="undefined" checked="undefined" pressed="undefined">
          disabled
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .Mui-disabled
        <text value="undefined" checked="undefined" pressed="undefined">
          .Mui-disabled
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Pseudo-class applied to the root element if disabled={true}.
        <text value="undefined" checked="undefined" pressed="undefined">
          Pseudo-class applied to the root element if
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        colorInherit
        <text value="undefined" checked="undefined" pressed="undefined">
          colorInherit
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiButton-colorInherit
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-colorInherit
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the root element if color="inherit".
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        textSizeSmall
        <text value="undefined" checked="undefined" pressed="undefined">
          textSizeSmall
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiButton-textSizeSmall
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-textSizeSmall
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the root element if size="small" and
        variant="text".
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          and
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        textSizeLarge
        <text value="undefined" checked="undefined" pressed="undefined">
          textSizeLarge
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiButton-textSizeLarge
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-textSizeLarge
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the root element if size="large" and
        variant="text".
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          and
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        outlinedSizeSmall
        <text value="undefined" checked="undefined" pressed="undefined">
          outlinedSizeSmall
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiButton-outlinedSizeSmall
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-outlinedSizeSmall
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the root element if size="small" and
        variant="outlined".
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          and
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        outlinedSizeLarge
        <text value="undefined" checked="undefined" pressed="undefined">
          outlinedSizeLarge
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiButton-outlinedSizeLarge
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-outlinedSizeLarge
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the root element if size="large" and
        variant="outlined".
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          and
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        containedSizeSmall
        <text value="undefined" checked="undefined" pressed="undefined">
          containedSizeSmall
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiButton-containedSizeSmall
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-containedSizeSmall
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the root element if size="small" and
        variant="contained".
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          and
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        containedSizeLarge
        <text value="undefined" checked="undefined" pressed="undefined">
          containedSizeLarge
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiButton-containedSizeLarge
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-containedSizeLarge
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the root element if size="large" and
        variant="contained".
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          and
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        sizeSmall
        <text value="undefined" checked="undefined" pressed="undefined">
          sizeSmall
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiButton-sizeSmall
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-sizeSmall
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the root element if size="small".
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        sizeLarge
        <text value="undefined" checked="undefined" pressed="undefined">
          sizeLarge
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiButton-sizeLarge
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-sizeLarge
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the root element if size="large".
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        fullWidth
        <text value="undefined" checked="undefined" pressed="undefined">
          fullWidth
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiButton-fullWidth
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-fullWidth
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the root element if fullWidth={true}.
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        startIcon
        <text value="undefined" checked="undefined" pressed="undefined">
          startIcon
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiButton-startIcon
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-startIcon
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the startIcon element if supplied.
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the startIcon element if supplied.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        endIcon
        <text value="undefined" checked="undefined" pressed="undefined">
          endIcon
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiButton-endIcon
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-endIcon
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the endIcon element if supplied.
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the endIcon element if supplied.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        iconSizeSmall
        <text value="undefined" checked="undefined" pressed="undefined">
          iconSizeSmall
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiButton-iconSizeSmall
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-iconSizeSmall
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the icon element if supplied and
        size="small".
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the icon element if supplied and
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        iconSizeMedium
        <text value="undefined" checked="undefined" pressed="undefined">
          iconSizeMedium
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiButton-iconSizeMedium
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-iconSizeMedium
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the icon element if supplied and
        size="medium".
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the icon element if supplied and
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        iconSizeLarge
        <text value="undefined" checked="undefined" pressed="undefined">
          iconSizeLarge
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiButton-iconSizeLarge
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-iconSizeLarge
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the icon element if supplied and
        size="large".
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the icon element if supplied and
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
  </table>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can override the style of the component thanks to one of these
      customization points:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        With a rule name of the
      </text>
      <link checked="undefined" pressed="undefined">
        classes object prop
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        .
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        With a
      </text>
      <link checked="undefined" pressed="undefined">
        global class name
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        .
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        With a theme and an
      </text>
      <link checked="undefined" pressed="undefined">
        overrides property
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        .
      </text>
    </listitem>
  </list>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      If that's not sufficient, you can check the
    </text>
    <link checked="undefined" pressed="undefined">
      implementation of the component
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      for more detail.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Inheritance
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Inheritance
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The props of the
    </text>
    <link checked="undefined" pressed="undefined">
      ButtonBase
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      component are also available. You can take advantage of this behavior to
    </text>
    <link checked="undefined" pressed="undefined">
      target nested components
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Demos
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Demos
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        Button Group
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        Buttons
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    <separator
      orientation="horizontal"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <link checked="undefined" pressed="undefined">
      Breadcrumbs
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        Breadcrumbs
      </text>
    </link>
    <link checked="undefined" pressed="undefined">
      ButtonBase
      <text value="undefined" checked="undefined" pressed="undefined">
        ButtonBase
      </text>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /api/select/ 1`] = `
<main value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text value="undefined" checked="undefined" pressed="undefined">
      EDIT THIS PAGE
    </text>
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Select API
    <text value="undefined" checked="undefined" pressed="undefined">
      Select API
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The API documentation of the Select React component. Learn more about the
      props and the CSS customization points.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Import
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Import
    </text>
  </heading>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can learn more about the difference by
    </text>
    <link checked="undefined" pressed="undefined">
      reading this guide
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Component name
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Component name
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      name can be used for providing
    </text>
    <link checked="undefined" pressed="undefined">
      default props
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      or
    </text>
    <link checked="undefined" pressed="undefined">
      style overrides
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      at the theme level.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Props
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Props
    </text>
  </heading>
  <table value="undefined" checked="undefined" pressed="undefined">
    <row value="undefined" checked="undefined" pressed="undefined">
      <columnheader value="undefined" checked="undefined" pressed="undefined">
        Name
        <text value="undefined" checked="undefined" pressed="undefined">
          Name
        </text>
      </columnheader>
      <columnheader value="undefined" checked="undefined" pressed="undefined">
        Type
        <text value="undefined" checked="undefined" pressed="undefined">
          Type
        </text>
      </columnheader>
      <columnheader value="undefined" checked="undefined" pressed="undefined">
        Default
        <text value="undefined" checked="undefined" pressed="undefined">
          Default
        </text>
      </columnheader>
      <columnheader value="undefined" checked="undefined" pressed="undefined">
        Description
        <text value="undefined" checked="undefined" pressed="undefined">
          Description
        </text>
      </columnheader>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        autoWidth
        <text value="undefined" checked="undefined" pressed="undefined">
          autoWidth
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        bool
        <text value="undefined" checked="undefined" pressed="undefined">
          bool
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        false
        <text value="undefined" checked="undefined" pressed="undefined">
          false
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        If true, the width of the popover will automatically be set according to
        the items inside the menu, otherwise it will be at least the width of
        the select input.
        <text value="undefined" checked="undefined" pressed="undefined">
          If
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          , the width of the popover will automatically be set according to the
          items inside the menu, otherwise it will be at least the width of the
          select input.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        children
        <text value="undefined" checked="undefined" pressed="undefined">
          children
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        node
        <text value="undefined" checked="undefined" pressed="undefined">
          node
        </text>
      </gridcell>
      <gridcell
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        The option elements to populate the select with. Can be some MenuItem
        when native is false and option when native is true. ⚠️The MenuItem
        elements must be direct descendants when native is false.
        <text value="undefined" checked="undefined" pressed="undefined">
          The option elements to populate the select with. Can be some
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          when
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          is false and
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          when
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          is true.
        </text>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <text value="undefined" checked="undefined" pressed="undefined">
          ⚠️The
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          elementsmustbe direct descendants when
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          is false.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        classes
        <text value="undefined" checked="undefined" pressed="undefined">
          classes
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        object
        <text value="undefined" checked="undefined" pressed="undefined">
          object
        </text>
      </gridcell>
      <gridcell
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Override or extend the styles applied to the component. See CSS API
        below for more details.
        <text value="undefined" checked="undefined" pressed="undefined">
          Override or extend the styles applied to the component. See
        </text>
        <link checked="undefined" pressed="undefined">
          CSS API
        </link>
        <text value="undefined" checked="undefined" pressed="undefined">
          below for more details.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        defaultValue
        <text value="undefined" checked="undefined" pressed="undefined">
          defaultValue
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        any
        <text value="undefined" checked="undefined" pressed="undefined">
          any
        </text>
      </gridcell>
      <gridcell
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        The default element value. Use when the component is not controlled.
        <text value="undefined" checked="undefined" pressed="undefined">
          The default element value. Use when the component is not controlled.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        displayEmpty
        <text value="undefined" checked="undefined" pressed="undefined">
          displayEmpty
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        bool
        <text value="undefined" checked="undefined" pressed="undefined">
          bool
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        false
        <text value="undefined" checked="undefined" pressed="undefined">
          false
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        If true, a value is displayed even if no items are selected. In order to
        display a meaningful value, a function can be passed to the renderValue
        prop which returns the value to be displayed when no items are selected.
        ⚠️ When using this prop, make sure the label doesn't overlap with
        the empty displayed value. The label should either be hidden or forced
        to a shrunk state.
        <text value="undefined" checked="undefined" pressed="undefined">
          If
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          , a value is displayed even if no items are selected.
        </text>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <text value="undefined" checked="undefined" pressed="undefined">
          In order to display a meaningful value, a function can be passed to
          the
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          prop which returns the value to be displayed when no items are
          selected.
        </text>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <text value="undefined" checked="undefined" pressed="undefined">
          ⚠️ When using this prop, make sure the label doesn't overlap with
          the empty displayed value. The label should either be hidden or forced
          to a shrunk state.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        IconComponent
        <text value="undefined" checked="undefined" pressed="undefined">
          IconComponent
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        elementType
        <text value="undefined" checked="undefined" pressed="undefined">
          elementType
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        ArrowDropDownIcon
        <text value="undefined" checked="undefined" pressed="undefined">
          ArrowDropDownIcon
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        The icon that displays the arrow.
        <text value="undefined" checked="undefined" pressed="undefined">
          The icon that displays the arrow.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        id
        <text value="undefined" checked="undefined" pressed="undefined">
          id
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        string
        <text value="undefined" checked="undefined" pressed="undefined">
          string
        </text>
      </gridcell>
      <gridcell
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        The id of the wrapper element or the select element when native.
        <text value="undefined" checked="undefined" pressed="undefined">
          The
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          of the wrapper element or the
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          element when
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        input
        <text value="undefined" checked="undefined" pressed="undefined">
          input
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        element
        <text value="undefined" checked="undefined" pressed="undefined">
          element
        </text>
      </gridcell>
      <gridcell
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        An Input element; does not have to be a material-ui specific Input.
        <text value="undefined" checked="undefined" pressed="undefined">
          An
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          element; does not have to be a material-ui specific
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        inputProps
        <text value="undefined" checked="undefined" pressed="undefined">
          inputProps
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        object
        <text value="undefined" checked="undefined" pressed="undefined">
          object
        </text>
      </gridcell>
      <gridcell
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Attributes applied to the input element. When native is true, the
        attributes are applied on the select element.
        <link checked="undefined" pressed="undefined">
          Attributes
        </link>
        <text value="undefined" checked="undefined" pressed="undefined">
          applied to the
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          element. When
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          is
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          , the attributes are applied on the
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          element.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        label
        <text value="undefined" checked="undefined" pressed="undefined">
          label
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        node
        <text value="undefined" checked="undefined" pressed="undefined">
          node
        </text>
      </gridcell>
      <gridcell
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        See OutlinedInput#label
        <text value="undefined" checked="undefined" pressed="undefined">
          See
        </text>
        <link checked="undefined" pressed="undefined">
          OutlinedInput#label
        </link>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        labelId
        <text value="undefined" checked="undefined" pressed="undefined">
          labelId
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        string
        <text value="undefined" checked="undefined" pressed="undefined">
          string
        </text>
      </gridcell>
      <gridcell
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        The ID of an element that acts as an additional label. The Select will
        be labelled by the additional label and the selected value.
        <text value="undefined" checked="undefined" pressed="undefined">
          The ID of an element that acts as an additional label. The Select will
          be labelled by the additional label and the selected value.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        labelWidth
        <text value="undefined" checked="undefined" pressed="undefined">
          labelWidth
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        number
        <text value="undefined" checked="undefined" pressed="undefined">
          number
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        0
        <text value="undefined" checked="undefined" pressed="undefined">
          0
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        See OutlinedInput#label
        <text value="undefined" checked="undefined" pressed="undefined">
          See
        </text>
        <link checked="undefined" pressed="undefined">
          OutlinedInput#label
        </link>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        MenuProps
        <text value="undefined" checked="undefined" pressed="undefined">
          MenuProps
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        object
        <text value="undefined" checked="undefined" pressed="undefined">
          object
        </text>
      </gridcell>
      <gridcell
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Props applied to the Menu element.
        <text value="undefined" checked="undefined" pressed="undefined">
          Props applied to the
        </text>
        <link checked="undefined" pressed="undefined">
          Menu
          <code value="undefined" checked="undefined" pressed="undefined">
            $SOME_CODE
          </code>
        </link>
        <text value="undefined" checked="undefined" pressed="undefined">
          element.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        multiple
        <text value="undefined" checked="undefined" pressed="undefined">
          multiple
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        bool
        <text value="undefined" checked="undefined" pressed="undefined">
          bool
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        false
        <text value="undefined" checked="undefined" pressed="undefined">
          false
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        If true, value must be an array and the menu will support multiple
        selections.
        <text value="undefined" checked="undefined" pressed="undefined">
          If
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          ,
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          must be an array and the menu will support multiple selections.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        native
        <text value="undefined" checked="undefined" pressed="undefined">
          native
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        bool
        <text value="undefined" checked="undefined" pressed="undefined">
          bool
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        false
        <text value="undefined" checked="undefined" pressed="undefined">
          false
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        If true, the component will be using a native select element.
        <text value="undefined" checked="undefined" pressed="undefined">
          If
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          , the component will be using a native
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          element.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        onChange
        <text value="undefined" checked="undefined" pressed="undefined">
          onChange
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        func
        <text value="undefined" checked="undefined" pressed="undefined">
          func
        </text>
      </gridcell>
      <gridcell
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Callback fired when a menu item is selected. Signature: function(event:
        object, child?: object) => void event: The event source of the
        callback. You can pull out the new value by accessing event.target.value
        (any). child: The react element that was selected when native is false
        (default).
        <text value="undefined" checked="undefined" pressed="undefined">
          Callback fired when a menu item is selected.
        </text>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <text value="undefined" checked="undefined" pressed="undefined">
          Signature:
        </text>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <text value="undefined" checked="undefined" pressed="undefined">
          event:The event source of the callback. You can pull out the new value
          by accessing
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          (any).
        </text>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <text value="undefined" checked="undefined" pressed="undefined">
          child:The react element that was selected when
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          is
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          (default).
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        onClose
        <text value="undefined" checked="undefined" pressed="undefined">
          onClose
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        func
        <text value="undefined" checked="undefined" pressed="undefined">
          func
        </text>
      </gridcell>
      <gridcell
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Callback fired when the component requests to be closed. Use in
        controlled mode (see open). Signature: function(event: object) =>
        void event: The event source of the callback.
        <text value="undefined" checked="undefined" pressed="undefined">
          Callback fired when the component requests to be closed. Use in
          controlled mode (see open).
        </text>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <text value="undefined" checked="undefined" pressed="undefined">
          Signature:
        </text>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <text value="undefined" checked="undefined" pressed="undefined">
          event:The event source of the callback.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        onOpen
        <text value="undefined" checked="undefined" pressed="undefined">
          onOpen
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        func
        <text value="undefined" checked="undefined" pressed="undefined">
          func
        </text>
      </gridcell>
      <gridcell
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Callback fired when the component requests to be opened. Use in
        controlled mode (see open). Signature: function(event: object) =>
        void event: The event source of the callback.
        <text value="undefined" checked="undefined" pressed="undefined">
          Callback fired when the component requests to be opened. Use in
          controlled mode (see open).
        </text>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <text value="undefined" checked="undefined" pressed="undefined">
          Signature:
        </text>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <text value="undefined" checked="undefined" pressed="undefined">
          event:The event source of the callback.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        open
        <text value="undefined" checked="undefined" pressed="undefined">
          open
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        bool
        <text value="undefined" checked="undefined" pressed="undefined">
          bool
        </text>
      </gridcell>
      <gridcell
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Control select open state. You can only use it when the native prop is
        false (default).
        <text value="undefined" checked="undefined" pressed="undefined">
          Control
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          open state. You can only use it when the
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          prop is
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          (default).
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        renderValue
        <text value="undefined" checked="undefined" pressed="undefined">
          renderValue
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        func
        <text value="undefined" checked="undefined" pressed="undefined">
          func
        </text>
      </gridcell>
      <gridcell
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Render the selected value. You can only use it when the native prop is
        false (default). Signature: function(value: any) => ReactNode value:
        The value provided to the component.
        <text value="undefined" checked="undefined" pressed="undefined">
          Render the selected value. You can only use it when the
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          prop is
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          (default).
        </text>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <text value="undefined" checked="undefined" pressed="undefined">
          Signature:
        </text>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <text value="undefined" checked="undefined" pressed="undefined">
          value:The
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          provided to the component.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        SelectDisplayProps
        <text value="undefined" checked="undefined" pressed="undefined">
          SelectDisplayProps
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        object
        <text value="undefined" checked="undefined" pressed="undefined">
          object
        </text>
      </gridcell>
      <gridcell
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Props applied to the clickable div element.
        <text value="undefined" checked="undefined" pressed="undefined">
          Props applied to the clickable div element.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        value
        <text value="undefined" checked="undefined" pressed="undefined">
          value
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        any
        <text value="undefined" checked="undefined" pressed="undefined">
          any
        </text>
      </gridcell>
      <gridcell
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        The input value. Providing an empty string will select no options. This
        prop is required when the native prop is false (default). Set to an
        empty string '' if you don't want any of the available
        options to be selected. If the value is an object it must have reference
        equality with the option in order to be selected. If the value is not an
        object, the string representation must match with the string
        representation of the option in order to be selected.
        <text value="undefined" checked="undefined" pressed="undefined">
          The input value. Providing an empty string will select no options.
          This prop is required when the
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          prop is
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          (default). Set to an empty string
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          if you don't want any of the available options to be selected.
        </text>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <text value="undefined" checked="undefined" pressed="undefined">
          If the value is an object it must have reference equality with the
          option in order to be selected. If the value is not an object, the
          string representation must match with the string representation of the
          option in order to be selected.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        variant
        <text value="undefined" checked="undefined" pressed="undefined">
          variant
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        'filled' | 'outlined' | 'standard'
        <text value="undefined" checked="undefined" pressed="undefined">
          'filled'
        </text>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <text value="undefined" checked="undefined" pressed="undefined">
          | 'outlined'
        </text>
        <LineBreak
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></LineBreak>
        <text value="undefined" checked="undefined" pressed="undefined">
          | 'standard'
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        'standard'
        <text value="undefined" checked="undefined" pressed="undefined">
          'standard'
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        The variant to use.
        <text value="undefined" checked="undefined" pressed="undefined">
          The variant to use.
        </text>
      </gridcell>
    </row>
  </table>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      is forwarded to the root element.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Any other props supplied will be provided to the root element (
    </text>
    <link checked="undefined" pressed="undefined">
      Input
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      ).
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    CSS
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      CSS
    </text>
  </heading>
  <table value="undefined" checked="undefined" pressed="undefined">
    <row value="undefined" checked="undefined" pressed="undefined">
      <columnheader value="undefined" checked="undefined" pressed="undefined">
        Rule name
        <text value="undefined" checked="undefined" pressed="undefined">
          Rule name
        </text>
      </columnheader>
      <columnheader value="undefined" checked="undefined" pressed="undefined">
        Global class
        <text value="undefined" checked="undefined" pressed="undefined">
          Global class
        </text>
      </columnheader>
      <columnheader value="undefined" checked="undefined" pressed="undefined">
        Description
        <text value="undefined" checked="undefined" pressed="undefined">
          Description
        </text>
      </columnheader>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        root
        <text value="undefined" checked="undefined" pressed="undefined">
          root
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiSelect-root
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiSelect-root
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the select component root class.
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the select component
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          class.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        select
        <text value="undefined" checked="undefined" pressed="undefined">
          select
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiSelect-select
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiSelect-select
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the select component select class.
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the select component
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          class.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        filled
        <text value="undefined" checked="undefined" pressed="undefined">
          filled
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiSelect-filled
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiSelect-filled
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the select component if variant="filled".
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the select component if
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        outlined
        <text value="undefined" checked="undefined" pressed="undefined">
          outlined
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiSelect-outlined
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiSelect-outlined
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the select component if variant="outlined".
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the select component if
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        selectMenu
        <text value="undefined" checked="undefined" pressed="undefined">
          selectMenu
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiSelect-selectMenu
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiSelect-selectMenu
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the select component selectMenu class.
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the select component
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          class.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        disabled
        <text value="undefined" checked="undefined" pressed="undefined">
          disabled
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .Mui-disabled
        <text value="undefined" checked="undefined" pressed="undefined">
          .Mui-disabled
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Pseudo-class applied to the select component disabled class.
        <text value="undefined" checked="undefined" pressed="undefined">
          Pseudo-class applied to the select component
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          class.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        icon
        <text value="undefined" checked="undefined" pressed="undefined">
          icon
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiSelect-icon
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiSelect-icon
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the icon component.
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the icon component.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        iconOpen
        <text value="undefined" checked="undefined" pressed="undefined">
          iconOpen
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiSelect-iconOpen
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiSelect-iconOpen
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the icon component if the popup is open.
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the icon component if the popup is open.
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        iconFilled
        <text value="undefined" checked="undefined" pressed="undefined">
          iconFilled
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiSelect-iconFilled
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiSelect-iconFilled
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the icon component if variant="filled".
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the icon component if
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        iconOutlined
        <text value="undefined" checked="undefined" pressed="undefined">
          iconOutlined
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiSelect-iconOutlined
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiSelect-iconOutlined
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the icon component if variant="outlined".
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the icon component if
        </text>
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
        <text value="undefined" checked="undefined" pressed="undefined">
          .
        </text>
      </gridcell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        nativeInput
        <text value="undefined" checked="undefined" pressed="undefined">
          nativeInput
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        .MuiSelect-nativeInput
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiSelect-nativeInput
        </text>
      </gridcell>
      <gridcell value="undefined" checked="undefined" pressed="undefined">
        Styles applied to the underlying native input component.
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the underlying native input component.
        </text>
      </gridcell>
    </row>
  </table>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can override the style of the component thanks to one of these
      customization points:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        With a rule name of the
      </text>
      <link checked="undefined" pressed="undefined">
        classes object prop
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        .
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        With a
      </text>
      <link checked="undefined" pressed="undefined">
        global class name
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        .
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        With a theme and an
      </text>
      <link checked="undefined" pressed="undefined">
        overrides property
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        .
      </text>
    </listitem>
  </list>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      If that's not sufficient, you can check the
    </text>
    <link checked="undefined" pressed="undefined">
      implementation of the component
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      for more detail.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Inheritance
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Inheritance
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The props of the
    </text>
    <link checked="undefined" pressed="undefined">
      Input
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      component are also available. You can take advantage of this behavior to
    </text>
    <link checked="undefined" pressed="undefined">
      target nested components
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Demos
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Demos
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        Selects
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    <separator
      orientation="horizontal"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <link checked="undefined" pressed="undefined">
      ScopedCssBaseline
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        ScopedCssBaseline
      </text>
    </link>
    <link checked="undefined" pressed="undefined">
      Skeleton
      <text value="undefined" checked="undefined" pressed="undefined">
        Skeleton
      </text>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/breadcrumbs 1`] = `
<main value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text value="undefined" checked="undefined" pressed="undefined">
      EDIT THIS PAGE
    </text>
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Breadcrumbs
    <text value="undefined" checked="undefined" pressed="undefined">
      Breadcrumbs
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Breadcrumbs allow users to make selections from a range of values.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Feedback
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          WAI-ARIA
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Bundle size
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Sketch
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Figma
        </text>
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Basic breadcrumbs
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Basic breadcrumbs
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    breadcrumb
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <link checked="undefined" pressed="undefined">
          Material-UI
        </link>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          /
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <link checked="undefined" pressed="undefined">
          Core
        </link>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          /
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <paragraph value="undefined" checked="undefined" pressed="undefined">
          <text value="undefined" checked="undefined" pressed="undefined">
            Breadcrumb
          </text>
        </paragraph>
      </listitem>
    </list>
  </navigation>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Active last breadcrumb
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Active last breadcrumb
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Keep the last breadcrumb interactive.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    breadcrumb
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <link checked="undefined" pressed="undefined">
          Material-UI
        </link>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          /
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <link checked="undefined" pressed="undefined">
          Core
        </link>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          /
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <link checked="undefined" pressed="undefined">
          Breadcrumb
        </link>
      </listitem>
    </list>
  </navigation>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Custom separator
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Custom separator
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      In the following examples, we are using two string separators, and an SVG
      icon.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    breadcrumb
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <link checked="undefined" pressed="undefined">
          Material-UI
        </link>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          ›
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <link checked="undefined" pressed="undefined">
          Core
        </link>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          ›
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <paragraph value="undefined" checked="undefined" pressed="undefined">
          <text value="undefined" checked="undefined" pressed="undefined">
            Breadcrumb
          </text>
        </paragraph>
      </listitem>
    </list>
  </navigation>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    breadcrumb
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <link checked="undefined" pressed="undefined">
          Material-UI
        </link>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          -
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <link checked="undefined" pressed="undefined">
          Core
        </link>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          -
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <paragraph value="undefined" checked="undefined" pressed="undefined">
          <text value="undefined" checked="undefined" pressed="undefined">
            Breadcrumb
          </text>
        </paragraph>
      </listitem>
    </list>
  </navigation>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    breadcrumb
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <link checked="undefined" pressed="undefined">
          Material-UI
        </link>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <link checked="undefined" pressed="undefined">
          Core
        </link>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <paragraph value="undefined" checked="undefined" pressed="undefined">
          <text value="undefined" checked="undefined" pressed="undefined">
            Breadcrumb
          </text>
        </paragraph>
      </listitem>
    </list>
  </navigation>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Breadcrumbs with icons
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Breadcrumbs with icons
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    breadcrumb
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <link checked="undefined" pressed="undefined">
          Material-UI
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </link>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          /
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <link checked="undefined" pressed="undefined">
          Core
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </link>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          /
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <paragraph value="undefined" checked="undefined" pressed="undefined">
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
          <text value="undefined" checked="undefined" pressed="undefined">
            Breadcrumb
          </text>
        </paragraph>
      </listitem>
    </list>
  </navigation>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Collapsed breadcrumbs
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Collapsed breadcrumbs
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    breadcrumb
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <link checked="undefined" pressed="undefined">
          Home
        </link>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          /
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Show path
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          /
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <paragraph value="undefined" checked="undefined" pressed="undefined">
          <text value="undefined" checked="undefined" pressed="undefined">
            Belts
          </text>
        </paragraph>
      </listitem>
    </list>
  </navigation>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Customized breadcrumbs
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Customized breadcrumbs
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    breadcrumb
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <link checked="undefined" pressed="undefined">
          Home
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
          <text value="undefined" checked="undefined" pressed="undefined">
            Home
          </text>
        </link>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          /
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <link checked="undefined" pressed="undefined">
          Catalog
          <text value="undefined" checked="undefined" pressed="undefined">
            Catalog
          </text>
        </link>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          /
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Accessories
          <text value="undefined" checked="undefined" pressed="undefined">
            Accessories
          </text>
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Integration with react-router
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Integration with react-router
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    breadcrumb
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <link checked="undefined" pressed="undefined">
          Home
        </link>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          /
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <paragraph value="undefined" checked="undefined" pressed="undefined">
          <text value="undefined" checked="undefined" pressed="undefined">
            Inbox
          </text>
        </paragraph>
      </listitem>
    </list>
  </navigation>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    mailbox folders
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Inbox
          <text value="undefined" checked="undefined" pressed="undefined">
            Inbox
          </text>
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <list value="undefined" checked="undefined" pressed="undefined">
          <listitem
            level="2"
            value="undefined"
            checked="undefined"
            pressed="undefined"
          >
            <button value="undefined" checked="undefined" pressed="undefined">
              Important
              <text value="undefined" checked="undefined" pressed="undefined">
                Important
              </text>
            </button>
          </listitem>
        </list>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Trash
          <text value="undefined" checked="undefined" pressed="undefined">
            Trash
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Spam
          <text value="undefined" checked="undefined" pressed="undefined">
            Spam
          </text>
        </button>
      </listitem>
    </list>
  </navigation>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Accessibility
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Accessibility
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      (WAI-ARIA:
    </text>
    <link checked="undefined" pressed="undefined">
      https://www.w3.org/TR/wai-aria-practices/#breadcrumb
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      )
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Be sure to add a
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      description on the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      component.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The accessibility of this component relies on:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        The set of links is structured using an ordered list (
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        element).
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        To prevent screen reader announcement of the visual separators between
        links, they are hidden with
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        .
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        A nav element labeled with
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        identifies the structure as a breadcrumb trail and makes it a navigation
        landmark so that it is easy to locate.
      </text>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Breadcrumbs />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Link />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Typography />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    <separator
      orientation="horizontal"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <link checked="undefined" pressed="undefined">
      Bottom Navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        Bottom Navigation
      </text>
    </link>
    <link checked="undefined" pressed="undefined">
      Drawer
      <text value="undefined" checked="undefined" pressed="undefined">
        Drawer
      </text>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/button-group/ 1`] = `
<main value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text value="undefined" checked="undefined" pressed="undefined">
      EDIT THIS PAGE
    </text>
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Button group
    <text value="undefined" checked="undefined" pressed="undefined">
      Button group
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The ButtonGroup component can be used to group related buttons.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Feedback
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Bundle size
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Sketch
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Figma
        </text>
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Basic button group
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Basic button group
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group value="undefined" checked="undefined" pressed="undefined">
    outlined primary button group
    <button value="undefined" checked="undefined" pressed="undefined">
      ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ONE
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        TWO
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        THREE
      </text>
    </button>
  </group>
  <group value="undefined" checked="undefined" pressed="undefined">
    contained primary button group
    <button value="undefined" checked="undefined" pressed="undefined">
      ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ONE
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        TWO
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        THREE
      </text>
    </button>
  </group>
  <group value="undefined" checked="undefined" pressed="undefined">
    text primary button group
    <button value="undefined" checked="undefined" pressed="undefined">
      ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ONE
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        TWO
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        THREE
      </text>
    </button>
  </group>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Sizes and colors
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Sizes and colors
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group value="undefined" checked="undefined" pressed="undefined">
    small outlined button group
    <button value="undefined" checked="undefined" pressed="undefined">
      ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ONE
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        TWO
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        THREE
      </text>
    </button>
  </group>
  <group value="undefined" checked="undefined" pressed="undefined">
    outlined secondary button group
    <button value="undefined" checked="undefined" pressed="undefined">
      ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ONE
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        TWO
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        THREE
      </text>
    </button>
  </group>
  <group value="undefined" checked="undefined" pressed="undefined">
    large outlined primary button group
    <button value="undefined" checked="undefined" pressed="undefined">
      ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ONE
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        TWO
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        THREE
      </text>
    </button>
  </group>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Vertical group
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Vertical group
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group value="undefined" checked="undefined" pressed="undefined">
    vertical outlined primary button group
    <button value="undefined" checked="undefined" pressed="undefined">
      ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ONE
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        TWO
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        THREE
      </text>
    </button>
  </group>
  <group value="undefined" checked="undefined" pressed="undefined">
    vertical contained primary button group
    <button value="undefined" checked="undefined" pressed="undefined">
      ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ONE
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        TWO
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        THREE
      </text>
    </button>
  </group>
  <group value="undefined" checked="undefined" pressed="undefined">
    vertical contained primary button group
    <button value="undefined" checked="undefined" pressed="undefined">
      ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ONE
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        TWO
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        THREE
      </text>
    </button>
  </group>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Split button
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Split button
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      can also be used to create a split button. The dropdown can change the
      button action (as in this example), or be used to immediately trigger a
      related action.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group value="undefined" checked="undefined" pressed="undefined">
    split button
    <button value="undefined" checked="undefined" pressed="undefined">
      SQUASH AND MERGE
      <text value="undefined" checked="undefined" pressed="undefined">
        SQUASH AND MERGE
      </text>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      select merge strategy
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </group>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Disabled elevation
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Disabled elevation
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can remove the elevation with the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group value="undefined" checked="undefined" pressed="undefined">
    <button value="undefined" checked="undefined" pressed="undefined">
      ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ONE
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        TWO
      </text>
    </button>
  </group>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Button />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <ButtonGroup />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    <separator
      orientation="horizontal"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <link checked="undefined" pressed="undefined">
      Button
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        Button
      </text>
    </link>
    <link checked="undefined" pressed="undefined">
      Checkbox
      <text value="undefined" checked="undefined" pressed="undefined">
        Checkbox
      </text>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/buttons/ 1`] = `
<main value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text value="undefined" checked="undefined" pressed="undefined">
      EDIT THIS PAGE
    </text>
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Button
    <text value="undefined" checked="undefined" pressed="undefined">
      Button
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Buttons allow users to take actions, and make choices, with a single tap.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Buttons communicate actions that users can take. They are typically placed
      throughout your UI, in places like:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        Dialogs
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        Modal windows
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        Forms
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        Cards
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        Toolbars
      </text>
    </listitem>
  </list>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Feedback
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          WAI-ARIA
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Bundle size
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Material Design
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Material Design
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Sketch
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Figma
        </text>
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Contained Buttons
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Contained Buttons
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <link checked="undefined" pressed="undefined">
      Contained buttons
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      are high-emphasis, distinguished by their use of elevation and fill. They
      contain actions that are primary to your app.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    PRIMARY
    <text value="undefined" checked="undefined" pressed="undefined">
      PRIMARY
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SECONDARY
    <text value="undefined" checked="undefined" pressed="undefined">
      SECONDARY
    </text>
  </button>
  <button
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    DISABLED
    <text value="undefined" checked="undefined" pressed="undefined">
      DISABLED
    </text>
  </button>
  <link checked="undefined" pressed="undefined">
    LINK
    <text value="undefined" checked="undefined" pressed="undefined">
      LINK
    </text>
  </link>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can remove the elevation with the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    DISABLE ELEVATION
    <text value="undefined" checked="undefined" pressed="undefined">
      DISABLE ELEVATION
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Text Buttons
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Text Buttons
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <link checked="undefined" pressed="undefined">
      Text buttons
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      are typically used for less-pronounced actions, including those located:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        In dialogs
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        In cards
      </text>
    </listitem>
  </list>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      In cards, text buttons help maintain an emphasis on card content.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    PRIMARY
    <text value="undefined" checked="undefined" pressed="undefined">
      PRIMARY
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SECONDARY
    <text value="undefined" checked="undefined" pressed="undefined">
      SECONDARY
    </text>
  </button>
  <button
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    DISABLED
    <text value="undefined" checked="undefined" pressed="undefined">
      DISABLED
    </text>
  </button>
  <link checked="undefined" pressed="undefined">
    LINK
    <text value="undefined" checked="undefined" pressed="undefined">
      LINK
    </text>
  </link>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Outlined Buttons
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Outlined Buttons
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <link checked="undefined" pressed="undefined">
      Outlined buttons
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      are medium-emphasis buttons. They contain actions that are important, but
      aren’t the primary action in an app.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Outlined buttons are also a lower emphasis alternative to contained
      buttons, or a higher emphasis alternative to text buttons.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    PRIMARY
    <text value="undefined" checked="undefined" pressed="undefined">
      PRIMARY
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SECONDARY
    <text value="undefined" checked="undefined" pressed="undefined">
      SECONDARY
    </text>
  </button>
  <button
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    DISABLED
    <text value="undefined" checked="undefined" pressed="undefined">
      DISABLED
    </text>
  </button>
  <link checked="undefined" pressed="undefined">
    LINK
    <text value="undefined" checked="undefined" pressed="undefined">
      LINK
    </text>
  </link>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Handling clicks
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Handling clicks
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      All components accept an
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      handler that is applied to the root DOM element.
    </text>
  </paragraph>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Note that the documentation
    </text>
    <link checked="undefined" pressed="undefined">
      avoids
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      mentioning native props (there are a lot) in the API section of the
      components.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Upload button
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Upload button
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <button value="undefined" checked="undefined" pressed="undefined">
      UPLOAD
      <text value="undefined" checked="undefined" pressed="undefined">
        UPLOAD
      </text>
    </button>
  </Label>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <button value="undefined" checked="undefined" pressed="undefined">
      upload picture
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
  </Label>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Sizes
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Sizes
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      For larger or smaller buttons use the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SMALL
    <text value="undefined" checked="undefined" pressed="undefined">
      SMALL
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    MEDIUM
    <text value="undefined" checked="undefined" pressed="undefined">
      MEDIUM
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    LARGE
    <text value="undefined" checked="undefined" pressed="undefined">
      LARGE
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SMALL
    <text value="undefined" checked="undefined" pressed="undefined">
      SMALL
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    MEDIUM
    <text value="undefined" checked="undefined" pressed="undefined">
      MEDIUM
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    LARGE
    <text value="undefined" checked="undefined" pressed="undefined">
      LARGE
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SMALL
    <text value="undefined" checked="undefined" pressed="undefined">
      SMALL
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    MEDIUM
    <text value="undefined" checked="undefined" pressed="undefined">
      MEDIUM
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    LARGE
    <text value="undefined" checked="undefined" pressed="undefined">
      LARGE
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    delete
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    delete
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    delete
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    delete
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Buttons with icons and label
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Buttons with icons and label
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Sometimes you might want to have icons for certain button to enhance the
      UX of the application as we recognize logos more easily than plain text.
      For example, if you have a delete button you can label it with a dustbin
      icon.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    DELETE
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
    <text value="undefined" checked="undefined" pressed="undefined">
      DELETE
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SEND
    <text value="undefined" checked="undefined" pressed="undefined">
      SENDsend
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    UPLOAD
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
    <text value="undefined" checked="undefined" pressed="undefined">
      UPLOAD
    </text>
  </button>
  <button
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    TALK
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
    <text value="undefined" checked="undefined" pressed="undefined">
      TALK
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SAVE
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
    <text value="undefined" checked="undefined" pressed="undefined">
      SAVE
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SAVE
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
    <text value="undefined" checked="undefined" pressed="undefined">
      SAVE
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Icon Buttons
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Icon Buttons
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Icon buttons are commonly found in app bars and toolbars.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Icons are also appropriate for toggle buttons that allow a single choice
      to be selected or deselected, such as adding or removing a star to an
      item.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    delete
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </button>
  <button
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    delete
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    add an alarm
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    add to shopping cart
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Customized buttons
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Customized buttons
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    CUSTOM CSS
    <text value="undefined" checked="undefined" pressed="undefined">
      CUSTOM CSS
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    THEME PROVIDER
    <text value="undefined" checked="undefined" pressed="undefined">
      THEME PROVIDER
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    Bootstrap
    <text value="undefined" checked="undefined" pressed="undefined">
      Bootstrap
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      🎨 If you are looking for inspiration, you can check
    </text>
    <link checked="undefined" pressed="undefined">
      MUI Treasury's customization examples
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Loading buttons
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Loading buttons
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The loading buttons can show pending state and disable interactions.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    <progressbar
      valuetext=""
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </progressbar>
    <text value="undefined" checked="undefined" pressed="undefined">
      SUBMIT
    </text>
  </button>
  <button
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    <text value="undefined" checked="undefined" pressed="undefined">
      LOADING...FETCH DATA
    </text>
  </button>
  <button
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    SAVE
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
    <progressbar
      valuetext=""
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </progressbar>
    <text value="undefined" checked="undefined" pressed="undefined">
      SAVE
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Toggle the switch to see the transition between the different states.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <checkbox checked="false" value="undefined" pressed="undefined">
      Pending
    </checkbox>
  </Label>
  <button value="undefined" checked="undefined" pressed="undefined">
    SUBMIT
    <text value="undefined" checked="undefined" pressed="undefined">
      SUBMIT
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    FETCH DATA
    <text value="undefined" checked="undefined" pressed="undefined">
      FETCH DATA
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SEND
    <text value="undefined" checked="undefined" pressed="undefined">
      SEND
    </text>
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SAVE
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
    <text value="undefined" checked="undefined" pressed="undefined">
      SAVE
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Complex Buttons
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Complex Buttons
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The Text Buttons, Contained Buttons, Floating Action Buttons and Icon
      Buttons are built on top of the same component: the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      . You can take advantage of this lower level component to build custom
      interactions.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    Breakfast
    <text value="undefined" checked="undefined" pressed="undefined">
      Breakfast
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    Burgers
    <text value="undefined" checked="undefined" pressed="undefined">
      Burgers
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    Camera
    <text value="undefined" checked="undefined" pressed="undefined">
      Camera
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Third-party routing library
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Third-party routing library
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      One common use case is to use the button to trigger navigation to a new
      page. The
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      component provides the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop to handle this use case. However for certain focus polyfills
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      requires the DOM node of the provided component. This is achieved by
      attaching a ref to the component and expecting that the component forwards
      this ref to the underlying DOM node. Given that many of the interactive
      components rely on
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      , you should be able to take advantage of it everywhere.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Here is an
    </text>
    <link checked="undefined" pressed="undefined">
      integration example with react-router
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Limitations
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Limitations
    </text>
  </heading>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Cursor not-allowed
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Cursor not-allowed
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The ButtonBase component sets
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      on disabled buttons, which prevents the appearance of a disabled cursor.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      If you wish to use
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      , you have two options:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        1.
        <text value="undefined" checked="undefined" pressed="undefined">
          1.
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        CSS only. You can remove the pointer events style on the disabled state
        of the
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        element:
      </text>
    </listitem>
  </list>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      However:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        You should add
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        back when you need to display
      </text>
      <link checked="undefined" pressed="undefined">
        tooltips on disabled elements
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        .
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        The cursor won't change if you render something other than a button
        element, for instance, a link
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        element.
      </text>
    </listitem>
  </list>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        2.
        <text value="undefined" checked="undefined" pressed="undefined">
          2.
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        DOM change. You can wrap the button:
      </text>
    </listitem>
  </list>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      This has the advantage of supporting any element, for instance, a link
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      element.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Button />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <ButtonBase />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <IconButton />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <LoadingButton />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    <separator
      orientation="horizontal"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <link checked="undefined" pressed="undefined">
      Image List
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        Image List
      </text>
    </link>
    <link checked="undefined" pressed="undefined">
      Button Group
      <text value="undefined" checked="undefined" pressed="undefined">
        Button Group
      </text>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/checkboxes/ 1`] = `
<main value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text value="undefined" checked="undefined" pressed="undefined">
      EDIT THIS PAGE
    </text>
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Checkbox
    <text value="undefined" checked="undefined" pressed="undefined">
      Checkbox
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Checkboxes allow the user to select one or more items from a set.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Checkboxes can be used to turn an option on or off.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      If you have multiple options appearing in a list, you can preserve space
      by using checkboxes instead of on/off switches. If you have a single
      option, avoid using a checkbox and use an on/off switch instead.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Feedback
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          WAI-ARIA
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Bundle size
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Material Design
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Material Design
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Sketch
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Figma
        </text>
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Basic checkboxes
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Basic checkboxes
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true" value="undefined" pressed="undefined">
    primary checkbox
  </checkbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <checkbox checked="true" value="undefined" pressed="undefined">
    secondary checkbox
  </checkbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <checkbox checked="false" value="undefined" pressed="undefined">
    uncontrolled-checkbox
  </checkbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <checkbox
    disabled="true"
    checked="false"
    value="undefined"
    pressed="undefined"
  >
    disabled checkbox
  </checkbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <checkbox
    disabled="true"
    checked="true"
    value="undefined"
    pressed="undefined"
  >
    disabled checked checkbox
  </checkbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <checkbox checked="true" value="undefined" pressed="undefined">
    indeterminate checkbox
  </checkbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <checkbox checked="true" value="undefined" pressed="undefined">
    checkbox with default color
  </checkbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <checkbox checked="true" value="undefined" pressed="undefined">
    checkbox with small size
  </checkbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Indeterminate
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Indeterminate
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      A checkbox input can only have two states in a form: checked or unchecked.
      It either submits its value or doesn't. Visually, there are actually
      three states a checkbox can be in: checked, unchecked, or indeterminate.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <checkbox checked="false" value="undefined" pressed="undefined">
      Parent
    </checkbox>
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <checkbox checked="true" value="undefined" pressed="undefined">
      Child 1
    </checkbox>
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <checkbox checked="false" value="undefined" pressed="undefined">
      Child 2
    </checkbox>
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Label
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Label
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      can be provided with a label thanks to the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      component.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <checkbox checked="true" value="undefined" pressed="undefined">
      Secondary
    </checkbox>
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <checkbox checked="true" value="undefined" pressed="undefined">
      Primary
    </checkbox>
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <checkbox checked="false" value="undefined" pressed="undefined">
      Uncontrolled
    </checkbox>
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <checkbox
      disabled="true"
      checked="false"
      value="undefined"
      pressed="undefined"
    >
      Disabled
    </checkbox>
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <checkbox
      disabled="true"
      checked="true"
      value="undefined"
      pressed="undefined"
    >
      Disabled
    </checkbox>
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <checkbox checked="true" value="undefined" pressed="undefined">
      Indeterminate
    </checkbox>
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <checkbox checked="true" value="undefined" pressed="undefined">
      Custom color
    </checkbox>
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <checkbox checked="false" value="undefined" pressed="undefined">
      Custom icon
    </checkbox>
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <checkbox checked="false" value="undefined" pressed="undefined">
      Custom size
    </checkbox>
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    FormGroup
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      FormGroup
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      is a helpful wrapper used to group selection controls components that
      provides an easier API.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group value="undefined" checked="undefined" pressed="undefined">
    Assign responsibility
    <Legend value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Assign responsibility
      </text>
    </Legend>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <checkbox checked="true" value="undefined" pressed="undefined">
        Gilad Gray
      </checkbox>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </Label>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <checkbox checked="false" value="undefined" pressed="undefined">
        Jason Killian
      </checkbox>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </Label>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <checkbox checked="false" value="undefined" pressed="undefined">
        Antoine Llorca
      </checkbox>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </Label>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Be careful
      </text>
    </paragraph>
  </group>
  <group value="undefined" checked="undefined" pressed="undefined">
    Pick two
    <Legend value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Pick two *
      </text>
    </Legend>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <checkbox checked="true" value="undefined" pressed="undefined">
        Gilad Gray
      </checkbox>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </Label>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <checkbox checked="false" value="undefined" pressed="undefined">
        Jason Killian
      </checkbox>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </Label>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <checkbox checked="false" value="undefined" pressed="undefined">
        Antoine Llorca
      </checkbox>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </Label>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        You can display an error
      </text>
    </paragraph>
  </group>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Label placement
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Label placement
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can change the placement of the label:
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group value="undefined" checked="undefined" pressed="undefined">
    Label Placement
    <Legend value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Label Placement
      </text>
    </Legend>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <checkbox checked="false" value="undefined" pressed="undefined">
        Top
      </checkbox>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </Label>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <checkbox checked="false" value="undefined" pressed="undefined">
        Start
      </checkbox>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </Label>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <checkbox checked="false" value="undefined" pressed="undefined">
        Bottom
      </checkbox>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </Label>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <checkbox checked="false" value="undefined" pressed="undefined">
        End
      </checkbox>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </Label>
  </group>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Customized checkbox
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Customized checkbox
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="false" value="undefined" pressed="undefined">
    decorative checkbox
  </checkbox>
  <checkbox checked="true" value="undefined" pressed="undefined">
    decorative checkbox
  </checkbox>
  <checkbox
    disabled="true"
    checked="false"
    value="undefined"
    pressed="undefined"
  >
    decorative checkbox
  </checkbox>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      🎨 If you are looking for inspiration, you can check
    </text>
    <link checked="undefined" pressed="undefined">
      MUI Treasury's customization examples
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    When to use
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      When to use
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        Checkboxes vs. Radio Buttons
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        Checkboxes vs. Switches
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Accessibility
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Accessibility
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      (WAI-ARIA:
    </text>
    <link checked="undefined" pressed="undefined">
      https://www.w3.org/TR/wai-aria-practices/#checkbox
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      )
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        All form controls should have labels, and this includes radio buttons,
        checkboxes, and switches. In most cases, this is done by using the
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        element (
      </text>
      <link checked="undefined" pressed="undefined">
        FormControlLabel
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        ).
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        When a label can't be used, it's necessary to add an attribute
        directly to the input component. In this case, you can apply the
        additional attribute (e.g.
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        ,
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        ,
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        ) via the
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        prop.
      </text>
    </listitem>
  </list>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Checkbox />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <FormControl />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <FormControlLabel />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <FormGroup />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <FormLabel />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    <separator
      orientation="horizontal"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <link checked="undefined" pressed="undefined">
      Button Group
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        Button Group
      </text>
    </link>
    <link checked="undefined" pressed="undefined">
      Floating Action Button
      <text value="undefined" checked="undefined" pressed="undefined">
        Floating Action Button
      </text>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/dialogs/ 1`] = `
<main value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text value="undefined" checked="undefined" pressed="undefined">
      EDIT THIS PAGE
    </text>
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Dialog
    <text value="undefined" checked="undefined" pressed="undefined">
      Dialog
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Dialogs inform users about a task and can contain critical information,
      require decisions, or involve multiple tasks.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      A Dialog is a type of
    </text>
    <link checked="undefined" pressed="undefined">
      modal
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      window that appears in front of app content to provide critical
      information or ask for a decision. Dialogs disable all app functionality
      when they appear, and remain on screen until confirmed, dismissed, or a
      required action has been taken.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Dialogs are purposefully interruptive, so they should be used sparingly.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Feedback
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          WAI-ARIA
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Bundle size
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Material Design
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Material Design
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Sketch
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Figma
        </text>
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Basic dialog
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Basic dialog
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Simple dialogs can provide additional details or actions about a list
      item. For example, they can display avatars, icons, clarifying subtext, or
      orthogonal actions (such as adding an account).
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Touch mechanics:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        Choosing an option immediately commits the option and closes the menu
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        Touching outside of the dialog, or pressing Back, cancels the action and
        closes the dialog
      </text>
    </listitem>
  </list>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <heading level="6" value="undefined" checked="undefined" pressed="undefined">
    Selected: user02@gmail.com
    <text value="undefined" checked="undefined" pressed="undefined">
      Selected:user02@gmail.com
    </text>
  </heading>
  <LineBreak
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></LineBreak>
  <button value="undefined" checked="undefined" pressed="undefined">
    OPEN SIMPLE DIALOG
    <text value="undefined" checked="undefined" pressed="undefined">
      OPEN SIMPLE DIALOG
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Alerts
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Alerts
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Alerts are urgent interruptions, requiring acknowledgement, that inform
      the user about a situation.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Most alerts don't need titles. They summarize a decision in a
      sentence or two by either:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        Asking a question (e.g. "Delete this conversation?")
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        Making a statement related to the action buttons
      </text>
    </listitem>
  </list>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Use title bar alerts only for high-risk situations, such as the potential
      loss of connectivity. Users should be able to understand the choices based
      on the title and button text alone.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      If a title is required:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        Use a clear question or statement with an explanation in the content
        area, such as "Erase USB storage?".
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        Avoid apologies, ambiguity, or questions, such as “Warning!” or “Are you
        sure?”
      </text>
    </listitem>
  </list>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    OPEN ALERT DIALOG
    <text value="undefined" checked="undefined" pressed="undefined">
      OPEN ALERT DIALOG
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Transitions
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Transitions
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can also swap out the transition, the next example uses
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SLIDE IN ALERT DIALOG
    <text value="undefined" checked="undefined" pressed="undefined">
      SLIDE IN ALERT DIALOG
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Form dialogs
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Form dialogs
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Form dialogs allow users to fill out form fields within a dialog. For
      example, if your site prompts for potential subscribers to fill in their
      email address, they can fill out the email field and touch
      'Submit'.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    OPEN FORM DIALOG
    <text value="undefined" checked="undefined" pressed="undefined">
      OPEN FORM DIALOG
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Customized dialogs
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Customized dialogs
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The dialog has a close button added to aide usability.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    OPEN DIALOG
    <text value="undefined" checked="undefined" pressed="undefined">
      OPEN DIALOG
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Full-screen dialogs
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Full-screen dialogs
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    OPEN FULL-SCREEN DIALOG
    <text value="undefined" checked="undefined" pressed="undefined">
      OPEN FULL-SCREEN DIALOG
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Optional sizes
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Optional sizes
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can set a dialog maximum width by using the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      enumerable in combination with the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      boolean. When the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop is true, the dialog will adapt based on the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      value.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    OPEN MAX-WIDTH DIALOG
    <text value="undefined" checked="undefined" pressed="undefined">
      OPEN MAX-WIDTH DIALOG
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Responsive full-screen
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Responsive full-screen
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You may make a dialog responsively full screen using
    </text>
    <link checked="undefined" pressed="undefined">
      useMediaQuery
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    OPEN RESPONSIVE DIALOG
    <text value="undefined" checked="undefined" pressed="undefined">
      OPEN RESPONSIVE DIALOG
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Confirmation dialogs
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Confirmation dialogs
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Confirmation dialogs require users to explicitly confirm their choice
      before an option is committed. For example, users can listen to multiple
      ringtones but only make a final selection upon touching “OK”.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Touching “Cancel” in a confirmation dialog, or pressing Back, cancels the
      action, discards any changes, and closes the dialog.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group value="undefined" checked="undefined" pressed="undefined">
    <button
      disabled="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Interruptions
      <text value="undefined" checked="undefined" pressed="undefined">
        Interruptions
      </text>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      phone ringtone
      <text value="undefined" checked="undefined" pressed="undefined">
        Phone ringtone
      </text>
      <paragraph value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Dione
        </text>
      </paragraph>
    </combobox>
    <button
      disabled="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Default notification ringtone Tethys
      <text value="undefined" checked="undefined" pressed="undefined">
        Default notification ringtone
      </text>
      <paragraph value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Tethys
        </text>
      </paragraph>
    </button>
  </group>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Draggable dialog
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Draggable dialog
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can create a draggable dialog by using
    </text>
    <link checked="undefined" pressed="undefined">
      react-draggable
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      . To do so, you can pass the imported
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      component as the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      of the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      component. This will make the entire dialog draggable.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    OPEN DRAGGABLE DIALOG
    <text value="undefined" checked="undefined" pressed="undefined">
      OPEN DRAGGABLE DIALOG
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Scrolling long content
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Scrolling long content
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      When dialogs become too long for the user’s viewport or device, they
      scroll.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        the content of the dialog scrolls within the paper element.
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        the content of the dialog scrolls within the body element.
      </text>
    </listitem>
  </list>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Try the demo below to see what we mean:
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SCROLL=PAPER
    <text value="undefined" checked="undefined" pressed="undefined">
      SCROLL=PAPER
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SCROLL=BODY
    <text value="undefined" checked="undefined" pressed="undefined">
      SCROLL=BODY
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Limitations
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Limitations
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Follow the
    </text>
    <link checked="undefined" pressed="undefined">
      Modal limitations section
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Accessibility
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Accessibility
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Follow the
    </text>
    <link checked="undefined" pressed="undefined">
      Modal accessibility section
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Dialog />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <DialogActions />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <DialogContent />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <DialogContentText />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <DialogTitle />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Slide />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    <separator
      orientation="horizontal"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <link checked="undefined" pressed="undefined">
      Backdrop
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        Backdrop
      </text>
    </link>
    <link checked="undefined" pressed="undefined">
      Progress
      <text value="undefined" checked="undefined" pressed="undefined">
        Progress
      </text>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/pagination/ 1`] = `
<main value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text value="undefined" checked="undefined" pressed="undefined">
      EDIT THIS PAGE
    </text>
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Pagination
    <text value="undefined" checked="undefined" pressed="undefined">
      Pagination
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The Pagination component enables the user to select a specific page from a
      range of pages.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Feedback
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Bundle size
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Sketch
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Figma
        </text>
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Basic pagination
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Basic pagination
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to next page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Outlined pagination
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Outlined pagination
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to next page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Rounded pagination
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Rounded pagination
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Pagination size
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Pagination size
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Buttons
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Buttons
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can optionally enable first-page and last-page buttons, or disable the
      previous-page and next-page buttons.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to first page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to last page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
    </list>
  </navigation>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Pagination ranges
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Pagination ranges
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can specify how many digits to display either side of current page
      with the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop, and adjacent to the start and end page number with the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to previous page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          page 6
          <text value="undefined" checked="undefined" pressed="undefined">
            6
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 11
          <text value="undefined" checked="undefined" pressed="undefined">
            11
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to previous page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          page 6
          <text value="undefined" checked="undefined" pressed="undefined">
            6
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 7
          <text value="undefined" checked="undefined" pressed="undefined">
            7
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 11
          <text value="undefined" checked="undefined" pressed="undefined">
            11
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to previous page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          page 6
          <text value="undefined" checked="undefined" pressed="undefined">
            6
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 11
          <text value="undefined" checked="undefined" pressed="undefined">
            11
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to previous page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          page 6
          <text value="undefined" checked="undefined" pressed="undefined">
            6
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 7
          <text value="undefined" checked="undefined" pressed="undefined">
            7
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 11
          <text value="undefined" checked="undefined" pressed="undefined">
            11
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Controlled pagination
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Controlled pagination
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Page:1
    </text>
  </paragraph>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Router integration
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Router integration
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </button>
      </listitem>
    </list>
  </navigation>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    usePagination
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      For advanced customization use cases, we expose a
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      hook. It accepts almost the same options as the Pagination component minus
      all the props related to the rendering of JSX. The Pagination component
      uses this hook internally.
    </text>
  </paragraph>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <navigation value="undefined" checked="undefined" pressed="undefined">
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          previous
          <text value="undefined" checked="undefined" pressed="undefined">
            previous
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        <button value="undefined" checked="undefined" pressed="undefined">
          next
          <text value="undefined" checked="undefined" pressed="undefined">
            next
          </text>
        </button>
      </listitem>
    </list>
  </navigation>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Table pagination
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Table pagination
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      component was designed to paginate a list of arbitrary items when infinite
      loading isn't used. It's preferred in contexts where SEO is
      important, for instance, a blog.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      For the pagination of a large set of tabular data, you should use the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      component.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Rows per page:
    </text>
  </paragraph>
  <combobox
    haspopup="listbox"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Rows per page: 10
  </combobox>
  <textbox value="10" checked="undefined" pressed="undefined"></textbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      21-30 of 100
    </text>
  </paragraph>
  <button
    description="Go to previous page"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Go to previous page
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </button>
  <button
    description="Go to next page"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Go to next page
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <blockquote value="undefined" checked="undefined" pressed="undefined">
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        ⚠️ Note that the
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        page prop starts at 1 to match the requirement of including the value in
        the URL, while the
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        page prop stats at 0 to match the requirement of zero-based JavaScript
        arrays that comes with rendering a lot of tabular data.
      </text>
    </paragraph>
  </blockquote>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can learn more about this use case in the
    </text>
    <link checked="undefined" pressed="undefined">
      table section
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      of the documentation.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Accessibility
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Accessibility
    </text>
  </heading>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    ARIA
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      ARIA
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The root node has a role of "navigation" and aria-label
      "pagination navigation" by default. The page items have an
      aria-label that identifies the purpose of the item ("go to first
      page", "go to previous page", "go to page 1"
      etc.). You can override these using the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop.
    </text>
  </paragraph>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Keyboard
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Keyboard
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The pagination items are in tab order, with a tabindex of "0".
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Pagination />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <PaginationItem />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    <separator
      orientation="horizontal"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <link checked="undefined" pressed="undefined">
      Autocomplete
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        Autocomplete
      </text>
    </link>
    <link checked="undefined" pressed="undefined">
      Skeleton
      <text value="undefined" checked="undefined" pressed="undefined">
        Skeleton
      </text>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/pickers 1`] = `
<main value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text value="undefined" checked="undefined" pressed="undefined">
      EDIT THIS PAGE
    </text>
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Date / Time pickers
    <text value="undefined" checked="undefined" pressed="undefined">
      Date / Time pickers
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Date pickers and Time pickers provide a simple way to select a single
      value from a pre-determined set.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        On mobile, pickers are best suited for display in confirmation dialog.
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        For inline display, such as on a form, consider using compact controls
        such as segmented dropdown buttons.
      </text>
    </listitem>
  </list>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Feedback
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          WAI-ARIA
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Bundle size
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Material Design
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Material Design
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Sketch
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Figma
        </text>
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    @material-ui/pickers
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      @material-ui/pickers
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <img value="undefined" checked="undefined" pressed="undefined">
      stars
    </img>
    <text value="undefined" checked="undefined" pressed="undefined"></text>
    <img value="undefined" checked="undefined" pressed="undefined">
      npm downloads
    </img>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <link checked="undefined" pressed="undefined">
      @material-ui/pickers
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      provides date picker and time picker controls.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Date picker desktop
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <textbox
    description="mm/dd/yyyy"
    value="08/18/2014"
    checked="undefined"
    pressed="undefined"
  >
    Date picker desktop
    <text value="undefined" checked="undefined" pressed="undefined">
      08/18/2014
    </text>
  </textbox>
  <button value="undefined" checked="undefined" pressed="undefined">
    change date
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      mm/dd/yyyy
    </text>
  </paragraph>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Date picker mobile
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <textbox
    readonly="true"
    value="08/18/2014"
    checked="undefined"
    pressed="undefined"
  >
    Choose date, selected date is Aug 18, 2014
    <text value="undefined" checked="undefined" pressed="undefined">
      08/18/2014
    </text>
  </textbox>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Time picker
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <textbox
    readonly="true"
    value="09:11 PM"
    checked="undefined"
    pressed="undefined"
  >
    Choose time, selected time is 9:11 PM
    <text value="undefined" checked="undefined" pressed="undefined">
      09:11 PM
    </text>
  </textbox>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Native pickers
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Native pickers
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      ⚠️ Native input controls support by browsers
    </text>
    <link checked="undefined" pressed="undefined">
      isn't perfect
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      . Have a look at
    </text>
    <link checked="undefined" pressed="undefined">
      @material-ui/pickers
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      for a richer solution.
    </text>
  </paragraph>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Datepickers
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Datepickers
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      A native datepicker example with
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Birthday
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <Date value="2017-05-24" checked="undefined" pressed="undefined">
      Birthday
      <spinbutton
        valuetext="05"
        valuemax="12"
        valuemin="1"
        value="5"
        checked="undefined"
        pressed="undefined"
      >
        Month
        <text value="undefined" checked="undefined" pressed="undefined">
          05
        </text>
      </spinbutton>
      <text value="undefined" checked="undefined" pressed="undefined">
        /
      </text>
      <spinbutton
        valuetext="24"
        valuemax="31"
        valuemin="1"
        value="24"
        checked="undefined"
        pressed="undefined"
      >
        Day
        <text value="undefined" checked="undefined" pressed="undefined">
          24
        </text>
      </spinbutton>
      <text value="undefined" checked="undefined" pressed="undefined">
        /
      </text>
      <spinbutton
        valuetext="2017"
        valuemax="275760"
        valuemin="1"
        value="2017"
        checked="undefined"
        pressed="undefined"
      >
        Year
        <text value="undefined" checked="undefined" pressed="undefined">
          2017
        </text>
      </spinbutton>
    </Date>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Date & Time pickers
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Date & Time pickers
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      A native date & time picker example with
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Next appointment
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <DateTime value="2017-05-24T10:30" checked="undefined" pressed="undefined">
      Next appointment
      <spinbutton
        valuetext="05"
        valuemax="12"
        valuemin="1"
        value="5"
        checked="undefined"
        pressed="undefined"
      >
        Month
        <text value="undefined" checked="undefined" pressed="undefined">
          05
        </text>
      </spinbutton>
      <text value="undefined" checked="undefined" pressed="undefined">
        /
      </text>
      <spinbutton
        valuetext="24"
        valuemax="31"
        valuemin="1"
        value="24"
        checked="undefined"
        pressed="undefined"
      >
        Day
        <text value="undefined" checked="undefined" pressed="undefined">
          24
        </text>
      </spinbutton>
      <text value="undefined" checked="undefined" pressed="undefined">
        /
      </text>
      <spinbutton
        valuetext="2017"
        valuemax="275760"
        valuemin="1"
        value="2017"
        checked="undefined"
        pressed="undefined"
      >
        Year
        <text value="undefined" checked="undefined" pressed="undefined">
          2017
        </text>
      </spinbutton>
      <text value="undefined" checked="undefined" pressed="undefined">
        ,
      </text>
      <spinbutton
        valuetext="10"
        valuemax="12"
        valuemin="1"
        value="10"
        checked="undefined"
        pressed="undefined"
      >
        Hours
        <text value="undefined" checked="undefined" pressed="undefined">
          10
        </text>
      </spinbutton>
      <text value="undefined" checked="undefined" pressed="undefined">
        :
      </text>
      <spinbutton
        valuetext="30"
        valuemax="59"
        valuemin="0"
        value="30"
        checked="undefined"
        pressed="undefined"
      >
        Minutes
        <text value="undefined" checked="undefined" pressed="undefined">
          30
        </text>
      </spinbutton>
      <text value="undefined" checked="undefined" pressed="undefined"></text>
      <spinbutton
        valuetext="AM"
        valuemax="2"
        valuemin="1"
        value="1"
        checked="undefined"
        pressed="undefined"
      >
        AM/PM
        <text value="undefined" checked="undefined" pressed="undefined">
          AM
        </text>
      </spinbutton>
    </DateTime>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Time pickers
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Time pickers
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      A native time picker example with
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Alarm clock
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <InputTime value="07:30" checked="undefined" pressed="undefined">
      Alarm clock
      <spinbutton
        valuetext="07"
        valuemax="12"
        valuemin="1"
        value="7"
        checked="undefined"
        pressed="undefined"
      >
        Hours
        <text value="undefined" checked="undefined" pressed="undefined">
          07
        </text>
      </spinbutton>
      <text value="undefined" checked="undefined" pressed="undefined">
        :
      </text>
      <spinbutton
        valuetext="30"
        valuemax="59"
        valuemin="0"
        value="30"
        checked="undefined"
        pressed="undefined"
      >
        Minutes
        <text value="undefined" checked="undefined" pressed="undefined">
          30
        </text>
      </spinbutton>
      <text value="undefined" checked="undefined" pressed="undefined"></text>
      <spinbutton
        valuetext="AM"
        valuemax="2"
        valuemin="1"
        value="1"
        checked="undefined"
        pressed="undefined"
      >
        AM/PM
        <text value="undefined" checked="undefined" pressed="undefined">
          AM
        </text>
      </spinbutton>
    </InputTime>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <TextField />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    <separator
      orientation="horizontal"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <link checked="undefined" pressed="undefined">
      Floating Action Button
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        Floating Action Button
      </text>
    </link>
    <link checked="undefined" pressed="undefined">
      Radio
      <text value="undefined" checked="undefined" pressed="undefined">
        Radio
      </text>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/radio-buttons 1`] = `
<main value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text value="undefined" checked="undefined" pressed="undefined">
      EDIT THIS PAGE
    </text>
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Radio
    <text value="undefined" checked="undefined" pressed="undefined">
      Radio
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Radio buttons allow the user to select one option from a set.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Use radio buttons when the user needs to see all available options. If
      available options can be collapsed, consider using a dropdown menu because
      it uses less space.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Radio buttons should have the most commonly used option selected by
      default.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Feedback
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          WAI-ARIA
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Bundle size
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Material Design
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Material Design
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Sketch
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Figma
        </text>
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    RadioGroup
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      RadioGroup
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      is a helpful wrapper used to group
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      components that provides an easier API, and proper keyboard accessibility
      to the group.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group value="undefined" checked="undefined" pressed="undefined">
    Gender
    <Legend value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Gender
      </text>
    </Legend>
    <radiogroup value="undefined" checked="undefined" pressed="undefined">
      gender
      <Label value="undefined" checked="undefined" pressed="undefined">
        <radio checked="true" value="undefined" pressed="undefined">
          Female
        </radio>
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
      </Label>
      <Label value="undefined" checked="undefined" pressed="undefined">
        <radio checked="false" value="undefined" pressed="undefined">
          Male
        </radio>
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
      </Label>
      <Label value="undefined" checked="undefined" pressed="undefined">
        <radio checked="false" value="undefined" pressed="undefined">
          Other
        </radio>
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
      </Label>
      <Label value="undefined" checked="undefined" pressed="undefined">
        <radio
          disabled="true"
          checked="false"
          value="undefined"
          pressed="undefined"
        >
          (Disabled option)
        </radio>
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
      </Label>
    </radiogroup>
  </group>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      To lay out the buttons horizontally, set the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop:
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Standalone radio buttons
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Standalone radio buttons
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      can also be used standalone, without the RadioGroup wrapper.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <radio checked="true" value="undefined" pressed="undefined">
    A
  </radio>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <radio checked="false" value="undefined" pressed="undefined">
    B
  </radio>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <radio checked="false" value="undefined" pressed="undefined">
    C
  </radio>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <radio checked="false" value="undefined" pressed="undefined">
    D
  </radio>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <radio checked="false" value="undefined" pressed="undefined">
    E
  </radio>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Label placement
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Label placement
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can change the placement of the label with the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      component's
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop:
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group value="undefined" checked="undefined" pressed="undefined">
    labelPlacement
    <Legend value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        labelPlacement
      </text>
    </Legend>
    <radiogroup value="undefined" checked="undefined" pressed="undefined">
      position
      <Label value="undefined" checked="undefined" pressed="undefined">
        <radio checked="true" value="undefined" pressed="undefined">
          Top
        </radio>
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
      </Label>
      <Label value="undefined" checked="undefined" pressed="undefined">
        <radio checked="false" value="undefined" pressed="undefined">
          Start
        </radio>
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
      </Label>
      <Label value="undefined" checked="undefined" pressed="undefined">
        <radio checked="false" value="undefined" pressed="undefined">
          Bottom
        </radio>
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
      </Label>
      <Label value="undefined" checked="undefined" pressed="undefined">
        <radio checked="false" value="undefined" pressed="undefined">
          End
        </radio>
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
      </Label>
    </radiogroup>
  </group>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Show error
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Show error
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      In general, radio buttons should have a value selected by default. If this
      is not the case, you can display an error if no value is selected when the
      form is submitted:
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <group value="undefined" checked="undefined" pressed="undefined">
      Pop quiz: Material-UI is...
      <Legend value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Pop quiz: Material-UI is...
        </text>
      </Legend>
      <radiogroup value="undefined" checked="undefined" pressed="undefined">
        quiz
        <Label value="undefined" checked="undefined" pressed="undefined">
          <radio checked="false" value="undefined" pressed="undefined">
            The best!
          </radio>
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </Label>
        <Label value="undefined" checked="undefined" pressed="undefined">
          <radio checked="false" value="undefined" pressed="undefined">
            The worst.
          </radio>
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
        </Label>
      </radiogroup>
      <paragraph value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Choose wisely
        </text>
      </paragraph>
      <button value="undefined" checked="undefined" pressed="undefined">
        CHECK ANSWER
        <text value="undefined" checked="undefined" pressed="undefined">
          CHECK ANSWER
        </text>
      </button>
    </group>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Customized radios
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Customized radios
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group value="undefined" checked="undefined" pressed="undefined">
    Gender
    <Legend value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Gender
      </text>
    </Legend>
    <radiogroup value="undefined" checked="undefined" pressed="undefined">
      gender
      <Label value="undefined" checked="undefined" pressed="undefined">
        <radio checked="true" value="undefined" pressed="undefined">
          Female
        </radio>
      </Label>
      <Label value="undefined" checked="undefined" pressed="undefined">
        <radio checked="false" value="undefined" pressed="undefined">
          Male
        </radio>
      </Label>
      <Label value="undefined" checked="undefined" pressed="undefined">
        <radio checked="false" value="undefined" pressed="undefined">
          Other
        </radio>
      </Label>
      <Label value="undefined" checked="undefined" pressed="undefined">
        <radio
          disabled="true"
          checked="false"
          value="undefined"
          pressed="undefined"
        >
          (Disabled option)
        </radio>
      </Label>
    </radiogroup>
  </group>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    useRadioGroup
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      For advanced customization use cases, a
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      hook is exposed. It returns the context value of the parent radio group.
      The Radio component uses this hook internally.
    </text>
  </paragraph>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    API
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="4" value="undefined" checked="undefined" pressed="undefined">
    Returns
    <text value="undefined" checked="undefined" pressed="undefined">
      Returns
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      (Object):
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        (String[optional]): The name used to reference the value of the control.
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        (Void[optional]): Callback fired when a radio button is selected.
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        (Any[optional]): Value of the selected radio button.
      </text>
    </listitem>
  </list>
  <heading level="4" value="undefined" checked="undefined" pressed="undefined">
    Example
    <text value="undefined" checked="undefined" pressed="undefined">
      Example
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <radiogroup value="undefined" checked="undefined" pressed="undefined">
    <Label value="undefined" checked="undefined" pressed="undefined">
      <radio checked="true" value="undefined" pressed="undefined">
        First
      </radio>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </Label>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <radio checked="false" value="undefined" pressed="undefined">
        Second
      </radio>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </Label>
  </radiogroup>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    When to use
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      When to use
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        Checkboxes vs. Radio Buttons
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Accessibility
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Accessibility
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      (WAI-ARIA:
    </text>
    <link checked="undefined" pressed="undefined">
      https://www.w3.org/TR/wai-aria-practices/#radiobutton
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      )
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        All form controls should have labels, and this includes radio buttons,
        checkboxes, and switches. In most cases, this is done by using the
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        element (
      </text>
      <link checked="undefined" pressed="undefined">
        FormControlLabel
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        ).
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        When a label can't be used, it's necessary to add an attribute
        directly to the input component. In this case, you can apply the
        additional attribute (e.g.
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        ,
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        ,
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        ) via the
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        property.
      </text>
    </listitem>
  </list>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <FormControl />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <FormControlLabel />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <FormLabel />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Radio />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <RadioGroup />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    <separator
      orientation="horizontal"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <link checked="undefined" pressed="undefined">
      Date / Time
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        Date / Time
      </text>
    </link>
    <link checked="undefined" pressed="undefined">
      Select
      <text value="undefined" checked="undefined" pressed="undefined">
        Select
      </text>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/rating/ 1`] = `
<main value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text value="undefined" checked="undefined" pressed="undefined">
      EDIT THIS PAGE
    </text>
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Rating
    <text value="undefined" checked="undefined" pressed="undefined">
      Rating
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Ratings provide insight regarding others’ opinions and experiences, and
      can allow the user to submit a rating of thier own.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Feedback
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          WAI-ARIA
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Bundle size
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Sketch
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Figma
        </text>
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Basic rating
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Basic rating
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Legend value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Controlled
    </text>
  </Legend>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    1 Star
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="true" value="undefined" pressed="undefined">
    2 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    3 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    4 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    5 Stars
  </radio>
  <Legend value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Read only
    </text>
  </Legend>
  <img value="undefined" checked="undefined" pressed="undefined">
    2 Stars
  </img>
  <Legend value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Disabled
    </text>
  </Legend>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio disabled="true" checked="false" value="undefined" pressed="undefined">
    1 Star
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio disabled="true" checked="true" value="undefined" pressed="undefined">
    2 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio disabled="true" checked="false" value="undefined" pressed="undefined">
    3 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio disabled="true" checked="false" value="undefined" pressed="undefined">
    4 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio disabled="true" checked="false" value="undefined" pressed="undefined">
    5 Stars
  </radio>
  <Legend value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      No rating given
    </text>
  </Legend>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    1 Star
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    2 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    3 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    4 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    5 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <radio checked="true" value="undefined" pressed="undefined">
      Empty
    </radio>
  </Label>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Rating precision
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Rating precision
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The rating can display any float number with the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop. Use the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop to define the minimum increment value change allowed.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    0.5 Stars
  </radio>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <radio checked="false" value="undefined" pressed="undefined">
    1 Star
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    1.5 Stars
  </radio>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <radio checked="false" value="undefined" pressed="undefined">
    2 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="true" value="undefined" pressed="undefined">
    2.5 Stars
  </radio>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <radio checked="false" value="undefined" pressed="undefined">
    3 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    3.5 Stars
  </radio>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <radio checked="false" value="undefined" pressed="undefined">
    4 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    4.5 Stars
  </radio>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <radio checked="false" value="undefined" pressed="undefined">
    5 Stars
  </radio>
  <img value="undefined" checked="undefined" pressed="undefined">
    2.5 Stars
  </img>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Hover feedback
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Hover feedback
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can display a label on hover to help the user pick the correct rating
      value. The demo uses the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    0.5 Stars
  </radio>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <radio checked="false" value="undefined" pressed="undefined">
    1 Star
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    1.5 Stars
  </radio>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <radio checked="true" value="undefined" pressed="undefined">
    2 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    2.5 Stars
  </radio>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <radio checked="false" value="undefined" pressed="undefined">
    3 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    3.5 Stars
  </radio>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <radio checked="false" value="undefined" pressed="undefined">
    4 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    4.5 Stars
  </radio>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <radio checked="false" value="undefined" pressed="undefined">
    5 Stars
  </radio>
  <text value="undefined" checked="undefined" pressed="undefined">
    Poor+
  </text>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Sizes
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Sizes
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      For larger or smaller ratings use the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    1 Star
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="true" value="undefined" pressed="undefined">
    2 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    3 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    4 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    5 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    1 Star
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="true" value="undefined" pressed="undefined">
    2 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    3 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    4 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    5 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    1 Star
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="true" value="undefined" pressed="undefined">
    2 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    3 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    4 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    5 Stars
  </radio>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Customized rating
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Customized rating
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Legend value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Custom icon and color
    </text>
  </Legend>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    0.5 Hearts
  </radio>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <radio checked="false" value="undefined" pressed="undefined">
    1 Heart
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    1.5 Hearts
  </radio>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <radio checked="true" value="undefined" pressed="undefined">
    2 Hearts
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    2.5 Hearts
  </radio>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <radio checked="false" value="undefined" pressed="undefined">
    3 Hearts
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    3.5 Hearts
  </radio>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <radio checked="false" value="undefined" pressed="undefined">
    4 Hearts
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    4.5 Hearts
  </radio>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <radio checked="false" value="undefined" pressed="undefined">
    5 Hearts
  </radio>
  <Legend value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      10 stars
    </text>
  </Legend>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    1 Star
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="true" value="undefined" pressed="undefined">
    2 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    3 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    4 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    5 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    6 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    7 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    8 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    9 Stars
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    10 Stars
  </radio>
  <Legend value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Custom icon set
    </text>
  </Legend>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    Very Dissatisfied
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="true" value="undefined" pressed="undefined">
    Dissatisfied
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    Neutral
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    Satisfied
  </radio>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </Label>
  <radio checked="false" value="undefined" pressed="undefined">
    Very Satisfied
  </radio>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Accessibility
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Accessibility
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      (
    </text>
    <link checked="undefined" pressed="undefined">
      WAI tutorial
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      )
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The accessibility of this component relies on:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        A radio group with its fields visually hidden. It contains six radio
        buttons, one for each star, and another for 0 stars that is checked by
        default. Be sure to provide a value for the
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        prop that is unique to the parent form.
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        Labels for the radio buttons containing actual text (“1 Star”, “2
        Stars”, …). Be sure to provide a suitable function to the
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        prop when the page is in a language other than English. You can use the
      </text>
      <link checked="undefined" pressed="undefined">
        included locales
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        , or provide your own.
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        A visually distinct appearance for the rating icons. By default, the
        rating component uses both a difference of color and shape (filled and
        empty icons)to indicate the value. In the event that you are using color
        as the only means to indicate the value, the information should also be
        also displayed as text, as in this demo. This is important to match
      </text>
      <link checked="undefined" pressed="undefined">
        success Criterion 1.4.1
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        of WCAG2.1.
      </text>
    </listitem>
  </list>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <img value="undefined" checked="undefined" pressed="undefined">
    3.5 Stars
  </img>
  <text value="undefined" checked="undefined" pressed="undefined">
    Good
  </text>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    ARIA
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      ARIA
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The read only rating has a role of "img", and an aria-label that
      describes the displayed rating.
    </text>
  </paragraph>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Keyboard
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Keyboard
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Because the rating component uses radio buttons, keyboard interaction
      follows the native browser behavior. Tab will focus the current rating,
      and cursor keys control the selected rating.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The read only rating is not focusable.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Rating />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    <separator
      orientation="horizontal"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <link checked="undefined" pressed="undefined">
      Slider
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        Slider
      </text>
    </link>
    <link checked="undefined" pressed="undefined">
      Switch
      <text value="undefined" checked="undefined" pressed="undefined">
        Switch
      </text>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/selects/ 1`] = `
<main value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text value="undefined" checked="undefined" pressed="undefined">
      EDIT THIS PAGE
    </text>
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Select
    <text value="undefined" checked="undefined" pressed="undefined">
      Select
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Select components are used for collecting user provided information from a
      list of options.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Feedback
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Bundle size
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Sketch
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Figma
        </text>
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Basic select
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Basic select
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Menus are positioned over their emitting elements such that the currently
      selected menu item appears on top of the emitting element.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Age
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <combobox
    haspopup="listbox"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Age ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </combobox>
  <textbox value="undefined" checked="undefined" pressed="undefined"></textbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Advanced features
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Advanced features
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The Select component is meant to be interchangeable with a native
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      element.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      If you are looking for more advanced features, like combobox, multiselect,
      autocomplete, async or creatable support, head to the
    </text>
    <link checked="undefined" pressed="undefined">
      Autocomplete component
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      . It's meant to be an improved version of the
      "react-select" and "downshift" packages.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Props
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Props
    </text>
  </heading>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Filled and outlined variants
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Filled and outlined variants
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Age
    </text>
  </Label>
  <combobox
    haspopup="listbox"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Age ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </combobox>
  <textbox value="undefined" checked="undefined" pressed="undefined"></textbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <group value="undefined" checked="undefined" pressed="undefined">
    <Legend value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Age
      </text>
    </Legend>
  </group>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Age
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <combobox
    haspopup="listbox"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Age ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </combobox>
  <textbox value="undefined" checked="undefined" pressed="undefined"></textbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Labels and helper text
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Labels and helper text
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Age
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <combobox
    haspopup="listbox"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Age ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </combobox>
  <textbox value="undefined" checked="undefined" pressed="undefined"></textbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      With label + helper text
    </text>
  </paragraph>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <combobox
    haspopup="listbox"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Without label
    <text value="undefined" checked="undefined" pressed="undefined">
      None
    </text>
  </combobox>
  <textbox value="undefined" checked="undefined" pressed="undefined"></textbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Without label
    </text>
  </paragraph>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Auto width
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Auto width
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Age
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <combobox
    haspopup="listbox"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Age ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </combobox>
  <textbox value="undefined" checked="undefined" pressed="undefined"></textbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Other props
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Other props
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Name
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <combobox
    disabled="true"
    haspopup="listbox"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Name ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </combobox>
  <textbox value="undefined" checked="undefined" pressed="undefined"></textbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Disabled
    </text>
  </paragraph>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Name
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <combobox
    haspopup="listbox"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Name ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </combobox>
  <textbox value="undefined" checked="undefined" pressed="undefined"></textbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Error
    </text>
  </paragraph>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Name
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <combobox
    haspopup="listbox"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Name ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </combobox>
  <textbox value="undefined" checked="undefined" pressed="undefined"></textbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Read only
    </text>
  </paragraph>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Age *
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <combobox
    haspopup="listbox"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Age ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </combobox>
  <textbox
    required="true"
    invalid="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></textbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Required
    </text>
  </paragraph>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Native select
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Native select
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      As the user experience can be improved on mobile using the native select
      of the platform, we allow such pattern.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Age
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <combobox value="Thirty" checked="undefined" pressed="undefined">
    Age
    <MenuListPopup value="undefined" checked="undefined" pressed="undefined">
      <menuitem value="undefined" checked="undefined" pressed="undefined">
        Ten
      </menuitem>
      <menuitem value="undefined" checked="undefined" pressed="undefined">
        Twenty
      </menuitem>
      <menuitem
        selected="true"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        Thirty
      </menuitem>
    </MenuListPopup>
  </combobox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    TextField
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      TextField
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      wrapper component is a complete form control including a label, input and
      help text. You can find an example with the select mode
    </text>
    <link checked="undefined" pressed="undefined">
      in this section
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Customized selects
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Customized selects
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The first step is to style the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      component. Once it's styled, you can either use it directly as a text
      field or provide it to the select
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop to have a
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      field.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Age
    </text>
  </Label>
  <textbox value="undefined" checked="undefined" pressed="undefined">
    Age
  </textbox>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Age
    </text>
  </Label>
  <combobox
    haspopup="listbox"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Age ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </combobox>
  <textbox value="undefined" checked="undefined" pressed="undefined"></textbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Age
    </text>
  </Label>
  <combobox value="None" checked="undefined" pressed="undefined">
    Age
    <MenuListPopup value="undefined" checked="undefined" pressed="undefined">
      <menuitem
        selected="true"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></menuitem>
      <menuitem value="undefined" checked="undefined" pressed="undefined">
        Ten
      </menuitem>
      <menuitem value="undefined" checked="undefined" pressed="undefined">
        Twenty
      </menuitem>
      <menuitem value="undefined" checked="undefined" pressed="undefined">
        Thirty
      </menuitem>
    </MenuListPopup>
  </combobox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      🎨 If you are looking for inspiration, you can check
    </text>
    <link checked="undefined" pressed="undefined">
      MUI Treasury's customization examples
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Multiple select
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Multiple select
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      component can handle multiple selections. It's enabled with the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Like with the single selection, you can pull out the new value by
      accessing
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      in the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      callback. It's always an array.
    </text>
  </paragraph>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Default
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Default
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Name
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <combobox
    haspopup="listbox"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Name ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </combobox>
  <textbox value="undefined" checked="undefined" pressed="undefined"></textbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Checkmarks
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Checkmarks
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Tag
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <combobox
    haspopup="listbox"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Tag ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </combobox>
  <textbox value="undefined" checked="undefined" pressed="undefined"></textbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Chip
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Chip
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Chip
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <combobox
    haspopup="listbox"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Chip ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </combobox>
  <textbox value="undefined" checked="undefined" pressed="undefined"></textbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Placeholder
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Placeholder
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <combobox
    haspopup="listbox"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Without label
    <text value="undefined" checked="undefined" pressed="undefined">
      Placeholder
    </text>
  </combobox>
  <textbox value="undefined" checked="undefined" pressed="undefined"></textbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Native
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Native
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Native
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <listbox
    multiselectable="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Native
    <option value="undefined" checked="undefined" pressed="undefined">
      Oliver Hansen
    </option>
    <option value="undefined" checked="undefined" pressed="undefined">
      Van Henry
    </option>
    <option value="undefined" checked="undefined" pressed="undefined">
      April Tucker
    </option>
    <option value="undefined" checked="undefined" pressed="undefined">
      Ralph Hubbard
    </option>
    <option value="undefined" checked="undefined" pressed="undefined">
      Omar Alexander
    </option>
    <option value="undefined" checked="undefined" pressed="undefined">
      Carlos Abbott
    </option>
    <option value="undefined" checked="undefined" pressed="undefined">
      Miriam Wagner
    </option>
    <option value="undefined" checked="undefined" pressed="undefined">
      Bradley Wilkerson
    </option>
    <option value="undefined" checked="undefined" pressed="undefined">
      Virginia Andrews
    </option>
    <option value="undefined" checked="undefined" pressed="undefined">
      Kelly Snyder
    </option>
  </listbox>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Controlled open select
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Controlled open select
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    OPEN THE SELECT
    <text value="undefined" checked="undefined" pressed="undefined">
      OPEN THE SELECT
    </text>
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Age
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <combobox
    haspopup="listbox"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Age ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </combobox>
  <textbox value="undefined" checked="undefined" pressed="undefined"></textbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    With a dialog
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      With a dialog
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      While it's discouraged by the Material Design specification, you can
      use a select inside a dialog.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    OPEN SELECT DIALOG
    <text value="undefined" checked="undefined" pressed="undefined">
      OPEN SELECT DIALOG
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Grouping
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Grouping
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Display categories with the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      component or the native
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      element.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Grouping
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <combobox value="None" checked="undefined" pressed="undefined">
    Grouping
    <MenuListPopup value="undefined" checked="undefined" pressed="undefined">
      <menuitem
        selected="true"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></menuitem>
      <menuitem value="undefined" checked="undefined" pressed="undefined">
        Option 1
      </menuitem>
      <menuitem value="undefined" checked="undefined" pressed="undefined">
        Option 2
      </menuitem>
      <menuitem value="undefined" checked="undefined" pressed="undefined">
        Option 3
      </menuitem>
      <menuitem value="undefined" checked="undefined" pressed="undefined">
        Option 4
      </menuitem>
    </MenuListPopup>
  </combobox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Grouping
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <combobox
    haspopup="listbox"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </combobox>
  <textbox value="undefined" checked="undefined" pressed="undefined"></textbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Accessibility
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Accessibility
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      To properly label your
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      input you need an extra element with an
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      that contains a label. That
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      needs to match the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      of the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      e.g.
    </text>
  </paragraph>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Alternatively a
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      with an
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      and
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      creates the proper markup and ids for you:
    </text>
  </paragraph>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      For a
    </text>
    <link checked="undefined" pressed="undefined">
      native select
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      , you should mention a label by giving the value of the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      attribute of the select element to the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      's
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      attribute:
    </text>
  </paragraph>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <NativeSelect />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Select />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    <separator
      orientation="horizontal"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <link checked="undefined" pressed="undefined">
      Radio
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        Radio
      </text>
    </link>
    <link checked="undefined" pressed="undefined">
      Slider
      <text value="undefined" checked="undefined" pressed="undefined">
        Slider
      </text>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/slider 1`] = `
<main value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text value="undefined" checked="undefined" pressed="undefined">
      EDIT THIS PAGE
    </text>
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Slider
    <text value="undefined" checked="undefined" pressed="undefined">
      Slider
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Sliders allow users to make selections from a range of values.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Sliders reflect a range of values along a bar, from which users may select
      a single value. They are ideal for adjusting settings such as volume,
      brightness, or applying image filters.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        📦
      </text>
      <link checked="undefined" pressed="undefined">
        22 kB gzipped
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        (but only +8 kB when used together with other Material-UI components).
      </text>
    </listitem>
  </list>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Feedback
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          WAI-ARIA
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Bundle size
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Material Design
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Material Design
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Sketch
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Figma
        </text>
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Continuous sliders
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Continuous sliders
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Continuous sliders allow users to select a value along a subjective range.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Volume
    </text>
  </paragraph>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <slider
    valuetext=""
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="30"
    checked="undefined"
    pressed="undefined"
  >
    Volume
  </slider>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Disabled slider
    </text>
  </paragraph>
  <slider
    valuetext=""
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="30"
    checked="undefined"
    pressed="undefined"
  >
    Disabled slider
  </slider>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Discrete sliders
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Discrete sliders
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Discrete sliders can be adjusted to a specific value by referencing its
      value indicator. By order of demos:
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can generate a mark for each step with
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Temperature
    </text>
  </paragraph>
  <slider
    valuetext="30°C"
    valuemax="110"
    valuemin="10"
    orientation="horizontal"
    value="30"
    checked="undefined"
    pressed="undefined"
  >
    Temperature
    <text value="undefined" checked="undefined" pressed="undefined">
      30
    </text>
  </slider>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Disabled
    </text>
  </paragraph>
  <slider
    valuetext="30°C"
    valuemax="110"
    valuemin="10"
    orientation="horizontal"
    value="30"
    checked="undefined"
    pressed="undefined"
  >
    Temperature
    <text value="undefined" checked="undefined" pressed="undefined">
      30
    </text>
  </slider>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Small steps
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Small steps
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can change the default step increment.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Small steps
    </text>
  </paragraph>
  <slider
    valuetext="5e-8°C"
    valuemax="1.0000000116860974e-7"
    valuemin="-5.000000058430487e-8"
    orientation="horizontal"
    value="5.000000058430487e-8"
    checked="undefined"
    pressed="undefined"
  >
    Small steps
    <text value="undefined" checked="undefined" pressed="undefined">
      5e-8
    </text>
  </slider>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Custom marks
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Custom marks
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can have custom marks by providing a rich array to the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Custom marks
    </text>
  </paragraph>
  <text value="undefined" checked="undefined" pressed="undefined">
    0°C20°C37°C100°C
  </text>
  <slider
    valuetext="20°C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="20"
    checked="undefined"
    pressed="undefined"
  >
    Custom marks
    <text value="undefined" checked="undefined" pressed="undefined">
      20
    </text>
  </slider>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Restricted values
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Restricted values
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can restrict the selectable values to those provided with the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop with
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Restricted values
    </text>
  </paragraph>
  <text value="undefined" checked="undefined" pressed="undefined">
    0°C20°C37°C100°C
  </text>
  <slider
    valuetext="20°C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="20"
    checked="undefined"
    pressed="undefined"
  >
    Restricted values
    <text value="undefined" checked="undefined" pressed="undefined">
      2
    </text>
  </slider>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Label always visible
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Label always visible
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can force the thumb label to be always visible with
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Always visible
    </text>
  </paragraph>
  <text value="undefined" checked="undefined" pressed="undefined">
    0°C20°C37°C100°C
  </text>
  <slider
    valuetext="80°C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="80"
    checked="undefined"
    pressed="undefined"
  >
    Always visible
    <text value="undefined" checked="undefined" pressed="undefined">
      80
    </text>
  </slider>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Range slider
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Range slider
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The slider can be used to set the start and end of a range by supplying an
      array of values to the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Temperature range
    </text>
  </paragraph>
  <slider
    valuetext="20°C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="20"
    checked="undefined"
    pressed="undefined"
  >
    <text value="undefined" checked="undefined" pressed="undefined">
      20
    </text>
  </slider>
  <slider
    valuetext="37°C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="37"
    checked="undefined"
    pressed="undefined"
  >
    <text value="undefined" checked="undefined" pressed="undefined">
      37
    </text>
  </slider>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Slider with input field
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Slider with input field
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      In this example an input allows a discrete value to be set.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Volume
    </text>
  </paragraph>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <slider
    valuetext=""
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="30"
    checked="undefined"
    pressed="undefined"
  >
    Volume
  </slider>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <spinbutton
    valuetext=""
    valuemax="100"
    valuemin="0"
    value="30"
    checked="undefined"
    pressed="undefined"
  >
    Volume
    <text value="undefined" checked="undefined" pressed="undefined">
      30
    </text>
  </spinbutton>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Customized sliders
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Customized sliders
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      iOS
    </text>
  </paragraph>
  <slider
    valuetext=""
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="60"
    checked="undefined"
    pressed="undefined"
  >
    ios slider
    <text value="undefined" checked="undefined" pressed="undefined">
      60
    </text>
  </slider>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      pretto.fr
    </text>
  </paragraph>
  <slider
    valuetext=""
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="20"
    checked="undefined"
    pressed="undefined"
  >
    pretto slider
    <text value="undefined" checked="undefined" pressed="undefined">
      20
    </text>
  </slider>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Tooltip value label
    </text>
  </paragraph>
  <slider
    valuetext=""
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="20"
    checked="undefined"
    pressed="undefined"
  >
    custom thumb label
  </slider>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Airbnb
    </text>
  </paragraph>
  <slider
    valuetext=""
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="20"
    checked="undefined"
    pressed="undefined"
  >
    Minimum price
  </slider>
  <slider
    valuetext=""
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="40"
    checked="undefined"
    pressed="undefined"
  >
    Maximum price
  </slider>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Vertical sliders
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Vertical sliders
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Temperature
    </text>
  </paragraph>
  <slider
    valuetext="30°C"
    valuemax="100"
    valuemin="0"
    orientation="vertical"
    value="30"
    checked="undefined"
    pressed="undefined"
  >
    Temperature
  </slider>
  <slider
    valuetext="30°C"
    valuemax="100"
    valuemin="0"
    orientation="vertical"
    value="30"
    checked="undefined"
    pressed="undefined"
  >
    Temperature
  </slider>
  <text value="undefined" checked="undefined" pressed="undefined">
    0°C20°C37°C100°C
  </text>
  <slider
    valuetext="20°C"
    valuemax="100"
    valuemin="0"
    orientation="vertical"
    value="20"
    checked="undefined"
    pressed="undefined"
  >
    Temperature
  </slider>
  <slider
    valuetext="37°C"
    valuemax="100"
    valuemin="0"
    orientation="vertical"
    value="37"
    checked="undefined"
    pressed="undefined"
  >
    Temperature
  </slider>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Track
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Track
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The track shows the range available for user selection.
    </text>
  </paragraph>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Removed track
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Removed track
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The track can be turned off with
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Removed track
    </text>
  </paragraph>
  <text value="undefined" checked="undefined" pressed="undefined">
    0°C20°C37°C100°C
  </text>
  <slider
    valuetext="30°C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="30"
    checked="undefined"
    pressed="undefined"
  >
    Removed track
  </slider>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Removed track range slider
    </text>
  </paragraph>
  <text value="undefined" checked="undefined" pressed="undefined">
    0°C20°C37°C100°C
  </text>
  <slider
    valuetext="20°C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="20"
    checked="undefined"
    pressed="undefined"
  >
    Removed track range slider
  </slider>
  <slider
    valuetext="37°C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="37"
    checked="undefined"
    pressed="undefined"
  >
    Removed track range slider
  </slider>
  <slider
    valuetext="50°C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="50"
    checked="undefined"
    pressed="undefined"
  >
    Removed track range slider
  </slider>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Inverted track
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Inverted track
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The track can be inverted with
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Inverted track
    </text>
  </paragraph>
  <text value="undefined" checked="undefined" pressed="undefined">
    0°C20°C37°C100°C
  </text>
  <slider
    valuetext="30°C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="30"
    checked="undefined"
    pressed="undefined"
  >
    Inverted track
  </slider>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Inverted track range
    </text>
  </paragraph>
  <text value="undefined" checked="undefined" pressed="undefined">
    0°C20°C37°C100°C
  </text>
  <slider
    valuetext="20°C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="20"
    checked="undefined"
    pressed="undefined"
  >
    Inverted track range
  </slider>
  <slider
    valuetext="37°C"
    valuemax="100"
    valuemin="0"
    orientation="horizontal"
    value="37"
    checked="undefined"
    pressed="undefined"
  >
    Inverted track range
  </slider>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Non-linear scale
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Non-linear scale
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can use the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop to represent the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      on a different scale. For instance, in the following demo, the
      valuexrepresents the power of10^x.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Temperature range
    </text>
  </paragraph>
  <slider
    valuetext="1e^0"
    valuemax="60466176"
    valuemin="0"
    orientation="horizontal"
    value="1"
    checked="undefined"
    pressed="undefined"
  >
    Temperature range
    <text value="undefined" checked="undefined" pressed="undefined">
      1e^0
    </text>
  </slider>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Accessibility
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Accessibility
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      (WAI-ARIA:
    </text>
    <link checked="undefined" pressed="undefined">
      https://www.w3.org/TR/wai-aria-practices/#slider
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      )
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The component handles most of the work necessary to make it accessible.
      However, you need to make sure that:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        Each thumb has a user-friendly label (
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        ,
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        or
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        prop).
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        Each thumb has a user-friendly text for its current value. This is not
        required if the value matches the semantics of the label. You can change
        the name with the
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        or
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        prop.
      </text>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Slider />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    <separator
      orientation="horizontal"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <link checked="undefined" pressed="undefined">
      Select
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        Select
      </text>
    </link>
    <link checked="undefined" pressed="undefined">
      Rating
      <text value="undefined" checked="undefined" pressed="undefined">
        Rating
      </text>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/switches/ 1`] = `
<main value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text value="undefined" checked="undefined" pressed="undefined">
      EDIT THIS PAGE
    </text>
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Switch
    <text value="undefined" checked="undefined" pressed="undefined">
      Switch
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Switches toggle the state of a single setting on or off.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Switches are the preferred way to adjust settings on mobile. The option
      that the switch controls, as well as the state it’s in, should be made
      clear from the corresponding inline label.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Feedback
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Bundle size
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Material Design
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Material Design
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Sketch
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Figma
        </text>
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Basic switches
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Basic switches
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true" value="undefined" pressed="undefined">
    secondary checkbox
  </checkbox>
  <checkbox checked="true" value="undefined" pressed="undefined">
    primary checkbox
  </checkbox>
  <checkbox checked="false" value="undefined" pressed="undefined">
    primary checkbox
  </checkbox>
  <checkbox
    disabled="true"
    checked="false"
    value="undefined"
    pressed="undefined"
  >
    disabled checkbox
  </checkbox>
  <checkbox
    disabled="true"
    checked="true"
    value="undefined"
    pressed="undefined"
  >
    primary checkbox
  </checkbox>
  <checkbox checked="true" value="undefined" pressed="undefined">
    checkbox with default color
  </checkbox>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Switch with FormControlLabel
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Switch with FormControlLabel
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      can be provided with a description thanks to the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      component.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <checkbox checked="true" value="undefined" pressed="undefined">
      Secondary
    </checkbox>
  </Label>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <checkbox checked="true" value="undefined" pressed="undefined">
      Primary
    </checkbox>
  </Label>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <checkbox checked="false" value="undefined" pressed="undefined">
      Uncontrolled
    </checkbox>
  </Label>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <checkbox
      disabled="true"
      checked="false"
      value="undefined"
      pressed="undefined"
    >
      Disabled
    </checkbox>
  </Label>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <checkbox
      disabled="true"
      checked="true"
      value="undefined"
      pressed="undefined"
    >
      Disabled
    </checkbox>
  </Label>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Switches with FormGroup
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Switches with FormGroup
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      is a helpful wrapper used to group selection controls components that
      provides an easier API. However, you are encouraged to use
    </text>
    <link checked="undefined" pressed="undefined">
      Checkboxes
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      instead if multiple related controls are required. (See:
    </text>
    <link checked="undefined" pressed="undefined">
      When to use
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      ).
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group value="undefined" checked="undefined" pressed="undefined">
    Assign responsibility
    <Legend value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Assign responsibility
      </text>
    </Legend>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <checkbox checked="true" value="undefined" pressed="undefined">
        Gilad Gray
      </checkbox>
    </Label>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <checkbox checked="false" value="undefined" pressed="undefined">
        Jason Killian
      </checkbox>
    </Label>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <checkbox checked="true" value="undefined" pressed="undefined">
        Antoine Llorca
      </checkbox>
    </Label>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Be careful
      </text>
    </paragraph>
  </group>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Customized switches
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Customized switches
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <checkbox checked="true" value="undefined" pressed="undefined">
      Custom color
    </checkbox>
  </Label>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <checkbox checked="true" value="undefined" pressed="undefined">
      iOS style
    </checkbox>
  </Label>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <checkbox checked="true" value="undefined" pressed="undefined">
      Off On
    </checkbox>
  </Label>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      🎨 If you are looking for inspiration, you can check
    </text>
    <link checked="undefined" pressed="undefined">
      MUI Treasury's customization examples
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Sizes
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Sizes
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Fancy smaller switches? Use the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <checkbox checked="false" value="undefined" pressed="undefined">
      Small
    </checkbox>
  </Label>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <checkbox checked="false" value="undefined" pressed="undefined">
      Normal
    </checkbox>
  </Label>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Label placement
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Label placement
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can change the placement of the label:
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group value="undefined" checked="undefined" pressed="undefined">
    <Label value="undefined" checked="undefined" pressed="undefined">
      <checkbox checked="false" value="undefined" pressed="undefined">
        Top
      </checkbox>
    </Label>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <checkbox checked="false" value="undefined" pressed="undefined">
        Start
      </checkbox>
    </Label>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <checkbox checked="false" value="undefined" pressed="undefined">
        Bottom
      </checkbox>
    </Label>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <checkbox checked="false" value="undefined" pressed="undefined">
        End
      </checkbox>
    </Label>
  </group>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    When to use
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      When to use
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        Checkboxes vs. Switches
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Accessibility
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Accessibility
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        It will render an element with the
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        role not
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        role since this role isn't widely supported yet. Please test first
        if assistive technology of your target audience supports this role
        properly. Then you can change the role with
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        All form controls should have labels, and this includes radio buttons,
        checkboxes, and switches. In most cases, this is done by using the
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        element (
      </text>
      <link checked="undefined" pressed="undefined">
        FormControlLabel
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        ).
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        When a label can't be used, it's necessary to add an attribute
        directly to the input component. In this case, you can apply the
        additional attribute (e.g.
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        ,
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        ,
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        ) via the
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        prop.
      </text>
    </listitem>
  </list>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <FormControl />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <FormControlLabel />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <FormGroup />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <FormLabel />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Switch />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    <separator
      orientation="horizontal"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <link checked="undefined" pressed="undefined">
      Rating
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        Rating
      </text>
    </link>
    <link checked="undefined" pressed="undefined">
      Text Field
      <text value="undefined" checked="undefined" pressed="undefined">
        Text Field
      </text>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/tabs/ 1`] = `
<main value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text value="undefined" checked="undefined" pressed="undefined">
      EDIT THIS PAGE
    </text>
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Tabs
    <text value="undefined" checked="undefined" pressed="undefined">
      Tabs
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Tabs make it easy to explore and switch between different views.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Tabs organize and allow navigation between groups of content that are
      related and at the same level of hierarchy.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Feedback
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          WAI-ARIA
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Bundle size
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Material Design
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Material Design
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Sketch
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Figma
        </text>
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Basic tabs
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Basic tabs
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      A basic example with no frills.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <HeaderAsNonLandmark
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    <tablist
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      simple tabs example
      <tab
        selected="true"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        ITEM ONE
        <text value="undefined" checked="undefined" pressed="undefined">
          ITEM ONE
        </text>
      </tab>
      <tab value="undefined" checked="undefined" pressed="undefined">
        ITEM TWO
        <text value="undefined" checked="undefined" pressed="undefined">
          ITEM TWO
        </text>
      </tab>
      <tab value="undefined" checked="undefined" pressed="undefined">
        ITEM THREE
        <text value="undefined" checked="undefined" pressed="undefined">
          ITEM THREE
        </text>
      </tab>
    </tablist>
  </HeaderAsNonLandmark>
  <tabpanel value="undefined" checked="undefined" pressed="undefined">
    ITEM ONE
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Item One
      </text>
    </paragraph>
  </tabpanel>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Wrapped labels
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Wrapped labels
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Long labels will automatically wrap on tabs. If the label is too long for
      the tab, it will overflow and the text will not be visible.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <HeaderAsNonLandmark
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    <tablist
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      wrapped label tabs example
      <tab
        selected="true"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        NEW ARRIVALS IN THE LONGEST TEXT OF NONFICTION
        <text value="undefined" checked="undefined" pressed="undefined">
          NEW ARRIVALS IN THE LONGEST TEXT OF NONFICTION
        </text>
      </tab>
      <tab value="undefined" checked="undefined" pressed="undefined">
        ITEM TWO
        <text value="undefined" checked="undefined" pressed="undefined">
          ITEM TWO
        </text>
      </tab>
      <tab value="undefined" checked="undefined" pressed="undefined">
        ITEM THREE
        <text value="undefined" checked="undefined" pressed="undefined">
          ITEM THREE
        </text>
      </tab>
    </tablist>
  </HeaderAsNonLandmark>
  <tabpanel value="undefined" checked="undefined" pressed="undefined">
    NEW ARRIVALS IN THE LONGEST TEXT OF NONFICTION
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Item One
      </text>
    </paragraph>
  </tabpanel>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Disabled tab
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Disabled tab
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      A Tab can be disabled by setting
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1" value="undefined" checked="undefined" pressed="undefined">
    disabled tabs example
    <tab value="undefined" checked="undefined" pressed="undefined">
      ACTIVE
      <text value="undefined" checked="undefined" pressed="undefined">
        ACTIVE
      </text>
    </tab>
    <tab
      disabled="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      DISABLED
      <text value="undefined" checked="undefined" pressed="undefined">
        DISABLED
      </text>
    </tab>
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      ACTIVE
      <text value="undefined" checked="undefined" pressed="undefined">
        ACTIVE
      </text>
    </tab>
  </tablist>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Fixed tabs
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Fixed tabs
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Fixed tabs should be used with a limited number of tabs and when
      consistent placement will aid muscle memory.
    </text>
  </paragraph>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Full width
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Full width
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop should be used for smaller views. This demo also uses
    </text>
    <link checked="undefined" pressed="undefined">
      react-swipeable-views
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      to animate the Tab transition, and allowing tabs to be swiped on touch
      devices.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <HeaderAsNonLandmark
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    <tablist
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      full width tabs example
      <tab
        selected="true"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        ITEM ONE
        <text value="undefined" checked="undefined" pressed="undefined">
          ITEM ONE
        </text>
      </tab>
      <tab value="undefined" checked="undefined" pressed="undefined">
        ITEM TWO
        <text value="undefined" checked="undefined" pressed="undefined">
          ITEM TWO
        </text>
      </tab>
      <tab value="undefined" checked="undefined" pressed="undefined">
        ITEM THREE
        <text value="undefined" checked="undefined" pressed="undefined">
          ITEM THREE
        </text>
      </tab>
    </tablist>
  </HeaderAsNonLandmark>
  <tabpanel value="undefined" checked="undefined" pressed="undefined">
    ITEM ONE
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Item One
      </text>
    </paragraph>
  </tabpanel>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Centered
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Centered
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop should be used for larger views.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1" value="undefined" checked="undefined" pressed="undefined">
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      ITEM ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM ONE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM TWO
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM THREE
      </text>
    </tab>
  </tablist>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Scrollable tabs
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Scrollable tabs
    </text>
  </heading>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Automatic scroll buttons
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Automatic scroll buttons
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      By default, left and right scroll buttons are automatically presented on
      desktop and hidden on mobile. (based on viewport width)
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <tablist level="1" value="undefined" checked="undefined" pressed="undefined">
    scrollable auto tabs example
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      ITEM ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM ONE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM TWO
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM THREE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM FOUR
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM FOUR
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM FIVE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM FIVE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM SIX
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM SIX
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM SEVEN
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM SEVEN
      </text>
    </tab>
  </tablist>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Forced scroll buttons
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Forced scroll buttons
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Left and right scroll buttons be presented (reserve space) regardless of
      the viewport width with
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      :
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <tablist level="1" value="undefined" checked="undefined" pressed="undefined">
    scrollable force tabs example
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      ITEM ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM ONE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM TWO
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM THREE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM FOUR
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM FOUR
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM FIVE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM FIVE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM SIX
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM SIX
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM SEVEN
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM SEVEN
      </text>
    </tab>
  </tablist>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      If you want to make sure the buttons are always visible, you should
      customize the opacity.
    </text>
  </paragraph>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <tablist level="1" value="undefined" checked="undefined" pressed="undefined">
    visible arrows tabs example
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      ITEM ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM ONE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM TWO
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM THREE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM FOUR
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM FOUR
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM FIVE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM FIVE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM SIX
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM SIX
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM SEVEN
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM SEVEN
      </text>
    </tab>
  </tablist>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Prevent scroll buttons
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Prevent scroll buttons
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Left and right scroll buttons are never be presented with
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      . All scrolling must be initiated through user agent scrolling mechanisms
      (e.g. left/right swipe, shift-mousewheel, etc.)
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1" value="undefined" checked="undefined" pressed="undefined">
    scrollable prevent tabs example
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      ITEM ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM ONE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM TWO
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM THREE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM FOUR
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM FOUR
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM FIVE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM FIVE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM SIX
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM SIX
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM SEVEN
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM SEVEN
      </text>
    </tab>
  </tablist>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Customized tabs
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Customized tabs
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1" value="undefined" checked="undefined" pressed="undefined">
    ant example
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Tab 1
      <text value="undefined" checked="undefined" pressed="undefined">
        Tab 1
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      Tab 2
      <text value="undefined" checked="undefined" pressed="undefined">
        Tab 2
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      Tab 3
      <text value="undefined" checked="undefined" pressed="undefined">
        Tab 3
      </text>
    </tab>
  </tablist>
  <paragraph
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></paragraph>
  <tablist level="1" value="undefined" checked="undefined" pressed="undefined">
    styled tabs example
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Workflows
      <text value="undefined" checked="undefined" pressed="undefined">
        Workflows
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      Datasets
      <text value="undefined" checked="undefined" pressed="undefined">
        Datasets
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      Connections
      <text value="undefined" checked="undefined" pressed="undefined">
        Connections
      </text>
    </tab>
  </tablist>
  <paragraph
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></paragraph>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      🎨 If you are looking for inspiration, you can check
    </text>
    <link checked="undefined" pressed="undefined">
      MUI Treasury's customization examples
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Vertical tabs
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Vertical tabs
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      To make vertical tabs instead of default horizontal ones, there is
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      :
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <tablist level="1" value="undefined" checked="undefined" pressed="undefined">
    Vertical tabs example
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      ITEM ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM ONE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM TWO
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM THREE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM FOUR
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM FOUR
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM FIVE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM FIVE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM SIX
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM SIX
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM SEVEN
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM SEVEN
      </text>
    </tab>
  </tablist>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <tabpanel value="undefined" checked="undefined" pressed="undefined">
    ITEM ONE
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Item One
      </text>
    </paragraph>
  </tabpanel>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Note that you can restore the scrollbar with
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Nav Tabs
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Nav Tabs
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      By default tabs use a
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      element, but you can provide your own custom tag or component. Here's
      an example of implementing tabbed navigation:
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <HeaderAsNonLandmark
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    <tablist
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      nav tabs example
      <tab
        selected="true"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        PAGE ONE
        <text value="undefined" checked="undefined" pressed="undefined">
          PAGE ONE
        </text>
      </tab>
      <tab value="undefined" checked="undefined" pressed="undefined">
        PAGE TWO
        <text value="undefined" checked="undefined" pressed="undefined">
          PAGE TWO
        </text>
      </tab>
      <tab value="undefined" checked="undefined" pressed="undefined">
        PAGE THREE
        <text value="undefined" checked="undefined" pressed="undefined">
          PAGE THREE
        </text>
      </tab>
    </tablist>
  </HeaderAsNonLandmark>
  <tabpanel value="undefined" checked="undefined" pressed="undefined">
    PAGE ONE
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Page One
      </text>
    </paragraph>
  </tabpanel>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Icon Tabs
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Icon Tabs
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Tab labels may be either all icons or all text.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1" value="undefined" checked="undefined" pressed="undefined">
    icon tabs example
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      phone
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      favorite
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      person
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </tab>
  </tablist>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist level="1" value="undefined" checked="undefined" pressed="undefined">
    icon label tabs example
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      RECENTS
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        RECENTS
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      FAVORITES
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        FAVORITES
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      NEARBY
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        NEARBY
      </text>
    </tab>
  </tablist>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Accessibility
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Accessibility
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      (WAI-ARIA:
    </text>
    <link checked="undefined" pressed="undefined">
      https://www.w3.org/TR/wai-aria-practices/#tabpanel
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      )
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The following steps are needed in order to provide necessary information
      for assistive technologies:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        1.
        <text value="undefined" checked="undefined" pressed="undefined">
          1.
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        Label
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        via
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        or
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        .
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        2.
        <text value="undefined" checked="undefined" pressed="undefined">
          2.
        </text>
      </ListMarker>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        s need to be connected to their corresponding
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        by setting the correct
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        ,
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        and
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        .
      </text>
    </listitem>
  </list>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      An example for the current implementation can be found in the demos on
      this page. We've also published
    </text>
    <link checked="undefined" pressed="undefined">
      an experimental API
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      in
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      that does not require extra work.
    </text>
  </paragraph>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Keyboard navigation
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Keyboard navigation
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The components implement keyboard navigation using the "manual
      activation" behavior. If you want to switch to the "selection
      automatically follows focus" behavior you have pass
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      to the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      component. The WAI-ARIA authoring practices have a detailed guide on
    </text>
    <link checked="undefined" pressed="undefined">
      how to decide when to make selection automatically follow focus
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="4" value="undefined" checked="undefined" pressed="undefined">
    Demo
    <text value="undefined" checked="undefined" pressed="undefined">
      Demo
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The following two demos only differ in their keyboard navigation behavior.
      Focus a tab and navigate with arrow keys to notice the difference.
    </text>
  </paragraph>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Tabs where selection follows focus
    </text>
  </paragraph>
  <HeaderAsNonLandmark
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    <tablist
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Tabs where selection follows focus
      <tab
        selected="true"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        ITEM ONE
        <text value="undefined" checked="undefined" pressed="undefined">
          ITEM ONE
        </text>
      </tab>
      <tab value="undefined" checked="undefined" pressed="undefined">
        ITEM TWO
        <text value="undefined" checked="undefined" pressed="undefined">
          ITEM TWO
        </text>
      </tab>
      <tab value="undefined" checked="undefined" pressed="undefined">
        ITEM THREE
        <text value="undefined" checked="undefined" pressed="undefined">
          ITEM THREE
        </text>
      </tab>
    </tablist>
  </HeaderAsNonLandmark>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Tabs where each tab needs to be selected manually
    </text>
  </paragraph>
  <HeaderAsNonLandmark
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    <tablist
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Tabs where each tab needs to be selected manually
      <tab
        selected="true"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        ITEM ONE
        <text value="undefined" checked="undefined" pressed="undefined">
          ITEM ONE
        </text>
      </tab>
      <tab value="undefined" checked="undefined" pressed="undefined">
        ITEM TWO
        <text value="undefined" checked="undefined" pressed="undefined">
          ITEM TWO
        </text>
      </tab>
      <tab value="undefined" checked="undefined" pressed="undefined">
        ITEM THREE
        <text value="undefined" checked="undefined" pressed="undefined">
          ITEM THREE
        </text>
      </tab>
    </tablist>
  </HeaderAsNonLandmark>
  <tabpanel value="undefined" checked="undefined" pressed="undefined">
    ITEM ONE
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Item One
      </text>
    </paragraph>
  </tabpanel>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Experimental API
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Experimental API
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      offers utility components that inject props to implement accessible tabs
      following
    </text>
    <link checked="undefined" pressed="undefined">
      WAI-ARIA authoring practices
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <HeaderAsNonLandmark
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    <tablist
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      simple tabs example
      <tab
        selected="true"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        ITEM ONE
        <text value="undefined" checked="undefined" pressed="undefined">
          ITEM ONE
        </text>
      </tab>
      <tab value="undefined" checked="undefined" pressed="undefined">
        ITEM TWO
        <text value="undefined" checked="undefined" pressed="undefined">
          ITEM TWO
        </text>
      </tab>
      <tab value="undefined" checked="undefined" pressed="undefined">
        ITEM THREE
        <text value="undefined" checked="undefined" pressed="undefined">
          ITEM THREE
        </text>
      </tab>
    </tablist>
  </HeaderAsNonLandmark>
  <tabpanel value="undefined" checked="undefined" pressed="undefined">
    ITEM ONE
    <text value="undefined" checked="undefined" pressed="undefined">
      Item One
    </text>
  </tabpanel>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Tab />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <TabContext />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <TabList />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <TabPanel />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <TabScrollButton />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Tabs />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    <separator
      orientation="horizontal"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <link checked="undefined" pressed="undefined">
      Stepper
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        Stepper
      </text>
    </link>
    <link checked="undefined" pressed="undefined">
      Accordion
      <text value="undefined" checked="undefined" pressed="undefined">
        Accordion
      </text>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/text-fields/ 1`] = `
<main value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text value="undefined" checked="undefined" pressed="undefined">
      EDIT THIS PAGE
    </text>
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Text Field
    <text value="undefined" checked="undefined" pressed="undefined">
      Text Field
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Text fields let users enter and edit text.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Text fields allow users to enter text into a UI. They typically appear in
      forms and dialogs.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Feedback
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Bundle size
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Material Design
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Material Design
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Sketch
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Figma
        </text>
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    TextField
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      TextField
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      wrapper component is a complete form control including a label, input and
      help text.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      It supports standard, outlined and filled styling.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Standard
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      Standard
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Filled
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      Filled
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Outlined
      </text>
    </Label>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      Outlined
    </textbox>
    <group value="undefined" checked="undefined" pressed="undefined">
      <Legend value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Outlined
        </text>
      </Legend>
    </group>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Note:The standard variant of the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      is no longer documented in the
    </text>
    <link checked="undefined" pressed="undefined">
      Material Design guidelines
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      (
    </text>
    <link checked="undefined" pressed="undefined">
      here's why
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      ), but Material-UI will continue to support it.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Form props
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Form props
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Standard form attributes are supported e.g.
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      ,
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      ,
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      , etc. as well as a
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      which is used to give context about a field’s input, such as how the input
      will be used.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Required *
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox
      required="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Required
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Disabled
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox
      disabled="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Disabled
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Password
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      Password
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Read Only
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox
      readonly="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Read Only
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Number
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <spinbutton
      valuetext=""
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Number
    </spinbutton>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Search field
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <searchbox value="undefined" checked="undefined" pressed="undefined">
      Search field
    </searchbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Helper text
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox
      description="Some important text"
      value="Default Value"
      checked="undefined"
      pressed="undefined"
    >
      Helper text
      <text value="undefined" checked="undefined" pressed="undefined">
        Default Value
      </text>
    </textbox>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Some important text
      </text>
    </paragraph>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Required *
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox
      required="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Required
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Disabled
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox
      disabled="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Disabled
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Password
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      Password
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Read Only
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox
      readonly="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Read Only
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Number
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <spinbutton
      valuetext=""
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Number
    </spinbutton>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Search field
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <searchbox value="undefined" checked="undefined" pressed="undefined">
      Search field
    </searchbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Helper text
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox
      description="Some important text"
      value="Default Value"
      checked="undefined"
      pressed="undefined"
    >
      Helper text
      <text value="undefined" checked="undefined" pressed="undefined">
        Default Value
      </text>
    </textbox>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Some important text
      </text>
    </paragraph>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Required *
      </text>
    </Label>
    <textbox
      required="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Required
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <group value="undefined" checked="undefined" pressed="undefined">
      <Legend value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Required *
        </text>
      </Legend>
    </group>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Disabled
      </text>
    </Label>
    <textbox
      disabled="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Disabled
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <group value="undefined" checked="undefined" pressed="undefined">
      <Legend value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Disabled
        </text>
      </Legend>
    </group>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Password
      </text>
    </Label>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      Password
    </textbox>
    <group value="undefined" checked="undefined" pressed="undefined">
      <Legend value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Password
        </text>
      </Legend>
    </group>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Read Only
      </text>
    </Label>
    <textbox
      readonly="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Read Only
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <group value="undefined" checked="undefined" pressed="undefined">
      <Legend value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Read Only
        </text>
      </Legend>
    </group>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Number
      </text>
    </Label>
    <spinbutton
      valuetext=""
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Number
    </spinbutton>
    <group value="undefined" checked="undefined" pressed="undefined">
      <Legend value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Number
        </text>
      </Legend>
    </group>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Search field
      </text>
    </Label>
    <searchbox value="undefined" checked="undefined" pressed="undefined">
      Search field
    </searchbox>
    <group value="undefined" checked="undefined" pressed="undefined">
      <Legend value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Search field
        </text>
      </Legend>
    </group>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Helper text
      </text>
    </Label>
    <textbox
      description="Some important text"
      value="Default Value"
      checked="undefined"
      pressed="undefined"
    >
      Helper text
      <text value="undefined" checked="undefined" pressed="undefined">
        Default Value
      </text>
    </textbox>
    <group value="undefined" checked="undefined" pressed="undefined">
      <Legend value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Helper text
        </text>
      </Legend>
    </group>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Some important text
      </text>
    </paragraph>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Validation
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Validation
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop toggles the error state, the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop can then be used to provide feedback to the user about the error.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Error
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox
      invalid="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Error
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Error
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox
      description="Incorrect entry."
      invalid="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Error
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Incorrect entry.
      </text>
    </paragraph>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Error
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox
      invalid="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Error
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Error
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox
      description="Incorrect entry."
      invalid="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Error
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Incorrect entry.
      </text>
    </paragraph>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Error
      </text>
    </Label>
    <textbox
      invalid="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Error
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <group value="undefined" checked="undefined" pressed="undefined">
      <Legend value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Error
        </text>
      </Legend>
    </group>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Error
      </text>
    </Label>
    <textbox
      description="Incorrect entry."
      invalid="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Error
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <group value="undefined" checked="undefined" pressed="undefined">
      <Legend value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Error
        </text>
      </Legend>
    </group>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Incorrect entry.
      </text>
    </paragraph>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Multiline
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Multiline
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop transforms the text field into a
    </text>
    <link checked="undefined" pressed="undefined">
      <textarea>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      element. Unless the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop is set, the height of the text field dynamically matches its content
      (using
    </text>
    <link checked="undefined" pressed="undefined">
      TextareaAutosize
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      ). You can use the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      and
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      props to bound it.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Multiline
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox
      multiline="true"
      value="Controlled"
      checked="undefined"
      pressed="undefined"
    >
      Multiline
      <text value="undefined" checked="undefined" pressed="undefined">
        Controlled
      </text>
    </textbox>
    <textbox
      multiline="true"
      readonly="true"
      value="x"
      checked="undefined"
      pressed="undefined"
    ></textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Multiline Placeholder
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox
      multiline="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Multiline Placeholder
      <text value="undefined" checked="undefined" pressed="undefined">
        Placeholder
      </text>
    </textbox>
    <textbox
      multiline="true"
      readonly="true"
      value="x"
      checked="undefined"
      pressed="undefined"
    ></textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Multiline
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox
      multiline="true"
      value="Default Value"
      checked="undefined"
      pressed="undefined"
    >
      Multiline
      <text value="undefined" checked="undefined" pressed="undefined">
        Default Value
      </text>
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Multiline
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox
      multiline="true"
      value="Controlled"
      checked="undefined"
      pressed="undefined"
    >
      Multiline
      <text value="undefined" checked="undefined" pressed="undefined">
        Controlled
      </text>
    </textbox>
    <textbox
      multiline="true"
      readonly="true"
      value="x"
      checked="undefined"
      pressed="undefined"
    ></textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Multiline Placeholder
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox
      multiline="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Multiline Placeholder
      <text value="undefined" checked="undefined" pressed="undefined">
        Placeholder
      </text>
    </textbox>
    <textbox
      multiline="true"
      readonly="true"
      value="x"
      checked="undefined"
      pressed="undefined"
    ></textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Multiline
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox
      multiline="true"
      value="Default Value"
      checked="undefined"
      pressed="undefined"
    >
      Multiline
      <text value="undefined" checked="undefined" pressed="undefined">
        Default Value
      </text>
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Multiline
      </text>
    </Label>
    <textbox
      multiline="true"
      value="Controlled"
      checked="undefined"
      pressed="undefined"
    >
      Multiline
      <text value="undefined" checked="undefined" pressed="undefined">
        Controlled
      </text>
    </textbox>
    <textbox
      multiline="true"
      readonly="true"
      value="x"
      checked="undefined"
      pressed="undefined"
    ></textbox>
    <group value="undefined" checked="undefined" pressed="undefined">
      <Legend value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Multiline
        </text>
      </Legend>
    </group>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Multiline Placeholder
      </text>
    </Label>
    <textbox
      multiline="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Multiline Placeholder
      <text value="undefined" checked="undefined" pressed="undefined">
        Placeholder
      </text>
    </textbox>
    <textbox
      multiline="true"
      readonly="true"
      value="x"
      checked="undefined"
      pressed="undefined"
    ></textbox>
    <group value="undefined" checked="undefined" pressed="undefined">
      <Legend value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Multiline Placeholder
        </text>
      </Legend>
    </group>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Multiline
      </text>
    </Label>
    <textbox
      multiline="true"
      value="Default Value"
      checked="undefined"
      pressed="undefined"
    >
      Multiline
      <text value="undefined" checked="undefined" pressed="undefined">
        Default Value
      </text>
    </textbox>
    <group value="undefined" checked="undefined" pressed="undefined">
      <Legend value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Multiline
        </text>
      </Legend>
    </group>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Select
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Select
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop makes the text field use the
    </text>
    <link checked="undefined" pressed="undefined">
      Select
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      component internally.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Select
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <combobox
      haspopup="listbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Select €
    </combobox>
    <textbox
      description="Please select your currency"
      value="EUR"
      checked="undefined"
      pressed="undefined"
    ></textbox>
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Please select your currency
      </text>
    </paragraph>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Native select
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <combobox
      description="Please select your currency"
      value="€"
      checked="undefined"
      pressed="undefined"
    >
      Native select
      <MenuListPopup value="undefined" checked="undefined" pressed="undefined">
        <menuitem value="undefined" checked="undefined" pressed="undefined">
          $
        </menuitem>
        <menuitem
          selected="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          €
        </menuitem>
        <menuitem value="undefined" checked="undefined" pressed="undefined">
          ฿
        </menuitem>
        <menuitem value="undefined" checked="undefined" pressed="undefined">
          ¥
        </menuitem>
      </MenuListPopup>
    </combobox>
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Please select your currency
      </text>
    </paragraph>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Select
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <combobox
      haspopup="listbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Select €
    </combobox>
    <textbox
      description="Please select your currency"
      value="EUR"
      checked="undefined"
      pressed="undefined"
    ></textbox>
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Please select your currency
      </text>
    </paragraph>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Native select
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <combobox
      description="Please select your currency"
      value="€"
      checked="undefined"
      pressed="undefined"
    >
      Native select
      <MenuListPopup value="undefined" checked="undefined" pressed="undefined">
        <menuitem value="undefined" checked="undefined" pressed="undefined">
          $
        </menuitem>
        <menuitem
          selected="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          €
        </menuitem>
        <menuitem value="undefined" checked="undefined" pressed="undefined">
          ฿
        </menuitem>
        <menuitem value="undefined" checked="undefined" pressed="undefined">
          ¥
        </menuitem>
      </MenuListPopup>
    </combobox>
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Please select your currency
      </text>
    </paragraph>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Select
      </text>
    </Label>
    <combobox
      haspopup="listbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Select €
    </combobox>
    <textbox
      description="Please select your currency"
      value="EUR"
      checked="undefined"
      pressed="undefined"
    ></textbox>
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
    <group value="undefined" checked="undefined" pressed="undefined">
      <Legend value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Select
        </text>
      </Legend>
    </group>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Please select your currency
      </text>
    </paragraph>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Native select
      </text>
    </Label>
    <combobox
      description="Please select your currency"
      value="€"
      checked="undefined"
      pressed="undefined"
    >
      Native select
      <MenuListPopup value="undefined" checked="undefined" pressed="undefined">
        <menuitem value="undefined" checked="undefined" pressed="undefined">
          $
        </menuitem>
        <menuitem
          selected="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          €
        </menuitem>
        <menuitem value="undefined" checked="undefined" pressed="undefined">
          ฿
        </menuitem>
        <menuitem value="undefined" checked="undefined" pressed="undefined">
          ¥
        </menuitem>
      </MenuListPopup>
    </combobox>
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
    <group value="undefined" checked="undefined" pressed="undefined">
      <Legend value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Native select
        </text>
      </Legend>
    </group>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Please select your currency
      </text>
    </paragraph>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Icons
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Icons
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      There are multiple ways to display an icon with a text field.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      With a start adornment
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <textbox value="undefined" checked="undefined" pressed="undefined">
    With a start adornment
  </textbox>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      TextField
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <textbox value="undefined" checked="undefined" pressed="undefined">
    TextField
  </textbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      With a grid
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <textbox value="undefined" checked="undefined" pressed="undefined">
    With a grid
  </textbox>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Input Adornments
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Input Adornments
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The main way is with an
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      . This can be used to add a prefix, a suffix or an action to an input. For
      instance, you can use an icon button to hide or reveal the password.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      With normal TextField
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Kg
    </text>
  </paragraph>
  <textbox value="undefined" checked="undefined" pressed="undefined">
    With normal TextField
  </textbox>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <textbox
    description="Weight"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    weight
  </textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Kg
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Weight
    </text>
  </paragraph>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Password
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <textbox value="undefined" checked="undefined" pressed="undefined">
    Password
  </textbox>
  <button value="undefined" checked="undefined" pressed="undefined">
    toggle password visibility
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Amount
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      $
    </text>
  </paragraph>
  <textbox value="undefined" checked="undefined" pressed="undefined">
    Amount
  </textbox>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      With normal TextField
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Kg
    </text>
  </paragraph>
  <textbox value="undefined" checked="undefined" pressed="undefined">
    With normal TextField
  </textbox>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <textbox
    description="Weight"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    weight
  </textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Kg
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Weight
    </text>
  </paragraph>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Password
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <textbox value="undefined" checked="undefined" pressed="undefined">
    Password
  </textbox>
  <button value="undefined" checked="undefined" pressed="undefined">
    toggle password visibility
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Amount
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      $
    </text>
  </paragraph>
  <textbox value="undefined" checked="undefined" pressed="undefined">
    Amount
  </textbox>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      With normal TextField
    </text>
  </Label>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Kg
    </text>
  </paragraph>
  <textbox value="undefined" checked="undefined" pressed="undefined">
    With normal TextField
  </textbox>
  <group value="undefined" checked="undefined" pressed="undefined">
    <Legend value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        With normal TextField
      </text>
    </Legend>
  </group>
  <textbox
    description="Weight"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    weight
  </textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Kg
    </text>
  </paragraph>
  <group value="undefined" checked="undefined" pressed="undefined">
    ​
    <Legend value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        ​
      </text>
    </Legend>
  </group>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Weight
    </text>
  </paragraph>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Password
    </text>
  </Label>
  <textbox value="undefined" checked="undefined" pressed="undefined">
    Password
  </textbox>
  <button value="undefined" checked="undefined" pressed="undefined">
    toggle password visibility
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </button>
  <group value="undefined" checked="undefined" pressed="undefined">
    ​
    <Legend value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        ​
      </text>
    </Legend>
  </group>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Amount
    </text>
  </Label>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      $
    </text>
  </paragraph>
  <textbox value="undefined" checked="undefined" pressed="undefined">
    Amount
  </textbox>
  <group value="undefined" checked="undefined" pressed="undefined">
    ​
    <Legend value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        ​
      </text>
    </Legend>
  </group>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Sizes
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Sizes
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Fancy smaller inputs? Use the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Size
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox value="Small" checked="undefined" pressed="undefined">
      Size
      <text value="undefined" checked="undefined" pressed="undefined">
        Small
      </text>
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Size
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox value="Normal" checked="undefined" pressed="undefined">
      Size
      <text value="undefined" checked="undefined" pressed="undefined">
        Normal
      </text>
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Size
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox value="Small" checked="undefined" pressed="undefined">
      Size
      <text value="undefined" checked="undefined" pressed="undefined">
        Small
      </text>
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Size
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox value="Normal" checked="undefined" pressed="undefined">
      Size
      <text value="undefined" checked="undefined" pressed="undefined">
        Normal
      </text>
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Size
      </text>
    </Label>
    <textbox value="Small" checked="undefined" pressed="undefined">
      Size
      <text value="undefined" checked="undefined" pressed="undefined">
        Small
      </text>
    </textbox>
    <group value="undefined" checked="undefined" pressed="undefined">
      <Legend value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Size
        </text>
      </Legend>
    </group>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Size
      </text>
    </Label>
    <textbox value="Normal" checked="undefined" pressed="undefined">
      Size
      <text value="undefined" checked="undefined" pressed="undefined">
        Normal
      </text>
    </textbox>
    <group value="undefined" checked="undefined" pressed="undefined">
      <Legend value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Size
        </text>
      </Legend>
    </group>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Layout
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Layout
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop can be used to alter the vertical spacing of inputs. Using
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      (default) will not apply margins to the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      , whereas
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      and
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      will.
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      and
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      alter other styles to meet the specification.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      can be used to make the input take up the full width of its container.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Label
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <textbox
    description="Full width!"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Label
    <text value="undefined" checked="undefined" pressed="undefined">
      Placeholder
    </text>
  </textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Full width!
    </text>
  </paragraph>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      None
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <textbox
    description="Some important text"
    value="Default Value"
    checked="undefined"
    pressed="undefined"
  >
    None
    <text value="undefined" checked="undefined" pressed="undefined">
      Default Value
    </text>
  </textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Some important text
    </text>
  </paragraph>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Dense
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <textbox
    description="Some important text"
    value="Default Value"
    checked="undefined"
    pressed="undefined"
  >
    Dense
    <text value="undefined" checked="undefined" pressed="undefined">
      Default Value
    </text>
  </textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Some important text
    </text>
  </paragraph>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Normal
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <textbox
    description="Some important text"
    value="Default Value"
    checked="undefined"
    pressed="undefined"
  >
    Normal
    <text value="undefined" checked="undefined" pressed="undefined">
      Default Value
    </text>
  </textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Some important text
    </text>
  </paragraph>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Label
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <textbox
    description="Full width!"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Label
    <text value="undefined" checked="undefined" pressed="undefined">
      Placeholder
    </text>
  </textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Full width!
    </text>
  </paragraph>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      None
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <textbox
    description="Some important text"
    value="Default Value"
    checked="undefined"
    pressed="undefined"
  >
    None
    <text value="undefined" checked="undefined" pressed="undefined">
      Default Value
    </text>
  </textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Some important text
    </text>
  </paragraph>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Dense
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <textbox
    description="Some important text"
    value="Default Value"
    checked="undefined"
    pressed="undefined"
  >
    Dense
    <text value="undefined" checked="undefined" pressed="undefined">
      Default Value
    </text>
  </textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Some important text
    </text>
  </paragraph>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Normal
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <textbox
    description="Some important text"
    value="Default Value"
    checked="undefined"
    pressed="undefined"
  >
    Normal
    <text value="undefined" checked="undefined" pressed="undefined">
      Default Value
    </text>
  </textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Some important text
    </text>
  </paragraph>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Label
    </text>
  </Label>
  <textbox
    description="Full width!"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Label
    <text value="undefined" checked="undefined" pressed="undefined">
      Placeholder
    </text>
  </textbox>
  <group value="undefined" checked="undefined" pressed="undefined">
    <Legend value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Label
      </text>
    </Legend>
  </group>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Full width!
    </text>
  </paragraph>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      None
    </text>
  </Label>
  <textbox
    description="Some important text"
    value="Default Value"
    checked="undefined"
    pressed="undefined"
  >
    None
    <text value="undefined" checked="undefined" pressed="undefined">
      Default Value
    </text>
  </textbox>
  <group value="undefined" checked="undefined" pressed="undefined">
    <Legend value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        None
      </text>
    </Legend>
  </group>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Some important text
    </text>
  </paragraph>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Dense
    </text>
  </Label>
  <textbox
    description="Some important text"
    value="Default Value"
    checked="undefined"
    pressed="undefined"
  >
    Dense
    <text value="undefined" checked="undefined" pressed="undefined">
      Default Value
    </text>
  </textbox>
  <group value="undefined" checked="undefined" pressed="undefined">
    <Legend value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Dense
      </text>
    </Legend>
  </group>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Some important text
    </text>
  </paragraph>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Normal
    </text>
  </Label>
  <textbox
    description="Some important text"
    value="Default Value"
    checked="undefined"
    pressed="undefined"
  >
    Normal
    <text value="undefined" checked="undefined" pressed="undefined">
      Default Value
    </text>
  </textbox>
  <group value="undefined" checked="undefined" pressed="undefined">
    <Legend value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Normal
      </text>
    </Legend>
  </group>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Some important text
    </text>
  </paragraph>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Uncontrolled vs Controlled
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Uncontrolled vs Controlled
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The component can be controlled or uncontrolled.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Name
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox value="Cat in the Hat" checked="undefined" pressed="undefined">
      Name
      <text value="undefined" checked="undefined" pressed="undefined">
        Cat in the Hat
      </text>
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Uncontrolled
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox value="foo" checked="undefined" pressed="undefined">
      Uncontrolled
      <text value="undefined" checked="undefined" pressed="undefined">
        foo
      </text>
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Name
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox value="Cat in the Hat" checked="undefined" pressed="undefined">
      Name
      <text value="undefined" checked="undefined" pressed="undefined">
        Cat in the Hat
      </text>
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Uncontrolled
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox value="foo" checked="undefined" pressed="undefined">
      Uncontrolled
      <text value="undefined" checked="undefined" pressed="undefined">
        foo
      </text>
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Name
      </text>
    </Label>
    <textbox value="Cat in the Hat" checked="undefined" pressed="undefined">
      Name
      <text value="undefined" checked="undefined" pressed="undefined">
        Cat in the Hat
      </text>
    </textbox>
    <group value="undefined" checked="undefined" pressed="undefined">
      <Legend value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Name
        </text>
      </Legend>
    </group>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Uncontrolled
      </text>
    </Label>
    <textbox value="foo" checked="undefined" pressed="undefined">
      Uncontrolled
      <text value="undefined" checked="undefined" pressed="undefined">
        foo
      </text>
    </textbox>
    <group value="undefined" checked="undefined" pressed="undefined">
      <Legend value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Uncontrolled
        </text>
      </Legend>
    </group>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Components
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Components
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      is composed of smaller components (
    </text>
    <link checked="undefined" pressed="undefined">
      FormControl
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      ,
    </text>
    <link checked="undefined" pressed="undefined">
      Input
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      ,
    </text>
    <link checked="undefined" pressed="undefined">
      FilledInput
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      ,
    </text>
    <link checked="undefined" pressed="undefined">
      InputLabel
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      ,
    </text>
    <link checked="undefined" pressed="undefined">
      OutlinedInput
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      , and
    </text>
    <link checked="undefined" pressed="undefined">
      FormHelperText
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      ) that you can leverage directly to significantly customize your form
      inputs.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You might also have noticed that some native HTML input properties are
      missing from the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      component. This is on purpose. The component takes care of the most used
      properties, then it's up to the user to use the underlying component
      shown in the following demo. Still, you can use
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      (and
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      ,
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      properties) if you want to avoid some boilerplate.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Name
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox value="Composed TextField" checked="undefined" pressed="undefined">
      Name
      <text value="undefined" checked="undefined" pressed="undefined">
        Composed TextField
      </text>
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Name
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox
      description="Some important helper text"
      value="Composed TextField"
      checked="undefined"
      pressed="undefined"
    >
      Name
      <text value="undefined" checked="undefined" pressed="undefined">
        Composed TextField
      </text>
    </textbox>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Some important helper text
      </text>
    </paragraph>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Name
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox
      disabled="true"
      value="Composed TextField"
      checked="undefined"
      pressed="undefined"
    >
      Name
      <text value="undefined" checked="undefined" pressed="undefined">
        Composed TextField
      </text>
    </textbox>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Disabled
      </text>
    </paragraph>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Name
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox
      description="Error"
      invalid="true"
      value="Composed TextField"
      checked="undefined"
      pressed="undefined"
    >
      Name
      <text value="undefined" checked="undefined" pressed="undefined">
        Composed TextField
      </text>
    </textbox>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Error
      </text>
    </paragraph>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Name
      </text>
    </Label>
    <textbox value="Composed TextField" checked="undefined" pressed="undefined">
      Name
      <text value="undefined" checked="undefined" pressed="undefined">
        Composed TextField
      </text>
    </textbox>
    <group value="undefined" checked="undefined" pressed="undefined">
      <Legend value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Name
        </text>
      </Legend>
    </group>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Name
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox value="Composed TextField" checked="undefined" pressed="undefined">
      Name
      <text value="undefined" checked="undefined" pressed="undefined">
        Composed TextField
      </text>
    </textbox>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Inputs
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Inputs
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox value="Hello world" checked="undefined" pressed="undefined">
      description
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello world
      </text>
    </textbox>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      description
      <text value="undefined" checked="undefined" pressed="undefined">
        Placeholder
      </text>
    </textbox>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox
      disabled="true"
      value="Disabled"
      checked="undefined"
      pressed="undefined"
    >
      description
      <text value="undefined" checked="undefined" pressed="undefined">
        Disabled
      </text>
    </textbox>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox
      invalid="true"
      value="Error"
      checked="undefined"
      pressed="undefined"
    >
      description
      <text value="undefined" checked="undefined" pressed="undefined">
        Error
      </text>
    </textbox>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Color
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Color
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop changes the highlight color of the text field when focused.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Standard secondary
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      Standard secondary
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Filled secondary
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      Filled secondary
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Outlined secondary
      </text>
    </Label>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      Outlined secondary
    </textbox>
    <group value="undefined" checked="undefined" pressed="undefined">
      <Legend value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Outlined secondary
        </text>
      </Legend>
    </group>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Customized inputs
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Customized inputs
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Custom CSS
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      Custom CSS
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Custom CSS
      </text>
    </Label>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      Custom CSS
    </textbox>
    <group value="undefined" checked="undefined" pressed="undefined">
      <Legend value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Custom CSS
        </text>
      </Legend>
    </group>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        ThemeProvider
      </text>
    </Label>
    <text value="undefined" checked="undefined" pressed="undefined">
       
    </text>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      ThemeProvider
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        ThemeProvider
      </text>
    </Label>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      ThemeProvider
    </textbox>
    <group value="undefined" checked="undefined" pressed="undefined">
      <Legend value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          ThemeProvider
        </text>
      </Legend>
    </group>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Bootstrap
      </text>
    </Label>
    <textbox value="react-bootstrap" checked="undefined" pressed="undefined">
      Bootstrap
      <text value="undefined" checked="undefined" pressed="undefined">
        react-bootstrap
      </text>
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Reddit
      </text>
    </Label>
    <textbox value="react-reddit" checked="undefined" pressed="undefined">
      Reddit
      <text value="undefined" checked="undefined" pressed="undefined">
        react-reddit
      </text>
    </textbox>
    <textbox value="Naked input" checked="undefined" pressed="undefined">
      naked
      <text value="undefined" checked="undefined" pressed="undefined">
        Naked input
      </text>
    </textbox>
    <Label value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        CSS validation style *
      </text>
    </Label>
    <textbox
      required="true"
      value="Success"
      checked="undefined"
      pressed="undefined"
    >
      CSS validation style
      <text value="undefined" checked="undefined" pressed="undefined">
        Success
      </text>
    </textbox>
    <group value="undefined" checked="undefined" pressed="undefined">
      <Legend value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          CSS validation style *
        </text>
      </Legend>
    </group>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Customization does not stop at CSS, you can use composition to build
      custom components and give your app a unique feel. Below is an example
      using the
    </text>
    <link checked="undefined" pressed="undefined">
      InputBase
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      component, inspired by Google Maps.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <button value="undefined" checked="undefined" pressed="undefined">
      menu
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      search google maps
      <text value="undefined" checked="undefined" pressed="undefined">
        Search Google Maps
      </text>
    </textbox>
    <button value="undefined" checked="undefined" pressed="undefined">
      search
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <separator
      orientation="horizontal"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <button value="undefined" checked="undefined" pressed="undefined">
      directions
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      🎨 If you are looking for inspiration, you can check
    </text>
    <link checked="undefined" pressed="undefined">
      MUI Treasury's customization examples
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Limitations
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Limitations
    </text>
  </heading>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Shrink
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Shrink
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The input label "shrink" state isn't always correct. The
      input label is supposed to shrink as soon as the input is displaying
      something. In some circumstances, we can't determine the
      "shrink" state (number input, datetime input, Stripe input). You
      might notice an overlap.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <img value="undefined" checked="undefined" pressed="undefined">
      shrink
    </img>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      To workaround the issue, you can force the "shrink" state of the
      label.
    </text>
  </paragraph>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      or
    </text>
  </paragraph>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Floating label
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Floating label
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The floating label is absolutely positioned, it won't impact the
      layout of the page. You need to make sure that the input is larger than
      the label to display correctly.
    </text>
  </paragraph>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    type="number"
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      type="number"
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Inputs of type="number" have potential usability issues:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        Allowing certain non-numeric characters ('e', '+',
        '-', '.') and silently discarding others
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        The functionality of scrolling to increment/decrement the number can
        cause accidental and hard-to-notice changes
      </text>
    </listitem>
  </list>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      and more - see
    </text>
    <link checked="undefined" pressed="undefined">
      this article
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      by the GOV.UK Design System team for a more detailed explanation.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      For number validation, one viable alternative is to use the default input
      type="text" with thepatternattribute, for example:
    </text>
  </paragraph>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      In the future, we might provide a
    </text>
    <link checked="undefined" pressed="undefined">
      number input component
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Helper text
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Helper text
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The helper text prop affects the height of the text field. If two text
      fields are placed side by side, one with a helper text and one without,
      they will have different heights. For example:
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Name
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <textbox value="undefined" checked="undefined" pressed="undefined"></textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Please enter your name
    </text>
  </paragraph>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Name
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <textbox value="undefined" checked="undefined" pressed="undefined"></textbox>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      This can be fixed by passing a space character to the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop:
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Name
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <textbox value="undefined" checked="undefined" pressed="undefined"></textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Please enter your name
    </text>
  </paragraph>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Name
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <textbox value="undefined" checked="undefined" pressed="undefined"></textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </paragraph>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Integration with 3rd party input libraries
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Integration with 3rd party input libraries
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can use third-party libraries to format an input. You have to provide
      a custom implementation of the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      element with the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      property.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The following demo uses the
    </text>
    <link checked="undefined" pressed="undefined">
      react-text-mask
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      and
    </text>
    <link checked="undefined" pressed="undefined">
      react-number-format
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      libraries. The same concept could be applied to
    </text>
    <link checked="undefined" pressed="undefined">
      e.g. react-stripe-element
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      react-text-mask
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <textbox value="(1  )    -    " checked="undefined" pressed="undefined">
    react-text-mask
    <text value="undefined" checked="undefined" pressed="undefined">
      (1  )    -    
    </text>
  </textbox>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      react-number-format
    </text>
  </Label>
  <text value="undefined" checked="undefined" pressed="undefined">
     
  </text>
  <textbox value="$1,320" checked="undefined" pressed="undefined">
    react-number-format
    <text value="undefined" checked="undefined" pressed="undefined">
      $1,320
    </text>
  </textbox>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The provided input component should handle the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      property. The property should be called with a value that implements the
      following interface:
    </text>
  </paragraph>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Accessibility
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Accessibility
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      In order for the text field to be accessible,the input should be linked to
      the label and the helper text. The underlying DOM nodes should have this
      structure:
    </text>
  </paragraph>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        If you are using the
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        component, you just have to provide a unique
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        .
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        If you are composing the component:
      </text>
    </listitem>
  </list>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Complementary projects
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Complementary projects
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      For more advanced use cases you might be able to take advantage of:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        react-hook-form
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        : React hook for form validation.
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        formik-material-ui
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        : Bindings for using Material-UI with
      </text>
      <link checked="undefined" pressed="undefined">
        formik
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        .
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        redux-form-material-ui
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        : Bindings for using Material-UI with
      </text>
      <link checked="undefined" pressed="undefined">
        Redux Form
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        .
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        mui-rff
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        : Bindings for using Material-UI with
      </text>
      <link checked="undefined" pressed="undefined">
        React Final Form
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        .
      </text>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <FilledInput />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <FormControl />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <FormHelperText />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Input />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <InputAdornment />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <InputBase />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <InputLabel />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <OutlinedInput />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <TextField />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    <separator
      orientation="horizontal"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <link checked="undefined" pressed="undefined">
      Switch
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        Switch
      </text>
    </link>
    <link checked="undefined" pressed="undefined">
      Transfer List
      <text value="undefined" checked="undefined" pressed="undefined">
        Transfer List
      </text>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/tooltips/ 1`] = `
<main value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text value="undefined" checked="undefined" pressed="undefined">
      EDIT THIS PAGE
    </text>
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Tooltip
    <text value="undefined" checked="undefined" pressed="undefined">
      Tooltip
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Tooltips display informative text when users hover over, focus on, or tap
      an element.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      When activated, Tooltips display a text label identifying an element, such
      as a description of its function.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Feedback
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          WAI-ARIA
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Bundle size
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Material Design
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Material Design
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Sketch
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Figma
        </text>
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Basic tooltip
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Basic tooltip
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button
    description="Delete"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    delete
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    add
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    add
    <SVGRoot
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></SVGRoot>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Positioned Tooltips
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Positioned Tooltips
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      has 12placementschoice. They don’t have directional arrows; instead, they
      rely on motion emanating from the source to convey direction.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    TOP-START
    <text value="undefined" checked="undefined" pressed="undefined">
      TOP-START
    </text>
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    TOP
    <text value="undefined" checked="undefined" pressed="undefined">
      TOP
    </text>
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    TOP-END
    <text value="undefined" checked="undefined" pressed="undefined">
      TOP-END
    </text>
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    LEFT-START
    <text value="undefined" checked="undefined" pressed="undefined">
      LEFT-START
    </text>
  </button>
  <LineBreak
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></LineBreak>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    LEFT
    <text value="undefined" checked="undefined" pressed="undefined">
      LEFT
    </text>
  </button>
  <LineBreak
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></LineBreak>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    LEFT-END
    <text value="undefined" checked="undefined" pressed="undefined">
      LEFT-END
    </text>
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    RIGHT-START
    <text value="undefined" checked="undefined" pressed="undefined">
      RIGHT-START
    </text>
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    RIGHT
    <text value="undefined" checked="undefined" pressed="undefined">
      RIGHT
    </text>
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    RIGHT-END
    <text value="undefined" checked="undefined" pressed="undefined">
      RIGHT-END
    </text>
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    BOTTOM-START
    <text value="undefined" checked="undefined" pressed="undefined">
      BOTTOM-START
    </text>
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    BOTTOM
    <text value="undefined" checked="undefined" pressed="undefined">
      BOTTOM
    </text>
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    BOTTOM-END
    <text value="undefined" checked="undefined" pressed="undefined">
      BOTTOM-END
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Customized tooltips
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Customized tooltips
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    LIGHT
    <text value="undefined" checked="undefined" pressed="undefined">
      LIGHT
    </text>
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    BOOTSTRAP
    <text value="undefined" checked="undefined" pressed="undefined">
      BOOTSTRAP
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    HTML
    <text value="undefined" checked="undefined" pressed="undefined">
      HTML
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Arrow Tooltips
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Arrow Tooltips
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can use the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop to give your tooltip an arrow indicating which element it refers to.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    ARROW
    <text value="undefined" checked="undefined" pressed="undefined">
      ARROW
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Custom child element
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Custom child element
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The tooltip needs to apply DOM event listeners to its child element. If
      the child is a custom React element, you need to make sure that it spreads
      its props to the underlying DOM element.
    </text>
  </paragraph>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can find a similar concept in the
    </text>
    <link checked="undefined" pressed="undefined">
      wrapping components
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      guide.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Triggers
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Triggers
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can define the types of events that cause a tooltip to show.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    HOVER OR TOUCH
    <text value="undefined" checked="undefined" pressed="undefined">
      HOVER OR TOUCH
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    FOCUS OR TOUCH
    <text value="undefined" checked="undefined" pressed="undefined">
      FOCUS OR TOUCH
    </text>
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    HOVER
    <text value="undefined" checked="undefined" pressed="undefined">
      HOVER
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    CLICK
    <text value="undefined" checked="undefined" pressed="undefined">
      CLICK
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Controlled Tooltips
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Controlled Tooltips
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can use the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      ,
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      and
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      props to control the behavior of the tooltip.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    CONTROLLED
    <text value="undefined" checked="undefined" pressed="undefined">
      CONTROLLED
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Variable Width
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Variable Width
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      wraps long text by default to make it readable.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button
    description=" Aliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est, vel aliquam tellus. Praesent non nunc mollis, fermentum neque at, semper arcu. Nullam eget est sed sem iaculis gravida eget vitae justo. "
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    DEFAULT WIDTH [300PX]
    <text value="undefined" checked="undefined" pressed="undefined">
      DEFAULT WIDTH [300PX]
    </text>
  </button>
  <button
    description=" Aliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est, vel aliquam tellus. Praesent non nunc mollis, fermentum neque at, semper arcu. Nullam eget est sed sem iaculis gravida eget vitae justo. "
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    CUSTOM WIDTH [500PX]
    <text value="undefined" checked="undefined" pressed="undefined">
      CUSTOM WIDTH [500PX]
    </text>
  </button>
  <button
    description=" Aliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est, vel aliquam tellus. Praesent non nunc mollis, fermentum neque at, semper arcu. Nullam eget est sed sem iaculis gravida eget vitae justo. "
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    NO WRAPPING
    <text value="undefined" checked="undefined" pressed="undefined">
      NO WRAPPING
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Interactive
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Interactive
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      A tooltip can be interactive. It won't close when the user hovers
      over the tooltip before the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      is expired.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    INTERACTIVE
    <text value="undefined" checked="undefined" pressed="undefined">
      INTERACTIVE
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Disabled Elements
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Disabled Elements
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      By default disabled elements like
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      do not trigger user interactions so a
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      will not activate on normal events like hover. To accommodate disabled
      elements, add a simple wrapper element, such as a
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <blockquote value="undefined" checked="undefined" pressed="undefined">
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        ⚠️ In order to work with Safari, you need at least one display block or
        flex item below the tooltip wrapper.
      </text>
    </paragraph>
  </blockquote>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    A DISABLED BUTTON
    <text value="undefined" checked="undefined" pressed="undefined">
      A DISABLED BUTTON
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <blockquote value="undefined" checked="undefined" pressed="undefined">
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        If you're not wrapping a Material-UI component that inherits from
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        , for instance, a native
      </text>
      <code value="undefined" checked="undefined" pressed="undefined">
        $SOME_CODE
      </code>
      <text value="undefined" checked="undefined" pressed="undefined">
        element, you should also add the CSS propertypointer-events: none;to
        your element when disabled:
      </text>
    </paragraph>
  </blockquote>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Transitions
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Transitions
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Use a different transition.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    GROW
    <text value="undefined" checked="undefined" pressed="undefined">
      GROW
    </text>
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    FADE
    <text value="undefined" checked="undefined" pressed="undefined">
      FADE
    </text>
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    ZOOM
    <text value="undefined" checked="undefined" pressed="undefined">
      ZOOM
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Showing and hiding
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Showing and hiding
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The tooltip is normally shown immediately when the user's mouse
      hovers over the element, and hides immediately when the user's mouse
      leaves. A delay in showing or hiding the tooltip can be added through the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      and
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      props, as shown in the Controlled Tooltips demo above.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      On mobile, the tooltip is displayed when the user longpresses the element
      and hides after a delay of 1500ms. You can disable this feature with the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    [500MS, 200MS]
    <text value="undefined" checked="undefined" pressed="undefined">
      [500MS, 200MS]
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the full source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the full source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Tooltip />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    <separator
      orientation="horizontal"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <link checked="undefined" pressed="undefined">
      Table
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        Table
      </text>
    </link>
    <link checked="undefined" pressed="undefined">
      Typography
      <text value="undefined" checked="undefined" pressed="undefined">
        Typography
      </text>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/transfer-list 1`] = `
<main value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text value="undefined" checked="undefined" pressed="undefined">
      EDIT THIS PAGE
    </text>
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Transfer List
    <text value="undefined" checked="undefined" pressed="undefined">
      Transfer List
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      A transfer list (or "shuttle") enables the user to move one or
      more list items between lists.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Simple Transfer List
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Simple Transfer List
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      For completeness, this example includes buttons for "move all",
      but not every transfer list needs these.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      List item 1
      <checkbox checked="false" value="undefined" pressed="undefined">
        List item 1
      </checkbox>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 1
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      List item 2
      <checkbox checked="false" value="undefined" pressed="undefined">
        List item 2
      </checkbox>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 2
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      List item 3
      <checkbox checked="false" value="undefined" pressed="undefined">
        List item 3
      </checkbox>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 3
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      List item 4
      <checkbox checked="false" value="undefined" pressed="undefined">
        List item 4
      </checkbox>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 4
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></listitem>
  </list>
  <button value="undefined" checked="undefined" pressed="undefined">
    move all right
    <text value="undefined" checked="undefined" pressed="undefined">
      ≫
    </text>
  </button>
  <button
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    move selected right
    <text value="undefined" checked="undefined" pressed="undefined">
      >
    </text>
  </button>
  <button
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    move selected left
    <text value="undefined" checked="undefined" pressed="undefined">
      <
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    move all left
    <text value="undefined" checked="undefined" pressed="undefined">
      ≪
    </text>
  </button>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      List item 5
      <checkbox checked="false" value="undefined" pressed="undefined">
        List item 5
      </checkbox>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 5
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      List item 6
      <checkbox checked="false" value="undefined" pressed="undefined">
        List item 6
      </checkbox>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 6
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      List item 7
      <checkbox checked="false" value="undefined" pressed="undefined">
        List item 7
      </checkbox>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 7
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      List item 8
      <checkbox checked="false" value="undefined" pressed="undefined">
        List item 8
      </checkbox>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 8
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></listitem>
  </list>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Enhanced Transfer List
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Enhanced Transfer List
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      This example exchanges the "move all" buttons for a "select
      all / select none" checkbox, and adds a counter.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="false" value="undefined" pressed="undefined">
    all items selected
  </checkbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <text value="undefined" checked="undefined" pressed="undefined">
    Choices0/4 selected
  </text>
  <separator
    orientation="horizontal"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></separator>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      List item 1
      <checkbox checked="false" value="undefined" pressed="undefined">
        List item 1
      </checkbox>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 1
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      List item 2
      <checkbox checked="false" value="undefined" pressed="undefined">
        List item 2
      </checkbox>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 2
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      List item 3
      <checkbox checked="false" value="undefined" pressed="undefined">
        List item 3
      </checkbox>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 3
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      List item 4
      <checkbox checked="false" value="undefined" pressed="undefined">
        List item 4
      </checkbox>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 4
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></listitem>
  </list>
  <button
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    move selected right
    <text value="undefined" checked="undefined" pressed="undefined">
      >
    </text>
  </button>
  <button
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    move selected left
    <text value="undefined" checked="undefined" pressed="undefined">
      <
    </text>
  </button>
  <checkbox checked="false" value="undefined" pressed="undefined">
    all items selected
  </checkbox>
  <SVGRoot value="undefined" checked="undefined" pressed="undefined"></SVGRoot>
  <text value="undefined" checked="undefined" pressed="undefined">
    Chosen0/4 selected
  </text>
  <separator
    orientation="horizontal"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></separator>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      List item 5
      <checkbox checked="false" value="undefined" pressed="undefined">
        List item 5
      </checkbox>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 5
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      List item 6
      <checkbox checked="false" value="undefined" pressed="undefined">
        List item 6
      </checkbox>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 6
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      List item 7
      <checkbox checked="false" value="undefined" pressed="undefined">
        List item 7
      </checkbox>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 7
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      List item 8
      <checkbox checked="false" value="undefined" pressed="undefined">
        List item 8
      </checkbox>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 8
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></listitem>
  </list>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Checkbox />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <List />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <ListItem />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <Switch />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    <separator
      orientation="horizontal"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <link checked="undefined" pressed="undefined">
      Text Field
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        Text Field
      </text>
    </link>
    <link checked="undefined" pressed="undefined">
      Bottom Navigation
      <text value="undefined" checked="undefined" pressed="undefined">
        Bottom Navigation
      </text>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`chromium /components/tree-view/ 1`] = `
<main value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
    <text value="undefined" checked="undefined" pressed="undefined">
      EDIT THIS PAGE
    </text>
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Tree View
    <text value="undefined" checked="undefined" pressed="undefined">
      Tree View
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      A tree view widget presents a hierarchical list.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Tree views can be used to represent a file system navigator displaying
      folders and files, an item representing a folder can be expanded to reveal
      the contents of the folder, which may be files, folders, or both.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Feedback
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Feedback
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          WAI-ARIA
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Bundle size
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Sketch
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Sketch
        </text>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <link checked="undefined" pressed="undefined">
        Figma
        <SVGRoot
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></SVGRoot>
        <text value="undefined" checked="undefined" pressed="undefined">
          Figma
        </text>
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Basic tree view
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Basic tree view
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree value="undefined" checked="undefined" pressed="undefined">
    file system navigator
    <treeitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Applications
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        Applications
      </text>
    </treeitem>
    <treeitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Documents
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        Documents
      </text>
    </treeitem>
  </tree>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Multi-selection
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Multi-selection
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Tree views also support multi-selection.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree
    multiselectable="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    multi-select
    <treeitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Applications
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        Applications
      </text>
    </treeitem>
    <treeitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Documents
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        Documents
      </text>
    </treeitem>
  </tree>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Controlled tree view
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Controlled tree view
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The tree view also offers a controlled API.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    EXPAND ALL
    <text value="undefined" checked="undefined" pressed="undefined">
      EXPAND ALL
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SELECT ALL
    <text value="undefined" checked="undefined" pressed="undefined">
      SELECT ALL
    </text>
  </button>
  <tree
    multiselectable="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    controlled
    <treeitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Applications
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        Applications
      </text>
    </treeitem>
    <treeitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Documents
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        Documents
      </text>
    </treeitem>
  </tree>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Rich object
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Rich object
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      While the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      /
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      component API maximizes flexibility, an extra step is needed to handle a
      rich object.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Let's consider a data variable with the following shape, recursion
      can be used to handle it.
    </text>
  </paragraph>
  <Pre value="undefined" checked="undefined" pressed="undefined">
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
  </Pre>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree value="undefined" checked="undefined" pressed="undefined">
    rich object
    <treeitem
      expanded="true"
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Parent
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        Parent
      </text>
      <group value="undefined" checked="undefined" pressed="undefined">
        <treeitem
          level="2"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Child - 1
          <text value="undefined" checked="undefined" pressed="undefined">
            Child - 1
          </text>
        </treeitem>
        <treeitem
          level="2"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Child - 3
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
          <text value="undefined" checked="undefined" pressed="undefined">
            Child - 3
          </text>
        </treeitem>
      </group>
    </treeitem>
  </tree>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Customized tree view
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Customized tree view
    </text>
  </heading>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Custom icons, border and animation
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Custom icons, border and animation
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree value="undefined" checked="undefined" pressed="undefined">
    customized
    <treeitem
      expanded="true"
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Main
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        Main
      </text>
      <group value="undefined" checked="undefined" pressed="undefined">
        <treeitem
          level="2"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Hello
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
          <text value="undefined" checked="undefined" pressed="undefined">
            Hello
          </text>
        </treeitem>
        <treeitem
          level="2"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Subtree with children
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
          <text value="undefined" checked="undefined" pressed="undefined">
            Subtree with children
          </text>
        </treeitem>
        <treeitem
          level="2"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          World
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
          <text value="undefined" checked="undefined" pressed="undefined">
            World
          </text>
        </treeitem>
        <treeitem
          level="2"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Something something
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
          <text value="undefined" checked="undefined" pressed="undefined">
            Something something
          </text>
        </treeitem>
      </group>
    </treeitem>
  </tree>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Gmail clone
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Gmail clone
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree value="undefined" checked="undefined" pressed="undefined">
    gmail
    <treeitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      All Mail
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <paragraph value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          All Mail
        </text>
      </paragraph>
    </treeitem>
    <treeitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Trash
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <paragraph value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Trash
        </text>
      </paragraph>
    </treeitem>
    <treeitem
      expanded="true"
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Categories
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <paragraph value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Categories
        </text>
      </paragraph>
      <group value="undefined" checked="undefined" pressed="undefined">
        <treeitem
          level="2"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Social 90
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
          <paragraph value="undefined" checked="undefined" pressed="undefined">
            <text value="undefined" checked="undefined" pressed="undefined">
              Social
            </text>
          </paragraph>
          <text value="undefined" checked="undefined" pressed="undefined">
            90
          </text>
        </treeitem>
        <treeitem
          level="2"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Updates 2,294
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
          <paragraph value="undefined" checked="undefined" pressed="undefined">
            <text value="undefined" checked="undefined" pressed="undefined">
              Updates
            </text>
          </paragraph>
          <text value="undefined" checked="undefined" pressed="undefined">
            2,294
          </text>
        </treeitem>
        <treeitem
          level="2"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Forums 3,566
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
          <paragraph value="undefined" checked="undefined" pressed="undefined">
            <text value="undefined" checked="undefined" pressed="undefined">
              Forums
            </text>
          </paragraph>
          <text value="undefined" checked="undefined" pressed="undefined">
            3,566
          </text>
        </treeitem>
        <treeitem
          level="2"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Promotions 733
          <SVGRoot
            value="undefined"
            checked="undefined"
            pressed="undefined"
          ></SVGRoot>
          <paragraph value="undefined" checked="undefined" pressed="undefined">
            <text value="undefined" checked="undefined" pressed="undefined">
              Promotions
            </text>
          </paragraph>
          <text value="undefined" checked="undefined" pressed="undefined">
            733
          </text>
        </treeitem>
      </group>
    </treeitem>
    <treeitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      History
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <paragraph value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          History
        </text>
      </paragraph>
    </treeitem>
  </tree>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Disabled tree items
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Disabled tree items
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <Label value="undefined" checked="undefined" pressed="undefined">
    <checkbox checked="false" value="undefined" pressed="undefined">
      Focus disabled items
    </checkbox>
  </Label>
  <tree
    multiselectable="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    disabled items
    <treeitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      One
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        One
      </text>
    </treeitem>
    <treeitem
      disabled="true"
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Five
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        Five
      </text>
    </treeitem>
    <treeitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Seven
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        Seven
      </text>
    </treeitem>
  </tree>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <group value="undefined" checked="undefined" pressed="undefined">
      <button pressed="true" value="undefined" checked="undefined">
        Show JavaScript source
      </button>
      <button pressed="false" value="undefined" checked="undefined">
        Show TypeScript source
      </button>
    </group>
    <button
      description="Show the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Show the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Edit in CodeSandbox"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Edit in CodeSandbox
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Copy the source"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Copy the source
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset focus to test keyboard navigation"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset focus to test keyboard navigation
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <button
      description="Reset demo"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Reset demo
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </button>
    <combobox
      haspopup="menu"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </combobox>
  </toolbar>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The behavior of disabled tree items depends on the
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      prop.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      If it is false:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        Arrow keys will not focus disabled items and, the next non-disabled item
        will be focused.
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        Typing the first character of a disabled item's label will not
        focus the item.
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        Mouse or keyboard interaction will not expand/collapse disabled items.
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        Mouse or keyboard interaction will not select disabled items.
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        Shift + arrow keys will skip disabled items and, the next non-disabled
        item will be selected.
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        Programmatic focus will not focus disabled items.
      </text>
    </listitem>
  </list>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      If it is true:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        Arrow keys will focus disabled items.
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        Typing the first character of a disabled item's label will focus
        the item.
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        Mouse or keyboard interaction will not expand/collapse disabled items.
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        Mouse or keyboard interaction will not select disabled items.
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        Shift + arrow keys will not skip disabled items but, the disabled item
        will not be selected.
      </text>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <text value="undefined" checked="undefined" pressed="undefined">
        Programmatic focus will focus disabled items.
      </text>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Accessibility
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      Accessibility
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      (WAI-ARIA:
    </text>
    <link checked="undefined" pressed="undefined">
      https://www.w3.org/TR/wai-aria-practices/#TreeView
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      )
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The component follows the WAI-ARIA authoring practices.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      To have an accessible tree view you must use
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      or
    </text>
    <code value="undefined" checked="undefined" pressed="undefined">
      $SOME_CODE
    </code>
    <text value="undefined" checked="undefined" pressed="undefined">
      to reference or provide a label on the TreeView, otherwise screen readers
      will announce it as "tree", making it hard to understand the
      context of a specific tree item.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <Anchor value="undefined" checked="undefined" pressed="undefined"></Anchor>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <TreeItem />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
    <listitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      <ListMarker value="undefined" checked="undefined" pressed="undefined">
        •
        <text value="undefined" checked="undefined" pressed="undefined">
          •
        </text>
      </ListMarker>
      <link checked="undefined" pressed="undefined">
        <TreeView />
        <code value="undefined" checked="undefined" pressed="undefined">
          $SOME_CODE
        </code>
      </link>
    </listitem>
  </list>
  <FooterAsNonLandmark
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    <separator
      orientation="horizontal"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <link checked="undefined" pressed="undefined">
      Trap Focus
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
      <text value="undefined" checked="undefined" pressed="undefined">
        Trap Focus
      </text>
    </link>
    <link checked="undefined" pressed="undefined">
      Overview
      <text value="undefined" checked="undefined" pressed="undefined">
        Overview
      </text>
      <SVGRoot
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></SVGRoot>
    </link>
  </FooterAsNonLandmark>
</main>;

`;

exports[`firefox / 1`] = `
<document value="undefined" checked="undefined" pressed="undefined">
  Material-UI: A popular React UI framework
  <link checked="undefined" pressed="undefined">
    Skip to content
  </link>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    <button value="undefined" checked="undefined" pressed="undefined">
      Open main navigation
    </button>
    <combobox
      autocomplete="list"
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Search
    </combobox>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Change language
      <text value="undefined" checked="undefined" pressed="undefined">
        ENGLISH
      </text>
    </buttonmenu>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Toggle notifications panel
    </buttonmenu>
    <link checked="undefined" pressed="undefined">
      Edit website colors
    </link>
    <link checked="undefined" pressed="undefined">
      GitHub repository
    </link>
    <button value="undefined" checked="undefined" pressed="undefined">
      Toggle light/dark theme
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Toggle right-to-left/left-to-right
    </button>
  </landmark>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    Main navigation
  </landmark>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    <img value="undefined" checked="undefined" pressed="undefined"></img>
    <heading
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      MATERIAL-UI
      <text value="undefined" checked="undefined" pressed="undefined">
        MATERIAL-UI
      </text>
    </heading>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        React components for faster and simpler web development. Build your own
        design system, or start with Material Design.
      </text>
    </paragraph>
    <link checked="undefined" pressed="undefined">
      GET STARTED
    </link>
    <link checked="undefined" pressed="undefined">
      Star
    </link>
    <link checked="undefined" pressed="undefined">
      Follow
    </link>
    <link checked="undefined" pressed="undefined">
      Get Professional Support
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      random sponsor
    </text>
    <link checked="undefined" pressed="undefined">
      a random quick word
    </link>
    <heading
      level="2"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Installation
      <text value="undefined" checked="undefined" pressed="undefined">
        Installation
      </text>
    </heading>
    <text value="undefined" checked="undefined" pressed="undefined">
      Install Material-UI's source files via npm. We take care of injecting
      the CSS needed.$ npm install @material-ui/core@next
    </text>
    <link checked="undefined" pressed="undefined">
      or use a CDN.
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Load the default Roboto font.<link rel="stylesheet"
      href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
      />
    </text>
    <separator
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <link checked="undefined" pressed="undefined">
      READ INSTALLATION DOCS
    </link>
    <heading
      level="2"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Usage
      <text value="undefined" checked="undefined" pressed="undefined">
        Usage
      </text>
    </heading>
    <text value="undefined" checked="undefined" pressed="undefined">
      Material-UI components work without any additional setup, and don't
      pollute the global scope.import * as React from 'react'; import
      { Button } from '@material-ui/core'; function App()
      { return <Button>Hello World</Button>; }
    </text>
    <separator
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <link checked="undefined" pressed="undefined">
      EXPLORE THE DOCS
    </link>
    <heading
      level="2"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Premium themes
      <text value="undefined" checked="undefined" pressed="undefined">
        Premium themes
      </text>
    </heading>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Take your project to the next level with premium themes from our store –
        all built on Material-UI.
      </text>
    </paragraph>
    <link checked="undefined" pressed="undefined">
      Browse themes
      <img
        value="https://material-ui.com/store/?utm_source=docs&utm_medium=referral&utm_campaign=home-store"
        checked="undefined"
        pressed="undefined"
      >
        Browse themes
      </img>
    </link>
    <link checked="undefined" pressed="undefined">
      BROWSE THEMES
    </link>
    <separator
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <heading
      level="2"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Material-UI's sponsors
      <link checked="undefined" pressed="undefined"></link>
      <text value="undefined" checked="undefined" pressed="undefined">
        Material-UI's sponsors
      </text>
    </heading>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        The continued development and maintenance of Material-UI is made
        possible by these generous sponsors:
      </text>
    </paragraph>
    <heading
      level="3"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Diamond 💎
      <link checked="undefined" pressed="undefined"></link>
      <text value="undefined" checked="undefined" pressed="undefined">
        Diamond 💎
      </text>
    </heading>
    <link checked="undefined" pressed="undefined">
      octopus
      <img
        description="Repeatable, reliable deployments"
        value="https://octopus.com/?utm_source=materialui&utm_medium=referral"
        checked="undefined"
        pressed="undefined"
      >
        octopus
      </img>
    </link>
    <link checked="undefined" pressed="undefined">
      doit-intl
      <img
        description="Management Platform for Google Cloud and AWS"
        value="https://www.doit-intl.com/?utm_source=materialui&utm_medium=referral"
        checked="undefined"
        pressed="undefined"
      >
        doit-intl
      </img>
    </link>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        1/3 slots available
      </text>
    </paragraph>
    <heading
      level="3"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Gold 🏆
      <link checked="undefined" pressed="undefined"></link>
      <text value="undefined" checked="undefined" pressed="undefined">
        Gold 🏆
      </text>
    </heading>
    <link checked="undefined" pressed="undefined">
      tidelift
      <img
        description="Enterprise-ready open source software"
        value="https://tidelift.com/subscription/pkg/npm-material-ui?utm_source=npm-material-ui&utm_medium=referral&utm_campaign=homepage"
        checked="undefined"
        pressed="undefined"
      >
        tidelift
      </img>
    </link>
    <link checked="undefined" pressed="undefined">
      bitsrc
      <img
        description="The fastest way to share code"
        value="https://bit.dev/"
        checked="undefined"
        pressed="undefined"
      >
        bitsrc
      </img>
    </link>
    <link checked="undefined" pressed="undefined">
      call-em-all
      <img
        description="Mass Text Messaging & Automated Calling"
        value="https://www.text-em-all.com/"
        checked="undefined"
        pressed="undefined"
      >
        call-em-all
      </img>
    </link>
    <link checked="undefined" pressed="undefined">
      bitsrc
      <img
        value="https://www.canadacasino.ca/"
        checked="undefined"
        pressed="undefined"
      >
        bitsrc
      </img>
    </link>
    <heading
      level="3"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      There are more!
      <link checked="undefined" pressed="undefined"></link>
      <text value="undefined" checked="undefined" pressed="undefined">
        There are more!
      </text>
    </heading>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        See the full list of
      </text>
      <link checked="undefined" pressed="undefined">
        our sponsors
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        , and learn how you can contribute to the future of Material-UI.
      </text>
    </paragraph>
    <separator
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <heading
      level="2"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Praise for Material-UI
      <text value="undefined" checked="undefined" pressed="undefined">
        Praise for Material-UI
      </text>
    </heading>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Here's what some of our users are saying.
      </text>
    </paragraph>
    <link checked="undefined" pressed="undefined">
      a random quote about Material-UI
    </link>
    <link checked="undefined" pressed="undefined">
      a random quote about Material-UI
    </link>
    <link checked="undefined" pressed="undefined">
      a random quote about Material-UI
    </link>
    <separator
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <heading
      level="2"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Who's using Material-UI?
      <text value="undefined" checked="undefined" pressed="undefined">
        Who's using Material-UI?
      </text>
    </heading>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Join these and other great organisations!
      </text>
    </paragraph>
    <img value="undefined" checked="undefined" pressed="undefined">
      NASA
    </img>
    <img value="undefined" checked="undefined" pressed="undefined">
      Walmart Labs
    </img>
    <img value="undefined" checked="undefined" pressed="undefined">
      Capgemini
    </img>
    <img value="undefined" checked="undefined" pressed="undefined">
      Uniqlo
    </img>
    <img value="undefined" checked="undefined" pressed="undefined">
      Bethesda
    </img>
    <img value="undefined" checked="undefined" pressed="undefined">
      J.P. Morgan
    </img>
    <img value="undefined" checked="undefined" pressed="undefined">
      Shutterstock
    </img>
    <img value="undefined" checked="undefined" pressed="undefined">
      Netflix
    </img>
    <img value="undefined" checked="undefined" pressed="undefined">
      Coursera
    </img>
    <img value="undefined" checked="undefined" pressed="undefined">
      Amazon
    </img>
    <img value="undefined" checked="undefined" pressed="undefined">
      Unity
    </img>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Are you using Material-UI?
      </text>
    </paragraph>
    <link checked="undefined" pressed="undefined">
      LET US KNOW!
    </link>
  </landmark>
  <separator
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></separator>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    <img value="undefined" checked="undefined" pressed="undefined"></img>
    <link checked="undefined" pressed="undefined">
      Material-UI
    </link>
    <heading
      level="2"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Community
      <text value="undefined" checked="undefined" pressed="undefined">
        Community
      </text>
    </heading>
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        GitHub
        <link checked="undefined" pressed="undefined">
          GitHub
        </link>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Twitter
        <link checked="undefined" pressed="undefined">
          Twitter
        </link>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        StackOverflow
        <link checked="undefined" pressed="undefined">
          StackOverflow
        </link>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Team
        <link checked="undefined" pressed="undefined">
          Team
        </link>
      </listitem>
    </list>
    <heading
      level="2"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Resources
      <text value="undefined" checked="undefined" pressed="undefined">
        Resources
      </text>
    </heading>
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Support
        <link checked="undefined" pressed="undefined">
          Support
        </link>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Blog
        <link checked="undefined" pressed="undefined">
          Blog
        </link>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Material Icons
        <link checked="undefined" pressed="undefined">
          Material Icons
        </link>
      </listitem>
    </list>
    <heading
      level="2"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Company
      <text value="undefined" checked="undefined" pressed="undefined">
        Company
      </text>
    </heading>
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        About
        <link checked="undefined" pressed="undefined">
          About
        </link>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Contact Us
        <link checked="undefined" pressed="undefined">
          Contact Us
        </link>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Jobs
        <link checked="undefined" pressed="undefined">
          Jobs
        </link>
      </listitem>
    </list>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Currently
      </text>
      <link checked="undefined" pressed="undefined">
        v5.0.0-alpha.11. View versions page.
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        . Released under the
      </text>
      <link checked="undefined" pressed="undefined">
        MIT License
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        . Copyright © 2020 Material-UI.
      </text>
    </paragraph>
  </landmark>
</document>;

`;

exports[`firefox /api/button/ 1`] = `
<landmark value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Button API
    <text value="undefined" checked="undefined" pressed="undefined">
      Button API
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The API documentation of the Button React component. Learn more about the
      props and the CSS customization points.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Import
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Import
    </text>
  </heading>
  <text value="undefined" checked="undefined" pressed="undefined">
    import Button from '@material-ui/core/Button'; // or import {
    Button } from '@material-ui/core';
  </text>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can learn more about the difference by
    </text>
    <link checked="undefined" pressed="undefined">
      reading this guide
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Component name
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Component name
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The MuiButton name can be used for providing
    </text>
    <link checked="undefined" pressed="undefined">
      default props
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      or
    </text>
    <link checked="undefined" pressed="undefined">
      style overrides
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      at the theme level.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Props
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Props
    </text>
  </heading>
  <table value="undefined" checked="undefined" pressed="undefined">
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Name
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Type
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Default
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Description
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          children
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          node
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined"></cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          The content of the button.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          classes
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          object
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined"></cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Override or extend the styles applied to the component. See
        </text>
        <link checked="undefined" pressed="undefined">
          CSS API
        </link>
        <text value="undefined" checked="undefined" pressed="undefined">
          below for more details.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          color
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          'inherit'
        </text>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <text value="undefined" checked="undefined" pressed="undefined">
          | 'primary'
        </text>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <text value="undefined" checked="undefined" pressed="undefined">
          | 'secondary'
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          'primary'
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          The color of the component. It supports those theme colors that make
          sense for this component.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          component
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          elementType
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          'button'
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          The component used for the root node. Either a string to use a HTML
          element or a component.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          disabled
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          bool
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          false
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          If true, the button will be disabled.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          disableElevation
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          bool
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          false
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          If true, no elevation is used.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          disableFocusRipple
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          bool
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          false
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          If true, the keyboard focus ripple will be disabled.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          disableRipple
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          bool
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined"></cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          If true, the ripple effect will be disabled.
        </text>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <text value="undefined" checked="undefined" pressed="undefined">
          ⚠️ Without a ripple there is no styling for :focus-visible by default.
          Be sure to highlight the element by applying separate styles with the
          focusVisibleClassName.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          endIcon
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          node
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined"></cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Element placed after the children.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          fullWidth
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          bool
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          false
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          If true, the button will take up the full width of its container.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          href
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          string
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined"></cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          The URL to link to when the button is clicked. If defined, an a
          element will be used as the root node.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          size
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          'large'
        </text>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <text value="undefined" checked="undefined" pressed="undefined">
          | 'medium'
        </text>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <text value="undefined" checked="undefined" pressed="undefined">
          | 'small'
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          'medium'
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          The size of the button. small is equivalent to the dense button
          styling.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          startIcon
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          node
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined"></cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Element placed before the children.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          variant
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          'contained'
        </text>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <text value="undefined" checked="undefined" pressed="undefined">
          | 'outlined'
        </text>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <text value="undefined" checked="undefined" pressed="undefined">
          | 'text'
        </text>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <text value="undefined" checked="undefined" pressed="undefined">
          | string
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          'text'
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          The variant to use.
        </text>
      </cell>
    </row>
  </table>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The ref is forwarded to the root element.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Any other props supplied will be provided to the root element (
    </text>
    <link checked="undefined" pressed="undefined">
      ButtonBase
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      ).
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    CSS
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      CSS
    </text>
  </heading>
  <table value="undefined" checked="undefined" pressed="undefined">
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Rule name
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Global class
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Description
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          root
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-root
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          label
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-label
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the span element that wraps the children.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          text
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-text
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if variant="text".
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          textPrimary
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-textPrimary
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if variant="text" and
          color="primary".
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          textSecondary
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-textSecondary
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if variant="text" and
          color="secondary".
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          outlined
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-outlined
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if variant="outlined".
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          outlinedPrimary
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-outlinedPrimary
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if variant="outlined" and
          color="primary".
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          outlinedSecondary
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-outlinedSecondary
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if variant="outlined" and
          color="secondary".
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          contained
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-contained
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if variant="contained".
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          containedPrimary
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-containedPrimary
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if variant="contained"
          and color="primary".
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          containedSecondary
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-containedSecondary
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if variant="contained"
          and color="secondary".
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          disableElevation
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-disableElevation
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if
          disableElevation={true}.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          focusVisible
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .Mui-focusVisible
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Pseudo-class applied to the ButtonBase root element if the button is
          keyboard focused.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          disabled
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .Mui-disabled
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Pseudo-class applied to the root element if disabled={true}.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          colorInherit
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-colorInherit
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if color="inherit".
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          textSizeSmall
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-textSizeSmall
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if size="small" and
          variant="text".
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          textSizeLarge
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-textSizeLarge
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if size="large" and
          variant="text".
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          outlinedSizeSmall
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-outlinedSizeSmall
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if size="small" and
          variant="outlined".
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          outlinedSizeLarge
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-outlinedSizeLarge
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if size="large" and
          variant="outlined".
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          containedSizeSmall
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-containedSizeSmall
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if size="small" and
          variant="contained".
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          containedSizeLarge
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-containedSizeLarge
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if size="large" and
          variant="contained".
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          sizeSmall
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-sizeSmall
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if size="small".
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          sizeLarge
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-sizeLarge
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if size="large".
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          fullWidth
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-fullWidth
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the root element if fullWidth={true}.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          startIcon
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-startIcon
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the startIcon element if supplied.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          endIcon
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-endIcon
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the endIcon element if supplied.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          iconSizeSmall
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-iconSizeSmall
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the icon element if supplied and
          size="small".
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          iconSizeMedium
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-iconSizeMedium
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the icon element if supplied and
          size="medium".
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          iconSizeLarge
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiButton-iconSizeLarge
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the icon element if supplied and
          size="large".
        </text>
      </cell>
    </row>
  </table>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can override the style of the component thanks to one of these
      customization points:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • With a rule name of the classes object prop .
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        With a rule name of the
      </text>
      <link checked="undefined" pressed="undefined">
        classes object prop
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        .
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • With a global class name .
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        With a
      </text>
      <link checked="undefined" pressed="undefined">
        global class name
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        .
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • With a theme and an overrides property .
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        With a theme and an
      </text>
      <link checked="undefined" pressed="undefined">
        overrides property
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        .
      </text>
    </listitem>
  </list>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      If that's not sufficient, you can check the
    </text>
    <link checked="undefined" pressed="undefined">
      implementation of the component
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      for more detail.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Inheritance
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Inheritance
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The props of the
    </text>
    <link checked="undefined" pressed="undefined">
      ButtonBase
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      component are also available. You can take advantage of this behavior to
    </text>
    <link checked="undefined" pressed="undefined">
      target nested components
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Demos
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Demos
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Button Group
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        Button Group
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Buttons
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        Buttons
      </link>
    </listitem>
  </list>
  <separator
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></separator>
  <link checked="undefined" pressed="undefined">
    Breadcrumbs
  </link>
  <link checked="undefined" pressed="undefined">
    ButtonBase
  </link>
</landmark>;

`;

exports[`firefox /api/select/ 1`] = `
<landmark value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Select API
    <text value="undefined" checked="undefined" pressed="undefined">
      Select API
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The API documentation of the Select React component. Learn more about the
      props and the CSS customization points.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Import
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Import
    </text>
  </heading>
  <text value="undefined" checked="undefined" pressed="undefined">
    import Select from '@material-ui/core/Select'; // or import {
    Select } from '@material-ui/core';
  </text>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can learn more about the difference by
    </text>
    <link checked="undefined" pressed="undefined">
      reading this guide
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Component name
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Component name
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The MuiSelect name can be used for providing
    </text>
    <link checked="undefined" pressed="undefined">
      default props
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      or
    </text>
    <link checked="undefined" pressed="undefined">
      style overrides
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      at the theme level.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Props
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Props
    </text>
  </heading>
  <table value="undefined" checked="undefined" pressed="undefined">
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Name
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Type
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Default
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Description
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          autoWidth
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          bool
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          false
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          If true, the width of the popover will automatically be set according
          to the items inside the menu, otherwise it will be at least the width
          of the select input.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          children
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          node
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined"></cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          The option elements to populate the select with. Can be some MenuItem
          when native is false and option when native is true.
        </text>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <text value="undefined" checked="undefined" pressed="undefined">
          ⚠️The MenuItem elements must be direct descendants when native is
          false.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          classes
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          object
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined"></cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Override or extend the styles applied to the component. See
        </text>
        <link checked="undefined" pressed="undefined">
          CSS API
        </link>
        <text value="undefined" checked="undefined" pressed="undefined">
          below for more details.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          defaultValue
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          any
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined"></cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          The default element value. Use when the component is not controlled.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          displayEmpty
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          bool
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          false
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          If true, a value is displayed even if no items are selected.
        </text>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <text value="undefined" checked="undefined" pressed="undefined">
          In order to display a meaningful value, a function can be passed to
          the renderValue prop which returns the value to be displayed when no
          items are selected.
        </text>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <text value="undefined" checked="undefined" pressed="undefined">
          ⚠️ When using this prop, make sure the label doesn't overlap with
          the empty displayed value. The label should either be hidden or forced
          to a shrunk state.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          IconComponent
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          elementType
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          ArrowDropDownIcon
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          The icon that displays the arrow.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          id
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          string
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined"></cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          The id of the wrapper element or the select element when native.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          input
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          element
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined"></cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          An Input element; does not have to be a material-ui specific Input.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          inputProps
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          object
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined"></cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <link checked="undefined" pressed="undefined">
          Attributes
        </link>
        <text value="undefined" checked="undefined" pressed="undefined">
          applied to the input element. When native is true, the attributes are
          applied on the select element.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          label
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          node
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined"></cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          See
        </text>
        <link checked="undefined" pressed="undefined">
          OutlinedInput#label
        </link>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          labelId
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          string
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined"></cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          The ID of an element that acts as an additional label. The Select will
          be labelled by the additional label and the selected value.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          labelWidth
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          number
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          0
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          See
        </text>
        <link checked="undefined" pressed="undefined">
          OutlinedInput#label
        </link>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          MenuProps
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          object
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined"></cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Props applied to the
        </text>
        <link checked="undefined" pressed="undefined">
          Menu
        </link>
        <text value="undefined" checked="undefined" pressed="undefined">
          element.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          multiple
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          bool
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          false
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          If true, value must be an array and the menu will support multiple
          selections.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          native
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          bool
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          false
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          If true, the component will be using a native select element.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          onChange
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          func
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined"></cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Callback fired when a menu item is selected.
        </text>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <text value="undefined" checked="undefined" pressed="undefined">
          Signature:
        </text>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <text value="undefined" checked="undefined" pressed="undefined">
          function(event: object, child?: object) => void
        </text>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <text value="undefined" checked="undefined" pressed="undefined">
          event: The event source of the callback. You can pull out the new
          value by accessing event.target.value (any).
        </text>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <text value="undefined" checked="undefined" pressed="undefined">
          child: The react element that was selected when native is false
          (default).
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          onClose
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          func
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined"></cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Callback fired when the component requests to be closed. Use in
          controlled mode (see open).
        </text>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <text value="undefined" checked="undefined" pressed="undefined">
          Signature:
        </text>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <text value="undefined" checked="undefined" pressed="undefined">
          function(event: object) => void
        </text>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <text value="undefined" checked="undefined" pressed="undefined">
          event: The event source of the callback.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          onOpen
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          func
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined"></cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Callback fired when the component requests to be opened. Use in
          controlled mode (see open).
        </text>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <text value="undefined" checked="undefined" pressed="undefined">
          Signature:
        </text>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <text value="undefined" checked="undefined" pressed="undefined">
          function(event: object) => void
        </text>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <text value="undefined" checked="undefined" pressed="undefined">
          event: The event source of the callback.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          open
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          bool
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined"></cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Control select open state. You can only use it when the native prop is
          false (default).
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          renderValue
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          func
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined"></cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Render the selected value. You can only use it when the native prop is
          false (default).
        </text>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <text value="undefined" checked="undefined" pressed="undefined">
          Signature:
        </text>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <text value="undefined" checked="undefined" pressed="undefined">
          function(value: any) => ReactNode
        </text>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <text value="undefined" checked="undefined" pressed="undefined">
          value: The value provided to the component.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          SelectDisplayProps
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          object
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined"></cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Props applied to the clickable div element.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          value
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          any
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined"></cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          The input value. Providing an empty string will select no options.
          This prop is required when the native prop is false (default). Set to
          an empty string '' if you don't want any of the
          available options to be selected.
        </text>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <text value="undefined" checked="undefined" pressed="undefined">
          If the value is an object it must have reference equality with the
          option in order to be selected. If the value is not an object, the
          string representation must match with the string representation of the
          option in order to be selected.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          variant
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          'filled'
        </text>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <text value="undefined" checked="undefined" pressed="undefined">
          | 'outlined'
        </text>
        <whitespace
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></whitespace>
        <text value="undefined" checked="undefined" pressed="undefined">
          | 'standard'
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          'standard'
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          The variant to use.
        </text>
      </cell>
    </row>
  </table>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The ref is forwarded to the root element.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Any other props supplied will be provided to the root element (
    </text>
    <link checked="undefined" pressed="undefined">
      Input
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      ).
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    CSS
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      CSS
    </text>
  </heading>
  <table value="undefined" checked="undefined" pressed="undefined">
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Rule name
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Global class
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Description
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          root
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiSelect-root
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the select component root class.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          select
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiSelect-select
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the select component select class.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          filled
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiSelect-filled
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the select component if variant="filled".
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          outlined
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiSelect-outlined
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the select component if
          variant="outlined".
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          selectMenu
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiSelect-selectMenu
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the select component selectMenu class.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          disabled
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .Mui-disabled
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Pseudo-class applied to the select component disabled class.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          icon
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiSelect-icon
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the icon component.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          iconOpen
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiSelect-iconOpen
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the icon component if the popup is open.
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          iconFilled
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiSelect-iconFilled
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the icon component if variant="filled".
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          iconOutlined
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiSelect-iconOutlined
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the icon component if variant="outlined".
        </text>
      </cell>
    </row>
    <row value="undefined" checked="undefined" pressed="undefined">
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          nativeInput
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          .MuiSelect-nativeInput
        </text>
      </cell>
      <cell value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Styles applied to the underlying native input component.
        </text>
      </cell>
    </row>
  </table>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can override the style of the component thanks to one of these
      customization points:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • With a rule name of the classes object prop .
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        With a rule name of the
      </text>
      <link checked="undefined" pressed="undefined">
        classes object prop
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        .
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • With a global class name .
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        With a
      </text>
      <link checked="undefined" pressed="undefined">
        global class name
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        .
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • With a theme and an overrides property .
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        With a theme and an
      </text>
      <link checked="undefined" pressed="undefined">
        overrides property
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        .
      </text>
    </listitem>
  </list>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      If that's not sufficient, you can check the
    </text>
    <link checked="undefined" pressed="undefined">
      implementation of the component
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      for more detail.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Inheritance
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Inheritance
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The props of the
    </text>
    <link checked="undefined" pressed="undefined">
      Input
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      component are also available. You can take advantage of this behavior to
    </text>
    <link checked="undefined" pressed="undefined">
      target nested components
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Demos
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Demos
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Selects
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        Selects
      </link>
    </listitem>
  </list>
  <separator
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></separator>
  <link checked="undefined" pressed="undefined">
    ScopedCssBaseline
  </link>
  <link checked="undefined" pressed="undefined">
    Skeleton
  </link>
</landmark>;

`;

exports[`firefox /components/breadcrumbs 1`] = `
<landmark value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Breadcrumbs
    <text value="undefined" checked="undefined" pressed="undefined">
      Breadcrumbs
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Breadcrumbs allow users to make selections from a range of values.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      WAI-ARIA
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Bundle size
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Basic breadcrumbs
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Basic breadcrumbs
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    breadcrumb
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Material-UI
        <link checked="undefined" pressed="undefined">
          Material-UI
        </link>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Core
        <link checked="undefined" pressed="undefined">
          Core
        </link>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Breadcrumb
        <paragraph value="undefined" checked="undefined" pressed="undefined">
          <text value="undefined" checked="undefined" pressed="undefined">
            Breadcrumb
          </text>
        </paragraph>
      </listitem>
    </list>
  </landmark>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Breadcrumbs aria-label="breadcrumb"> <Link
    color="inherit" href="/"
    onClick={handleClick}> Material-UI </Link> <Link
    color="inherit" href="/getting-started/installation/"
    onClick={handleClick} > Core </Link> <Typography
    color="textPrimary">Breadcrumb</Typography>
    </Breadcrumbs>
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Active last breadcrumb
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Active last breadcrumb
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Keep the last breadcrumb interactive.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    breadcrumb
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Material-UI
        <link checked="undefined" pressed="undefined">
          Material-UI
        </link>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Core
        <link checked="undefined" pressed="undefined">
          Core
        </link>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Breadcrumb
        <link checked="undefined" pressed="undefined">
          Breadcrumb
        </link>
      </listitem>
    </list>
  </landmark>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Custom separator
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Custom separator
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      In the following examples, we are using two string separators, and an SVG
      icon.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    breadcrumb
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Material-UI
        <link checked="undefined" pressed="undefined">
          Material-UI
        </link>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Core
        <link checked="undefined" pressed="undefined">
          Core
        </link>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Breadcrumb
        <paragraph value="undefined" checked="undefined" pressed="undefined">
          <text value="undefined" checked="undefined" pressed="undefined">
            Breadcrumb
          </text>
        </paragraph>
      </listitem>
    </list>
  </landmark>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    breadcrumb
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Material-UI
        <link checked="undefined" pressed="undefined">
          Material-UI
        </link>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Core
        <link checked="undefined" pressed="undefined">
          Core
        </link>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Breadcrumb
        <paragraph value="undefined" checked="undefined" pressed="undefined">
          <text value="undefined" checked="undefined" pressed="undefined">
            Breadcrumb
          </text>
        </paragraph>
      </listitem>
    </list>
  </landmark>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    breadcrumb
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Material-UI
        <link checked="undefined" pressed="undefined">
          Material-UI
        </link>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Core
        <link checked="undefined" pressed="undefined">
          Core
        </link>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Breadcrumb
        <paragraph value="undefined" checked="undefined" pressed="undefined">
          <text value="undefined" checked="undefined" pressed="undefined">
            Breadcrumb
          </text>
        </paragraph>
      </listitem>
    </list>
  </landmark>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Breadcrumbs with icons
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Breadcrumbs with icons
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    breadcrumb
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Material-UI
        <link checked="undefined" pressed="undefined">
          Material-UI
        </link>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Core
        <link checked="undefined" pressed="undefined">
          Core
        </link>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Breadcrumb
        <text value="undefined" checked="undefined" pressed="undefined">
          Breadcrumb
        </text>
      </listitem>
    </list>
  </landmark>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Collapsed breadcrumbs
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Collapsed breadcrumbs
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    breadcrumb
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Home
        <link checked="undefined" pressed="undefined">
          Home
        </link>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Show path
        <button value="undefined" checked="undefined" pressed="undefined">
          Show path
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Belts
        <paragraph value="undefined" checked="undefined" pressed="undefined">
          <text value="undefined" checked="undefined" pressed="undefined">
            Belts
          </text>
        </paragraph>
      </listitem>
    </list>
  </landmark>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Breadcrumbs maxItems={2} aria-label="breadcrumb">
    <Link color="inherit" href="#"
    onClick={handleClick}> Home </Link> <Link
    color="inherit" href="#"
    onClick={handleClick}> Catalog </Link> <Link
    color="inherit" href="#"
    onClick={handleClick}> Accessories </Link> <Link
    color="inherit" href="#"
    onClick={handleClick}> New Collection </Link>
    <Typography color="textPrimary">Belts</Typography>
    </Breadcrumbs>
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Customized breadcrumbs
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Customized breadcrumbs
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    breadcrumb
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Home
        <link checked="undefined" pressed="undefined">
          Home
        </link>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Catalog
        <link checked="undefined" pressed="undefined">
          Catalog
        </link>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Accessories
        <button value="undefined" checked="undefined" pressed="undefined">
          Accessories
          <text value="undefined" checked="undefined" pressed="undefined">
            Accessories
          </text>
        </button>
      </listitem>
    </list>
  </landmark>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Integration with react-router
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Integration with react-router
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    breadcrumb
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Home
        <link checked="undefined" pressed="undefined">
          Home
        </link>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Inbox
        <paragraph value="undefined" checked="undefined" pressed="undefined">
          <text value="undefined" checked="undefined" pressed="undefined">
            Inbox
          </text>
        </paragraph>
      </listitem>
    </list>
  </landmark>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    mailbox folders
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        Inbox
        <button value="undefined" checked="undefined" pressed="undefined">
          Inbox
          <text value="undefined" checked="undefined" pressed="undefined">
            Inbox
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        Important
        <list value="undefined" checked="undefined" pressed="undefined">
          <listitem
            level="2"
            value="undefined"
            checked="undefined"
            pressed="undefined"
          >
            Important
            <button value="undefined" checked="undefined" pressed="undefined">
              Important
              <text value="undefined" checked="undefined" pressed="undefined">
                Important
              </text>
            </button>
          </listitem>
        </list>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        Trash
        <button value="undefined" checked="undefined" pressed="undefined">
          Trash
          <text value="undefined" checked="undefined" pressed="undefined">
            Trash
          </text>
        </button>
      </listitem>
      <listitem
        level="1"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        Spam
        <button value="undefined" checked="undefined" pressed="undefined">
          Spam
          <text value="undefined" checked="undefined" pressed="undefined">
            Spam
          </text>
        </button>
      </listitem>
    </list>
  </landmark>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Accessibility
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Accessibility
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      (WAI-ARIA:
    </text>
    <link checked="undefined" pressed="undefined">
      https://www.w3.org/TR/wai-aria-practices/#breadcrumb
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      )
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Be sure to add a aria-label description on the Breadcrumbs component.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The accessibility of this component relies on:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • The set of links is structured using an ordered list ( <ol>
      element).
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        The set of links is structured using an ordered list (<ol>
        element).
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • To prevent screen reader announcement of the visual separators between
      links, they are hidden with aria-hidden .
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        To prevent screen reader announcement of the visual separators between
        links, they are hidden with aria-hidden.
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • A nav element labeled with aria-label identifies the structure as a
      breadcrumb trail and makes it a navigation landmark so that it is easy to
      locate.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        A nav element labeled with aria-label identifies the structure as a
        breadcrumb trail and makes it a navigation landmark so that it is easy
        to locate.
      </text>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <Breadcrumbs />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <Breadcrumbs />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <Link />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <Link />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <Typography />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <Typography />
      </link>
    </listitem>
  </list>
  <separator
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></separator>
  <link checked="undefined" pressed="undefined">
    Bottom Navigation
  </link>
  <link checked="undefined" pressed="undefined">
    Drawer
  </link>
</landmark>;

`;

exports[`firefox /components/button-group/ 1`] = `
<landmark value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Button group
    <text value="undefined" checked="undefined" pressed="undefined">
      Button group
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The ButtonGroup component can be used to group related buttons.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Bundle size
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Basic button group
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Basic button group
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group value="undefined" checked="undefined" pressed="undefined">
    outlined primary button group
    <button value="undefined" checked="undefined" pressed="undefined">
      ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ONE
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        TWO
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        THREE
      </text>
    </button>
  </group>
  <group value="undefined" checked="undefined" pressed="undefined">
    contained primary button group
    <button value="undefined" checked="undefined" pressed="undefined">
      ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ONE
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        TWO
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        THREE
      </text>
    </button>
  </group>
  <group value="undefined" checked="undefined" pressed="undefined">
    text primary button group
    <button value="undefined" checked="undefined" pressed="undefined">
      ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ONE
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        TWO
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        THREE
      </text>
    </button>
  </group>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Sizes and colors
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Sizes and colors
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group value="undefined" checked="undefined" pressed="undefined">
    small outlined button group
    <button value="undefined" checked="undefined" pressed="undefined">
      ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ONE
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        TWO
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        THREE
      </text>
    </button>
  </group>
  <group value="undefined" checked="undefined" pressed="undefined">
    outlined secondary button group
    <button value="undefined" checked="undefined" pressed="undefined">
      ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ONE
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        TWO
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        THREE
      </text>
    </button>
  </group>
  <group value="undefined" checked="undefined" pressed="undefined">
    large outlined primary button group
    <button value="undefined" checked="undefined" pressed="undefined">
      ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ONE
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        TWO
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        THREE
      </text>
    </button>
  </group>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Vertical group
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Vertical group
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group value="undefined" checked="undefined" pressed="undefined">
    vertical outlined primary button group
    <button value="undefined" checked="undefined" pressed="undefined">
      ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ONE
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        TWO
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        THREE
      </text>
    </button>
  </group>
  <group value="undefined" checked="undefined" pressed="undefined">
    vertical contained primary button group
    <button value="undefined" checked="undefined" pressed="undefined">
      ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ONE
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        TWO
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        THREE
      </text>
    </button>
  </group>
  <group value="undefined" checked="undefined" pressed="undefined">
    vertical contained primary button group
    <button value="undefined" checked="undefined" pressed="undefined">
      ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ONE
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        TWO
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        THREE
      </text>
    </button>
  </group>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Split button
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Split button
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      ButtonGroup can also be used to create a split button. The dropdown can
      change the button action (as in this example), or be used to immediately
      trigger a related action.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group value="undefined" checked="undefined" pressed="undefined">
    split button
    <button value="undefined" checked="undefined" pressed="undefined">
      SQUASH AND MERGE
      <text value="undefined" checked="undefined" pressed="undefined">
        SQUASH AND MERGE
      </text>
    </button>
    <button
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      select merge strategy
    </button>
  </group>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Disabled elevation
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Disabled elevation
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can remove the elevation with the disableElevation prop.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group value="undefined" checked="undefined" pressed="undefined">
    <button value="undefined" checked="undefined" pressed="undefined">
      ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ONE
      </text>
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        TWO
      </text>
    </button>
  </group>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <ButtonGroup disableElevation variant="contained"
    color="primary"> <Button>One</Button>
    <Button>Two</Button> </ButtonGroup>
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <Button />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <Button />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <ButtonGroup />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <ButtonGroup />
      </link>
    </listitem>
  </list>
  <separator
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></separator>
  <link checked="undefined" pressed="undefined">
    Button
  </link>
  <link checked="undefined" pressed="undefined">
    Checkbox
  </link>
</landmark>;

`;

exports[`firefox /components/buttons/ 1`] = `
<landmark value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Button
    <text value="undefined" checked="undefined" pressed="undefined">
      Button
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Buttons allow users to take actions, and make choices, with a single tap.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Buttons communicate actions that users can take. They are typically placed
      throughout your UI, in places like:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Dialogs
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Dialogs
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Modal windows
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Modal windows
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Forms
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Forms
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Cards
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Cards
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Toolbars
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Toolbars
      </text>
    </listitem>
  </list>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      WAI-ARIA
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Bundle size
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Material Design
      <link checked="undefined" pressed="undefined">
        Material Design
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Contained Buttons
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Contained Buttons
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <link checked="undefined" pressed="undefined">
      Contained buttons
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      are high-emphasis, distinguished by their use of elevation and fill. They
      contain actions that are primary to your app.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    PRIMARY
    <text value="undefined" checked="undefined" pressed="undefined">
      PRIMARY
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SECONDARY
    <text value="undefined" checked="undefined" pressed="undefined">
      SECONDARY
    </text>
  </button>
  <button
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    DISABLED
    <text value="undefined" checked="undefined" pressed="undefined">
      DISABLED
    </text>
  </button>
  <link checked="undefined" pressed="undefined">
    LINK
  </link>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Button variant="contained">Primary</Button>
    <Button variant="contained" color="secondary">
    Secondary </Button> <Button variant="contained"
    disabled> Disabled </Button> <Button
    variant="contained" href="#contained-buttons"> Link
    </Button>
  </text>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can remove the elevation with the disableElevation prop.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    DISABLE ELEVATION
    <text value="undefined" checked="undefined" pressed="undefined">
      DISABLE ELEVATION
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Button variant="contained" disableElevation> Disable
    elevation </Button>
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Text Buttons
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Text Buttons
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <link checked="undefined" pressed="undefined">
      Text buttons
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      are typically used for less-pronounced actions, including those located:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • In dialogs
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        In dialogs
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • In cards
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        In cards
      </text>
    </listitem>
  </list>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      In cards, text buttons help maintain an emphasis on card content.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    PRIMARY
    <text value="undefined" checked="undefined" pressed="undefined">
      PRIMARY
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SECONDARY
    <text value="undefined" checked="undefined" pressed="undefined">
      SECONDARY
    </text>
  </button>
  <button
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    DISABLED
    <text value="undefined" checked="undefined" pressed="undefined">
      DISABLED
    </text>
  </button>
  <link checked="undefined" pressed="undefined">
    LINK
  </link>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Button>Primary</Button> <Button
    color="secondary">Secondary</Button> <Button
    disabled>Disabled</Button> <Button
    href="#text-buttons">Link</Button>
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Outlined Buttons
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Outlined Buttons
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <link checked="undefined" pressed="undefined">
      Outlined buttons
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      are medium-emphasis buttons. They contain actions that are important, but
      aren’t the primary action in an app.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Outlined buttons are also a lower emphasis alternative to contained
      buttons, or a higher emphasis alternative to text buttons.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    PRIMARY
    <text value="undefined" checked="undefined" pressed="undefined">
      PRIMARY
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SECONDARY
    <text value="undefined" checked="undefined" pressed="undefined">
      SECONDARY
    </text>
  </button>
  <button
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    DISABLED
    <text value="undefined" checked="undefined" pressed="undefined">
      DISABLED
    </text>
  </button>
  <link checked="undefined" pressed="undefined">
    LINK
  </link>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Button variant="outlined">Primary</Button> <Button
    variant="outlined" color="secondary"> Secondary
    </Button> <Button variant="outlined" disabled>
    Disabled </Button> <Button variant="outlined"
    href="#outlined-buttons"> Link </Button>
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Handling clicks
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Handling clicks
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      All components accept an onClick handler that is applied to the root DOM
      element.
    </text>
  </paragraph>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Button onClick={() => { alert('clicked');
    }} > Click me </Button>
  </text>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Note that the documentation
    </text>
    <link checked="undefined" pressed="undefined">
      avoids
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      mentioning native props (there are a lot) in the API section of the
      components.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Upload button
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Upload button
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    UPLOAD
    <button value="undefined" checked="undefined" pressed="undefined">
      UPLOAD
      <text value="undefined" checked="undefined" pressed="undefined">
        UPLOAD
      </text>
    </button>
  </label>
  <label value="undefined" checked="undefined" pressed="undefined">
    upload picture
    <button value="undefined" checked="undefined" pressed="undefined">
      upload picture
    </button>
  </label>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Sizes
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Sizes
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      For larger or smaller buttons use the size prop.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SMALL
    <text value="undefined" checked="undefined" pressed="undefined">
      SMALL
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    MEDIUM
    <text value="undefined" checked="undefined" pressed="undefined">
      MEDIUM
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    LARGE
    <text value="undefined" checked="undefined" pressed="undefined">
      LARGE
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SMALL
    <text value="undefined" checked="undefined" pressed="undefined">
      SMALL
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    MEDIUM
    <text value="undefined" checked="undefined" pressed="undefined">
      MEDIUM
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    LARGE
    <text value="undefined" checked="undefined" pressed="undefined">
      LARGE
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SMALL
    <text value="undefined" checked="undefined" pressed="undefined">
      SMALL
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    MEDIUM
    <text value="undefined" checked="undefined" pressed="undefined">
      MEDIUM
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    LARGE
    <text value="undefined" checked="undefined" pressed="undefined">
      LARGE
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    delete
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    delete
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    delete
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    delete
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Buttons with icons and label
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Buttons with icons and label
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Sometimes you might want to have icons for certain button to enhance the
      UX of the application as we recognize logos more easily than plain text.
      For example, if you have a delete button you can label it with a dustbin
      icon.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    DELETE
    <text value="undefined" checked="undefined" pressed="undefined">
      DELETE
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SEND
    <text value="undefined" checked="undefined" pressed="undefined">
      SEND
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    UPLOAD
    <text value="undefined" checked="undefined" pressed="undefined">
      UPLOAD
    </text>
  </button>
  <button
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    TALK
    <text value="undefined" checked="undefined" pressed="undefined">
      TALK
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SAVE
    <text value="undefined" checked="undefined" pressed="undefined">
      SAVE
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SAVE
    <text value="undefined" checked="undefined" pressed="undefined">
      SAVE
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Icon Buttons
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Icon Buttons
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Icon buttons are commonly found in app bars and toolbars.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Icons are also appropriate for toggle buttons that allow a single choice
      to be selected or deselected, such as adding or removing a star to an
      item.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    delete
  </button>
  <button
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    delete
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    add an alarm
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    add to shopping cart
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <IconButton aria-label="delete"> <DeleteIcon />
    </IconButton> <IconButton aria-label="delete" disabled
    color="primary"> <DeleteIcon /> </IconButton>
    <IconButton color="secondary" aria-label="add an
    alarm"> <AlarmIcon /> </IconButton> <IconButton
    color="primary" aria-label="add to shopping cart">
    <AddShoppingCartIcon /> </IconButton>
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Customized buttons
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Customized buttons
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    CUSTOM CSS
    <text value="undefined" checked="undefined" pressed="undefined">
      CUSTOM CSS
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    THEME PROVIDER
    <text value="undefined" checked="undefined" pressed="undefined">
      THEME PROVIDER
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    Bootstrap
    <text value="undefined" checked="undefined" pressed="undefined">
      Bootstrap
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      🎨 If you are looking for inspiration, you can check
    </text>
    <link checked="undefined" pressed="undefined">
      MUI Treasury's customization examples
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Loading buttons
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Loading buttons
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The loading buttons can show pending state and disable interactions.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    50
    <progressbar valuetext="50" checked="mixed" value="50" pressed="undefined">
      <diagram
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></diagram>
    </progressbar>
  </button>
  <button
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    LOADING...
    <text value="undefined" checked="undefined" pressed="undefined">
      LOADING...
    </text>
  </button>
  <button
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    50 SAVE
    <progressbar valuetext="50" checked="mixed" value="50" pressed="undefined">
      <diagram
        value="undefined"
        checked="undefined"
        pressed="undefined"
      ></diagram>
    </progressbar>
    <text value="undefined" checked="undefined" pressed="undefined">
      SAVE
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <LoadingButton variant="outlined" pending> Submit
    </LoadingButton> <LoadingButton variant="outlined"
    pending pendingIndicator="Loading..."> Fetch data
    </LoadingButton> <LoadingButton variant="outlined"
    pending pendingPosition="start" startIcon={<SaveIcon
    />} > Save </LoadingButton>
  </text>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Toggle the switch to see the transition between the different states.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Pending
    <checkbox value="undefined" checked="undefined" pressed="undefined">
      Pending
    </checkbox>
    <text value="undefined" checked="undefined" pressed="undefined">
      Pending
    </text>
  </label>
  <button value="undefined" checked="undefined" pressed="undefined">
    SUBMIT
    <text value="undefined" checked="undefined" pressed="undefined">
      SUBMIT
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    FETCH DATA
    <text value="undefined" checked="undefined" pressed="undefined">
      FETCH DATA
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SEND
    <text value="undefined" checked="undefined" pressed="undefined">
      SEND
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SAVE
    <text value="undefined" checked="undefined" pressed="undefined">
      SAVE
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Complex Buttons
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Complex Buttons
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The Text Buttons, Contained Buttons, Floating Action Buttons and Icon
      Buttons are built on top of the same component: the ButtonBase. You can
      take advantage of this lower level component to build custom interactions.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    Breakfast
    <text value="undefined" checked="undefined" pressed="undefined">
      Breakfast
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    Burgers
    <text value="undefined" checked="undefined" pressed="undefined">
      Burgers
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    Camera
    <text value="undefined" checked="undefined" pressed="undefined">
      Camera
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Third-party routing library
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Third-party routing library
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      One common use case is to use the button to trigger navigation to a new
      page. The ButtonBase component provides the component prop to handle this
      use case. However for certain focus polyfills ButtonBase requires the DOM
      node of the provided component. This is achieved by attaching a ref to the
      component and expecting that the component forwards this ref to the
      underlying DOM node. Given that many of the interactive components rely on
      ButtonBase, you should be able to take advantage of it everywhere.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Here is an
    </text>
    <link checked="undefined" pressed="undefined">
      integration example with react-router
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Limitations
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Limitations
    </text>
  </heading>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Cursor not-allowed
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Cursor not-allowed
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The ButtonBase component sets pointer-events: none; on disabled buttons,
      which prevents the appearance of a disabled cursor.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      If you wish to use not-allowed, you have two options:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      1. CSS only . You can remove the pointer events style on the disabled
      state of the <button> element:
      <statictext value="undefined" checked="undefined" pressed="undefined">
        1.
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        CSS only. You can remove the pointer events style on the disabled state
        of the <button> element:
      </text>
    </listitem>
  </list>
  <text value="undefined" checked="undefined" pressed="undefined">
    .MuiButtonBase-root:disabled { cursor: not-allowed; pointer-events:
    auto; }
  </text>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      However:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • You should add pointer-events: none; back when you need to display
      tooltips on disabled elements .
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        You should add pointer-events: none; back when you need to display
      </text>
      <link checked="undefined" pressed="undefined">
        tooltips on disabled elements
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        .
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • The cursor won't change if you render something other than a button
      element, for instance, a link <a> element.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        The cursor won't change if you render something other than a button
        element, for instance, a link <a> element.
      </text>
    </listitem>
  </list>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      2. DOM change . You can wrap the button:
      <statictext value="undefined" checked="undefined" pressed="undefined">
        2.
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        DOM change. You can wrap the button:
      </text>
    </listitem>
  </list>
  <text value="undefined" checked="undefined" pressed="undefined">
    <span style={{ cursor: 'not-allowed' }}>
    <Button component={Link} disabled> disabled </Button>
    </span>
  </text>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      This has the advantage of supporting any element, for instance, a link
      <a> element.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <Button />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <Button />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <ButtonBase />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <ButtonBase />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <IconButton />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <IconButton />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <LoadingButton />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <LoadingButton />
      </link>
    </listitem>
  </list>
  <separator
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></separator>
  <link checked="undefined" pressed="undefined">
    Image List
  </link>
  <link checked="undefined" pressed="undefined">
    Button Group
  </link>
</landmark>;

`;

exports[`firefox /components/checkboxes/ 1`] = `
<landmark value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Checkbox
    <text value="undefined" checked="undefined" pressed="undefined">
      Checkbox
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Checkboxes allow the user to select one or more items from a set.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Checkboxes can be used to turn an option on or off.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      If you have multiple options appearing in a list, you can preserve space
      by using checkboxes instead of on/off switches. If you have a single
      option, avoid using a checkbox and use an on/off switch instead.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      WAI-ARIA
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Bundle size
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Material Design
      <link checked="undefined" pressed="undefined">
        Material Design
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Basic checkboxes
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Basic checkboxes
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true" value="undefined" pressed="undefined">
    primary checkbox
  </checkbox>
  <checkbox checked="true" value="undefined" pressed="undefined">
    secondary checkbox
  </checkbox>
  <checkbox value="undefined" checked="undefined" pressed="undefined">
    uncontrolled-checkbox
  </checkbox>
  <checkbox
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    disabled checkbox
  </checkbox>
  <checkbox
    disabled="true"
    checked="true"
    value="undefined"
    pressed="undefined"
  >
    disabled checked checkbox
  </checkbox>
  <checkbox checked="true" value="undefined" pressed="undefined">
    indeterminate checkbox
  </checkbox>
  <checkbox checked="true" value="undefined" pressed="undefined">
    checkbox with default color
  </checkbox>
  <checkbox checked="true" value="undefined" pressed="undefined">
    checkbox with small size
  </checkbox>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Indeterminate
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Indeterminate
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      A checkbox input can only have two states in a form: checked or unchecked.
      It either submits its value or doesn't. Visually, there are actually
      three states a checkbox can be in: checked, unchecked, or indeterminate.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Parent
    <checkbox value="undefined" checked="undefined" pressed="undefined">
      Parent
    </checkbox>
    <text value="undefined" checked="undefined" pressed="undefined">
      Parent
    </text>
  </label>
  <label value="undefined" checked="undefined" pressed="undefined">
    Child 1
    <checkbox checked="true" value="undefined" pressed="undefined">
      Child 1
    </checkbox>
    <text value="undefined" checked="undefined" pressed="undefined">
      Child 1
    </text>
  </label>
  <label value="undefined" checked="undefined" pressed="undefined">
    Child 2
    <checkbox value="undefined" checked="undefined" pressed="undefined">
      Child 2
    </checkbox>
    <text value="undefined" checked="undefined" pressed="undefined">
      Child 2
    </text>
  </label>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <FormControlLabel label="Parent" control={ <Checkbox
    checked={checked[0] && checked[1]}
    indeterminate={checked[0] !== checked[1]}
    onChange={handleChange1} color="primary" /> }
    /> {children}
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Label
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Label
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Checkbox can be provided with a label thanks to the FormControlLabel
      component.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Secondary
    <checkbox checked="true" value="undefined" pressed="undefined">
      Secondary
    </checkbox>
    <text value="undefined" checked="undefined" pressed="undefined">
      Secondary
    </text>
  </label>
  <label value="undefined" checked="undefined" pressed="undefined">
    Primary
    <checkbox checked="true" value="undefined" pressed="undefined">
      Primary
    </checkbox>
    <text value="undefined" checked="undefined" pressed="undefined">
      Primary
    </text>
  </label>
  <label value="undefined" checked="undefined" pressed="undefined">
    Uncontrolled
    <checkbox value="undefined" checked="undefined" pressed="undefined">
      Uncontrolled
    </checkbox>
    <text value="undefined" checked="undefined" pressed="undefined">
      Uncontrolled
    </text>
  </label>
  <label value="undefined" checked="undefined" pressed="undefined">
    Disabled
    <checkbox
      disabled="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Disabled
    </checkbox>
    <text value="undefined" checked="undefined" pressed="undefined">
      Disabled
    </text>
  </label>
  <label value="undefined" checked="undefined" pressed="undefined">
    Disabled
    <checkbox
      disabled="true"
      checked="true"
      value="undefined"
      pressed="undefined"
    >
      Disabled
    </checkbox>
    <text value="undefined" checked="undefined" pressed="undefined">
      Disabled
    </text>
  </label>
  <label value="undefined" checked="undefined" pressed="undefined">
    Indeterminate
    <checkbox checked="true" value="undefined" pressed="undefined">
      Indeterminate
    </checkbox>
    <text value="undefined" checked="undefined" pressed="undefined">
      Indeterminate
    </text>
  </label>
  <label value="undefined" checked="undefined" pressed="undefined">
    Custom color
    <checkbox checked="true" value="undefined" pressed="undefined">
      Custom color
    </checkbox>
    <text value="undefined" checked="undefined" pressed="undefined">
      Custom color
    </text>
  </label>
  <label value="undefined" checked="undefined" pressed="undefined">
    Custom icon
    <checkbox value="undefined" checked="undefined" pressed="undefined">
      Custom icon
    </checkbox>
    <text value="undefined" checked="undefined" pressed="undefined">
      Custom icon
    </text>
  </label>
  <label value="undefined" checked="undefined" pressed="undefined">
    Custom size
    <checkbox value="undefined" checked="undefined" pressed="undefined">
      Custom size
    </checkbox>
    <text value="undefined" checked="undefined" pressed="undefined">
      Custom size
    </text>
  </label>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    FormGroup
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      FormGroup
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      FormGroup is a helpful wrapper used to group selection controls components
      that provides an easier API.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group value="undefined" checked="undefined" pressed="undefined">
    Assign responsibility
    <label value="undefined" checked="undefined" pressed="undefined">
      Assign responsibility
      <text value="undefined" checked="undefined" pressed="undefined">
        Assign responsibility
      </text>
    </label>
    <label value="undefined" checked="undefined" pressed="undefined">
      Gilad Gray
      <checkbox checked="true" value="undefined" pressed="undefined">
        Gilad Gray
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        Gilad Gray
      </text>
    </label>
    <label value="undefined" checked="undefined" pressed="undefined">
      Jason Killian
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        Jason Killian
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        Jason Killian
      </text>
    </label>
    <label value="undefined" checked="undefined" pressed="undefined">
      Antoine Llorca
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        Antoine Llorca
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        Antoine Llorca
      </text>
    </label>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Be careful
      </text>
    </paragraph>
  </group>
  <group value="undefined" checked="undefined" pressed="undefined">
    Pick two
    <label value="undefined" checked="undefined" pressed="undefined">
      Pick two
      <text value="undefined" checked="undefined" pressed="undefined">
        Pick two
      </text>
    </label>
    <label value="undefined" checked="undefined" pressed="undefined">
      Gilad Gray
      <checkbox checked="true" value="undefined" pressed="undefined">
        Gilad Gray
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        Gilad Gray
      </text>
    </label>
    <label value="undefined" checked="undefined" pressed="undefined">
      Jason Killian
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        Jason Killian
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        Jason Killian
      </text>
    </label>
    <label value="undefined" checked="undefined" pressed="undefined">
      Antoine Llorca
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        Antoine Llorca
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        Antoine Llorca
      </text>
    </label>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        You can display an error
      </text>
    </paragraph>
  </group>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Label placement
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Label placement
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can change the placement of the label:
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group value="undefined" checked="undefined" pressed="undefined">
    Label Placement
    <label value="undefined" checked="undefined" pressed="undefined">
      Label Placement
      <text value="undefined" checked="undefined" pressed="undefined">
        Label Placement
      </text>
    </label>
    <label value="undefined" checked="undefined" pressed="undefined">
      Top
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        Top
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        Top
      </text>
    </label>
    <label value="undefined" checked="undefined" pressed="undefined">
      Start
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        Start
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        Start
      </text>
    </label>
    <label value="undefined" checked="undefined" pressed="undefined">
      Bottom
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        Bottom
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        Bottom
      </text>
    </label>
    <label value="undefined" checked="undefined" pressed="undefined">
      End
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        End
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        End
      </text>
    </label>
  </group>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Customized checkbox
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Customized checkbox
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox value="undefined" checked="undefined" pressed="undefined">
    decorative checkbox
  </checkbox>
  <checkbox checked="true" value="undefined" pressed="undefined">
    decorative checkbox
  </checkbox>
  <checkbox
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    decorative checkbox
  </checkbox>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      🎨 If you are looking for inspiration, you can check
    </text>
    <link checked="undefined" pressed="undefined">
      MUI Treasury's customization examples
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    When to use
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      When to use
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Checkboxes vs. Radio Buttons
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        Checkboxes vs. Radio Buttons
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Checkboxes vs. Switches
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        Checkboxes vs. Switches
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Accessibility
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Accessibility
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      (WAI-ARIA:
    </text>
    <link checked="undefined" pressed="undefined">
      https://www.w3.org/TR/wai-aria-practices/#checkbox
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      )
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • All form controls should have labels, and this includes radio buttons,
      checkboxes, and switches. In most cases, this is done by using the
      <label> element ( FormControlLabel ).
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        All form controls should have labels, and this includes radio buttons,
        checkboxes, and switches. In most cases, this is done by using the
        <label> element (
      </text>
      <link checked="undefined" pressed="undefined">
        FormControlLabel
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        ).
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • When a label can't be used, it's necessary to add an attribute
      directly to the input component. In this case, you can apply the
      additional attribute (e.g. aria-label , aria-labelledby , title ) via the
      inputProps prop.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        When a label can't be used, it's necessary to add an attribute
        directly to the input component. In this case, you can apply the
        additional attribute (e.g. aria-label, aria-labelledby, title) via the
        inputProps prop.
      </text>
    </listitem>
  </list>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Checkbox value="checkedA" inputProps={{
    'aria-label': 'Checkbox A', }} />
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <Checkbox />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <Checkbox />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <FormControl />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <FormControl />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <FormControlLabel />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <FormControlLabel />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <FormGroup />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <FormGroup />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <FormLabel />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <FormLabel />
      </link>
    </listitem>
  </list>
  <separator
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></separator>
  <link checked="undefined" pressed="undefined">
    Button Group
  </link>
  <link checked="undefined" pressed="undefined">
    Floating Action Button
  </link>
</landmark>;

`;

exports[`firefox /components/dialogs/ 1`] = `
<landmark value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Dialog
    <text value="undefined" checked="undefined" pressed="undefined">
      Dialog
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Dialogs inform users about a task and can contain critical information,
      require decisions, or involve multiple tasks.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      A Dialog is a type of
    </text>
    <link checked="undefined" pressed="undefined">
      modal
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      window that appears in front of app content to provide critical
      information or ask for a decision. Dialogs disable all app functionality
      when they appear, and remain on screen until confirmed, dismissed, or a
      required action has been taken.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Dialogs are purposefully interruptive, so they should be used sparingly.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      WAI-ARIA
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Bundle size
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Material Design
      <link checked="undefined" pressed="undefined">
        Material Design
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Basic dialog
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Basic dialog
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Simple dialogs can provide additional details or actions about a list
      item. For example, they can display avatars, icons, clarifying subtext, or
      orthogonal actions (such as adding an account).
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Touch mechanics:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Choosing an option immediately commits the option and closes the menu
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Choosing an option immediately commits the option and closes the menu
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Touching outside of the dialog, or pressing Back, cancels the action and
      closes the dialog
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Touching outside of the dialog, or pressing Back, cancels the action and
        closes the dialog
      </text>
    </listitem>
  </list>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <heading level="6" value="undefined" checked="undefined" pressed="undefined">
    Selected: user02@gmail.com
    <text value="undefined" checked="undefined" pressed="undefined">
      Selected: user02@gmail.com
    </text>
  </heading>
  <whitespace
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></whitespace>
  <button value="undefined" checked="undefined" pressed="undefined">
    OPEN SIMPLE DIALOG
    <text value="undefined" checked="undefined" pressed="undefined">
      OPEN SIMPLE DIALOG
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Typography variant="subtitle1">Selected:
    {selectedValue}</Typography> <br /> <Button
    variant="outlined" onClick={handleClickOpen}> Open
    simple dialog </Button> <SimpleDialog
    selectedValue={selectedValue} open={open}
    onClose={handleClose} />
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Alerts
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Alerts
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Alerts are urgent interruptions, requiring acknowledgement, that inform
      the user about a situation.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Most alerts don't need titles. They summarize a decision in a
      sentence or two by either:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Asking a question (e.g. "Delete this conversation?")
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Asking a question (e.g. "Delete this conversation?")
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Making a statement related to the action buttons
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Making a statement related to the action buttons
      </text>
    </listitem>
  </list>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Use title bar alerts only for high-risk situations, such as the potential
      loss of connectivity. Users should be able to understand the choices based
      on the title and button text alone.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      If a title is required:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Use a clear question or statement with an explanation in the content
      area, such as "Erase USB storage?".
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Use a clear question or statement with an explanation in the content
        area, such as "Erase USB storage?".
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Avoid apologies, ambiguity, or questions, such as “Warning!” or “Are you
      sure?”
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Avoid apologies, ambiguity, or questions, such as “Warning!” or “Are you
        sure?”
      </text>
    </listitem>
  </list>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    OPEN ALERT DIALOG
    <text value="undefined" checked="undefined" pressed="undefined">
      OPEN ALERT DIALOG
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Transitions
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Transitions
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can also swap out the transition, the next example uses Slide.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SLIDE IN ALERT DIALOG
    <text value="undefined" checked="undefined" pressed="undefined">
      SLIDE IN ALERT DIALOG
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Form dialogs
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Form dialogs
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Form dialogs allow users to fill out form fields within a dialog. For
      example, if your site prompts for potential subscribers to fill in their
      email address, they can fill out the email field and touch
      'Submit'.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    OPEN FORM DIALOG
    <text value="undefined" checked="undefined" pressed="undefined">
      OPEN FORM DIALOG
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Customized dialogs
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Customized dialogs
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The dialog has a close button added to aide usability.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    OPEN DIALOG
    <text value="undefined" checked="undefined" pressed="undefined">
      OPEN DIALOG
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Full-screen dialogs
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Full-screen dialogs
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    OPEN FULL-SCREEN DIALOG
    <text value="undefined" checked="undefined" pressed="undefined">
      OPEN FULL-SCREEN DIALOG
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Optional sizes
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Optional sizes
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can set a dialog maximum width by using the maxWidth enumerable in
      combination with the fullWidth boolean. When the fullWidth prop is true,
      the dialog will adapt based on the maxWidth value.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    OPEN MAX-WIDTH DIALOG
    <text value="undefined" checked="undefined" pressed="undefined">
      OPEN MAX-WIDTH DIALOG
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Responsive full-screen
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Responsive full-screen
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You may make a dialog responsively full screen using
    </text>
    <link checked="undefined" pressed="undefined">
      useMediaQuery
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <text value="undefined" checked="undefined" pressed="undefined">
    import useMediaQuery from '@material-ui/core/useMediaQuery';
    function MyComponent() { const theme = useTheme(); const fullScreen =
    useMediaQuery(theme.breakpoints.down('md')); return <Dialog
    fullScreen={fullScreen} />; }
  </text>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    OPEN RESPONSIVE DIALOG
    <text value="undefined" checked="undefined" pressed="undefined">
      OPEN RESPONSIVE DIALOG
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Confirmation dialogs
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Confirmation dialogs
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Confirmation dialogs require users to explicitly confirm their choice
      before an option is committed. For example, users can listen to multiple
      ringtones but only make a final selection upon touching “OK”.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Touching “Cancel” in a confirmation dialog, or pressing Back, cancels the
      action, discards any changes, and closes the dialog.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group value="undefined" checked="undefined" pressed="undefined">
    <button
      disabled="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Interruptions
      <text value="undefined" checked="undefined" pressed="undefined">
        Interruptions
      </text>
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      phone ringtone
      <text value="undefined" checked="undefined" pressed="undefined">
        Phone ringtone
      </text>
      <paragraph value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Dione
        </text>
      </paragraph>
    </buttonmenu>
    <button
      disabled="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Default notification ringtone Tethys
      <text value="undefined" checked="undefined" pressed="undefined">
        Default notification ringtone
      </text>
      <paragraph value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Tethys
        </text>
      </paragraph>
    </button>
  </group>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Draggable dialog
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Draggable dialog
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can create a draggable dialog by using
    </text>
    <link checked="undefined" pressed="undefined">
      react-draggable
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      . To do so, you can pass the imported Draggable component as the
      PaperComponent of the Dialog component. This will make the entire dialog
      draggable.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    OPEN DRAGGABLE DIALOG
    <text value="undefined" checked="undefined" pressed="undefined">
      OPEN DRAGGABLE DIALOG
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Scrolling long content
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Scrolling long content
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      When dialogs become too long for the user’s viewport or device, they
      scroll.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • scroll=paper the content of the dialog scrolls within the paper element.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        scroll=paper the content of the dialog scrolls within the paper element.
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • scroll=body the content of the dialog scrolls within the body element.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        scroll=body the content of the dialog scrolls within the body element.
      </text>
    </listitem>
  </list>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Try the demo below to see what we mean:
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SCROLL=PAPER
    <text value="undefined" checked="undefined" pressed="undefined">
      SCROLL=PAPER
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SCROLL=BODY
    <text value="undefined" checked="undefined" pressed="undefined">
      SCROLL=BODY
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Limitations
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Limitations
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Follow the
    </text>
    <link checked="undefined" pressed="undefined">
      Modal limitations section
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Accessibility
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Accessibility
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Follow the
    </text>
    <link checked="undefined" pressed="undefined">
      Modal accessibility section
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <Dialog />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <Dialog />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <DialogActions />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <DialogActions />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <DialogContent />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <DialogContent />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <DialogContentText />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <DialogContentText />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <DialogTitle />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <DialogTitle />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <Slide />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <Slide />
      </link>
    </listitem>
  </list>
  <separator
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></separator>
  <link checked="undefined" pressed="undefined">
    Backdrop
  </link>
  <link checked="undefined" pressed="undefined">
    Progress
  </link>
</landmark>;

`;

exports[`firefox /components/pagination/ 1`] = `
<landmark value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Pagination
    <text value="undefined" checked="undefined" pressed="undefined">
      Pagination
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The Pagination component enables the user to select a specific page from a
      range of pages.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Bundle size
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Basic pagination
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Basic pagination
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to previous page
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        page 1
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 2
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 3
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 4
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 5
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        …
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 10
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to next page
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
        </button>
      </listitem>
    </list>
  </landmark>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to previous page
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        page 1
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 2
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 3
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 4
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 5
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        …
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 10
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to next page
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
        </button>
      </listitem>
    </list>
  </landmark>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to previous page
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        page 1
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 2
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 3
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 4
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 5
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        …
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 10
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to next page
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
        </button>
      </listitem>
    </list>
  </landmark>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to previous page
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        page 1
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 2
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 3
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 4
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 5
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        …
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 10
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to next page
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to next page
        </button>
      </listitem>
    </list>
  </landmark>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Pagination count={10} /> <Pagination
    count={10} color="primary" /> <Pagination
    count={10} color="secondary" /> <Pagination
    count={10} disabled />
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Outlined pagination
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Outlined pagination
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to previous page
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        page 1
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 2
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 3
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 4
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 5
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        …
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 10
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to next page
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
        </button>
      </listitem>
    </list>
  </landmark>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to previous page
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        page 1
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 2
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 3
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 4
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 5
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        …
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 10
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to next page
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
        </button>
      </listitem>
    </list>
  </landmark>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to previous page
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        page 1
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 2
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 3
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 4
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 5
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        …
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 10
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to next page
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
        </button>
      </listitem>
    </list>
  </landmark>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to previous page
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        page 1
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 2
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 3
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 4
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 5
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        …
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 10
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to next page
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to next page
        </button>
      </listitem>
    </list>
  </landmark>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Pagination count={10} variant="outlined" />
    <Pagination count={10} variant="outlined"
    color="primary" /> <Pagination count={10}
    variant="outlined" color="secondary" />
    <Pagination count={10} variant="outlined" disabled
    />
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Rounded pagination
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Rounded pagination
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to previous page
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        page 1
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 2
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 3
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 4
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 5
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        …
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 10
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to next page
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
        </button>
      </listitem>
    </list>
  </landmark>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to previous page
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        page 1
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 2
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 3
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 4
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 5
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        …
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 10
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to next page
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
        </button>
      </listitem>
    </list>
  </landmark>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Pagination count={10} shape="rounded" />
    <Pagination count={10} variant="outlined"
    shape="rounded" />
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Pagination size
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Pagination size
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to previous page
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        page 1
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 2
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 3
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 4
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 5
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        …
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 10
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to next page
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
        </button>
      </listitem>
    </list>
  </landmark>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to previous page
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        page 1
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 2
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 3
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 4
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 5
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        …
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 10
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to next page
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
        </button>
      </listitem>
    </list>
  </landmark>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to previous page
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        page 1
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 2
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 3
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 4
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 5
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        …
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 10
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to next page
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
        </button>
      </listitem>
    </list>
  </landmark>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Pagination count={10} size="small" />
    <Pagination count={10} /> <Pagination
    count={10} size="large" />
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Buttons
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Buttons
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can optionally enable first-page and last-page buttons, or disable the
      previous-page and next-page buttons.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to first page
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to first page
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to previous page
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        page 1
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 2
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 3
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 4
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 5
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        …
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 10
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to next page
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to last page
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to last page
        </button>
      </listitem>
    </list>
  </landmark>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        page 1
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 2
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 3
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 4
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 5
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        …
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 10
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
    </list>
  </landmark>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Pagination count={10} showFirstButton showLastButton />
    <Pagination count={10} hidePrevButton hideNextButton />
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Pagination ranges
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Pagination ranges
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can specify how many digits to display either side of current page
      with the siblingRange prop, and adjacent to the start and end page number
      with the boundaryRange prop.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to previous page
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to previous page
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 1
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        …
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        page 6
        <button value="undefined" checked="undefined" pressed="undefined">
          page 6
          <text value="undefined" checked="undefined" pressed="undefined">
            6
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        …
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 11
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 11
          <text value="undefined" checked="undefined" pressed="undefined">
            11
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to next page
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
        </button>
      </listitem>
    </list>
  </landmark>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to previous page
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to previous page
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 1
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        …
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 5
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        page 6
        <button value="undefined" checked="undefined" pressed="undefined">
          page 6
          <text value="undefined" checked="undefined" pressed="undefined">
            6
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 7
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 7
          <text value="undefined" checked="undefined" pressed="undefined">
            7
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        …
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 11
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 11
          <text value="undefined" checked="undefined" pressed="undefined">
            11
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to next page
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
        </button>
      </listitem>
    </list>
  </landmark>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to previous page
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to previous page
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 1
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 2
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        …
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        page 6
        <button value="undefined" checked="undefined" pressed="undefined">
          page 6
          <text value="undefined" checked="undefined" pressed="undefined">
            6
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        …
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 10
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 11
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 11
          <text value="undefined" checked="undefined" pressed="undefined">
            11
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to next page
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
        </button>
      </listitem>
    </list>
  </landmark>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to previous page
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to previous page
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 1
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 2
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        …
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 5
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        page 6
        <button value="undefined" checked="undefined" pressed="undefined">
          page 6
          <text value="undefined" checked="undefined" pressed="undefined">
            6
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 7
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 7
          <text value="undefined" checked="undefined" pressed="undefined">
            7
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        …
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 10
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 11
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 11
          <text value="undefined" checked="undefined" pressed="undefined">
            11
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to next page
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
        </button>
      </listitem>
    </list>
  </landmark>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Pagination count={11} defaultPage={6}
    siblingCount={0} /> <Pagination count={11}
    defaultPage={6} /> {/* Default ranges */}
    <Pagination count={11} defaultPage={6}
    siblingCount={0} boundaryCount={2} /> <Pagination
    count={11} defaultPage={6} boundaryCount={2}
    />
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Controlled pagination
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Controlled pagination
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Page: 1
    </text>
  </paragraph>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to previous page
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        page 1
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 2
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 3
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 4
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 5
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        …
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 10
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to next page
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
        </button>
      </listitem>
    </list>
  </landmark>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Typography>Page: {page}</Typography> <Pagination
    count={10} page={page} onChange={handleChange}
    />
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Router integration
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Router integration
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    pagination navigation
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to previous page
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Go to previous page
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        page 1
        <button value="undefined" checked="undefined" pressed="undefined">
          page 1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 2
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 3
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 4
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 5
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        …
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to page 10
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to page 10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        Go to next page
        <button value="undefined" checked="undefined" pressed="undefined">
          Go to next page
        </button>
      </listitem>
    </list>
  </landmark>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    usePagination
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      usePagination
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      For advanced customization use cases, we expose a usePagination() hook. It
      accepts almost the same options as the Pagination component minus all the
      props related to the rendering of JSX. The Pagination component uses this
      hook internally.
    </text>
  </paragraph>
  <text value="undefined" checked="undefined" pressed="undefined">
    import { usePagination } from
    '@material-ui/lab/Pagination';
  </text>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <landmark value="undefined" checked="undefined" pressed="undefined">
    <list value="undefined" checked="undefined" pressed="undefined">
      <listitem value="undefined" checked="undefined" pressed="undefined">
        previous
        <button
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          previous
          <text value="undefined" checked="undefined" pressed="undefined">
            previous
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        1
        <button value="undefined" checked="undefined" pressed="undefined">
          1
          <text value="undefined" checked="undefined" pressed="undefined">
            1
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        2
        <button value="undefined" checked="undefined" pressed="undefined">
          2
          <text value="undefined" checked="undefined" pressed="undefined">
            2
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        3
        <button value="undefined" checked="undefined" pressed="undefined">
          3
          <text value="undefined" checked="undefined" pressed="undefined">
            3
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        4
        <button value="undefined" checked="undefined" pressed="undefined">
          4
          <text value="undefined" checked="undefined" pressed="undefined">
            4
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        5
        <button value="undefined" checked="undefined" pressed="undefined">
          5
          <text value="undefined" checked="undefined" pressed="undefined">
            5
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        …
        <text value="undefined" checked="undefined" pressed="undefined">
          …
        </text>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        10
        <button value="undefined" checked="undefined" pressed="undefined">
          10
          <text value="undefined" checked="undefined" pressed="undefined">
            10
          </text>
        </button>
      </listitem>
      <listitem value="undefined" checked="undefined" pressed="undefined">
        next
        <button value="undefined" checked="undefined" pressed="undefined">
          next
          <text value="undefined" checked="undefined" pressed="undefined">
            next
          </text>
        </button>
      </listitem>
    </list>
  </landmark>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Table pagination
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Table pagination
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The Pagination component was designed to paginate a list of arbitrary
      items when infinite loading isn't used. It's preferred in
      contexts where SEO is important, for instance, a blog.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      For the pagination of a large set of tabular data, you should use the
      TablePagination component.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Rows per page:
    </text>
  </paragraph>
  <button
    haspopup="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Rows per page: 10
    <text value="undefined" checked="undefined" pressed="undefined">
      10
    </text>
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      21-30 of 100
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    Go to previous page
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    Go to next page
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <TablePagination component="div" count={100}
    page={page} onChangePage={handleChangePage}
    rowsPerPage={rowsPerPage}
    onChangeRowsPerPage={handleChangeRowsPerPage} />
  </text>
  <blockquote value="undefined" checked="undefined" pressed="undefined">
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        ⚠️ Note that the Pagination page prop starts at 1 to match the
        requirement of including the value in the URL, while the TablePagination
        page prop stats at 0 to match the requirement of zero-based JavaScript
        arrays that comes with rendering a lot of tabular data.
      </text>
    </paragraph>
  </blockquote>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can learn more about this use case in the
    </text>
    <link checked="undefined" pressed="undefined">
      table section
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      of the documentation.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Accessibility
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Accessibility
    </text>
  </heading>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    ARIA
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      ARIA
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The root node has a role of "navigation" and aria-label
      "pagination navigation" by default. The page items have an
      aria-label that identifies the purpose of the item ("go to first
      page", "go to previous page", "go to page 1"
      etc.). You can override these using the getItemAriaLabel prop.
    </text>
  </paragraph>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Keyboard
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Keyboard
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The pagination items are in tab order, with a tabindex of "0".
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <Pagination />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <Pagination />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <PaginationItem />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <PaginationItem />
      </link>
    </listitem>
  </list>
  <separator
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></separator>
  <link checked="undefined" pressed="undefined">
    Autocomplete
  </link>
  <link checked="undefined" pressed="undefined">
    Skeleton
  </link>
</landmark>;

`;

exports[`firefox /components/pickers 1`] = `
<landmark value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Date / Time pickers
    <text value="undefined" checked="undefined" pressed="undefined">
      Date / Time pickers
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Date pickers and Time pickers provide a simple way to select a single
      value from a pre-determined set.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • On mobile, pickers are best suited for display in confirmation dialog.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        On mobile, pickers are best suited for display in confirmation dialog.
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • For inline display, such as on a form, consider using compact controls
      such as segmented dropdown buttons.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        For inline display, such as on a form, consider using compact controls
        such as segmented dropdown buttons.
      </text>
    </listitem>
  </list>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      WAI-ARIA
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Bundle size
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Material Design
      <link checked="undefined" pressed="undefined">
        Material Design
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    @material-ui/pickers
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      @material-ui/pickers
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <img value="undefined" checked="undefined" pressed="undefined">
      stars
    </img>
    <text value="undefined" checked="undefined" pressed="undefined"></text>
    <img value="undefined" checked="undefined" pressed="undefined">
      npm downloads
    </img>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <link checked="undefined" pressed="undefined">
      @material-ui/pickers
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      provides date picker and time picker controls.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Date picker desktop
    <text value="undefined" checked="undefined" pressed="undefined">
      Date picker desktop
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <textbox
    description="mm/dd/yyyy"
    value="08/18/2014"
    checked="undefined"
    pressed="undefined"
  >
    Date picker desktop
    <text value="undefined" checked="undefined" pressed="undefined">
      08/18/2014
    </text>
  </textbox>
  <button value="undefined" checked="undefined" pressed="undefined">
    change date
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      mm/dd/yyyy
    </text>
  </paragraph>
  <label value="undefined" checked="undefined" pressed="undefined">
    Date picker mobile
    <text value="undefined" checked="undefined" pressed="undefined">
      Date picker mobile
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <textbox
    readonly="true"
    value="08/18/2014"
    checked="undefined"
    pressed="undefined"
  >
    Choose date, selected date is Aug 18, 2014
    <text value="undefined" checked="undefined" pressed="undefined">
      08/18/2014
    </text>
  </textbox>
  <label value="undefined" checked="undefined" pressed="undefined">
    Time picker
    <text value="undefined" checked="undefined" pressed="undefined">
      Time picker
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <textbox
    readonly="true"
    value="09:11 PM"
    checked="undefined"
    pressed="undefined"
  >
    Choose time, selected time is 9:11 PM
    <text value="undefined" checked="undefined" pressed="undefined">
      09:11 PM
    </text>
  </textbox>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Native pickers
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Native pickers
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      ⚠️ Native input controls support by browsers
    </text>
    <link checked="undefined" pressed="undefined">
      isn't perfect
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      . Have a look at
    </text>
    <link checked="undefined" pressed="undefined">
      @material-ui/pickers
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      for a richer solution.
    </text>
  </paragraph>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Datepickers
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Datepickers
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      A native datepicker example with type="date".
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <label value="undefined" checked="undefined" pressed="undefined">
      Birthday
      <text value="undefined" checked="undefined" pressed="undefined">
        Birthday
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <Date value="undefined" checked="undefined" pressed="undefined">
      Birthday
      <spinbutton
        valuetext="05"
        value="05"
        checked="undefined"
        pressed="undefined"
      >
        Month
        <text value="undefined" checked="undefined" pressed="undefined">
          05
        </text>
      </spinbutton>
      <text value="undefined" checked="undefined" pressed="undefined">
        /
      </text>
      <spinbutton
        valuetext="24"
        value="24"
        checked="undefined"
        pressed="undefined"
      >
        Day
        <text value="undefined" checked="undefined" pressed="undefined">
          24
        </text>
      </spinbutton>
      <text value="undefined" checked="undefined" pressed="undefined">
        /
      </text>
      <spinbutton
        valuetext="2017"
        value="2017"
        checked="undefined"
        pressed="undefined"
      >
        Year
        <text value="undefined" checked="undefined" pressed="undefined">
          2017
        </text>
      </spinbutton>
      <button value="undefined" checked="undefined" pressed="undefined">
        Clear
        <diagram
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></diagram>
      </button>
    </Date>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <form className={classes.container} noValidate>
    <TextField id="date" label="Birthday"
    type="date" defaultValue="2017-05-24"
    className={classes.textField} InputLabelProps={{ shrink:
    true, }} /> </form>
  </text>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Date & Time pickers
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Date & Time pickers
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      A native date & time picker example with
      type="datetime-local".
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <label value="undefined" checked="undefined" pressed="undefined">
      Next appointment
      <text value="undefined" checked="undefined" pressed="undefined">
        Next appointment
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox value="2017-05-24T10:30" checked="undefined" pressed="undefined">
      Next appointment
      <text value="undefined" checked="undefined" pressed="undefined">
        2017-05-24T10:30
      </text>
    </textbox>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <form className={classes.container} noValidate>
    <TextField id="datetime-local" label="Next
    appointment" type="datetime-local"
    defaultValue="2017-05-24T10:30"
    className={classes.textField} InputLabelProps={{ shrink:
    true, }} /> </form>
  </text>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Time pickers
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Time pickers
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      A native time picker example with type="time".
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <label value="undefined" checked="undefined" pressed="undefined">
      Alarm clock
      <text value="undefined" checked="undefined" pressed="undefined">
        Alarm clock
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <group value="undefined" checked="undefined" pressed="undefined">
      Alarm clock
      <spinbutton
        valuetext="07"
        value="07"
        checked="undefined"
        pressed="undefined"
      >
        Hours
        <text value="undefined" checked="undefined" pressed="undefined">
          07
        </text>
      </spinbutton>
      <text value="undefined" checked="undefined" pressed="undefined">
        :
      </text>
      <spinbutton
        valuetext="30"
        value="30"
        checked="undefined"
        pressed="undefined"
      >
        Minutes
        <text value="undefined" checked="undefined" pressed="undefined">
          30
        </text>
      </spinbutton>
      <text value="undefined" checked="undefined" pressed="undefined"></text>
      <textbox
        autocomplete="inline"
        value="AM"
        checked="undefined"
        pressed="undefined"
      >
        AM/PM
        <text value="undefined" checked="undefined" pressed="undefined">
          AM
        </text>
      </textbox>
      <button value="undefined" checked="undefined" pressed="undefined">
        Clear
        <diagram
          value="undefined"
          checked="undefined"
          pressed="undefined"
        ></diagram>
      </button>
    </group>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <form className={classes.container} noValidate>
    <TextField id="time" label="Alarm clock"
    type="time" defaultValue="07:30"
    className={classes.textField} InputLabelProps={{ shrink:
    true, }} inputProps={{ step: 300, // 5 min }}
    /> </form>
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <TextField />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <TextField />
      </link>
    </listitem>
  </list>
  <separator
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></separator>
  <link checked="undefined" pressed="undefined">
    Floating Action Button
  </link>
  <link checked="undefined" pressed="undefined">
    Radio
  </link>
</landmark>;

`;

exports[`firefox /components/radio-buttons 1`] = `
<landmark value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Radio
    <text value="undefined" checked="undefined" pressed="undefined">
      Radio
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Radio buttons allow the user to select one option from a set.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Use radio buttons when the user needs to see all available options. If
      available options can be collapsed, consider using a dropdown menu because
      it uses less space.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Radio buttons should have the most commonly used option selected by
      default.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      WAI-ARIA
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Bundle size
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Material Design
      <link checked="undefined" pressed="undefined">
        Material Design
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    RadioGroup
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      RadioGroup
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      RadioGroup is a helpful wrapper used to group Radio components that
      provides an easier API, and proper keyboard accessibility to the group.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group value="undefined" checked="undefined" pressed="undefined">
    Gender
    <label value="undefined" checked="undefined" pressed="undefined">
      Gender
      <text value="undefined" checked="undefined" pressed="undefined">
        Gender
      </text>
    </label>
    <group value="undefined" checked="undefined" pressed="undefined">
      gender
      <label value="undefined" checked="undefined" pressed="undefined">
        Female
        <radio checked="true" value="undefined" pressed="undefined">
          Female
        </radio>
        <text value="undefined" checked="undefined" pressed="undefined">
          Female
        </text>
      </label>
      <label value="undefined" checked="undefined" pressed="undefined">
        Male
        <radio value="undefined" checked="undefined" pressed="undefined">
          Male
        </radio>
        <text value="undefined" checked="undefined" pressed="undefined">
          Male
        </text>
      </label>
      <label value="undefined" checked="undefined" pressed="undefined">
        Other
        <radio value="undefined" checked="undefined" pressed="undefined">
          Other
        </radio>
        <text value="undefined" checked="undefined" pressed="undefined">
          Other
        </text>
      </label>
      <label value="undefined" checked="undefined" pressed="undefined">
        (Disabled option)
        <radio
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          (Disabled option)
        </radio>
        <text value="undefined" checked="undefined" pressed="undefined">
          (Disabled option)
        </text>
      </label>
    </group>
  </group>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      To lay out the buttons horizontally, set the row prop: <RadioGroup row
      />.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Standalone radio buttons
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Standalone radio buttons
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Radio can also be used standalone, without the RadioGroup wrapper.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <radio checked="true" value="undefined" pressed="undefined">
    A
  </radio>
  <radio value="undefined" checked="undefined" pressed="undefined">
    B
  </radio>
  <radio value="undefined" checked="undefined" pressed="undefined">
    C
  </radio>
  <radio value="undefined" checked="undefined" pressed="undefined">
    D
  </radio>
  <radio value="undefined" checked="undefined" pressed="undefined">
    E
  </radio>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Label placement
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Label placement
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can change the placement of the label with the FormControlLabel
      component's labelPlacement prop:
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group value="undefined" checked="undefined" pressed="undefined">
    labelPlacement
    <label value="undefined" checked="undefined" pressed="undefined">
      labelPlacement
      <text value="undefined" checked="undefined" pressed="undefined">
        labelPlacement
      </text>
    </label>
    <group value="undefined" checked="undefined" pressed="undefined">
      position
      <label value="undefined" checked="undefined" pressed="undefined">
        Top
        <radio checked="true" value="undefined" pressed="undefined">
          Top
        </radio>
        <text value="undefined" checked="undefined" pressed="undefined">
          Top
        </text>
      </label>
      <label value="undefined" checked="undefined" pressed="undefined">
        Start
        <radio value="undefined" checked="undefined" pressed="undefined">
          Start
        </radio>
        <text value="undefined" checked="undefined" pressed="undefined">
          Start
        </text>
      </label>
      <label value="undefined" checked="undefined" pressed="undefined">
        Bottom
        <radio value="undefined" checked="undefined" pressed="undefined">
          Bottom
        </radio>
        <text value="undefined" checked="undefined" pressed="undefined">
          Bottom
        </text>
      </label>
      <label value="undefined" checked="undefined" pressed="undefined">
        End
        <radio value="undefined" checked="undefined" pressed="undefined">
          End
        </radio>
        <text value="undefined" checked="undefined" pressed="undefined">
          End
        </text>
      </label>
    </group>
  </group>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Show error
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Show error
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      In general, radio buttons should have a value selected by default. If this
      is not the case, you can display an error if no value is selected when the
      form is submitted:
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <group value="undefined" checked="undefined" pressed="undefined">
      Pop quiz: Material-UI is...
      <label value="undefined" checked="undefined" pressed="undefined">
        Pop quiz: Material-UI is...
        <text value="undefined" checked="undefined" pressed="undefined">
          Pop quiz: Material-UI is...
        </text>
      </label>
      <group value="undefined" checked="undefined" pressed="undefined">
        quiz
        <label value="undefined" checked="undefined" pressed="undefined">
          The best!
          <radio value="undefined" checked="undefined" pressed="undefined">
            The best!
          </radio>
          <text value="undefined" checked="undefined" pressed="undefined">
            The best!
          </text>
        </label>
        <label value="undefined" checked="undefined" pressed="undefined">
          The worst.
          <radio value="undefined" checked="undefined" pressed="undefined">
            The worst.
          </radio>
          <text value="undefined" checked="undefined" pressed="undefined">
            The worst.
          </text>
        </label>
      </group>
      <paragraph value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Choose wisely
        </text>
      </paragraph>
      <button value="undefined" checked="undefined" pressed="undefined">
        CHECK ANSWER
        <text value="undefined" checked="undefined" pressed="undefined">
          CHECK ANSWER
        </text>
      </button>
    </group>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Customized radios
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Customized radios
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group value="undefined" checked="undefined" pressed="undefined">
    Gender
    <label value="undefined" checked="undefined" pressed="undefined">
      Gender
      <text value="undefined" checked="undefined" pressed="undefined">
        Gender
      </text>
    </label>
    <group value="undefined" checked="undefined" pressed="undefined">
      gender
      <label value="undefined" checked="undefined" pressed="undefined">
        Female
        <radio checked="true" value="undefined" pressed="undefined">
          Female
        </radio>
        <text value="undefined" checked="undefined" pressed="undefined">
          Female
        </text>
      </label>
      <label value="undefined" checked="undefined" pressed="undefined">
        Male
        <radio value="undefined" checked="undefined" pressed="undefined">
          Male
        </radio>
        <text value="undefined" checked="undefined" pressed="undefined">
          Male
        </text>
      </label>
      <label value="undefined" checked="undefined" pressed="undefined">
        Other
        <radio value="undefined" checked="undefined" pressed="undefined">
          Other
        </radio>
        <text value="undefined" checked="undefined" pressed="undefined">
          Other
        </text>
      </label>
      <label value="undefined" checked="undefined" pressed="undefined">
        (Disabled option)
        <radio
          disabled="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          (Disabled option)
        </radio>
        <text value="undefined" checked="undefined" pressed="undefined">
          (Disabled option)
        </text>
      </label>
    </group>
  </group>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    useRadioGroup
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      useRadioGroup
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      For advanced customization use cases, a useRadioGroup() hook is exposed.
      It returns the context value of the parent radio group. The Radio
      component uses this hook internally.
    </text>
  </paragraph>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <text value="undefined" checked="undefined" pressed="undefined">
    import { useRadioGroup } from
    '@material-ui/core/RadioGroup';
  </text>
  <heading level="4" value="undefined" checked="undefined" pressed="undefined">
    Returns
    <text value="undefined" checked="undefined" pressed="undefined">
      Returns
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      value (Object):
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • value.name ( String [optional]): The name used to reference the value of
      the control.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        value.name (String [optional]): The name used to reference the value of
        the control.
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • value.onChange ( Void [optional]): Callback fired when a radio button is
      selected.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        value.onChange (Void [optional]): Callback fired when a radio button is
        selected.
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • value.value ( Any [optional]): Value of the selected radio button.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        value.value (Any [optional]): Value of the selected radio button.
      </text>
    </listitem>
  </list>
  <heading level="4" value="undefined" checked="undefined" pressed="undefined">
    Example
    <text value="undefined" checked="undefined" pressed="undefined">
      Example
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group value="undefined" checked="undefined" pressed="undefined">
    <label value="undefined" checked="undefined" pressed="undefined">
      First
      <radio checked="true" value="undefined" pressed="undefined">
        First
      </radio>
      <text value="undefined" checked="undefined" pressed="undefined">
        First
      </text>
    </label>
    <label value="undefined" checked="undefined" pressed="undefined">
      Second
      <radio value="undefined" checked="undefined" pressed="undefined">
        Second
      </radio>
      <text value="undefined" checked="undefined" pressed="undefined">
        Second
      </text>
    </label>
  </group>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <RadioGroup name="use-radio-group"
    defaultValue="first"> <MyFormControlLabel
    value="first" label="First" control={<Radio
    />} /> <MyFormControlLabel value="second"
    label="Second" control={<Radio />} />
    </RadioGroup>
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    When to use
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      When to use
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Checkboxes vs. Radio Buttons
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        Checkboxes vs. Radio Buttons
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Accessibility
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Accessibility
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      (WAI-ARIA:
    </text>
    <link checked="undefined" pressed="undefined">
      https://www.w3.org/TR/wai-aria-practices/#radiobutton
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      )
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • All form controls should have labels, and this includes radio buttons,
      checkboxes, and switches. In most cases, this is done by using the
      <label> element ( FormControlLabel ).
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        All form controls should have labels, and this includes radio buttons,
        checkboxes, and switches. In most cases, this is done by using the
        <label> element (
      </text>
      <link checked="undefined" pressed="undefined">
        FormControlLabel
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        ).
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • When a label can't be used, it's necessary to add an attribute
      directly to the input component. In this case, you can apply the
      additional attribute (e.g. aria-label , aria-labelledby , title ) via the
      inputProps property.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        When a label can't be used, it's necessary to add an attribute
        directly to the input component. In this case, you can apply the
        additional attribute (e.g. aria-label, aria-labelledby, title) via the
        inputProps property.
      </text>
    </listitem>
  </list>
  <text value="undefined" checked="undefined" pressed="undefined">
    <RadioButton value="radioA" inputProps={{
    'aria-label': 'Radio A', }} />
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <FormControl />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <FormControl />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <FormControlLabel />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <FormControlLabel />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <FormLabel />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <FormLabel />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <Radio />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <Radio />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <RadioGroup />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <RadioGroup />
      </link>
    </listitem>
  </list>
  <separator
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></separator>
  <link checked="undefined" pressed="undefined">
    Date / Time
  </link>
  <link checked="undefined" pressed="undefined">
    Select
  </link>
</landmark>;

`;

exports[`firefox /components/rating/ 1`] = `
<landmark value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Rating
    <text value="undefined" checked="undefined" pressed="undefined">
      Rating
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Ratings provide insight regarding others’ opinions and experiences, and
      can allow the user to submit a rating of thier own.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      WAI-ARIA
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Bundle size
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Basic rating
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Basic rating
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Controlled
    <text value="undefined" checked="undefined" pressed="undefined">
      Controlled
    </text>
  </label>
  <label value="undefined" checked="undefined" pressed="undefined">
    1 Star
    <text value="undefined" checked="undefined" pressed="undefined">
      1 Star
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    1 Star
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    2 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      2 Stars
    </text>
  </label>
  <radio checked="true" value="undefined" pressed="undefined">
    2 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    3 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      3 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    3 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    4 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      4 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    4 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    5 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      5 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    5 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    Read only
    <text value="undefined" checked="undefined" pressed="undefined">
      Read only
    </text>
  </label>
  <img value="undefined" checked="undefined" pressed="undefined">
    2 Stars
  </img>
  <label value="undefined" checked="undefined" pressed="undefined">
    Disabled
    <text value="undefined" checked="undefined" pressed="undefined">
      Disabled
    </text>
  </label>
  <label value="undefined" checked="undefined" pressed="undefined">
    1 Star
    <text value="undefined" checked="undefined" pressed="undefined">
      1 Star
    </text>
  </label>
  <radio
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    1 Star
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    2 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      2 Stars
    </text>
  </label>
  <radio disabled="true" checked="true" value="undefined" pressed="undefined">
    2 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    3 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      3 Stars
    </text>
  </label>
  <radio
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    3 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    4 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      4 Stars
    </text>
  </label>
  <radio
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    4 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    5 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      5 Stars
    </text>
  </label>
  <radio
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    5 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    No rating given
    <text value="undefined" checked="undefined" pressed="undefined">
      No rating given
    </text>
  </label>
  <label value="undefined" checked="undefined" pressed="undefined">
    1 Star
    <text value="undefined" checked="undefined" pressed="undefined">
      1 Star
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    1 Star
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    2 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      2 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    2 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    3 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      3 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    3 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    4 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      4 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    4 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    5 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      5 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    5 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    Empty
    <radio checked="true" value="undefined" pressed="undefined">
      Empty
    </radio>
    <text value="undefined" checked="undefined" pressed="undefined">
      Empty
    </text>
  </label>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Typography component="legend">Controlled</Typography>
    <Rating name="simple-controlled" value={value}
    onChange={(event, newValue) => { setValue(newValue);
    }} /> <Typography component="legend">Read
    only</Typography> <Rating name="read-only"
    value={value} readOnly /> <Typography
    component="legend">Disabled</Typography> <Rating
    name="disabled" value={value} disabled />
    <Typography component="legend">No rating
    given</Typography> <Rating name="no-value"
    value={null} />
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Rating precision
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Rating precision
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The rating can display any float number with the value prop. Use the
      precision prop to define the minimum increment value change allowed.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    0.5 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      0.5 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    0.5 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    1 Star
    <text value="undefined" checked="undefined" pressed="undefined">
      1 Star
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    1 Star
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    1.5 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      1.5 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    1.5 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    2 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      2 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    2 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    2.5 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      2.5 Stars
    </text>
  </label>
  <radio checked="true" value="undefined" pressed="undefined">
    2.5 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    3 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      3 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    3 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    3.5 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      3.5 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    3.5 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    4 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      4 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    4 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    4.5 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      4.5 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    4.5 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    5 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      5 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    5 Stars
  </radio>
  <img value="undefined" checked="undefined" pressed="undefined">
    2.5 Stars
  </img>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Rating name="half-rating" defaultValue={2.5}
    precision={0.5} /> <Rating name="half-rating-read"
    defaultValue={2.5} precision={0.5} readOnly />
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Hover feedback
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Hover feedback
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can display a label on hover to help the user pick the correct rating
      value. The demo uses the onChangeActive prop.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    0.5 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      0.5 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    0.5 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    1 Star
    <text value="undefined" checked="undefined" pressed="undefined">
      1 Star
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    1 Star
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    1.5 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      1.5 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    1.5 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    2 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      2 Stars
    </text>
  </label>
  <radio checked="true" value="undefined" pressed="undefined">
    2 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    2.5 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      2.5 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    2.5 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    3 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      3 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    3 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    3.5 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      3.5 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    3.5 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    4 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      4 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    4 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    4.5 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      4.5 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    4.5 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    5 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      5 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    5 Stars
  </radio>
  <text value="undefined" checked="undefined" pressed="undefined">
    Poor+
  </text>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Rating name="hover-feedback" value={value}
    precision={0.5} onChange={(event, newValue) => {
    setValue(newValue); }} onChangeActive={(event, newHover)
    => { setHover(newHover); }} emptyIcon={<StarIcon
    style={{ opacity: 0.55 }} fontSize="inherit"
    />} /> {value !== null && ( <Box
    ml={2}>{labels[hover !== -1 ? hover :
    value]}</Box> )}
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Sizes
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Sizes
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      For larger or smaller ratings use the size prop.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    1 Star
    <text value="undefined" checked="undefined" pressed="undefined">
      1 Star
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    1 Star
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    2 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      2 Stars
    </text>
  </label>
  <radio checked="true" value="undefined" pressed="undefined">
    2 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    3 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      3 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    3 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    4 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      4 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    4 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    5 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      5 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    5 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    1 Star
    <text value="undefined" checked="undefined" pressed="undefined">
      1 Star
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    1 Star
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    2 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      2 Stars
    </text>
  </label>
  <radio checked="true" value="undefined" pressed="undefined">
    2 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    3 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      3 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    3 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    4 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      4 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    4 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    5 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      5 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    5 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    1 Star
    <text value="undefined" checked="undefined" pressed="undefined">
      1 Star
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    1 Star
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    2 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      2 Stars
    </text>
  </label>
  <radio checked="true" value="undefined" pressed="undefined">
    2 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    3 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      3 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    3 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    4 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      4 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    4 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    5 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      5 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    5 Stars
  </radio>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Rating name="size-small" defaultValue={2}
    size="small" /> <Rating name="size-medium"
    defaultValue={2} /> <Rating name="size-large"
    defaultValue={2} size="large" />
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Customized rating
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Customized rating
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Custom icon and color
    <text value="undefined" checked="undefined" pressed="undefined">
      Custom icon and color
    </text>
  </label>
  <label value="undefined" checked="undefined" pressed="undefined">
    0.5 Hearts
    <text value="undefined" checked="undefined" pressed="undefined">
      0.5 Hearts
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    0.5 Hearts
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    1 Heart
    <text value="undefined" checked="undefined" pressed="undefined">
      1 Heart
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    1 Heart
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    1.5 Hearts
    <text value="undefined" checked="undefined" pressed="undefined">
      1.5 Hearts
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    1.5 Hearts
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    2 Hearts
    <text value="undefined" checked="undefined" pressed="undefined">
      2 Hearts
    </text>
  </label>
  <radio checked="true" value="undefined" pressed="undefined">
    2 Hearts
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    2.5 Hearts
    <text value="undefined" checked="undefined" pressed="undefined">
      2.5 Hearts
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    2.5 Hearts
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    3 Hearts
    <text value="undefined" checked="undefined" pressed="undefined">
      3 Hearts
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    3 Hearts
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    3.5 Hearts
    <text value="undefined" checked="undefined" pressed="undefined">
      3.5 Hearts
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    3.5 Hearts
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    4 Hearts
    <text value="undefined" checked="undefined" pressed="undefined">
      4 Hearts
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    4 Hearts
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    4.5 Hearts
    <text value="undefined" checked="undefined" pressed="undefined">
      4.5 Hearts
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    4.5 Hearts
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    5 Hearts
    <text value="undefined" checked="undefined" pressed="undefined">
      5 Hearts
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    5 Hearts
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    10 stars
    <text value="undefined" checked="undefined" pressed="undefined">
      10 stars
    </text>
  </label>
  <label value="undefined" checked="undefined" pressed="undefined">
    1 Star
    <text value="undefined" checked="undefined" pressed="undefined">
      1 Star
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    1 Star
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    2 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      2 Stars
    </text>
  </label>
  <radio checked="true" value="undefined" pressed="undefined">
    2 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    3 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      3 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    3 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    4 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      4 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    4 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    5 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      5 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    5 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    6 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      6 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    6 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    7 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      7 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    7 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    8 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      8 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    8 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    9 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      9 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    9 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    10 Stars
    <text value="undefined" checked="undefined" pressed="undefined">
      10 Stars
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    10 Stars
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    Custom icon set
    <text value="undefined" checked="undefined" pressed="undefined">
      Custom icon set
    </text>
  </label>
  <label value="undefined" checked="undefined" pressed="undefined">
    Very Dissatisfied
    <text value="undefined" checked="undefined" pressed="undefined">
      Very Dissatisfied
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    Very Dissatisfied
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    Dissatisfied
    <text value="undefined" checked="undefined" pressed="undefined">
      Dissatisfied
    </text>
  </label>
  <radio checked="true" value="undefined" pressed="undefined">
    Dissatisfied
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    Neutral
    <text value="undefined" checked="undefined" pressed="undefined">
      Neutral
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    Neutral
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    Satisfied
    <text value="undefined" checked="undefined" pressed="undefined">
      Satisfied
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    Satisfied
  </radio>
  <label value="undefined" checked="undefined" pressed="undefined">
    Very Satisfied
    <text value="undefined" checked="undefined" pressed="undefined">
      Very Satisfied
    </text>
  </label>
  <radio value="undefined" checked="undefined" pressed="undefined">
    Very Satisfied
  </radio>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Accessibility
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Accessibility
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      (
    </text>
    <link checked="undefined" pressed="undefined">
      WAI tutorial
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      )
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The accessibility of this component relies on:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • A radio group with its fields visually hidden. It contains six radio
      buttons, one for each star, and another for 0 stars that is checked by
      default. Be sure to provide a value for the name prop that is unique to
      the parent form.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        A radio group with its fields visually hidden. It contains six radio
        buttons, one for each star, and another for 0 stars that is checked by
        default. Be sure to provide a value for the name prop that is unique to
        the parent form.
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Labels for the radio buttons containing actual text (“1 Star”, “2
      Stars”, …). Be sure to provide a suitable function to the getLabelText
      prop when the page is in a language other than English. You can use the
      included locales , or provide your own.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Labels for the radio buttons containing actual text (“1 Star”, “2
        Stars”, …). Be sure to provide a suitable function to the getLabelText
        prop when the page is in a language other than English. You can use the
      </text>
      <link checked="undefined" pressed="undefined">
        included locales
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        , or provide your own.
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • A visually distinct appearance for the rating icons. By default, the
      rating component uses both a difference of color and shape (filled and
      empty icons)to indicate the value. In the event that you are using color
      as the only means to indicate the value, the information should also be
      also displayed as text, as in this demo. This is important to match
      success Criterion 1.4.1 of WCAG2.1.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        A visually distinct appearance for the rating icons. By default, the
        rating component uses both a difference of color and shape (filled and
        empty icons)to indicate the value. In the event that you are using color
        as the only means to indicate the value, the information should also be
        also displayed as text, as in this demo. This is important to match
      </text>
      <link checked="undefined" pressed="undefined">
        success Criterion 1.4.1
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        of WCAG2.1.
      </text>
    </listitem>
  </list>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <img value="undefined" checked="undefined" pressed="undefined">
    3.5 Stars
  </img>
  <text value="undefined" checked="undefined" pressed="undefined">
    Good
  </text>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Rating name="text-feedback" value={value} readOnly
    precision={0.5} emptyIcon={<StarIcon style={{
    opacity: 0.55 }} fontSize="inherit" />} />
    <Box ml={2}>{labels[value]}</Box>
  </text>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    ARIA
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      ARIA
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The read only rating has a role of "img", and an aria-label that
      describes the displayed rating.
    </text>
  </paragraph>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Keyboard
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Keyboard
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Because the rating component uses radio buttons, keyboard interaction
      follows the native browser behavior. Tab will focus the current rating,
      and cursor keys control the selected rating.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The read only rating is not focusable.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <Rating />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <Rating />
      </link>
    </listitem>
  </list>
  <separator
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></separator>
  <link checked="undefined" pressed="undefined">
    Slider
  </link>
  <link checked="undefined" pressed="undefined">
    Switch
  </link>
</landmark>;

`;

exports[`firefox /components/selects/ 1`] = `
<landmark value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Select
    <text value="undefined" checked="undefined" pressed="undefined">
      Select
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Select components are used for collecting user provided information from a
      list of options.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Bundle size
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Basic select
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Basic select
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Menus are positioned over their emitting elements such that the currently
      selected menu item appears on top of the emitting element.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Age
    <text value="undefined" checked="undefined" pressed="undefined">
      Age
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <button
    haspopup="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Age ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <FormControl fullWidth> <InputLabel
    id="demo-simple-select-label">Age</InputLabel> <Select
    labelId="demo-simple-select-label"
    id="demo-simple-select" value={age}
    onChange={handleChange} > <MenuItem
    value={10}>Ten</MenuItem> <MenuItem
    value={20}>Twenty</MenuItem> <MenuItem
    value={30}>Thirty</MenuItem> </Select>
    </FormControl>
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Advanced features
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Advanced features
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The Select component is meant to be interchangeable with a native
      <select> element.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      If you are looking for more advanced features, like combobox, multiselect,
      autocomplete, async or creatable support, head to the
    </text>
    <link checked="undefined" pressed="undefined">
      Autocomplete component
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      . It's meant to be an improved version of the
      "react-select" and "downshift" packages.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Props
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Props
    </text>
  </heading>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Filled and outlined variants
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Filled and outlined variants
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Age
    <text value="undefined" checked="undefined" pressed="undefined">
      Age
    </text>
  </label>
  <button
    haspopup="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Age ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Age
    <text value="undefined" checked="undefined" pressed="undefined">
      Age
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <button
    haspopup="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Age ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Labels and helper text
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Labels and helper text
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Age
    <text value="undefined" checked="undefined" pressed="undefined">
      Age
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <button
    haspopup="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Age ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      With label + helper text
    </text>
  </paragraph>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <button
    haspopup="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Without label
    <text value="undefined" checked="undefined" pressed="undefined">
      None
    </text>
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Without label
    </text>
  </paragraph>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Auto width
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Auto width
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Age
    <text value="undefined" checked="undefined" pressed="undefined">
      Age
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <button
    haspopup="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Age ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Other props
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Other props
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Name
    <text value="undefined" checked="undefined" pressed="undefined">
      Name
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <button
    disabled="true"
    haspopup="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Name ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Disabled
    </text>
  </paragraph>
  <label value="undefined" checked="undefined" pressed="undefined">
    Name
    <text value="undefined" checked="undefined" pressed="undefined">
      Name
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <button
    haspopup="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Name ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Error
    </text>
  </paragraph>
  <label value="undefined" checked="undefined" pressed="undefined">
    Name
    <text value="undefined" checked="undefined" pressed="undefined">
      Name
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <button
    haspopup="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Name ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Read only
    </text>
  </paragraph>
  <label value="undefined" checked="undefined" pressed="undefined">
    Age
    <text value="undefined" checked="undefined" pressed="undefined">
      Age
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <button
    haspopup="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Age ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Required
    </text>
  </paragraph>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Native select
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Native select
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      As the user experience can be improved on mobile using the native select
      of the platform, we allow such pattern.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Age
    <text value="undefined" checked="undefined" pressed="undefined">
      Age
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <combobox
    haspopup="true"
    value="Thirty"
    checked="undefined"
    pressed="undefined"
  >
    Age
    <MenuListPopup value="undefined" checked="undefined" pressed="undefined">
      <menuitem value="undefined" checked="undefined" pressed="undefined">
        Ten
        <text value="undefined" checked="undefined" pressed="undefined">
          Ten
        </text>
      </menuitem>
      <menuitem value="undefined" checked="undefined" pressed="undefined">
        Twenty
        <text value="undefined" checked="undefined" pressed="undefined">
          Twenty
        </text>
      </menuitem>
      <menuitem
        selected="true"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        Thirty
        <text value="undefined" checked="undefined" pressed="undefined">
          Thirty
        </text>
      </menuitem>
    </MenuListPopup>
  </combobox>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <FormControl fullWidth> <InputLabel
    htmlFor="uncontrolled-native">Age</InputLabel>
    <NativeSelect defaultValue={30} inputProps={{ name:
    'age', id: 'uncontrolled-native', }} >
    <option value={10}>Ten</option> <option
    value={20}>Twenty</option> <option
    value={30}>Thirty</option> </NativeSelect>
    </FormControl>
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    TextField
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      TextField
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The TextField wrapper component is a complete form control including a
      label, input and help text. You can find an example with the select mode
    </text>
    <link checked="undefined" pressed="undefined">
      in this section
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Customized selects
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Customized selects
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The first step is to style the InputBase component. Once it's styled,
      you can either use it directly as a text field or provide it to the select
      input prop to have a select field.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Age
    <text value="undefined" checked="undefined" pressed="undefined">
      Age
    </text>
  </label>
  <textbox value="undefined" checked="undefined" pressed="undefined">
    Age
  </textbox>
  <label value="undefined" checked="undefined" pressed="undefined">
    Age
    <text value="undefined" checked="undefined" pressed="undefined">
      Age
    </text>
  </label>
  <button
    haspopup="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Age ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Age
    <text value="undefined" checked="undefined" pressed="undefined">
      Age
    </text>
  </label>
  <combobox
    haspopup="true"
    value="None"
    checked="undefined"
    pressed="undefined"
  >
    Age
    <MenuListPopup value="undefined" checked="undefined" pressed="undefined">
      <menuitem
        selected="true"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        None
      </menuitem>
      <menuitem value="undefined" checked="undefined" pressed="undefined">
        Ten
        <text value="undefined" checked="undefined" pressed="undefined">
          Ten
        </text>
      </menuitem>
      <menuitem value="undefined" checked="undefined" pressed="undefined">
        Twenty
        <text value="undefined" checked="undefined" pressed="undefined">
          Twenty
        </text>
      </menuitem>
      <menuitem value="undefined" checked="undefined" pressed="undefined">
        Thirty
        <text value="undefined" checked="undefined" pressed="undefined">
          Thirty
        </text>
      </menuitem>
    </MenuListPopup>
  </combobox>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      🎨 If you are looking for inspiration, you can check
    </text>
    <link checked="undefined" pressed="undefined">
      MUI Treasury's customization examples
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Multiple select
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Multiple select
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The Select component can handle multiple selections. It's enabled
      with the multiple prop.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Like with the single selection, you can pull out the new value by
      accessing event.target.value in the onChange callback. It's always an
      array.
    </text>
  </paragraph>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Default
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Default
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Name
    <text value="undefined" checked="undefined" pressed="undefined">
      Name
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <button
    haspopup="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Name ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Checkmarks
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Checkmarks
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Tag
    <text value="undefined" checked="undefined" pressed="undefined">
      Tag
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <button
    haspopup="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Tag ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Chip
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Chip
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Chip
    <text value="undefined" checked="undefined" pressed="undefined">
      Chip
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <button
    haspopup="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Chip ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Placeholder
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Placeholder
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <button
    haspopup="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Without label
    <text value="undefined" checked="undefined" pressed="undefined">
      Placeholder
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Native
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Native
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Native
    <text value="undefined" checked="undefined" pressed="undefined">
      Native
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <listbox
    multiselectable="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Native
    <option value="undefined" checked="undefined" pressed="undefined">
      Oliver Hansen
      <text value="undefined" checked="undefined" pressed="undefined">
        Oliver Hansen
      </text>
    </option>
    <option value="undefined" checked="undefined" pressed="undefined">
      Van Henry
      <text value="undefined" checked="undefined" pressed="undefined">
        Van Henry
      </text>
    </option>
    <option value="undefined" checked="undefined" pressed="undefined">
      April Tucker
      <text value="undefined" checked="undefined" pressed="undefined">
        April Tucker
      </text>
    </option>
    <option value="undefined" checked="undefined" pressed="undefined">
      Ralph Hubbard
      <text value="undefined" checked="undefined" pressed="undefined">
        Ralph Hubbard
      </text>
    </option>
    <option value="undefined" checked="undefined" pressed="undefined">
      Omar Alexander
      <text value="undefined" checked="undefined" pressed="undefined">
        Omar Alexander
      </text>
    </option>
    <option value="undefined" checked="undefined" pressed="undefined">
      Carlos Abbott
      <text value="undefined" checked="undefined" pressed="undefined">
        Carlos Abbott
      </text>
    </option>
    <option value="undefined" checked="undefined" pressed="undefined">
      Miriam Wagner
      <text value="undefined" checked="undefined" pressed="undefined">
        Miriam Wagner
      </text>
    </option>
    <option value="undefined" checked="undefined" pressed="undefined">
      Bradley Wilkerson
      <text value="undefined" checked="undefined" pressed="undefined">
        Bradley Wilkerson
      </text>
    </option>
    <option value="undefined" checked="undefined" pressed="undefined">
      Virginia Andrews
      <text value="undefined" checked="undefined" pressed="undefined">
        Virginia Andrews
      </text>
    </option>
    <option value="undefined" checked="undefined" pressed="undefined">
      Kelly Snyder
      <text value="undefined" checked="undefined" pressed="undefined">
        Kelly Snyder
      </text>
    </option>
  </listbox>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Controlled open select
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Controlled open select
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    OPEN THE SELECT
    <text value="undefined" checked="undefined" pressed="undefined">
      OPEN THE SELECT
    </text>
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Age
    <text value="undefined" checked="undefined" pressed="undefined">
      Age
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <button
    haspopup="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Age ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    With a dialog
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      With a dialog
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      While it's discouraged by the Material Design specification, you can
      use a select inside a dialog.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    OPEN SELECT DIALOG
    <text value="undefined" checked="undefined" pressed="undefined">
      OPEN SELECT DIALOG
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Grouping
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Grouping
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Display categories with the ListSubheader component or the native
      <optgroup> element.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Grouping
    <text value="undefined" checked="undefined" pressed="undefined">
      Grouping
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <combobox
    haspopup="true"
    value="None"
    checked="undefined"
    pressed="undefined"
  >
    Grouping
    <MenuListPopup value="undefined" checked="undefined" pressed="undefined">
      <menuitem
        selected="true"
        value="undefined"
        checked="undefined"
        pressed="undefined"
      >
        None
      </menuitem>
      <group value="undefined" checked="undefined" pressed="undefined">
        Category 1
        <statictext value="undefined" checked="undefined" pressed="undefined">
          Category 1
        </statictext>
        <menuitem
          level="2"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Option 1
          <text value="undefined" checked="undefined" pressed="undefined">
            Option 1
          </text>
        </menuitem>
        <menuitem
          level="2"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Option 2
          <text value="undefined" checked="undefined" pressed="undefined">
            Option 2
          </text>
        </menuitem>
      </group>
      <group value="undefined" checked="undefined" pressed="undefined">
        Category 2
        <statictext value="undefined" checked="undefined" pressed="undefined">
          Category 2
        </statictext>
        <menuitem
          level="2"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Option 3
          <text value="undefined" checked="undefined" pressed="undefined">
            Option 3
          </text>
        </menuitem>
        <menuitem
          level="2"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Option 4
          <text value="undefined" checked="undefined" pressed="undefined">
            Option 4
          </text>
        </menuitem>
      </group>
    </MenuListPopup>
  </combobox>
  <label value="undefined" checked="undefined" pressed="undefined">
    Grouping
    <text value="undefined" checked="undefined" pressed="undefined">
      Grouping
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <button
    haspopup="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    ​
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Accessibility
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Accessibility
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      To properly label your Select input you need an extra element with an id
      that contains a label. That id needs to match the labelId of the Select
      e.g.
    </text>
  </paragraph>
  <text value="undefined" checked="undefined" pressed="undefined">
    <InputLabel id="label">Age</InputLabel> <Select
    labelId="label" id="select" value="20">
    <MenuItem value="10">Ten</MenuItem> <MenuItem
    value="20">Twenty</MenuItem> </Select>
  </text>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Alternatively a TextField with an id and label creates the proper markup
      and ids for you:
    </text>
  </paragraph>
  <text value="undefined" checked="undefined" pressed="undefined">
    <TextField id="select" label="Age"
    value="20" select> <MenuItem
    value="10">Ten</MenuItem> <MenuItem
    value="20">Twenty</MenuItem> </TextField>
  </text>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      For a
    </text>
    <link checked="undefined" pressed="undefined">
      native select
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      , you should mention a label by giving the value of the id attribute of
      the select element to the InputLabel's htmlFor attribute:
    </text>
  </paragraph>
  <text value="undefined" checked="undefined" pressed="undefined">
    <InputLabel htmlFor="select">Age</InputLabel>
    <NativeSelect id="select"> <option
    value="10">Ten</option> <option
    value="20">Twenty</option> </NativeSelect>
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <NativeSelect />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <NativeSelect />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <Select />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <Select />
      </link>
    </listitem>
  </list>
  <separator
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></separator>
  <link checked="undefined" pressed="undefined">
    Radio
  </link>
  <link checked="undefined" pressed="undefined">
    Slider
  </link>
</landmark>;

`;

exports[`firefox /components/slider 1`] = `
<landmark value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Slider
    <text value="undefined" checked="undefined" pressed="undefined">
      Slider
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Sliders allow users to make selections from a range of values.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Sliders reflect a range of values along a bar, from which users may select
      a single value. They are ideal for adjusting settings such as volume,
      brightness, or applying image filters.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • 📦 22 kB gzipped (but only +8 kB when used together with other
      Material-UI components).
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        📦
      </text>
      <link checked="undefined" pressed="undefined">
        22 kB gzipped
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        (but only +8 kB when used together with other Material-UI components).
      </text>
    </listitem>
  </list>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      WAI-ARIA
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Bundle size
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Material Design
      <link checked="undefined" pressed="undefined">
        Material Design
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Continuous sliders
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Continuous sliders
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Continuous sliders allow users to select a value along a subjective range.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Volume
    </text>
  </paragraph>
  <slider
    valuetext="30"
    orientation="horizontal"
    value="30"
    checked="undefined"
    pressed="undefined"
  >
    Volume
  </slider>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Disabled slider
    </text>
  </paragraph>
  <slider
    valuetext="30"
    orientation="horizontal"
    value="30"
    checked="undefined"
    pressed="undefined"
  >
    Disabled slider
  </slider>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Discrete sliders
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Discrete sliders
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Discrete sliders can be adjusted to a specific value by referencing its
      value indicator. By order of demos:
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can generate a mark for each step with marks={true}.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Temperature
    </text>
  </paragraph>
  <slider
    valuetext="30°C"
    orientation="horizontal"
    value="30°C"
    checked="undefined"
    pressed="undefined"
  >
    Temperature
    <text value="undefined" checked="undefined" pressed="undefined">
      30
    </text>
  </slider>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Disabled
    </text>
  </paragraph>
  <slider
    valuetext="30°C"
    orientation="horizontal"
    value="30°C"
    checked="undefined"
    pressed="undefined"
  >
    Temperature
    <text value="undefined" checked="undefined" pressed="undefined">
      30
    </text>
  </slider>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Small steps
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Small steps
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can change the default step increment.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Small steps
    </text>
  </paragraph>
  <slider
    valuetext="5e-8°C"
    orientation="horizontal"
    value="5e-8°C"
    checked="undefined"
    pressed="undefined"
  >
    Small steps
    <text value="undefined" checked="undefined" pressed="undefined">
      5e-8
    </text>
  </slider>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Typography id="discrete-slider-small-steps" gutterBottom>
    Small steps </Typography> <Slider
    defaultValue={0.00000005} getAriaValueText={valuetext}
    aria-labelledby="discrete-slider-small-steps"
    step={0.00000001} marks min={-0.00000005}
    max={0.0000001} valueLabelDisplay="auto" />
  </text>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Custom marks
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Custom marks
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can have custom marks by providing a rich array to the marks prop.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Custom marks
    </text>
  </paragraph>
  <slider
    valuetext="20°C"
    orientation="horizontal"
    value="20°C"
    checked="undefined"
    pressed="undefined"
  >
    Custom marks
    <text value="undefined" checked="undefined" pressed="undefined">
      20
    </text>
  </slider>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Typography id="discrete-slider-custom" gutterBottom> Custom
    marks </Typography> <Slider defaultValue={20}
    getAriaValueText={valuetext}
    aria-labelledby="discrete-slider-custom" step={10}
    valueLabelDisplay="auto" marks={marks} />
  </text>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Restricted values
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Restricted values
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can restrict the selectable values to those provided with the marks
      prop with step={null}.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Restricted values
    </text>
  </paragraph>
  <slider
    valuetext="20°C"
    orientation="horizontal"
    value="20°C"
    checked="undefined"
    pressed="undefined"
  >
    Restricted values
    <text value="undefined" checked="undefined" pressed="undefined">
      2
    </text>
  </slider>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Typography id="discrete-slider-restrict" gutterBottom>
    Restricted values </Typography> <Slider defaultValue={20}
    valueLabelFormat={valueLabelFormat}
    getAriaValueText={valuetext}
    aria-labelledby="discrete-slider-restrict" step={null}
    valueLabelDisplay="auto" marks={marks} />
  </text>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Label always visible
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Label always visible
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can force the thumb label to be always visible with
      valueLabelDisplay="on".
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Always visible
    </text>
  </paragraph>
  <slider
    valuetext="80°C"
    orientation="horizontal"
    value="80°C"
    checked="undefined"
    pressed="undefined"
  >
    Always visible
    <text value="undefined" checked="undefined" pressed="undefined">
      80
    </text>
  </slider>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Typography id="discrete-slider-always" gutterBottom> Always
    visible </Typography> <Slider defaultValue={80}
    getAriaValueText={valuetext}
    aria-labelledby="discrete-slider-always" step={10}
    marks={marks} valueLabelDisplay="on" />
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Range slider
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Range slider
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The slider can be used to set the start and end of a range by supplying an
      array of values to the value prop.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Temperature range
    </text>
  </paragraph>
  <slider
    valuetext="20°C"
    orientation="horizontal"
    value="20°C"
    checked="undefined"
    pressed="undefined"
  >
    <text value="undefined" checked="undefined" pressed="undefined">
      20
    </text>
  </slider>
  <slider
    valuetext="37°C"
    orientation="horizontal"
    value="37°C"
    checked="undefined"
    pressed="undefined"
  >
    <text value="undefined" checked="undefined" pressed="undefined">
      37
    </text>
  </slider>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Typography id="range-slider" gutterBottom> Temperature
    range </Typography> <Slider value={value}
    onChange={handleChange} valueLabelDisplay="auto"
    aria-labelledby="range-slider"
    getAriaValueText={valuetext} />
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Slider with input field
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Slider with input field
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      In this example an input allows a discrete value to be set.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Volume
    </text>
  </paragraph>
  <slider
    valuetext="30"
    orientation="horizontal"
    value="30"
    checked="undefined"
    pressed="undefined"
  >
    Volume
  </slider>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <spinbutton valuetext="30" value="30" checked="undefined" pressed="undefined">
    Volume
    <text value="undefined" checked="undefined" pressed="undefined">
      30
    </text>
  </spinbutton>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Customized sliders
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Customized sliders
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      iOS
    </text>
  </paragraph>
  <slider
    valuetext="60"
    orientation="horizontal"
    value="60"
    checked="undefined"
    pressed="undefined"
  >
    ios slider
    <text value="undefined" checked="undefined" pressed="undefined">
      60
    </text>
  </slider>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      pretto.fr
    </text>
  </paragraph>
  <slider
    valuetext="20"
    orientation="horizontal"
    value="20"
    checked="undefined"
    pressed="undefined"
  >
    pretto slider
    <text value="undefined" checked="undefined" pressed="undefined">
      20
    </text>
  </slider>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Tooltip value label
    </text>
  </paragraph>
  <slider
    valuetext="20"
    orientation="horizontal"
    value="20"
    checked="undefined"
    pressed="undefined"
  >
    custom thumb label
  </slider>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Airbnb
    </text>
  </paragraph>
  <slider
    valuetext="20"
    orientation="horizontal"
    value="20"
    checked="undefined"
    pressed="undefined"
  >
    Minimum price
  </slider>
  <slider
    valuetext="40"
    orientation="horizontal"
    value="40"
    checked="undefined"
    pressed="undefined"
  >
    Maximum price
  </slider>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Vertical sliders
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Vertical sliders
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Temperature
    </text>
  </paragraph>
  <slider
    valuetext="30°C"
    orientation="vertical"
    value="30°C"
    checked="undefined"
    pressed="undefined"
  >
    Temperature
  </slider>
  <slider
    valuetext="30°C"
    orientation="vertical"
    value="30°C"
    checked="undefined"
    pressed="undefined"
  >
    Temperature
  </slider>
  <slider
    valuetext="20°C"
    orientation="vertical"
    value="20°C"
    checked="undefined"
    pressed="undefined"
  >
    Temperature
  </slider>
  <slider
    valuetext="37°C"
    orientation="vertical"
    value="37°C"
    checked="undefined"
    pressed="undefined"
  >
    Temperature
  </slider>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Track
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Track
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The track shows the range available for user selection.
    </text>
  </paragraph>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Removed track
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Removed track
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The track can be turned off with track={false}.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Removed track
    </text>
  </paragraph>
  <slider
    valuetext="30°C"
    orientation="horizontal"
    value="30°C"
    checked="undefined"
    pressed="undefined"
  >
    Removed track
  </slider>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Removed track range slider
    </text>
  </paragraph>
  <slider
    valuetext="20°C"
    orientation="horizontal"
    value="20°C"
    checked="undefined"
    pressed="undefined"
  >
    Removed track range slider
  </slider>
  <slider
    valuetext="37°C"
    orientation="horizontal"
    value="37°C"
    checked="undefined"
    pressed="undefined"
  >
    Removed track range slider
  </slider>
  <slider
    valuetext="50°C"
    orientation="horizontal"
    value="50°C"
    checked="undefined"
    pressed="undefined"
  >
    Removed track range slider
  </slider>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Inverted track
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Inverted track
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The track can be inverted with track="inverted".
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Inverted track
    </text>
  </paragraph>
  <slider
    valuetext="30°C"
    orientation="horizontal"
    value="30°C"
    checked="undefined"
    pressed="undefined"
  >
    Inverted track
  </slider>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Inverted track range
    </text>
  </paragraph>
  <slider
    valuetext="20°C"
    orientation="horizontal"
    value="20°C"
    checked="undefined"
    pressed="undefined"
  >
    Inverted track range
  </slider>
  <slider
    valuetext="37°C"
    orientation="horizontal"
    value="37°C"
    checked="undefined"
    pressed="undefined"
  >
    Inverted track range
  </slider>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Non-linear scale
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Non-linear scale
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can use the scale prop to represent the value on a different scale.
      For instance, in the following demo, the value x represents the power of
      10^x.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Temperature range
    </text>
  </paragraph>
  <slider
    valuetext="1e^0"
    orientation="horizontal"
    value="1e^0"
    checked="undefined"
    pressed="undefined"
  >
    Temperature range
    <text value="undefined" checked="undefined" pressed="undefined">
      1e^0
    </text>
  </slider>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Typography id="non-linear-slider" gutterBottom> Temperature
    range </Typography> <Slider value={value}
    min={0} step={0.1} max={6} scale={(x)
    => x ** 10} getAriaValueText={valueLabelFormat}
    valueLabelFormat={valueLabelFormat}
    onChange={handleChange} valueLabelDisplay="auto"
    aria-labelledby="non-linear-slider" />
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Accessibility
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Accessibility
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      (WAI-ARIA:
    </text>
    <link checked="undefined" pressed="undefined">
      https://www.w3.org/TR/wai-aria-practices/#slider
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      )
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The component handles most of the work necessary to make it accessible.
      However, you need to make sure that:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Each thumb has a user-friendly label ( aria-label , aria-labelledby or
      getAriaLabel prop).
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Each thumb has a user-friendly label (aria-label, aria-labelledby or
        getAriaLabel prop).
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Each thumb has a user-friendly text for its current value. This is not
      required if the value matches the semantics of the label. You can change
      the name with the getAriaValueText or aria-valuetext prop.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Each thumb has a user-friendly text for its current value. This is not
        required if the value matches the semantics of the label. You can change
        the name with the getAriaValueText or aria-valuetext prop.
      </text>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <Slider />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <Slider />
      </link>
    </listitem>
  </list>
  <separator
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></separator>
  <link checked="undefined" pressed="undefined">
    Select
  </link>
  <link checked="undefined" pressed="undefined">
    Rating
  </link>
</landmark>;

`;

exports[`firefox /components/switches/ 1`] = `
<landmark value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Switch
    <text value="undefined" checked="undefined" pressed="undefined">
      Switch
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Switches toggle the state of a single setting on or off.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Switches are the preferred way to adjust settings on mobile. The option
      that the switch controls, as well as the state it’s in, should be made
      clear from the corresponding inline label.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Bundle size
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Material Design
      <link checked="undefined" pressed="undefined">
        Material Design
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Basic switches
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Basic switches
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox checked="true" value="undefined" pressed="undefined">
    secondary checkbox
  </checkbox>
  <checkbox checked="true" value="undefined" pressed="undefined">
    primary checkbox
  </checkbox>
  <checkbox value="undefined" checked="undefined" pressed="undefined">
    primary checkbox
  </checkbox>
  <checkbox
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    disabled checkbox
  </checkbox>
  <checkbox
    disabled="true"
    checked="true"
    value="undefined"
    pressed="undefined"
  >
    primary checkbox
  </checkbox>
  <checkbox checked="true" value="undefined" pressed="undefined">
    checkbox with default color
  </checkbox>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Switch with FormControlLabel
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Switch with FormControlLabel
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Switch can be provided with a description thanks to the FormControlLabel
      component.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Secondary
    <checkbox checked="true" value="undefined" pressed="undefined">
      Secondary
    </checkbox>
    <text value="undefined" checked="undefined" pressed="undefined">
      Secondary
    </text>
  </label>
  <label value="undefined" checked="undefined" pressed="undefined">
    Primary
    <checkbox checked="true" value="undefined" pressed="undefined">
      Primary
    </checkbox>
    <text value="undefined" checked="undefined" pressed="undefined">
      Primary
    </text>
  </label>
  <label value="undefined" checked="undefined" pressed="undefined">
    Uncontrolled
    <checkbox value="undefined" checked="undefined" pressed="undefined">
      Uncontrolled
    </checkbox>
    <text value="undefined" checked="undefined" pressed="undefined">
      Uncontrolled
    </text>
  </label>
  <label value="undefined" checked="undefined" pressed="undefined">
    Disabled
    <checkbox
      disabled="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Disabled
    </checkbox>
    <text value="undefined" checked="undefined" pressed="undefined">
      Disabled
    </text>
  </label>
  <label value="undefined" checked="undefined" pressed="undefined">
    Disabled
    <checkbox
      disabled="true"
      checked="true"
      value="undefined"
      pressed="undefined"
    >
      Disabled
    </checkbox>
    <text value="undefined" checked="undefined" pressed="undefined">
      Disabled
    </text>
  </label>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Switches with FormGroup
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Switches with FormGroup
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      FormGroup is a helpful wrapper used to group selection controls components
      that provides an easier API. However, you are encouraged to use
    </text>
    <link checked="undefined" pressed="undefined">
      Checkboxes
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      instead if multiple related controls are required. (See:
    </text>
    <link checked="undefined" pressed="undefined">
      When to use
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      ).
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group value="undefined" checked="undefined" pressed="undefined">
    Assign responsibility
    <label value="undefined" checked="undefined" pressed="undefined">
      Assign responsibility
      <text value="undefined" checked="undefined" pressed="undefined">
        Assign responsibility
      </text>
    </label>
    <label value="undefined" checked="undefined" pressed="undefined">
      Gilad Gray
      <checkbox checked="true" value="undefined" pressed="undefined">
        Gilad Gray
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        Gilad Gray
      </text>
    </label>
    <label value="undefined" checked="undefined" pressed="undefined">
      Jason Killian
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        Jason Killian
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        Jason Killian
      </text>
    </label>
    <label value="undefined" checked="undefined" pressed="undefined">
      Antoine Llorca
      <checkbox checked="true" value="undefined" pressed="undefined">
        Antoine Llorca
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        Antoine Llorca
      </text>
    </label>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Be careful
      </text>
    </paragraph>
  </group>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Customized switches
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Customized switches
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Custom color
    <checkbox checked="true" value="undefined" pressed="undefined">
      Custom color
    </checkbox>
    <text value="undefined" checked="undefined" pressed="undefined">
      Custom color
    </text>
  </label>
  <label value="undefined" checked="undefined" pressed="undefined">
    iOS style
    <checkbox checked="true" value="undefined" pressed="undefined">
      iOS style
    </checkbox>
    <text value="undefined" checked="undefined" pressed="undefined">
      iOS style
    </text>
  </label>
  <label value="undefined" checked="undefined" pressed="undefined">
    Off On
    <text value="undefined" checked="undefined" pressed="undefined">
      Off
    </text>
    <checkbox checked="true" value="undefined" pressed="undefined">
      Off On
    </checkbox>
    <text value="undefined" checked="undefined" pressed="undefined">
      On
    </text>
  </label>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      🎨 If you are looking for inspiration, you can check
    </text>
    <link checked="undefined" pressed="undefined">
      MUI Treasury's customization examples
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Sizes
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Sizes
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Fancy smaller switches? Use the size prop.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Small
    <checkbox value="undefined" checked="undefined" pressed="undefined">
      Small
    </checkbox>
    <text value="undefined" checked="undefined" pressed="undefined">
      Small
    </text>
  </label>
  <label value="undefined" checked="undefined" pressed="undefined">
    Normal
    <checkbox value="undefined" checked="undefined" pressed="undefined">
      Normal
    </checkbox>
    <text value="undefined" checked="undefined" pressed="undefined">
      Normal
    </text>
  </label>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <FormGroup> <FormControlLabel control={ <Switch
    size="small" checked={checked}
    onChange={toggleChecked} /> } label="Small"
    /> <FormControlLabel control={<Switch
    checked={checked} onChange={toggleChecked} />}
    label="Normal" /> </FormGroup>
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Label placement
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Label placement
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can change the placement of the label:
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <group value="undefined" checked="undefined" pressed="undefined">
    <label value="undefined" checked="undefined" pressed="undefined">
      Top
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        Top
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        Top
      </text>
    </label>
    <label value="undefined" checked="undefined" pressed="undefined">
      Start
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        Start
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        Start
      </text>
    </label>
    <label value="undefined" checked="undefined" pressed="undefined">
      Bottom
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        Bottom
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        Bottom
      </text>
    </label>
    <label value="undefined" checked="undefined" pressed="undefined">
      End
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        End
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        End
      </text>
    </label>
  </group>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    When to use
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      When to use
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Checkboxes vs. Switches
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        Checkboxes vs. Switches
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Accessibility
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Accessibility
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • It will render an element with the checkbox role not switch role since
      this role isn't widely supported yet. Please test first if assistive
      technology of your target audience supports this role properly. Then you
      can change the role with <Switch inputProps={{ role:
      'switch' }}>
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        It will render an element with the checkbox role not switch role since
        this role isn't widely supported yet. Please test first if
        assistive technology of your target audience supports this role
        properly. Then you can change the role with <Switch
        inputProps={{ role: 'switch' }}>
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • All form controls should have labels, and this includes radio buttons,
      checkboxes, and switches. In most cases, this is done by using the
      <label> element ( FormControlLabel ).
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        All form controls should have labels, and this includes radio buttons,
        checkboxes, and switches. In most cases, this is done by using the
        <label> element (
      </text>
      <link checked="undefined" pressed="undefined">
        FormControlLabel
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        ).
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • When a label can't be used, it's necessary to add an attribute
      directly to the input component. In this case, you can apply the
      additional attribute (e.g. aria-label , aria-labelledby , title ) via the
      inputProps prop.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        When a label can't be used, it's necessary to add an attribute
        directly to the input component. In this case, you can apply the
        additional attribute (e.g. aria-label, aria-labelledby, title) via the
        inputProps prop.
      </text>
    </listitem>
  </list>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Switch value="checkedA" inputProps={{
    'aria-label': 'Switch A' }} />
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <FormControl />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <FormControl />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <FormControlLabel />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <FormControlLabel />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <FormGroup />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <FormGroup />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <FormLabel />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <FormLabel />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <Switch />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <Switch />
      </link>
    </listitem>
  </list>
  <separator
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></separator>
  <link checked="undefined" pressed="undefined">
    Rating
  </link>
  <link checked="undefined" pressed="undefined">
    Text Field
  </link>
</landmark>;

`;

exports[`firefox /components/tabs/ 1`] = `
<landmark value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Tabs
    <text value="undefined" checked="undefined" pressed="undefined">
      Tabs
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Tabs make it easy to explore and switch between different views.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Tabs organize and allow navigation between groups of content that are
      related and at the same level of hierarchy.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      WAI-ARIA
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Bundle size
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Material Design
      <link checked="undefined" pressed="undefined">
        Material Design
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Basic tabs
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Basic tabs
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      A basic example with no frills.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist value="undefined" checked="undefined" pressed="undefined">
    simple tabs example
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      ITEM ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM ONE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM TWO
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM THREE
      </text>
    </tab>
  </tablist>
  <tabpanel value="undefined" checked="undefined" pressed="undefined">
    ITEM ONE
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Item One
      </text>
    </paragraph>
  </tabpanel>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Wrapped labels
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Wrapped labels
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Long labels will automatically wrap on tabs. If the label is too long for
      the tab, it will overflow and the text will not be visible.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist value="undefined" checked="undefined" pressed="undefined">
    wrapped label tabs example
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      NEW ARRIVALS IN THE LONGEST TEXT OF NONFICTION
      <text value="undefined" checked="undefined" pressed="undefined">
        NEW ARRIVALS IN THE LONGEST TEXT OF NONFICTION
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM TWO
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM THREE
      </text>
    </tab>
  </tablist>
  <tabpanel value="undefined" checked="undefined" pressed="undefined">
    NEW ARRIVALS IN THE LONGEST TEXT OF NONFICTION
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Item One
      </text>
    </paragraph>
  </tabpanel>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Disabled tab
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Disabled tab
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      A Tab can be disabled by setting disabled prop.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist value="undefined" checked="undefined" pressed="undefined">
    disabled tabs example
    <tab value="undefined" checked="undefined" pressed="undefined">
      ACTIVE
      <text value="undefined" checked="undefined" pressed="undefined">
        ACTIVE
      </text>
    </tab>
    <tab
      disabled="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      DISABLED
      <text value="undefined" checked="undefined" pressed="undefined">
        DISABLED
      </text>
    </tab>
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      ACTIVE
      <text value="undefined" checked="undefined" pressed="undefined">
        ACTIVE
      </text>
    </tab>
  </tablist>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Paper square> <Tabs value={value}
    indicatorColor="primary" textColor="primary"
    onChange={handleChange} aria-label="disabled tabs
    example" > <Tab label="Active" /> <Tab
    label="Disabled" disabled /> <Tab label="Active"
    /> </Tabs> </Paper>
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Fixed tabs
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Fixed tabs
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Fixed tabs should be used with a limited number of tabs and when
      consistent placement will aid muscle memory.
    </text>
  </paragraph>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Full width
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Full width
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The variant="fullWidth" prop should be used for smaller views.
      This demo also uses
    </text>
    <link checked="undefined" pressed="undefined">
      react-swipeable-views
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      to animate the Tab transition, and allowing tabs to be swiped on touch
      devices.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist value="undefined" checked="undefined" pressed="undefined">
    full width tabs example
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      ITEM ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM ONE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM TWO
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM THREE
      </text>
    </tab>
  </tablist>
  <tabpanel value="undefined" checked="undefined" pressed="undefined">
    ITEM ONE
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Item One
      </text>
    </paragraph>
  </tabpanel>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Centered
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Centered
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The centered prop should be used for larger views.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist value="undefined" checked="undefined" pressed="undefined">
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      ITEM ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM ONE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM TWO
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM THREE
      </text>
    </tab>
  </tablist>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Paper className={classes.root}> <Tabs
    value={value} onChange={handleChange}
    indicatorColor="primary" textColor="primary" centered
    > <Tab label="Item One" /> <Tab label="Item
    Two" /> <Tab label="Item Three" /> </Tabs>
    </Paper>
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Scrollable tabs
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Scrollable tabs
    </text>
  </heading>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Automatic scroll buttons
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Automatic scroll buttons
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      By default, left and right scroll buttons are automatically presented on
      desktop and hidden on mobile. (based on viewport width)
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist value="undefined" checked="undefined" pressed="undefined">
    scrollable auto tabs example
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      ITEM ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM ONE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM TWO
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM THREE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM FOUR
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM FOUR
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM FIVE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM FIVE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM SIX
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM SIX
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM SEVEN
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM SEVEN
      </text>
    </tab>
  </tablist>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Tabs value={value} onChange={handleChange}
    variant="scrollable" scrollButtons="auto"
    aria-label="scrollable auto tabs example" > <Tab
    label="Item One" /> <Tab label="Item Two" />
    <Tab label="Item Three" /> <Tab label="Item
    Four" /> <Tab label="Item Five" /> <Tab
    label="Item Six" /> <Tab label="Item Seven" />
    </Tabs>
  </text>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Forced scroll buttons
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Forced scroll buttons
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Left and right scroll buttons be presented (reserve space) regardless of
      the viewport width with scrollButtons={true}
      allowScrollButtonsMobile:
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist value="undefined" checked="undefined" pressed="undefined">
    scrollable force tabs example
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      ITEM ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM ONE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM TWO
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM THREE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM FOUR
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM FOUR
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM FIVE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM FIVE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM SIX
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM SIX
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM SEVEN
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM SEVEN
      </text>
    </tab>
  </tablist>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Tabs value={value} onChange={handleChange}
    variant="scrollable" scrollButtons allowScrollButtonsMobile
    aria-label="scrollable force tabs example" > <Tab
    label="Item One" /> <Tab label="Item Two" />
    <Tab label="Item Three" /> <Tab label="Item
    Four" /> <Tab label="Item Five" /> <Tab
    label="Item Six" /> <Tab label="Item Seven" />
    </Tabs>
  </text>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      If you want to make sure the buttons are always visible, you should
      customize the opacity.
    </text>
  </paragraph>
  <text value="undefined" checked="undefined" pressed="undefined">
    .MuiTabs-scrollButtons.Mui-disabled { opacity: 0.3; }
  </text>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist value="undefined" checked="undefined" pressed="undefined">
    visible arrows tabs example
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      ITEM ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM ONE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM TWO
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM THREE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM FOUR
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM FOUR
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM FIVE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM FIVE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM SIX
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM SIX
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM SEVEN
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM SEVEN
      </text>
    </tab>
  </tablist>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Prevent scroll buttons
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Prevent scroll buttons
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Left and right scroll buttons are never be presented with
      scrollButtons={false}. All scrolling must be initiated through
      user agent scrolling mechanisms (e.g. left/right swipe, shift-mousewheel,
      etc.)
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist value="undefined" checked="undefined" pressed="undefined">
    scrollable prevent tabs example
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      ITEM ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM ONE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM TWO
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM THREE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM FOUR
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM FOUR
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM FIVE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM FIVE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM SIX
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM SIX
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM SEVEN
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM SEVEN
      </text>
    </tab>
  </tablist>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Tabs value={value} onChange={handleChange}
    variant="scrollable" scrollButtons={false}
    aria-label="scrollable prevent tabs example" > <Tab
    label="Item One" /> <Tab label="Item Two" />
    <Tab label="Item Three" /> <Tab label="Item
    Four" /> <Tab label="Item Five" /> <Tab
    label="Item Six" /> <Tab label="Item Seven" />
    </Tabs>
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Customized tabs
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Customized tabs
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Here is an example of customizing the component. You can learn more about
      this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist value="undefined" checked="undefined" pressed="undefined">
    ant example
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Tab 1
      <text value="undefined" checked="undefined" pressed="undefined">
        Tab 1
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      Tab 2
      <text value="undefined" checked="undefined" pressed="undefined">
        Tab 2
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      Tab 3
      <text value="undefined" checked="undefined" pressed="undefined">
        Tab 3
      </text>
    </tab>
  </tablist>
  <paragraph
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></paragraph>
  <tablist value="undefined" checked="undefined" pressed="undefined">
    styled tabs example
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Workflows
      <text value="undefined" checked="undefined" pressed="undefined">
        Workflows
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      Datasets
      <text value="undefined" checked="undefined" pressed="undefined">
        Datasets
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      Connections
      <text value="undefined" checked="undefined" pressed="undefined">
        Connections
      </text>
    </tab>
  </tablist>
  <paragraph
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></paragraph>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      🎨 If you are looking for inspiration, you can check
    </text>
    <link checked="undefined" pressed="undefined">
      MUI Treasury's customization examples
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Vertical tabs
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Vertical tabs
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      To make vertical tabs instead of default horizontal ones, there is
      orientation="vertical":
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist
    orientation="vertical"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Vertical tabs example
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      ITEM ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM ONE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM TWO
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM THREE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM FOUR
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM FOUR
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM FIVE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM FIVE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM SIX
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM SIX
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM SEVEN
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM SEVEN
      </text>
    </tab>
  </tablist>
  <tabpanel value="undefined" checked="undefined" pressed="undefined">
    ITEM ONE
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Item One
      </text>
    </paragraph>
  </tabpanel>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Note that you can restore the scrollbar with visibleScrollbar.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Nav Tabs
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Nav Tabs
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      By default tabs use a button element, but you can provide your own custom
      tag or component. Here's an example of implementing tabbed
      navigation:
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist value="undefined" checked="undefined" pressed="undefined">
    nav tabs example
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      PAGE ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        PAGE ONE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      PAGE TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        PAGE TWO
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      PAGE THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        PAGE THREE
      </text>
    </tab>
  </tablist>
  <tabpanel value="undefined" checked="undefined" pressed="undefined">
    PAGE ONE
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Page One
      </text>
    </paragraph>
  </tabpanel>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Icon Tabs
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Icon Tabs
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Tab labels may be either all icons or all text.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist value="undefined" checked="undefined" pressed="undefined">
    icon tabs example
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      phone
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      favorite
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      person
    </tab>
  </tablist>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Paper square className={classes.root}> <Tabs
    value={value} onChange={handleChange}
    variant="fullWidth" indicatorColor="primary"
    textColor="primary" aria-label="icon tabs example" >
    <Tab icon={<PhoneIcon />} aria-label="phone"
    /> <Tab icon={<FavoriteIcon />}
    aria-label="favorite" /> <Tab icon={<PersonPinIcon
    />} aria-label="person" /> </Tabs> </Paper>
  </text>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist value="undefined" checked="undefined" pressed="undefined">
    icon label tabs example
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      RECENTS
      <text value="undefined" checked="undefined" pressed="undefined">
        RECENTS
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      FAVORITES
      <text value="undefined" checked="undefined" pressed="undefined">
        FAVORITES
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      NEARBY
      <text value="undefined" checked="undefined" pressed="undefined">
        NEARBY
      </text>
    </tab>
  </tablist>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Paper square className={classes.root}> <Tabs
    value={value} onChange={handleChange}
    variant="fullWidth" indicatorColor="secondary"
    textColor="secondary" aria-label="icon label tabs
    example" > <Tab icon={<PhoneIcon />}
    label="RECENTS" /> <Tab icon={<FavoriteIcon
    />} label="FAVORITES" /> <Tab
    icon={<PersonPinIcon />} label="NEARBY" />
    </Tabs> </Paper>
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Accessibility
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Accessibility
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      (WAI-ARIA:
    </text>
    <link checked="undefined" pressed="undefined">
      https://www.w3.org/TR/wai-aria-practices/#tabpanel
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      )
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The following steps are needed in order to provide necessary information
      for assistive technologies:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      1. Label Tabs via aria-label or aria-labelledby .
      <statictext value="undefined" checked="undefined" pressed="undefined">
        1.
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Label Tabs via aria-label or aria-labelledby.
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      2. Tab s need to be connected to their corresponding
      [role="tabpanel"] by setting the correct id , aria-controls and
      aria-labelledby .
      <statictext value="undefined" checked="undefined" pressed="undefined">
        2.
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Tabs need to be connected to their corresponding
        [role="tabpanel"] by setting the correct id, aria-controls and
        aria-labelledby.
      </text>
    </listitem>
  </list>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      An example for the current implementation can be found in the demos on
      this page. We've also published
    </text>
    <link checked="undefined" pressed="undefined">
      an experimental API
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      in @material-ui/lab that does not require extra work.
    </text>
  </paragraph>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Keyboard navigation
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Keyboard navigation
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The components implement keyboard navigation using the "manual
      activation" behavior. If you want to switch to the "selection
      automatically follows focus" behavior you have pass
      selectionFollowsFocus to the Tabs component. The WAI-ARIA authoring
      practices have a detailed guide on
    </text>
    <link checked="undefined" pressed="undefined">
      how to decide when to make selection automatically follow focus
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="4" value="undefined" checked="undefined" pressed="undefined">
    Demo
    <text value="undefined" checked="undefined" pressed="undefined">
      Demo
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The following two demos only differ in their keyboard navigation behavior.
      Focus a tab and navigate with arrow keys to notice the difference.
    </text>
  </paragraph>
  <text value="undefined" checked="undefined" pressed="undefined">
    /* Tabs where selection follows focus */ <Tabs selectionFollowsFocus
    /> /* Tabs where each tab needs to be selected manually */ <Tabs />
  </text>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Tabs where selection follows focus
    </text>
  </paragraph>
  <tablist value="undefined" checked="undefined" pressed="undefined">
    Tabs where selection follows focus
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      ITEM ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM ONE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM TWO
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM THREE
      </text>
    </tab>
  </tablist>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Tabs where each tab needs to be selected manually
    </text>
  </paragraph>
  <tablist value="undefined" checked="undefined" pressed="undefined">
    Tabs where each tab needs to be selected manually
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      ITEM ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM ONE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM TWO
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM THREE
      </text>
    </tab>
  </tablist>
  <tabpanel value="undefined" checked="undefined" pressed="undefined">
    ITEM ONE
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Item One
      </text>
    </paragraph>
  </tabpanel>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Experimental API
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Experimental API
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      @material-ui/lab offers utility components that inject props to implement
      accessible tabs following
    </text>
    <link checked="undefined" pressed="undefined">
      WAI-ARIA authoring practices
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tablist value="undefined" checked="undefined" pressed="undefined">
    simple tabs example
    <tab
      selected="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      ITEM ONE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM ONE
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM TWO
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM TWO
      </text>
    </tab>
    <tab value="undefined" checked="undefined" pressed="undefined">
      ITEM THREE
      <text value="undefined" checked="undefined" pressed="undefined">
        ITEM THREE
      </text>
    </tab>
  </tablist>
  <tabpanel value="undefined" checked="undefined" pressed="undefined">
    ITEM ONE
    <text value="undefined" checked="undefined" pressed="undefined">
      Item One
    </text>
  </tabpanel>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <TabContext value={value}> <AppBar
    position="static"> <TabList
    onChange={handleChange} aria-label="simple tabs
    example"> <Tab label="Item One" value="1"
    /> <Tab label="Item Two" value="2" /> <Tab
    label="Item Three" value="3" /> </TabList>
    </AppBar> <TabPanel value="1">Item
    One</TabPanel> <TabPanel value="2">Item
    Two</TabPanel> <TabPanel value="3">Item
    Three</TabPanel> </TabContext>
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <Tab />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <Tab />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <TabContext />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <TabContext />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <TabList />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <TabList />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <TabPanel />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <TabPanel />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <TabScrollButton />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <TabScrollButton />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <Tabs />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <Tabs />
      </link>
    </listitem>
  </list>
  <separator
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></separator>
  <link checked="undefined" pressed="undefined">
    Stepper
  </link>
  <link checked="undefined" pressed="undefined">
    Accordion
  </link>
</landmark>;

`;

exports[`firefox /components/text-fields/ 1`] = `
<landmark value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Text Field
    <text value="undefined" checked="undefined" pressed="undefined">
      Text Field
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Text fields let users enter and edit text.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Text fields allow users to enter text into a UI. They typically appear in
      forms and dialogs.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Bundle size
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Material Design
      <link checked="undefined" pressed="undefined">
        Material Design
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    TextField
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      TextField
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The TextField wrapper component is a complete form control including a
      label, input and help text.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      It supports standard, outlined and filled styling.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <label value="undefined" checked="undefined" pressed="undefined">
      Standard
      <text value="undefined" checked="undefined" pressed="undefined">
        Standard
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      Standard
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Filled
      <text value="undefined" checked="undefined" pressed="undefined">
        Filled
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      Filled
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Outlined
      <text value="undefined" checked="undefined" pressed="undefined">
        Outlined
      </text>
    </label>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      Outlined
    </textbox>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <form className={classes.root} noValidate
    autoComplete="off"> <TextField id="standard-basic"
    label="Standard" /> <TextField id="filled-basic"
    label="Filled" variant="filled" /> <TextField
    id="outlined-basic" label="Outlined"
    variant="outlined" /> </form>
  </text>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Note: The standard variant of the TextField is no longer documented in the
    </text>
    <link checked="undefined" pressed="undefined">
      Material Design guidelines
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      (
    </text>
    <link checked="undefined" pressed="undefined">
      here's why
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      ), but Material-UI will continue to support it.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Form props
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Form props
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Standard form attributes are supported e.g. required, disabled, type, etc.
      as well as a helperText which is used to give context about a field’s
      input, such as how the input will be used.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <label value="undefined" checked="undefined" pressed="undefined">
      Required
      <text value="undefined" checked="undefined" pressed="undefined">
        Required
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox
      required="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Required
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Disabled
      <text value="undefined" checked="undefined" pressed="undefined">
        Disabled
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox
      disabled="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Disabled
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Password
      <text value="undefined" checked="undefined" pressed="undefined">
        Password
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      Password
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Read Only
      <text value="undefined" checked="undefined" pressed="undefined">
        Read Only
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox
      readonly="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Read Only
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Number
      <text value="undefined" checked="undefined" pressed="undefined">
        Number
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <spinbutton
      valuetext=""
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Number
    </spinbutton>
    <label value="undefined" checked="undefined" pressed="undefined">
      Search field
      <text value="undefined" checked="undefined" pressed="undefined">
        Search field
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      Search field
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Helper text
      <text value="undefined" checked="undefined" pressed="undefined">
        Helper text
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox
      description="Some important text"
      value="Default Value"
      checked="undefined"
      pressed="undefined"
    >
      Helper text
      <text value="undefined" checked="undefined" pressed="undefined">
        Default Value
      </text>
    </textbox>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Some important text
      </text>
    </paragraph>
    <label value="undefined" checked="undefined" pressed="undefined">
      Required
      <text value="undefined" checked="undefined" pressed="undefined">
        Required
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox
      required="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Required
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Disabled
      <text value="undefined" checked="undefined" pressed="undefined">
        Disabled
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox
      disabled="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Disabled
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Password
      <text value="undefined" checked="undefined" pressed="undefined">
        Password
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      Password
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Read Only
      <text value="undefined" checked="undefined" pressed="undefined">
        Read Only
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox
      readonly="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Read Only
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Number
      <text value="undefined" checked="undefined" pressed="undefined">
        Number
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <spinbutton
      valuetext=""
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Number
    </spinbutton>
    <label value="undefined" checked="undefined" pressed="undefined">
      Search field
      <text value="undefined" checked="undefined" pressed="undefined">
        Search field
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      Search field
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Helper text
      <text value="undefined" checked="undefined" pressed="undefined">
        Helper text
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox
      description="Some important text"
      value="Default Value"
      checked="undefined"
      pressed="undefined"
    >
      Helper text
      <text value="undefined" checked="undefined" pressed="undefined">
        Default Value
      </text>
    </textbox>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Some important text
      </text>
    </paragraph>
    <label value="undefined" checked="undefined" pressed="undefined">
      Required
      <text value="undefined" checked="undefined" pressed="undefined">
        Required
      </text>
    </label>
    <textbox
      required="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Required
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Disabled
      <text value="undefined" checked="undefined" pressed="undefined">
        Disabled
      </text>
    </label>
    <textbox
      disabled="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Disabled
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Password
      <text value="undefined" checked="undefined" pressed="undefined">
        Password
      </text>
    </label>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      Password
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Read Only
      <text value="undefined" checked="undefined" pressed="undefined">
        Read Only
      </text>
    </label>
    <textbox
      readonly="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Read Only
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Number
      <text value="undefined" checked="undefined" pressed="undefined">
        Number
      </text>
    </label>
    <spinbutton
      valuetext=""
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Number
    </spinbutton>
    <label value="undefined" checked="undefined" pressed="undefined">
      Search field
      <text value="undefined" checked="undefined" pressed="undefined">
        Search field
      </text>
    </label>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      Search field
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Helper text
      <text value="undefined" checked="undefined" pressed="undefined">
        Helper text
      </text>
    </label>
    <textbox
      description="Some important text"
      value="Default Value"
      checked="undefined"
      pressed="undefined"
    >
      Helper text
      <text value="undefined" checked="undefined" pressed="undefined">
        Default Value
      </text>
    </textbox>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Some important text
      </text>
    </paragraph>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Validation
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Validation
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The error prop toggles the error state, the helperText prop can then be
      used to provide feedback to the user about the error.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <label value="undefined" checked="undefined" pressed="undefined">
      Error
      <text value="undefined" checked="undefined" pressed="undefined">
        Error
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox
      invalid="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Error
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Error
      <text value="undefined" checked="undefined" pressed="undefined">
        Error
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox
      description="Incorrect entry."
      invalid="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Error
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Incorrect entry.
      </text>
    </paragraph>
    <label value="undefined" checked="undefined" pressed="undefined">
      Error
      <text value="undefined" checked="undefined" pressed="undefined">
        Error
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox
      invalid="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Error
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Error
      <text value="undefined" checked="undefined" pressed="undefined">
        Error
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox
      description="Incorrect entry."
      invalid="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Error
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Incorrect entry.
      </text>
    </paragraph>
    <label value="undefined" checked="undefined" pressed="undefined">
      Error
      <text value="undefined" checked="undefined" pressed="undefined">
        Error
      </text>
    </label>
    <textbox
      invalid="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Error
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Error
      <text value="undefined" checked="undefined" pressed="undefined">
        Error
      </text>
    </label>
    <textbox
      description="Incorrect entry."
      invalid="true"
      value="Hello World"
      checked="undefined"
      pressed="undefined"
    >
      Error
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello World
      </text>
    </textbox>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Incorrect entry.
      </text>
    </paragraph>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Multiline
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Multiline
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The multiline prop transforms the text field into a
    </text>
    <link checked="undefined" pressed="undefined">
      <textarea>
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      element. Unless the rows prop is set, the height of the text field
      dynamically matches its content (using
    </text>
    <link checked="undefined" pressed="undefined">
      TextareaAutosize
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      ). You can use the rowsMin and rowsMax props to bound it.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <label value="undefined" checked="undefined" pressed="undefined">
      Multiline
      <text value="undefined" checked="undefined" pressed="undefined">
        Multiline
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox
      multiline="true"
      value="Controlled"
      checked="undefined"
      pressed="undefined"
    >
      Multiline
      <text value="undefined" checked="undefined" pressed="undefined">
        Controlled
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Multiline Placeholder
      <text value="undefined" checked="undefined" pressed="undefined">
        Multiline Placeholder
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox
      multiline="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Multiline Placeholder
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Multiline
      <text value="undefined" checked="undefined" pressed="undefined">
        Multiline
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox
      multiline="true"
      value="Default Value"
      checked="undefined"
      pressed="undefined"
    >
      Multiline
      <text value="undefined" checked="undefined" pressed="undefined">
        Default Value
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Multiline
      <text value="undefined" checked="undefined" pressed="undefined">
        Multiline
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox
      multiline="true"
      value="Controlled"
      checked="undefined"
      pressed="undefined"
    >
      Multiline
      <text value="undefined" checked="undefined" pressed="undefined">
        Controlled
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Multiline Placeholder
      <text value="undefined" checked="undefined" pressed="undefined">
        Multiline Placeholder
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox
      multiline="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Multiline Placeholder
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Multiline
      <text value="undefined" checked="undefined" pressed="undefined">
        Multiline
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox
      multiline="true"
      value="Default Value"
      checked="undefined"
      pressed="undefined"
    >
      Multiline
      <text value="undefined" checked="undefined" pressed="undefined">
        Default Value
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Multiline
      <text value="undefined" checked="undefined" pressed="undefined">
        Multiline
      </text>
    </label>
    <textbox
      multiline="true"
      value="Controlled"
      checked="undefined"
      pressed="undefined"
    >
      Multiline
      <text value="undefined" checked="undefined" pressed="undefined">
        Controlled
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Multiline Placeholder
      <text value="undefined" checked="undefined" pressed="undefined">
        Multiline Placeholder
      </text>
    </label>
    <textbox
      multiline="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Multiline Placeholder
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Multiline
      <text value="undefined" checked="undefined" pressed="undefined">
        Multiline
      </text>
    </label>
    <textbox
      multiline="true"
      value="Default Value"
      checked="undefined"
      pressed="undefined"
    >
      Multiline
      <text value="undefined" checked="undefined" pressed="undefined">
        Default Value
      </text>
    </textbox>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Select
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Select
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The select prop makes the text field use the
    </text>
    <link checked="undefined" pressed="undefined">
      Select
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      component internally.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <label value="undefined" checked="undefined" pressed="undefined">
      Select
      <text value="undefined" checked="undefined" pressed="undefined">
        Select
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <button
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Select €
      <text value="undefined" checked="undefined" pressed="undefined">
        €
      </text>
    </button>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Please select your currency
      </text>
    </paragraph>
    <label value="undefined" checked="undefined" pressed="undefined">
      Native select
      <text value="undefined" checked="undefined" pressed="undefined">
        Native select
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <combobox
      description="Please select your currency"
      haspopup="true"
      value="€"
      checked="undefined"
      pressed="undefined"
    >
      Native select
      <MenuListPopup value="undefined" checked="undefined" pressed="undefined">
        <menuitem value="undefined" checked="undefined" pressed="undefined">
          $
          <text value="undefined" checked="undefined" pressed="undefined">
            $
          </text>
        </menuitem>
        <menuitem
          selected="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          €
          <text value="undefined" checked="undefined" pressed="undefined">
            €
          </text>
        </menuitem>
        <menuitem value="undefined" checked="undefined" pressed="undefined">
          ฿
          <text value="undefined" checked="undefined" pressed="undefined">
            ฿
          </text>
        </menuitem>
        <menuitem value="undefined" checked="undefined" pressed="undefined">
          ¥
          <text value="undefined" checked="undefined" pressed="undefined">
            ¥
          </text>
        </menuitem>
      </MenuListPopup>
    </combobox>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Please select your currency
      </text>
    </paragraph>
    <label value="undefined" checked="undefined" pressed="undefined">
      Select
      <text value="undefined" checked="undefined" pressed="undefined">
        Select
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <button
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Select €
      <text value="undefined" checked="undefined" pressed="undefined">
        €
      </text>
    </button>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Please select your currency
      </text>
    </paragraph>
    <label value="undefined" checked="undefined" pressed="undefined">
      Native select
      <text value="undefined" checked="undefined" pressed="undefined">
        Native select
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <combobox
      description="Please select your currency"
      haspopup="true"
      value="€"
      checked="undefined"
      pressed="undefined"
    >
      Native select
      <MenuListPopup value="undefined" checked="undefined" pressed="undefined">
        <menuitem value="undefined" checked="undefined" pressed="undefined">
          $
          <text value="undefined" checked="undefined" pressed="undefined">
            $
          </text>
        </menuitem>
        <menuitem
          selected="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          €
          <text value="undefined" checked="undefined" pressed="undefined">
            €
          </text>
        </menuitem>
        <menuitem value="undefined" checked="undefined" pressed="undefined">
          ฿
          <text value="undefined" checked="undefined" pressed="undefined">
            ฿
          </text>
        </menuitem>
        <menuitem value="undefined" checked="undefined" pressed="undefined">
          ¥
          <text value="undefined" checked="undefined" pressed="undefined">
            ¥
          </text>
        </menuitem>
      </MenuListPopup>
    </combobox>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Please select your currency
      </text>
    </paragraph>
    <label value="undefined" checked="undefined" pressed="undefined">
      Select
      <text value="undefined" checked="undefined" pressed="undefined">
        Select
      </text>
    </label>
    <button
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Select €
      <text value="undefined" checked="undefined" pressed="undefined">
        €
      </text>
    </button>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Please select your currency
      </text>
    </paragraph>
    <label value="undefined" checked="undefined" pressed="undefined">
      Native select
      <text value="undefined" checked="undefined" pressed="undefined">
        Native select
      </text>
    </label>
    <combobox
      description="Please select your currency"
      haspopup="true"
      value="€"
      checked="undefined"
      pressed="undefined"
    >
      Native select
      <MenuListPopup value="undefined" checked="undefined" pressed="undefined">
        <menuitem value="undefined" checked="undefined" pressed="undefined">
          $
          <text value="undefined" checked="undefined" pressed="undefined">
            $
          </text>
        </menuitem>
        <menuitem
          selected="true"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          €
          <text value="undefined" checked="undefined" pressed="undefined">
            €
          </text>
        </menuitem>
        <menuitem value="undefined" checked="undefined" pressed="undefined">
          ฿
          <text value="undefined" checked="undefined" pressed="undefined">
            ฿
          </text>
        </menuitem>
        <menuitem value="undefined" checked="undefined" pressed="undefined">
          ¥
          <text value="undefined" checked="undefined" pressed="undefined">
            ¥
          </text>
        </menuitem>
      </MenuListPopup>
    </combobox>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Please select your currency
      </text>
    </paragraph>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Icons
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Icons
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      There are multiple ways to display an icon with a text field.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    With a start adornment
    <text value="undefined" checked="undefined" pressed="undefined">
      With a start adornment
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <textbox value="undefined" checked="undefined" pressed="undefined">
    With a start adornment
  </textbox>
  <label value="undefined" checked="undefined" pressed="undefined">
    TextField
    <text value="undefined" checked="undefined" pressed="undefined">
      TextField
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <textbox value="undefined" checked="undefined" pressed="undefined">
    TextField
  </textbox>
  <label value="undefined" checked="undefined" pressed="undefined">
    With a grid
    <text value="undefined" checked="undefined" pressed="undefined">
      With a grid
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <textbox value="undefined" checked="undefined" pressed="undefined">
    With a grid
  </textbox>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Input Adornments
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Input Adornments
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The main way is with an InputAdornment. This can be used to add a prefix,
      a suffix or an action to an input. For instance, you can use an icon
      button to hide or reveal the password.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    With normal TextField
    <text value="undefined" checked="undefined" pressed="undefined">
      With normal TextField
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Kg
    </text>
  </paragraph>
  <textbox value="undefined" checked="undefined" pressed="undefined">
    With normal TextField
  </textbox>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <textbox
    description="Weight"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    weight
  </textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Kg
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Weight
    </text>
  </paragraph>
  <label value="undefined" checked="undefined" pressed="undefined">
    Password
    <text value="undefined" checked="undefined" pressed="undefined">
      Password
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <textbox value="undefined" checked="undefined" pressed="undefined">
    Password
  </textbox>
  <button value="undefined" checked="undefined" pressed="undefined">
    toggle password visibility
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Amount
    <text value="undefined" checked="undefined" pressed="undefined">
      Amount
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      $
    </text>
  </paragraph>
  <textbox value="undefined" checked="undefined" pressed="undefined">
    Amount
  </textbox>
  <label value="undefined" checked="undefined" pressed="undefined">
    With normal TextField
    <text value="undefined" checked="undefined" pressed="undefined">
      With normal TextField
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Kg
    </text>
  </paragraph>
  <textbox value="undefined" checked="undefined" pressed="undefined">
    With normal TextField
  </textbox>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <textbox
    description="Weight"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    weight
  </textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Kg
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Weight
    </text>
  </paragraph>
  <label value="undefined" checked="undefined" pressed="undefined">
    Password
    <text value="undefined" checked="undefined" pressed="undefined">
      Password
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <textbox value="undefined" checked="undefined" pressed="undefined">
    Password
  </textbox>
  <button value="undefined" checked="undefined" pressed="undefined">
    toggle password visibility
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Amount
    <text value="undefined" checked="undefined" pressed="undefined">
      Amount
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      $
    </text>
  </paragraph>
  <textbox value="undefined" checked="undefined" pressed="undefined">
    Amount
  </textbox>
  <label value="undefined" checked="undefined" pressed="undefined">
    With normal TextField
    <text value="undefined" checked="undefined" pressed="undefined">
      With normal TextField
    </text>
  </label>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Kg
    </text>
  </paragraph>
  <textbox value="undefined" checked="undefined" pressed="undefined">
    With normal TextField
  </textbox>
  <textbox
    description="Weight"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    weight
  </textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Kg
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Weight
    </text>
  </paragraph>
  <label value="undefined" checked="undefined" pressed="undefined">
    Password
    <text value="undefined" checked="undefined" pressed="undefined">
      Password
    </text>
  </label>
  <textbox value="undefined" checked="undefined" pressed="undefined">
    Password
  </textbox>
  <button value="undefined" checked="undefined" pressed="undefined">
    toggle password visibility
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Amount
    <text value="undefined" checked="undefined" pressed="undefined">
      Amount
    </text>
  </label>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      $
    </text>
  </paragraph>
  <textbox value="undefined" checked="undefined" pressed="undefined">
    Amount
  </textbox>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Sizes
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Sizes
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Fancy smaller inputs? Use the size prop.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <label value="undefined" checked="undefined" pressed="undefined">
      Size
      <text value="undefined" checked="undefined" pressed="undefined">
        Size
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox value="Small" checked="undefined" pressed="undefined">
      Size
      <text value="undefined" checked="undefined" pressed="undefined">
        Small
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Size
      <text value="undefined" checked="undefined" pressed="undefined">
        Size
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox value="Normal" checked="undefined" pressed="undefined">
      Size
      <text value="undefined" checked="undefined" pressed="undefined">
        Normal
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Size
      <text value="undefined" checked="undefined" pressed="undefined">
        Size
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox value="Small" checked="undefined" pressed="undefined">
      Size
      <text value="undefined" checked="undefined" pressed="undefined">
        Small
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Size
      <text value="undefined" checked="undefined" pressed="undefined">
        Size
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox value="Normal" checked="undefined" pressed="undefined">
      Size
      <text value="undefined" checked="undefined" pressed="undefined">
        Normal
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Size
      <text value="undefined" checked="undefined" pressed="undefined">
        Size
      </text>
    </label>
    <textbox value="Small" checked="undefined" pressed="undefined">
      Size
      <text value="undefined" checked="undefined" pressed="undefined">
        Small
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Size
      <text value="undefined" checked="undefined" pressed="undefined">
        Size
      </text>
    </label>
    <textbox value="Normal" checked="undefined" pressed="undefined">
      Size
      <text value="undefined" checked="undefined" pressed="undefined">
        Normal
      </text>
    </textbox>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Layout
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Layout
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      margin prop can be used to alter the vertical spacing of inputs. Using
      none (default) will not apply margins to the FormControl, whereas dense
      and normal will. dense and normal alter other styles to meet the
      specification.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      fullWidth can be used to make the input take up the full width of its
      container.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Label
    <text value="undefined" checked="undefined" pressed="undefined">
      Label
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <textbox
    description="Full width!"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Label
  </textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Full width!
    </text>
  </paragraph>
  <label value="undefined" checked="undefined" pressed="undefined">
    None
    <text value="undefined" checked="undefined" pressed="undefined">
      None
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <textbox
    description="Some important text"
    value="Default Value"
    checked="undefined"
    pressed="undefined"
  >
    None
    <text value="undefined" checked="undefined" pressed="undefined">
      Default Value
    </text>
  </textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Some important text
    </text>
  </paragraph>
  <label value="undefined" checked="undefined" pressed="undefined">
    Dense
    <text value="undefined" checked="undefined" pressed="undefined">
      Dense
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <textbox
    description="Some important text"
    value="Default Value"
    checked="undefined"
    pressed="undefined"
  >
    Dense
    <text value="undefined" checked="undefined" pressed="undefined">
      Default Value
    </text>
  </textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Some important text
    </text>
  </paragraph>
  <label value="undefined" checked="undefined" pressed="undefined">
    Normal
    <text value="undefined" checked="undefined" pressed="undefined">
      Normal
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <textbox
    description="Some important text"
    value="Default Value"
    checked="undefined"
    pressed="undefined"
  >
    Normal
    <text value="undefined" checked="undefined" pressed="undefined">
      Default Value
    </text>
  </textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Some important text
    </text>
  </paragraph>
  <label value="undefined" checked="undefined" pressed="undefined">
    Label
    <text value="undefined" checked="undefined" pressed="undefined">
      Label
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <textbox
    description="Full width!"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Label
  </textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Full width!
    </text>
  </paragraph>
  <label value="undefined" checked="undefined" pressed="undefined">
    None
    <text value="undefined" checked="undefined" pressed="undefined">
      None
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <textbox
    description="Some important text"
    value="Default Value"
    checked="undefined"
    pressed="undefined"
  >
    None
    <text value="undefined" checked="undefined" pressed="undefined">
      Default Value
    </text>
  </textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Some important text
    </text>
  </paragraph>
  <label value="undefined" checked="undefined" pressed="undefined">
    Dense
    <text value="undefined" checked="undefined" pressed="undefined">
      Dense
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <textbox
    description="Some important text"
    value="Default Value"
    checked="undefined"
    pressed="undefined"
  >
    Dense
    <text value="undefined" checked="undefined" pressed="undefined">
      Default Value
    </text>
  </textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Some important text
    </text>
  </paragraph>
  <label value="undefined" checked="undefined" pressed="undefined">
    Normal
    <text value="undefined" checked="undefined" pressed="undefined">
      Normal
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <textbox
    description="Some important text"
    value="Default Value"
    checked="undefined"
    pressed="undefined"
  >
    Normal
    <text value="undefined" checked="undefined" pressed="undefined">
      Default Value
    </text>
  </textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Some important text
    </text>
  </paragraph>
  <label value="undefined" checked="undefined" pressed="undefined">
    Label
    <text value="undefined" checked="undefined" pressed="undefined">
      Label
    </text>
  </label>
  <textbox
    description="Full width!"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    Label
  </textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Full width!
    </text>
  </paragraph>
  <label value="undefined" checked="undefined" pressed="undefined">
    None
    <text value="undefined" checked="undefined" pressed="undefined">
      None
    </text>
  </label>
  <textbox
    description="Some important text"
    value="Default Value"
    checked="undefined"
    pressed="undefined"
  >
    None
    <text value="undefined" checked="undefined" pressed="undefined">
      Default Value
    </text>
  </textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Some important text
    </text>
  </paragraph>
  <label value="undefined" checked="undefined" pressed="undefined">
    Dense
    <text value="undefined" checked="undefined" pressed="undefined">
      Dense
    </text>
  </label>
  <textbox
    description="Some important text"
    value="Default Value"
    checked="undefined"
    pressed="undefined"
  >
    Dense
    <text value="undefined" checked="undefined" pressed="undefined">
      Default Value
    </text>
  </textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Some important text
    </text>
  </paragraph>
  <label value="undefined" checked="undefined" pressed="undefined">
    Normal
    <text value="undefined" checked="undefined" pressed="undefined">
      Normal
    </text>
  </label>
  <textbox
    description="Some important text"
    value="Default Value"
    checked="undefined"
    pressed="undefined"
  >
    Normal
    <text value="undefined" checked="undefined" pressed="undefined">
      Default Value
    </text>
  </textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Some important text
    </text>
  </paragraph>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Uncontrolled vs Controlled
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Uncontrolled vs Controlled
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The component can be controlled or uncontrolled.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <label value="undefined" checked="undefined" pressed="undefined">
      Name
      <text value="undefined" checked="undefined" pressed="undefined">
        Name
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox value="Cat in the Hat" checked="undefined" pressed="undefined">
      Name
      <text value="undefined" checked="undefined" pressed="undefined">
        Cat in the Hat
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Uncontrolled
      <text value="undefined" checked="undefined" pressed="undefined">
        Uncontrolled
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox value="foo" checked="undefined" pressed="undefined">
      Uncontrolled
      <text value="undefined" checked="undefined" pressed="undefined">
        foo
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Name
      <text value="undefined" checked="undefined" pressed="undefined">
        Name
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox value="Cat in the Hat" checked="undefined" pressed="undefined">
      Name
      <text value="undefined" checked="undefined" pressed="undefined">
        Cat in the Hat
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Uncontrolled
      <text value="undefined" checked="undefined" pressed="undefined">
        Uncontrolled
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox value="foo" checked="undefined" pressed="undefined">
      Uncontrolled
      <text value="undefined" checked="undefined" pressed="undefined">
        foo
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Name
      <text value="undefined" checked="undefined" pressed="undefined">
        Name
      </text>
    </label>
    <textbox value="Cat in the Hat" checked="undefined" pressed="undefined">
      Name
      <text value="undefined" checked="undefined" pressed="undefined">
        Cat in the Hat
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Uncontrolled
      <text value="undefined" checked="undefined" pressed="undefined">
        Uncontrolled
      </text>
    </label>
    <textbox value="foo" checked="undefined" pressed="undefined">
      Uncontrolled
      <text value="undefined" checked="undefined" pressed="undefined">
        foo
      </text>
    </textbox>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Components
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Components
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      TextField is composed of smaller components (
    </text>
    <link checked="undefined" pressed="undefined">
      FormControl
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      ,
    </text>
    <link checked="undefined" pressed="undefined">
      Input
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      ,
    </text>
    <link checked="undefined" pressed="undefined">
      FilledInput
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      ,
    </text>
    <link checked="undefined" pressed="undefined">
      InputLabel
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      ,
    </text>
    <link checked="undefined" pressed="undefined">
      OutlinedInput
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      , and
    </text>
    <link checked="undefined" pressed="undefined">
      FormHelperText
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      ) that you can leverage directly to significantly customize your form
      inputs.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You might also have noticed that some native HTML input properties are
      missing from the TextField component. This is on purpose. The component
      takes care of the most used properties, then it's up to the user to
      use the underlying component shown in the following demo. Still, you can
      use inputProps (and InputProps, InputLabelProps properties) if you want to
      avoid some boilerplate.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <label value="undefined" checked="undefined" pressed="undefined">
      Name
      <text value="undefined" checked="undefined" pressed="undefined">
        Name
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox value="Composed TextField" checked="undefined" pressed="undefined">
      Name
      <text value="undefined" checked="undefined" pressed="undefined">
        Composed TextField
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Name
      <text value="undefined" checked="undefined" pressed="undefined">
        Name
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox
      description="Some important helper text"
      value="Composed TextField"
      checked="undefined"
      pressed="undefined"
    >
      Name
      <text value="undefined" checked="undefined" pressed="undefined">
        Composed TextField
      </text>
    </textbox>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Some important helper text
      </text>
    </paragraph>
    <label value="undefined" checked="undefined" pressed="undefined">
      Name
      <text value="undefined" checked="undefined" pressed="undefined">
        Name
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox
      disabled="true"
      value="Composed TextField"
      checked="undefined"
      pressed="undefined"
    >
      Name
      <text value="undefined" checked="undefined" pressed="undefined">
        Composed TextField
      </text>
    </textbox>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Disabled
      </text>
    </paragraph>
    <label value="undefined" checked="undefined" pressed="undefined">
      Name
      <text value="undefined" checked="undefined" pressed="undefined">
        Name
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox
      description="Error"
      invalid="true"
      value="Composed TextField"
      checked="undefined"
      pressed="undefined"
    >
      Name
      <text value="undefined" checked="undefined" pressed="undefined">
        Composed TextField
      </text>
    </textbox>
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        Error
      </text>
    </paragraph>
    <label value="undefined" checked="undefined" pressed="undefined">
      Name
      <text value="undefined" checked="undefined" pressed="undefined">
        Name
      </text>
    </label>
    <textbox value="Composed TextField" checked="undefined" pressed="undefined">
      Name
      <text value="undefined" checked="undefined" pressed="undefined">
        Composed TextField
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Name
      <text value="undefined" checked="undefined" pressed="undefined">
        Name
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox value="Composed TextField" checked="undefined" pressed="undefined">
      Name
      <text value="undefined" checked="undefined" pressed="undefined">
        Composed TextField
      </text>
    </textbox>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Inputs
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Inputs
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox value="Hello world" checked="undefined" pressed="undefined">
      description
      <text value="undefined" checked="undefined" pressed="undefined">
        Hello world
      </text>
    </textbox>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      description
    </textbox>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox
      disabled="true"
      value="Disabled"
      checked="undefined"
      pressed="undefined"
    >
      description
      <text value="undefined" checked="undefined" pressed="undefined">
        Disabled
      </text>
    </textbox>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox
      invalid="true"
      value="Error"
      checked="undefined"
      pressed="undefined"
    >
      description
      <text value="undefined" checked="undefined" pressed="undefined">
        Error
      </text>
    </textbox>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Color
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Color
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The color prop changes the highlight color of the text field when focused.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <label value="undefined" checked="undefined" pressed="undefined">
      Standard secondary
      <text value="undefined" checked="undefined" pressed="undefined">
        Standard secondary
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      Standard secondary
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Filled secondary
      <text value="undefined" checked="undefined" pressed="undefined">
        Filled secondary
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      Filled secondary
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Outlined secondary
      <text value="undefined" checked="undefined" pressed="undefined">
        Outlined secondary
      </text>
    </label>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      Outlined secondary
    </textbox>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Customized inputs
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Customized inputs
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <label value="undefined" checked="undefined" pressed="undefined">
      Custom CSS
      <text value="undefined" checked="undefined" pressed="undefined">
        Custom CSS
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      Custom CSS
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Custom CSS
      <text value="undefined" checked="undefined" pressed="undefined">
        Custom CSS
      </text>
    </label>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      Custom CSS
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      ThemeProvider
      <text value="undefined" checked="undefined" pressed="undefined">
        ThemeProvider
      </text>
    </label>
    <statictext value="undefined" checked="undefined" pressed="undefined">
       
    </statictext>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      ThemeProvider
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      ThemeProvider
      <text value="undefined" checked="undefined" pressed="undefined">
        ThemeProvider
      </text>
    </label>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      ThemeProvider
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Bootstrap
      <text value="undefined" checked="undefined" pressed="undefined">
        Bootstrap
      </text>
    </label>
    <textbox value="react-bootstrap" checked="undefined" pressed="undefined">
      Bootstrap
      <text value="undefined" checked="undefined" pressed="undefined">
        react-bootstrap
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      Reddit
      <text value="undefined" checked="undefined" pressed="undefined">
        Reddit
      </text>
    </label>
    <textbox value="react-reddit" checked="undefined" pressed="undefined">
      Reddit
      <text value="undefined" checked="undefined" pressed="undefined">
        react-reddit
      </text>
    </textbox>
    <textbox value="Naked input" checked="undefined" pressed="undefined">
      naked
      <text value="undefined" checked="undefined" pressed="undefined">
        Naked input
      </text>
    </textbox>
    <label value="undefined" checked="undefined" pressed="undefined">
      CSS validation style
      <text value="undefined" checked="undefined" pressed="undefined">
        CSS validation style
      </text>
    </label>
    <textbox
      required="true"
      value="Success"
      checked="undefined"
      pressed="undefined"
    >
      CSS validation style
      <text value="undefined" checked="undefined" pressed="undefined">
        Success
      </text>
    </textbox>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Customization does not stop at CSS, you can use composition to build
      custom components and give your app a unique feel. Below is an example
      using the
    </text>
    <link checked="undefined" pressed="undefined">
      InputBase
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      component, inspired by Google Maps.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <form value="undefined" checked="undefined" pressed="undefined">
    <button value="undefined" checked="undefined" pressed="undefined">
      menu
    </button>
    <textbox value="undefined" checked="undefined" pressed="undefined">
      search google maps
    </textbox>
    <button value="undefined" checked="undefined" pressed="undefined">
      search
    </button>
    <separator
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></separator>
    <button value="undefined" checked="undefined" pressed="undefined">
      directions
    </button>
  </form>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      🎨 If you are looking for inspiration, you can check
    </text>
    <link checked="undefined" pressed="undefined">
      MUI Treasury's customization examples
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Limitations
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Limitations
    </text>
  </heading>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Shrink
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Shrink
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The input label "shrink" state isn't always correct. The
      input label is supposed to shrink as soon as the input is displaying
      something. In some circumstances, we can't determine the
      "shrink" state (number input, datetime input, Stripe input). You
      might notice an overlap.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <img value="undefined" checked="undefined" pressed="undefined">
      shrink
    </img>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      To workaround the issue, you can force the "shrink" state of the
      label.
    </text>
  </paragraph>
  <text value="undefined" checked="undefined" pressed="undefined">
    <TextField InputLabelProps={{ shrink: true }} />
  </text>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      or
    </text>
  </paragraph>
  <text value="undefined" checked="undefined" pressed="undefined">
    <InputLabel shrink>Count</InputLabel>
  </text>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Floating label
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Floating label
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The floating label is absolutely positioned, it won't impact the
      layout of the page. You need to make sure that the input is larger than
      the label to display correctly.
    </text>
  </paragraph>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    type="number"
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      type="number"
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Inputs of type="number" have potential usability issues:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Allowing certain non-numeric characters ('e', '+',
      '-', '.') and silently discarding others
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Allowing certain non-numeric characters ('e', '+',
        '-', '.') and silently discarding others
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • The functionality of scrolling to increment/decrement the number can
      cause accidental and hard-to-notice changes
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        The functionality of scrolling to increment/decrement the number can
        cause accidental and hard-to-notice changes
      </text>
    </listitem>
  </list>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      and more - see
    </text>
    <link checked="undefined" pressed="undefined">
      this article
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      by the GOV.UK Design System team for a more detailed explanation.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      For number validation, one viable alternative is to use the default input
      type="text" with the pattern attribute, for example:
    </text>
  </paragraph>
  <text value="undefined" checked="undefined" pressed="undefined">
    <TextField inputProps={{ inputMode: 'numeric',
    pattern: '[0-9]*' }} />
  </text>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      In the future, we might provide a
    </text>
    <link checked="undefined" pressed="undefined">
      number input component
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Helper text
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Helper text
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The helper text prop affects the height of the text field. If two text
      fields are placed side by side, one with a helper text and one without,
      they will have different heights. For example:
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Name
    <text value="undefined" checked="undefined" pressed="undefined">
      Name
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <textbox value="undefined" checked="undefined" pressed="undefined"></textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Please enter your name
    </text>
  </paragraph>
  <label value="undefined" checked="undefined" pressed="undefined">
    Name
    <text value="undefined" checked="undefined" pressed="undefined">
      Name
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <textbox value="undefined" checked="undefined" pressed="undefined"></textbox>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <TextField helperText="Please enter your name"
    label="Name" /> <TextField label="Name" />
  </text>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      This can be fixed by passing a space character to the helperText prop:
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Name
    <text value="undefined" checked="undefined" pressed="undefined">
      Name
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <textbox value="undefined" checked="undefined" pressed="undefined"></textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Please enter your name
    </text>
  </paragraph>
  <label value="undefined" checked="undefined" pressed="undefined">
    Name
    <text value="undefined" checked="undefined" pressed="undefined">
      Name
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <textbox value="undefined" checked="undefined" pressed="undefined"></textbox>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      ​
    </text>
  </paragraph>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <TextField helperText="Please enter your name"
    label="Name" /> <TextField helperText=" "
    label="Name" />
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Integration with 3rd party input libraries
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Integration with 3rd party input libraries
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can use third-party libraries to format an input. You have to provide
      a custom implementation of the <input> element with the
      inputComponent property.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The following demo uses the
    </text>
    <link checked="undefined" pressed="undefined">
      react-text-mask
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      and
    </text>
    <link checked="undefined" pressed="undefined">
      react-number-format
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      libraries. The same concept could be applied to
    </text>
    <link checked="undefined" pressed="undefined">
      e.g. react-stripe-element
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    react-text-mask
    <text value="undefined" checked="undefined" pressed="undefined">
      react-text-mask
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <textbox value="(1  )    -    " checked="undefined" pressed="undefined">
    react-text-mask
    <text value="undefined" checked="undefined" pressed="undefined">
      (1  )    -    
    </text>
  </textbox>
  <label value="undefined" checked="undefined" pressed="undefined">
    react-number-format
    <text value="undefined" checked="undefined" pressed="undefined">
      react-number-format
    </text>
  </label>
  <statictext value="undefined" checked="undefined" pressed="undefined">
     
  </statictext>
  <textbox value="$1,320" checked="undefined" pressed="undefined">
    react-number-format
    <text value="undefined" checked="undefined" pressed="undefined">
      $1,320
    </text>
  </textbox>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The provided input component should handle the inputRef property. The
      property should be called with a value that implements the following
      interface:
    </text>
  </paragraph>
  <text value="undefined" checked="undefined" pressed="undefined">
    interface InputElement { focus(): void; value?: string; }function
    MyInputComponent(props) { const { component: Component, inputRef,
    ...other } = props; // implement \`InputElement\` interface
    React.useImperativeHandle(inputRef, () => ({ focus: () => {
    // logic to focus the rendered component from 3rd party belongs here },
    // hiding the value e.g. react-stripe-elements })); // \`Component\` will
    be your \`SomeThirdPartyComponent\` from below return <Component
    {...other} />; } // usage <TextField
    InputProps={{ inputComponent: MyInputComponent, inputProps: {
    component: SomeThirdPartyComponent, }, }} />;
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Accessibility
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Accessibility
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      In order for the text field to be accessible, the input should be linked
      to the label and the helper text. The underlying DOM nodes should have
      this structure:
    </text>
  </paragraph>
  <text value="undefined" checked="undefined" pressed="undefined">
    <div class="form-control"> <label
    for="my-input">Email address</label> <input
    id="my-input" aria-describedby="my-helper-text" />
    <span id="my-helper-text">We'll never share your
    email.</span> </div>
  </text>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • If you are using the TextField component, you just have to provide a
      unique id .
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        If you are using the TextField component, you just have to provide a
        unique id.
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • If you are composing the component:
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        If you are composing the component:
      </text>
    </listitem>
  </list>
  <text value="undefined" checked="undefined" pressed="undefined">
    <FormControl> <InputLabel htmlFor="my-input">Email
    address</InputLabel> <Input id="my-input"
    aria-describedby="my-helper-text" /> <FormHelperText
    id="my-helper-text"> We'll never share your email.
    </FormHelperText> </FormControl>
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Complementary projects
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Complementary projects
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      For more advanced use cases you might be able to take advantage of:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • react-hook-form : React hook for form validation.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        react-hook-form
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        : React hook for form validation.
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • formik-material-ui : Bindings for using Material-UI with formik .
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        formik-material-ui
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        : Bindings for using Material-UI with
      </text>
      <link checked="undefined" pressed="undefined">
        formik
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        .
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • redux-form-material-ui : Bindings for using Material-UI with Redux Form
      .
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        redux-form-material-ui
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        : Bindings for using Material-UI with
      </text>
      <link checked="undefined" pressed="undefined">
        Redux Form
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        .
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • mui-rff : Bindings for using Material-UI with React Final Form .
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        mui-rff
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        : Bindings for using Material-UI with
      </text>
      <link checked="undefined" pressed="undefined">
        React Final Form
      </link>
      <text value="undefined" checked="undefined" pressed="undefined">
        .
      </text>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <FilledInput />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <FilledInput />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <FormControl />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <FormControl />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <FormHelperText />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <FormHelperText />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <Input />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <Input />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <InputAdornment />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <InputAdornment />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <InputBase />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <InputBase />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <InputLabel />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <InputLabel />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <OutlinedInput />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <OutlinedInput />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <TextField />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <TextField />
      </link>
    </listitem>
  </list>
  <separator
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></separator>
  <link checked="undefined" pressed="undefined">
    Switch
  </link>
  <link checked="undefined" pressed="undefined">
    Transfer List
  </link>
</landmark>;

`;

exports[`firefox /components/tooltips/ 1`] = `
<landmark value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Tooltip
    <text value="undefined" checked="undefined" pressed="undefined">
      Tooltip
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Tooltips display informative text when users hover over, focus on, or tap
      an element.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      When activated, Tooltips display a text label identifying an element, such
      as a description of its function.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      WAI-ARIA
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Bundle size
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Material Design
      <link checked="undefined" pressed="undefined">
        Material Design
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Basic tooltip
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Basic tooltip
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button
    description="Delete"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    delete
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    add
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    add
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Tooltip title="Delete"> <IconButton
    aria-label="delete"> <DeleteIcon /> </IconButton>
    </Tooltip> <Tooltip title="Add"
    aria-label="add"> <Fab color="primary"
    className={classes.fab}> <AddIcon /> </Fab>
    </Tooltip> <Tooltip title="Add"
    aria-label="add"> <Fab color="secondary"
    className={classes.absolute}> <AddIcon /> </Fab>
    </Tooltip>
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Positioned Tooltips
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Positioned Tooltips
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The Tooltip has 12 placements choice. They don’t have directional arrows;
      instead, they rely on motion emanating from the source to convey
      direction.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    TOP-START
    <text value="undefined" checked="undefined" pressed="undefined">
      TOP-START
    </text>
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    TOP
    <text value="undefined" checked="undefined" pressed="undefined">
      TOP
    </text>
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    TOP-END
    <text value="undefined" checked="undefined" pressed="undefined">
      TOP-END
    </text>
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    LEFT-START
    <text value="undefined" checked="undefined" pressed="undefined">
      LEFT-START
    </text>
  </button>
  <whitespace
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></whitespace>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    LEFT
    <text value="undefined" checked="undefined" pressed="undefined">
      LEFT
    </text>
  </button>
  <whitespace
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></whitespace>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    LEFT-END
    <text value="undefined" checked="undefined" pressed="undefined">
      LEFT-END
    </text>
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    RIGHT-START
    <text value="undefined" checked="undefined" pressed="undefined">
      RIGHT-START
    </text>
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    RIGHT
    <text value="undefined" checked="undefined" pressed="undefined">
      RIGHT
    </text>
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    RIGHT-END
    <text value="undefined" checked="undefined" pressed="undefined">
      RIGHT-END
    </text>
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    BOTTOM-START
    <text value="undefined" checked="undefined" pressed="undefined">
      BOTTOM-START
    </text>
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    BOTTOM
    <text value="undefined" checked="undefined" pressed="undefined">
      BOTTOM
    </text>
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    BOTTOM-END
    <text value="undefined" checked="undefined" pressed="undefined">
      BOTTOM-END
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Customized tooltips
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Customized tooltips
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Here are some examples of customizing the component. You can learn more
      about this in the
    </text>
    <link checked="undefined" pressed="undefined">
      overrides documentation page
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      .
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    LIGHT
    <text value="undefined" checked="undefined" pressed="undefined">
      LIGHT
    </text>
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    BOOTSTRAP
    <text value="undefined" checked="undefined" pressed="undefined">
      BOOTSTRAP
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    HTML
    <text value="undefined" checked="undefined" pressed="undefined">
      HTML
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Arrow Tooltips
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Arrow Tooltips
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can use the arrow prop to give your tooltip an arrow indicating which
      element it refers to.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    ARROW
    <text value="undefined" checked="undefined" pressed="undefined">
      ARROW
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Tooltip title="Add" arrow>
    <Button>Arrow</Button> </Tooltip>
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Custom child element
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Custom child element
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The tooltip needs to apply DOM event listeners to its child element. If
      the child is a custom React element, you need to make sure that it spreads
      its props to the underlying DOM element.
    </text>
  </paragraph>
  <text value="undefined" checked="undefined" pressed="undefined">
    const MyComponent = React.forwardRef(function MyComponent(props, ref) {
    // Spread the props to the underlying DOM element. return <div
    {...props} ref={ref}>Bin</div> }); // ...
    <Tooltip title="Delete"> <MyComponent>
    </Tooltip>
  </text>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can find a similar concept in the
    </text>
    <link checked="undefined" pressed="undefined">
      wrapping components
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      guide.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Triggers
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Triggers
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can define the types of events that cause a tooltip to show.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    HOVER OR TOUCH
    <text value="undefined" checked="undefined" pressed="undefined">
      HOVER OR TOUCH
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    FOCUS OR TOUCH
    <text value="undefined" checked="undefined" pressed="undefined">
      FOCUS OR TOUCH
    </text>
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    HOVER
    <text value="undefined" checked="undefined" pressed="undefined">
      HOVER
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    CLICK
    <text value="undefined" checked="undefined" pressed="undefined">
      CLICK
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Controlled Tooltips
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Controlled Tooltips
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      You can use the open, onOpen and onClose props to control the behavior of
      the tooltip.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    CONTROLLED
    <text value="undefined" checked="undefined" pressed="undefined">
      CONTROLLED
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Tooltip open={open} onClose={handleClose}
    onOpen={handleOpen} title="Add">
    <Button>Controlled</Button> </Tooltip>
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Variable Width
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Variable Width
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The Tooltip wraps long text by default to make it readable.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button
    description="Aliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est, vel aliquam tellus. Praesent non nunc mollis, fermentum neque at, semper arcu. Nullam eget est sed sem iaculis gravida eget vitae justo."
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    DEFAULT WIDTH [300PX]
    <text value="undefined" checked="undefined" pressed="undefined">
      DEFAULT WIDTH [300PX]
    </text>
  </button>
  <button
    description="Aliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est, vel aliquam tellus. Praesent non nunc mollis, fermentum neque at, semper arcu. Nullam eget est sed sem iaculis gravida eget vitae justo."
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    CUSTOM WIDTH [500PX]
    <text value="undefined" checked="undefined" pressed="undefined">
      CUSTOM WIDTH [500PX]
    </text>
  </button>
  <button
    description="Aliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est, vel aliquam tellus. Praesent non nunc mollis, fermentum neque at, semper arcu. Nullam eget est sed sem iaculis gravida eget vitae justo."
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    NO WRAPPING
    <text value="undefined" checked="undefined" pressed="undefined">
      NO WRAPPING
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Tooltip title={longText}> <Button
    className={classes.button}>Default Width [300px]</Button>
    </Tooltip> <Tooltip title={longText} classes={{
    tooltip: classes.customWidth }}> <Button
    className={classes.button}>Custom Width [500px]</Button>
    </Tooltip> <Tooltip title={longText} classes={{
    tooltip: classes.noMaxWidth }}> <Button
    className={classes.button}>No wrapping</Button>
    </Tooltip>
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Interactive
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Interactive
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      A tooltip can be interactive. It won't close when the user hovers
      over the tooltip before the leaveDelay is expired.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    INTERACTIVE
    <text value="undefined" checked="undefined" pressed="undefined">
      INTERACTIVE
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Tooltip title="Add" interactive>
    <Button>Interactive</Button> </Tooltip>
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Disabled Elements
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Disabled Elements
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      By default disabled elements like <button> do not trigger user
      interactions so a Tooltip will not activate on normal events like hover.
      To accommodate disabled elements, add a simple wrapper element, such as a
      span.
    </text>
  </paragraph>
  <blockquote value="undefined" checked="undefined" pressed="undefined">
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        ⚠️ In order to work with Safari, you need at least one display block or
        flex item below the tooltip wrapper.
      </text>
    </paragraph>
  </blockquote>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    A DISABLED BUTTON
    <text value="undefined" checked="undefined" pressed="undefined">
      A DISABLED BUTTON
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Tooltip title="You don't have permission to do this">
    <span> <Button disabled>A Disabled Button</Button>
    </span> </Tooltip>
  </text>
  <blockquote value="undefined" checked="undefined" pressed="undefined">
    <paragraph value="undefined" checked="undefined" pressed="undefined">
      <text value="undefined" checked="undefined" pressed="undefined">
        If you're not wrapping a Material-UI component that inherits from
        ButtonBase, for instance, a native <button> element, you should
        also add the CSS property pointer-events: none; to your element when
        disabled:
      </text>
    </paragraph>
  </blockquote>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Tooltip title="You don't have permission to do this">
    <span> <button disabled={disabled} style={disabled ?
    { pointerEvents: 'none' } : {}} >
    {'A disabled button'} </button> </span>
    </Tooltip>
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Transitions
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Transitions
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Use a different transition.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    GROW
    <text value="undefined" checked="undefined" pressed="undefined">
      GROW
    </text>
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    FADE
    <text value="undefined" checked="undefined" pressed="undefined">
      FADE
    </text>
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    ZOOM
    <text value="undefined" checked="undefined" pressed="undefined">
      ZOOM
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Tooltip title="Add"> <Button>Grow</Button>
    </Tooltip> <Tooltip TransitionComponent={Fade}
    TransitionProps={{ timeout: 600 }} title="Add"
    > <Button>Fade</Button> </Tooltip> <Tooltip
    TransitionComponent={Zoom} title="Add">
    <Button>Zoom</Button> </Tooltip>
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Showing and hiding
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Showing and hiding
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The tooltip is normally shown immediately when the user's mouse
      hovers over the element, and hides immediately when the user's mouse
      leaves. A delay in showing or hiding the tooltip can be added through the
      enterDelay and leaveDelay props, as shown in the Controlled Tooltips demo
      above.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      On mobile, the tooltip is displayed when the user longpresses the element
      and hides after a delay of 1500ms. You can disable this feature with the
      disableTouchListener prop.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button
    description="Add"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    [500MS, 200MS]
    <text value="undefined" checked="undefined" pressed="undefined">
      [500MS, 200MS]
    </text>
  </button>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the full source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <text value="undefined" checked="undefined" pressed="undefined">
    <Tooltip title="Add" enterDelay={500}
    leaveDelay={200}> <Button>[500ms, 200ms]</Button>
    </Tooltip>
  </text>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <Tooltip />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <Tooltip />
      </link>
    </listitem>
  </list>
  <separator
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></separator>
  <link checked="undefined" pressed="undefined">
    Table
  </link>
  <link checked="undefined" pressed="undefined">
    Typography
  </link>
</landmark>;

`;

exports[`firefox /components/transfer-list 1`] = `
<landmark value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Transfer List
    <text value="undefined" checked="undefined" pressed="undefined">
      Transfer List
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      A transfer list (or "shuttle") enables the user to move one or
      more list items between lists.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Simple Transfer List
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Simple Transfer List
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      For completeness, this example includes buttons for "move all",
      but not every transfer list needs these.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      List item 1
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        List item 1
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 1
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      List item 2
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        List item 2
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 2
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      List item 3
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        List item 3
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 3
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      List item 4
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        List item 4
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 4
      </text>
    </listitem>
    <listitem
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></listitem>
  </list>
  <button value="undefined" checked="undefined" pressed="undefined">
    move all right
    <text value="undefined" checked="undefined" pressed="undefined">
      ≫
    </text>
  </button>
  <button
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    move selected right
    <text value="undefined" checked="undefined" pressed="undefined">
      >
    </text>
  </button>
  <button
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    move selected left
    <text value="undefined" checked="undefined" pressed="undefined">
      <
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    move all left
    <text value="undefined" checked="undefined" pressed="undefined">
      ≪
    </text>
  </button>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      List item 5
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        List item 5
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 5
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      List item 6
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        List item 6
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 6
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      List item 7
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        List item 7
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 7
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      List item 8
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        List item 8
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 8
      </text>
    </listitem>
    <listitem
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></listitem>
  </list>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Enhanced Transfer List
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Enhanced Transfer List
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      This example exchanges the "move all" buttons for a "select
      all / select none" checkbox, and adds a counter.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <checkbox value="undefined" checked="undefined" pressed="undefined">
    all items selected
  </checkbox>
  <text value="undefined" checked="undefined" pressed="undefined">
    Choices0/4 selected
  </text>
  <separator
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></separator>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      List item 1
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        List item 1
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 1
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      List item 2
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        List item 2
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 2
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      List item 3
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        List item 3
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 3
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      List item 4
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        List item 4
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 4
      </text>
    </listitem>
    <listitem
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></listitem>
  </list>
  <button
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    move selected right
    <text value="undefined" checked="undefined" pressed="undefined">
      >
    </text>
  </button>
  <button
    disabled="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    move selected left
    <text value="undefined" checked="undefined" pressed="undefined">
      <
    </text>
  </button>
  <checkbox value="undefined" checked="undefined" pressed="undefined">
    all items selected
  </checkbox>
  <text value="undefined" checked="undefined" pressed="undefined">
    Chosen0/4 selected
  </text>
  <separator
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></separator>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      List item 5
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        List item 5
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 5
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      List item 6
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        List item 6
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 6
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      List item 7
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        List item 7
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 7
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      List item 8
      <checkbox value="undefined" checked="undefined" pressed="undefined">
        List item 8
      </checkbox>
      <text value="undefined" checked="undefined" pressed="undefined">
        List item 8
      </text>
    </listitem>
    <listitem
      value="undefined"
      checked="undefined"
      pressed="undefined"
    ></listitem>
  </list>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <Checkbox />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <Checkbox />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <List />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <List />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <ListItem />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <ListItem />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <Switch />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <Switch />
      </link>
    </listitem>
  </list>
  <separator
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></separator>
  <link checked="undefined" pressed="undefined">
    Text Field
  </link>
  <link checked="undefined" pressed="undefined">
    Bottom Navigation
  </link>
</landmark>;

`;

exports[`firefox /components/tree-view/ 1`] = `
<landmark value="undefined" checked="undefined" pressed="undefined">
  <link checked="undefined" pressed="undefined">
    EDIT THIS PAGE
  </link>
  <heading level="1" value="undefined" checked="undefined" pressed="undefined">
    Tree View
    <text value="undefined" checked="undefined" pressed="undefined">
      Tree View
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      A tree view widget presents a hierarchical list.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Tree views can be used to represent a file system navigator displaying
      folders and files, an item representing a folder can be expanded to reveal
      the contents of the folder, which may be files, folders, or both.
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Feedback
      <link checked="undefined" pressed="undefined">
        Feedback
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      WAI-ARIA
      <link checked="undefined" pressed="undefined">
        WAI-ARIA
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Bundle size
      <link
        description="Scroll down to 'Exports Analysis' for a more detailed report."
        checked="undefined"
        pressed="undefined"
      >
        Bundle size
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Sketch
      <link checked="undefined" pressed="undefined">
        Sketch
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      Figma
      <link checked="undefined" pressed="undefined">
        Figma
      </link>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Basic tree view
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Basic tree view
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree value="undefined" checked="undefined" pressed="undefined">
    file system navigator
    <treeitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Applications
      <text value="undefined" checked="undefined" pressed="undefined">
        Applications
      </text>
    </treeitem>
    <treeitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Documents
      <text value="undefined" checked="undefined" pressed="undefined">
        Documents
      </text>
    </treeitem>
  </tree>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Multi-selection
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Multi-selection
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Tree views also support multi-selection.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree
    multiselectable="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    multi-select
    <treeitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Applications
      <text value="undefined" checked="undefined" pressed="undefined">
        Applications
      </text>
    </treeitem>
    <treeitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Documents
      <text value="undefined" checked="undefined" pressed="undefined">
        Documents
      </text>
    </treeitem>
  </tree>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Controlled tree view
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Controlled tree view
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The tree view also offers a controlled API.
    </text>
  </paragraph>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    EXPAND ALL
    <text value="undefined" checked="undefined" pressed="undefined">
      EXPAND ALL
    </text>
  </button>
  <button value="undefined" checked="undefined" pressed="undefined">
    SELECT ALL
    <text value="undefined" checked="undefined" pressed="undefined">
      SELECT ALL
    </text>
  </button>
  <tree
    multiselectable="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    controlled
    <treeitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Applications
      <text value="undefined" checked="undefined" pressed="undefined">
        Applications
      </text>
    </treeitem>
    <treeitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Documents
      <text value="undefined" checked="undefined" pressed="undefined">
        Documents
      </text>
    </treeitem>
  </tree>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Rich object
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Rich object
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      While the TreeView/TreeItem component API maximizes flexibility, an extra
      step is needed to handle a rich object.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      Let's consider a data variable with the following shape, recursion
      can be used to handle it.
    </text>
  </paragraph>
  <text value="undefined" checked="undefined" pressed="undefined">
    const data = { id: 'root', name: 'Parent',
    children: [ { id: '1', name: 'Child - 1', },
    // … ], };
  </text>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree value="undefined" checked="undefined" pressed="undefined">
    rich object
    <treeitem
      expanded="true"
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Parent
      <text value="undefined" checked="undefined" pressed="undefined">
        Parent
      </text>
      <group value="undefined" checked="undefined" pressed="undefined">
        <treeitem
          level="2"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Child - 1
          <text value="undefined" checked="undefined" pressed="undefined">
            Child - 1
          </text>
        </treeitem>
        <treeitem
          level="2"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Child - 3
          <text value="undefined" checked="undefined" pressed="undefined">
            Child - 3
          </text>
        </treeitem>
      </group>
    </treeitem>
  </tree>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Customized tree view
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Customized tree view
    </text>
  </heading>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Custom icons, border and animation
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Custom icons, border and animation
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree value="undefined" checked="undefined" pressed="undefined">
    customized
    <treeitem
      expanded="true"
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Main
      <text value="undefined" checked="undefined" pressed="undefined">
        Main
      </text>
      <group value="undefined" checked="undefined" pressed="undefined">
        <treeitem
          level="2"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Hello
          <text value="undefined" checked="undefined" pressed="undefined">
            Hello
          </text>
        </treeitem>
        <treeitem
          level="2"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Subtree with children
          <text value="undefined" checked="undefined" pressed="undefined">
            Subtree with children
          </text>
        </treeitem>
        <treeitem
          level="2"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          World
          <text value="undefined" checked="undefined" pressed="undefined">
            World
          </text>
        </treeitem>
        <treeitem
          level="2"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Something something
          <text value="undefined" checked="undefined" pressed="undefined">
            Something something
          </text>
        </treeitem>
      </group>
    </treeitem>
  </tree>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="3" value="undefined" checked="undefined" pressed="undefined">
    Gmail clone
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Gmail clone
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <tree value="undefined" checked="undefined" pressed="undefined">
    gmail
    <treeitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      All Mail
      <paragraph value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          All Mail
        </text>
      </paragraph>
    </treeitem>
    <treeitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Trash
      <paragraph value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Trash
        </text>
      </paragraph>
    </treeitem>
    <treeitem
      expanded="true"
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Categories
      <paragraph value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          Categories
        </text>
      </paragraph>
      <group value="undefined" checked="undefined" pressed="undefined">
        <treeitem
          level="2"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Social 90
          <paragraph value="undefined" checked="undefined" pressed="undefined">
            <text value="undefined" checked="undefined" pressed="undefined">
              Social
            </text>
          </paragraph>
          <text value="undefined" checked="undefined" pressed="undefined">
            90
          </text>
        </treeitem>
        <treeitem
          level="2"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Updates 2,294
          <paragraph value="undefined" checked="undefined" pressed="undefined">
            <text value="undefined" checked="undefined" pressed="undefined">
              Updates
            </text>
          </paragraph>
          <text value="undefined" checked="undefined" pressed="undefined">
            2,294
          </text>
        </treeitem>
        <treeitem
          level="2"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Forums 3,566
          <paragraph value="undefined" checked="undefined" pressed="undefined">
            <text value="undefined" checked="undefined" pressed="undefined">
              Forums
            </text>
          </paragraph>
          <text value="undefined" checked="undefined" pressed="undefined">
            3,566
          </text>
        </treeitem>
        <treeitem
          level="2"
          value="undefined"
          checked="undefined"
          pressed="undefined"
        >
          Promotions 733
          <paragraph value="undefined" checked="undefined" pressed="undefined">
            <text value="undefined" checked="undefined" pressed="undefined">
              Promotions
            </text>
          </paragraph>
          <text value="undefined" checked="undefined" pressed="undefined">
            733
          </text>
        </treeitem>
      </group>
    </treeitem>
    <treeitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      History
      <paragraph value="undefined" checked="undefined" pressed="undefined">
        <text value="undefined" checked="undefined" pressed="undefined">
          History
        </text>
      </paragraph>
    </treeitem>
  </tree>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Disabled tree items
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Disabled tree items
    </text>
  </heading>
  <button value="undefined" checked="undefined" pressed="undefined">
    A generic container that is programmatically focused to test keyboard
    navigation of our components.
  </button>
  <label value="undefined" checked="undefined" pressed="undefined">
    Focus disabled items
    <checkbox value="undefined" checked="undefined" pressed="undefined">
      Focus disabled items
    </checkbox>
    <text value="undefined" checked="undefined" pressed="undefined">
      Focus disabled items
    </text>
  </label>
  <tree
    multiselectable="true"
    value="undefined"
    checked="undefined"
    pressed="undefined"
  >
    disabled items
    <treeitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      One
      <text value="undefined" checked="undefined" pressed="undefined">
        One
      </text>
    </treeitem>
    <treeitem
      disabled="true"
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Five
      <text value="undefined" checked="undefined" pressed="undefined">
        Five
      </text>
    </treeitem>
    <treeitem
      level="1"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      Seven
      <text value="undefined" checked="undefined" pressed="undefined">
        Seven
      </text>
    </treeitem>
  </tree>
  <toolbar value="undefined" checked="undefined" pressed="undefined">
    demo source
    <button value="undefined" checked="undefined" pressed="undefined">
      Show the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Edit in CodeSandbox
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Copy the source
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset focus to test keyboard navigation
    </button>
    <button value="undefined" checked="undefined" pressed="undefined">
      Reset demo
    </button>
    <buttonmenu
      haspopup="true"
      value="undefined"
      checked="undefined"
      pressed="undefined"
    >
      See more
    </buttonmenu>
  </toolbar>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The behavior of disabled tree items depends on the disabledItemsFocusable
      prop.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      If it is false:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Arrow keys will not focus disabled items and, the next non-disabled item
      will be focused.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Arrow keys will not focus disabled items and, the next non-disabled item
        will be focused.
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Typing the first character of a disabled item's label will not
      focus the item.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Typing the first character of a disabled item's label will not
        focus the item.
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Mouse or keyboard interaction will not expand/collapse disabled items.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Mouse or keyboard interaction will not expand/collapse disabled items.
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Mouse or keyboard interaction will not select disabled items.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Mouse or keyboard interaction will not select disabled items.
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Shift + arrow keys will skip disabled items and, the next non-disabled
      item will be selected.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Shift + arrow keys will skip disabled items and, the next non-disabled
        item will be selected.
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Programmatic focus will not focus disabled items.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Programmatic focus will not focus disabled items.
      </text>
    </listitem>
  </list>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      If it is true:
    </text>
  </paragraph>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Arrow keys will focus disabled items.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Arrow keys will focus disabled items.
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Typing the first character of a disabled item's label will focus
      the item.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Typing the first character of a disabled item's label will focus
        the item.
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Mouse or keyboard interaction will not expand/collapse disabled items.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Mouse or keyboard interaction will not expand/collapse disabled items.
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Mouse or keyboard interaction will not select disabled items.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Mouse or keyboard interaction will not select disabled items.
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Shift + arrow keys will not skip disabled items but, the disabled item
      will not be selected.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Shift + arrow keys will not skip disabled items but, the disabled item
        will not be selected.
      </text>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • Programmatic focus will focus disabled items.
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <text value="undefined" checked="undefined" pressed="undefined">
        Programmatic focus will focus disabled items.
      </text>
    </listitem>
  </list>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    Accessibility
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      Accessibility
    </text>
  </heading>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      (WAI-ARIA:
    </text>
    <link checked="undefined" pressed="undefined">
      https://www.w3.org/TR/wai-aria-practices/#TreeView
    </link>
    <text value="undefined" checked="undefined" pressed="undefined">
      )
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      The component follows the WAI-ARIA authoring practices.
    </text>
  </paragraph>
  <paragraph value="undefined" checked="undefined" pressed="undefined">
    <text value="undefined" checked="undefined" pressed="undefined">
      To have an accessible tree view you must use aria-labelledby or aria-label
      to reference or provide a label on the TreeView, otherwise screen readers
      will announce it as "tree", making it hard to understand the
      context of a specific tree item.
    </text>
  </paragraph>
  <heading level="2" value="undefined" checked="undefined" pressed="undefined">
    API
    <link checked="undefined" pressed="undefined"></link>
    <text value="undefined" checked="undefined" pressed="undefined">
      API
    </text>
  </heading>
  <list value="undefined" checked="undefined" pressed="undefined">
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <TreeItem />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <TreeItem />
      </link>
    </listitem>
    <listitem value="undefined" checked="undefined" pressed="undefined">
      • <TreeView />
      <statictext value="undefined" checked="undefined" pressed="undefined">
        •
      </statictext>
      <link checked="undefined" pressed="undefined">
        <TreeView />
      </link>
    </listitem>
  </list>
  <separator
    value="undefined"
    checked="undefined"
    pressed="undefined"
  ></separator>
  <link checked="undefined" pressed="undefined">
    Trap Focus
  </link>
  <link checked="undefined" pressed="undefined">
    Overview
  </link>
</landmark>;

`;
